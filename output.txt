[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

# React

The library for web and native user interfaces

[Learn React](/learn)[API Reference](/reference/react)

## Create user interfaces from components

React lets you build user interfaces out of individual pieces called components. Create your own React components like `Thumbnail`, `LikeButton`, and `Video`. Then combine them into entire screens, pages, and apps.

### Video.js

```


function Video({ video }) {

 return (

  <div>

   <Thumbnail video={video} />

   <a href={video.url}>

    <h3>{video.title}</h3>

    <p>{video.description}</p>

   </a>

   <LikeButton video={video} />

  </div>

 );

}


```


My videoVideo description

Whether you work on your own or with thousands of other developers, using React feels the same. It is designed to let you seamlessly combine components written by independent people, teams, and organizations.

## Write components with code and markup

React components are JavaScript functions. Want to show some content conditionally? Use an `if` statement. Displaying a list? Try array `map()`. Learning React is learning programming.

### VideoList.js

```


function VideoList({ videos, emptyHeading }) {

 const count = videos.length;

 let heading = emptyHeading;

 if (count > 0) {

  const noun = count > 1 ? 'Videos' : 'Video';

  heading = count + ' ' + noun;

 }

 return (

  <section>

   <h2>{heading}</h2>

   {videos.map(video =>

    <Video key={video.id} video={video} />

   )}

  </section>

 );

}


```


## 3 Videos

First videoVideo description

Second videoVideo description

Third videoVideo description

This markup syntax is called JSX. It is a JavaScript syntax extension popularized by React. Putting JSX markup close to related rendering logic makes React components easy to create, maintain, and delete.

## Add interactivity wherever you need it

React components receive data and return what should appear on the screen. You can pass them new data in response to an interaction, like when the user types into an input. React will then update the screen to match the new data.

### SearchableVideoList.js

```


import { useState } from 'react';

function SearchableVideoList({ videos }) {

 const [searchText, setSearchText] = useState('');

 const foundVideos = filterVideos(videos, searchText);

 return (

  <>

   <SearchInput

    value={searchText}

    onChange={newText => setSearchText(newText)} />

   <VideoList

    videos={foundVideos}

    emptyHeading={`No matches for “${searchText}”`} />

  </>

 );

}


```


example.com/videos.html

# React Videos

A brief history of React

Search

## 5 Videos

[](https://www.youtube.com/watch?v=8pDqJVdNa44)### [React: The DocumentaryThe origin story of React](https://www.youtube.com/watch?v=8pDqJVdNa44)

[](https://www.youtube.com/watch?v=x7cQ3mrcKaY)### [Rethinking Best PracticesPete Hunt (2013)](https://www.youtube.com/watch?v=x7cQ3mrcKaY)

[](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)### [Introducing React NativeTom Occhino (2015)](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)

[](https://www.youtube.com/watch?v=V-QO-KO90iQ)### [Introducing React HooksSophie Alpert and Dan Abramov (2018)](https://www.youtube.com/watch?v=V-QO-KO90iQ)

[](https://www.youtube.com/watch?v=TQQPAU21ZUw)### [Introducing Server ComponentsDan Abramov and Lauren Tan (2020)](https://www.youtube.com/watch?v=TQQPAU21ZUw)

You don’t have to build your whole page in React. Add React to your existing HTML page, and render interactive React components anywhere on it.

[Add React to your page](/learn/add-react-to-an-existing-project)

## Go full-stack with a framework

React is a library. It lets you put components together, but it doesn’t prescribe how to do routing and data fetching. To build an entire app with React, we recommend a full-stack React framework like [Next.js](https://nextjs.org) or [Remix](https://remix.run).

### confs/[slug].js

```


import { db } from './database.js';

import { Suspense } from 'react';

async function ConferencePage({ slug }) {

 const conf = await db.Confs.find({ slug });

 return (

  <ConferenceLayout conf={conf}>

   <Suspense fallback={<TalksLoading />}>

    <Talks confId={conf.id} />

   </Suspense>

  </ConferenceLayout>

 );

}

async function Talks({ confId }) {

 const talks = await db.Talks.findAll({ confId });

 const videos = talks.map(talk => talk.video);

 return <SearchableVideoList videos={videos} />;

}


```


example.com/confs/react-conf-2021

React Conf 2021React Conf 2019

Search

## 19 Videos

[React Conf](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)### [React 18 KeynoteThe React Team](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)

[React Conf](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)### [React 18 for App DevelopersShruti Kapoor](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)

[React Conf](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)### [Streaming Server Rendering with SuspenseShaundai Person](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)

[React Conf](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)### [The First React Working GroupAakansha Doshi](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)

[React Conf](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)### [React Developer ToolingBrian Vaughn](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)

[React Conf](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)### [React without memoXuan Huang (黄玄)](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)

[React Conf](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)### [React Docs KeynoteRachel Nabors](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)

[React Conf](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)### [Things I Learnt from the New React DocsDebbie O'Brien](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)

[React Conf](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)### [Learning in the BrowserSarah Rainsberger](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)

[React Conf](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)### [The ROI of Designing with ReactLinton Ye](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)

[React Conf](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)### [Interactive Playgrounds with ReactDelba de Oliveira](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)

[React Conf](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)### [Re-introducing RelayRobert Balicki](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)

[React Conf](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)### [React Native DesktopEric Rozell and Steven Moyes](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)

[React Conf](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)### [On-device Machine Learning for React NativeRoman Rädle](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)

[React Conf](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)### [React 18 for External Store LibrariesDaishi Kato](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)

[React Conf](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)### [Building Accessible Components with React 18Diego Haz](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)

[React Conf](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)### [Accessible Japanese Form Components with ReactTafu Nakazaki](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)

[React Conf](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)### [UI Tools for ArtistsLyle Troxell](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)

[React Conf](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)### [Hydrogen + React 18Helen Lin](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)

React is also an architecture. Frameworks that implement it let you fetch data in asynchronous components that run on the server or even during the build. Read data from a file or a database, and pass it down to your interactive components.

[Get started with a framework](/learn/start-a-new-react-project)

## Use the best from every platform

People love web and native apps for different reasons. React lets you build both web apps and native apps using the same skills. It leans upon each platform’s unique strengths to let your interfaces feel just right on every platform.

example.com

#### Stay true to the web

People expect web app pages to load fast. On the server, React lets you start streaming HTML while you’re still fetching data, progressively filling in the remaining content before any JavaScript code loads. On the client, React can use standard web APIs to keep your UI responsive even in the middle of rendering.

9:40 AM

#### Go truly native

People expect native apps to look and feel like their platform. [React Native](https://reactnative.dev) and [Expo](https://github.com/expo/expo) let you build apps in React for Android, iOS, and more. They look and feel native because their UIs _are_ truly native. It’s not a web view—your React components render real Android and iOS views provided by the platform.

With React, you can be a web _and_ a native developer. Your team can ship to many platforms without sacrificing the user experience. Your organization can bridge the platform silos, and form teams that own entire features end-to-end.

[Build for native platforms](https://reactnative.dev/)

## Upgrade when the future is ready

React approaches changes with care. Every React commit is tested on business-critical surfaces with over a billion users. Over 100,000 React components at Meta help validate every migration strategy.

The React team is always researching how to improve React. Some research takes years to pay off. React has a high bar for taking a research idea into production. Only proven approaches become a part of React.

[Read more React news](/blog)

Latest React News

## [React 19December 05, 2024](/blog/2024/12/05/react-19)

## [React Compiler Beta Release and RoadmapOctober 21, 2024](/blog/2024/10/21/react-compiler-beta-release)

## [React Conf 2024 RecapMay 22, 2024](/blog/2024/05/22/react-conf-2024-recap)

## [React 19 RCApril 25, 2024](/blog/2024/04/25/react-19)

[Read more React news](/blog)

## Join a community of millions

You’re not alone. Two million developers from all over the world visit the React docs every month. React is something that people and teams can agree on.

This is why React is more than a library, an architecture, or even an ecosystem. React is a community. It’s a place where you can ask for help, find opportunities, and meet new friends. You will meet both developers and designers, beginners and experts, researchers and artists, teachers and students. Our backgrounds may be very different, but React lets us all create user interfaces together.

## Welcome to the React community

[Get Started](/learn)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

# React

The library for web and native user interfaces

[Learn React](/learn)[API Reference](/reference/react)

## Create user interfaces from components

React lets you build user interfaces out of individual pieces called components. Create your own React components like `Thumbnail`, `LikeButton`, and `Video`. Then combine them into entire screens, pages, and apps.

### Video.js

```


function Video({ video }) {

 return (

  <div>

   <Thumbnail video={video} />

   <a href={video.url}>

    <h3>{video.title}</h3>

    <p>{video.description}</p>

   </a>

   <LikeButton video={video} />

  </div>

 );

}


```


My videoVideo description

Whether you work on your own or with thousands of other developers, using React feels the same. It is designed to let you seamlessly combine components written by independent people, teams, and organizations.

## Write components with code and markup

React components are JavaScript functions. Want to show some content conditionally? Use an `if` statement. Displaying a list? Try array `map()`. Learning React is learning programming.

### VideoList.js

```


function VideoList({ videos, emptyHeading }) {

 const count = videos.length;

 let heading = emptyHeading;

 if (count > 0) {

  const noun = count > 1 ? 'Videos' : 'Video';

  heading = count + ' ' + noun;

 }

 return (

  <section>

   <h2>{heading}</h2>

   {videos.map(video =>

    <Video key={video.id} video={video} />

   )}

  </section>

 );

}


```


## 3 Videos

First videoVideo description

Second videoVideo description

Third videoVideo description

This markup syntax is called JSX. It is a JavaScript syntax extension popularized by React. Putting JSX markup close to related rendering logic makes React components easy to create, maintain, and delete.

## Add interactivity wherever you need it

React components receive data and return what should appear on the screen. You can pass them new data in response to an interaction, like when the user types into an input. React will then update the screen to match the new data.

### SearchableVideoList.js

```


import { useState } from 'react';

function SearchableVideoList({ videos }) {

 const [searchText, setSearchText] = useState('');

 const foundVideos = filterVideos(videos, searchText);

 return (

  <>

   <SearchInput

    value={searchText}

    onChange={newText => setSearchText(newText)} />

   <VideoList

    videos={foundVideos}

    emptyHeading={`No matches for “${searchText}”`} />

  </>

 );

}


```


example.com/videos.html

# React Videos

A brief history of React

Search

## 5 Videos

[](https://www.youtube.com/watch?v=8pDqJVdNa44)### [React: The DocumentaryThe origin story of React](https://www.youtube.com/watch?v=8pDqJVdNa44)

[](https://www.youtube.com/watch?v=x7cQ3mrcKaY)### [Rethinking Best PracticesPete Hunt (2013)](https://www.youtube.com/watch?v=x7cQ3mrcKaY)

[](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)### [Introducing React NativeTom Occhino (2015)](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)

[](https://www.youtube.com/watch?v=V-QO-KO90iQ)### [Introducing React HooksSophie Alpert and Dan Abramov (2018)](https://www.youtube.com/watch?v=V-QO-KO90iQ)

[](https://www.youtube.com/watch?v=TQQPAU21ZUw)### [Introducing Server ComponentsDan Abramov and Lauren Tan (2020)](https://www.youtube.com/watch?v=TQQPAU21ZUw)

You don’t have to build your whole page in React. Add React to your existing HTML page, and render interactive React components anywhere on it.

[Add React to your page](/learn/add-react-to-an-existing-project)

## Go full-stack with a framework

React is a library. It lets you put components together, but it doesn’t prescribe how to do routing and data fetching. To build an entire app with React, we recommend a full-stack React framework like [Next.js](https://nextjs.org) or [Remix](https://remix.run).

### confs/[slug].js

```


import { db } from './database.js';

import { Suspense } from 'react';

async function ConferencePage({ slug }) {

 const conf = await db.Confs.find({ slug });

 return (

  <ConferenceLayout conf={conf}>

   <Suspense fallback={<TalksLoading />}>

    <Talks confId={conf.id} />

   </Suspense>

  </ConferenceLayout>

 );

}

async function Talks({ confId }) {

 const talks = await db.Talks.findAll({ confId });

 const videos = talks.map(talk => talk.video);

 return <SearchableVideoList videos={videos} />;

}


```


example.com/confs/react-conf-2021

React Conf 2021React Conf 2019

Search

## 19 Videos

[React Conf](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)### [React 18 KeynoteThe React Team](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)

[React Conf](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)### [React 18 for App DevelopersShruti Kapoor](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)

[React Conf](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)### [Streaming Server Rendering with SuspenseShaundai Person](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)

[React Conf](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)### [The First React Working GroupAakansha Doshi](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)

[React Conf](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)### [React Developer ToolingBrian Vaughn](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)

[React Conf](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)### [React without memoXuan Huang (黄玄)](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)

[React Conf](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)### [React Docs KeynoteRachel Nabors](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)

[React Conf](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)### [Things I Learnt from the New React DocsDebbie O'Brien](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)

[React Conf](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)### [Learning in the BrowserSarah Rainsberger](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)

[React Conf](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)### [The ROI of Designing with ReactLinton Ye](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)

[React Conf](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)### [Interactive Playgrounds with ReactDelba de Oliveira](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)

[React Conf](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)### [Re-introducing RelayRobert Balicki](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)

[React Conf](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)### [React Native DesktopEric Rozell and Steven Moyes](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)

[React Conf](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)### [On-device Machine Learning for React NativeRoman Rädle](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)

[React Conf](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)### [React 18 for External Store LibrariesDaishi Kato](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)

[React Conf](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)### [Building Accessible Components with React 18Diego Haz](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)

[React Conf](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)### [Accessible Japanese Form Components with ReactTafu Nakazaki](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)

[React Conf](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)### [UI Tools for ArtistsLyle Troxell](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)

[React Conf](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)### [Hydrogen + React 18Helen Lin](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)

React is also an architecture. Frameworks that implement it let you fetch data in asynchronous components that run on the server or even during the build. Read data from a file or a database, and pass it down to your interactive components.

[Get started with a framework](/learn/start-a-new-react-project)

## Use the best from every platform

People love web and native apps for different reasons. React lets you build both web apps and native apps using the same skills. It leans upon each platform’s unique strengths to let your interfaces feel just right on every platform.

example.com

#### Stay true to the web

People expect web app pages to load fast. On the server, React lets you start streaming HTML while you’re still fetching data, progressively filling in the remaining content before any JavaScript code loads. On the client, React can use standard web APIs to keep your UI responsive even in the middle of rendering.

9:40 AM

#### Go truly native

People expect native apps to look and feel like their platform. [React Native](https://reactnative.dev) and [Expo](https://github.com/expo/expo) let you build apps in React for Android, iOS, and more. They look and feel native because their UIs _are_ truly native. It’s not a web view—your React components render real Android and iOS views provided by the platform.

With React, you can be a web _and_ a native developer. Your team can ship to many platforms without sacrificing the user experience. Your organization can bridge the platform silos, and form teams that own entire features end-to-end.

[Build for native platforms](https://reactnative.dev/)

## Upgrade when the future is ready

React approaches changes with care. Every React commit is tested on business-critical surfaces with over a billion users. Over 100,000 React components at Meta help validate every migration strategy.

The React team is always researching how to improve React. Some research takes years to pay off. React has a high bar for taking a research idea into production. Only proven approaches become a part of React.

[Read more React news](/blog)

Latest React News

## [React 19December 05, 2024](/blog/2024/12/05/react-19)

## [React Compiler Beta Release and RoadmapOctober 21, 2024](/blog/2024/10/21/react-compiler-beta-release)

## [React Conf 2024 RecapMay 22, 2024](/blog/2024/05/22/react-conf-2024-recap)

## [React 19 RCApril 25, 2024](/blog/2024/04/25/react-19)

[Read more React news](/blog)

## Join a community of millions

You’re not alone. Two million developers from all over the world visit the React docs every month. React is something that people and teams can agree on.

This is why React is more than a library, an architecture, or even an ecosystem. React is a community. It’s a place where you can ask for help, find opportunities, and meet new friends. You will meet both developers and designers, beginners and experts, researchers and artists, teachers and students. Our backgrounds may be very different, but React lets us all create user interfaces together.

## Welcome to the React community

[Get Started](/learn)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")
  * [Installation ](/learn/installation "Installation")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")
  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")
  * [Managing State ](/learn/managing-state "Managing State")
  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

### REACT API

  * [Hooks ](/reference/react "Hooks")
  * [Components ](/reference/react/components "Components")
  * [APIs ](/reference/react/apis "APIs")
  * [Legacy APIs ](/reference/react/legacy "Legacy APIs")

### REACT DOM API

  * [Components ](/reference/react-dom/components "Components")
  * [APIs ](/reference/react-dom "APIs")
  * [Client APIs ](/reference/react-dom/client "Client APIs")
  * [Server APIs ](/reference/react-dom/server "Server APIs")

### GET INVOLVED

  * [React Community ](/community "React Community")

### STAY INFORMED

  * [React Blog ](/blog "React Blog")



Is this page useful?

[React Docs](/)

# React Versions[](#undefined "Link for this heading")

The React docs at [react.dev](https://react.dev) provide documentation for the latest version of React.

We aim to keep the docs updated within major versions, and do not publish versions for each minor or patch version. When a new major is released, we archive the docs for the previous version as `x.react.dev`. See our [versioning policy](/community/versioning-policy) for more info.

You can find an archive of previous major versions below.

## Latest version: 19.0 [](#latest-version "Link for Latest version: 19.0 ")

  * [react.dev](https://react.dev)



## Previous versions [](#previous-versions "Link for Previous versions ")

  * [18.react.dev](https://18.react.dev)
  * [17.react.dev](https://17.react.dev)
  * [16.react.dev](https://16.react.dev)
  * [15.react.dev](https://15.react.dev)



### Note

#### Legacy Docs [](#legacy-docs "Link for Legacy Docs ")

In 2023, we [launched our new docs](/blog/2023/03/16/introducing-react-dev) for React 18 as [react.dev](https://react.dev). The legacy React 18 docs are available at [legacy.reactjs.org](https://legacy.reactjs.org). Versions 17 and below are hosted on legacy sites.

For versions older than React 15, see [15.react.dev](https://15.react.dev).

## Changelog [](#changelog "Link for Changelog ")

### React 19 [](#react-19 "Link for React 19 ")

**Blog Posts**

  * [React v19](/blog/2024/12/05/react-19)
  * [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide)
  * [React Compiler Beta Release](/blog/2024/10/21/react-compiler-beta-release)



**Talks**

  * [React 19 Keynote](https://www.youtube.com/watch?v=lyEKhv8-3n0)
  * [A Roadmap to React 19](https://www.youtube.com/watch?v=R0B2HsSM78s)
  * [What’s new in React 19](https://www.youtube.com/watch?v=AJOGzVygGcY)
  * [React for Two Computers](https://www.youtube.com/watch?v=ozI4V_29fj4)
  * [React Compiler Deep Dive](https://www.youtube.com/watch?v=uA_PVyZP7AI)
  * [React Compiler Case Studies](https://www.youtube.com/watch?v=lvhPq5chokM)
  * [React 19 Deep Dive: Coordinating HTML](https://www.youtube.com/watch?v=IBBN-s77YSI)



**Releases**

  * [v19.0.0 (December, 2024)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1900-december-5-2024)



### React 18 [](#react-18 "Link for React 18 ")

**Blog Posts**

  * [React v18.0](/blog/2022/03/29/react-v18)
  * [How to Upgrade to React 18](/blog/2022/03/08/react-18-upgrade-guide)
  * [The Plan for React 18](/blog/2021/06/08/the-plan-for-react-18)



**Talks**

  * [React 18 Keynote](https://www.youtube.com/watch?v=FZ0cG47msEk)
  * [React 18 for app developers](https://www.youtube.com/watch?v=ytudH8je5ko)
  * [Streaming Server Rendering with Suspense](https://www.youtube.com/watch?v=pj5N-Khihgc)
  * [React without memo](https://www.youtube.com/watch?v=lGEMwh32soc)
  * [React Docs Keynote](https://www.youtube.com/watch?v=mneDaMYOKP8)
  * [React Developer Tooling](https://www.youtube.com/watch?v=oxDfrke8rZg)
  * [The first React Working Group](https://www.youtube.com/watch?v=qn7gRClrC9U)
  * [React 18 for External Store Libraries](https://www.youtube.com/watch?v=oPfSC5bQPR8)



**Releases**

  * [v18.3.1 (April, 2024)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1831-april-26-2024)
  * [v18.3.0 (April, 2024)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1830-april-25-2024)
  * [v18.2.0 (June, 2022)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1820-june-14-2022)
  * [v18.1.0 (April, 2022)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1810-april-26-2022)
  * [v18.0.0 (March 2022)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1800-march-29-2022)



### React 17 [](#react-17 "Link for React 17 ")

**Blog Posts**

  * [React v17.0](https://legacy.reactjs.org/blog/2020/10/20/react-v17.html)
  * [Introducing the New JSX Transform](https://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html)
  * [React v17.0 Release Candidate: No New Features](https://legacy.reactjs.org/blog/2020/08/10/react-v17-rc.html)



**Releases**

  * [v17.0.2 (March 2021)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1702-march-22-2021)
  * [v17.0.1 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1701-october-22-2020)
  * [v17.0.0 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1700-october-20-2020)



### React 16 [](#react-16 "Link for React 16 ")

**Blog Posts**

  * [React v16.0](https://legacy.reactjs.org/blog/2017/09/26/react-v16.0.html)
  * [DOM Attributes in React 16](https://legacy.reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html)
  * [Error Handling in React 16](https://legacy.reactjs.org/blog/2017/07/26/error-handling-in-react-16.html)
  * [React v16.2.0: Improved Support for Fragments](https://legacy.reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html)
  * [React v16.4.0: Pointer Events](https://legacy.reactjs.org/blog/2018/05/23/react-v-16-4.html)
  * [React v16.4.2: Server-side vulnerability fix](https://legacy.reactjs.org/blog/2018/08/01/react-v-16-4-2.html)
  * [React v16.6.0: lazy, memo and contextType](https://legacy.reactjs.org/blog/2018/10/23/react-v-16-6.html)
  * [React v16.7: No, This Is Not the One With Hooks](https://legacy.reactjs.org/blog/2018/12/19/react-v-16-7.html)
  * [React v16.8: The One With Hooks](https://legacy.reactjs.org/blog/2019/02/06/react-v16.8.0.html)
  * [React v16.9.0 and the Roadmap Update](https://legacy.reactjs.org/blog/2019/08/08/react-v16.9.0.html)
  * [React v16.13.0](https://legacy.reactjs.org/blog/2020/02/26/react-v16.13.0.html)



**Releases**

  * [v16.14.0 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16140-october-14-2020)
  * [v16.13.1 (March 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16131-march-19-2020)
  * [v16.13.0 (February 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16130-february-26-2020)
  * [v16.12.0 (November 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16120-november-14-2019)
  * [v16.11.0 (October 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16110-october-22-2019)
  * [v16.10.2 (October 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16102-october-3-2019)
  * [v16.10.1 (September 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16101-september-28-2019)
  * [v16.10.0 (September 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16100-september-27-2019)
  * [v16.9.0 (August 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1690-august-8-2019)
  * [v16.8.6 (March 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1686-march-27-2019)
  * [v16.8.5 (March 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1685-march-22-2019)
  * [v16.8.4 (March 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1684-march-5-2019)
  * [v16.8.3 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1683-february-21-2019)
  * [v16.8.2 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1682-february-14-2019)
  * [v16.8.1 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1681-february-6-2019)
  * [v16.8.0 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1680-february-6-2019)
  * [v16.7.0 (December 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1670-december-19-2018)
  * [v16.6.3 (November 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1663-november-12-2018)
  * [v16.6.2 (November 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1662-november-12-2018)
  * [v16.6.1 (November 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1661-november-6-2018)
  * [v16.6.0 (October 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1660-october-23-2018)
  * [v16.5.2 (September 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1652-september-18-2018)
  * [v16.5.1 (September 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1651-september-13-2018)
  * [v16.5.0 (September 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1650-september-5-2018)
  * [v16.4.2 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1642-august-1-2018)
  * [v16.4.1 (June 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1641-june-13-2018)
  * [v16.4.0 (May 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1640-may-23-2018)
  * [v16.3.3 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1633-august-1-2018)
  * [v16.3.2 (April 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1632-april-16-2018)
  * [v16.3.1 (April 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1631-april-3-2018)
  * [v16.3.0 (March 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1630-march-29-2018)
  * [v16.2.1 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1621-august-1-2018)
  * [v16.2.0 (November 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1620-november-28-2017)
  * [v16.1.2 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1612-august-1-2018)
  * [v16.1.1 (November 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1611-november-13-2017)
  * [v16.1.0 (November 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1610-november-9-2017)
  * [v16.0.1 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1601-august-1-2018)
  * [v16.0 (September 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1600-september-26-2017)



### React 15 [](#react-15 "Link for React 15 ")

**Blog Posts**

  * [React v15.0](https://legacy.reactjs.org/blog/2016/04/07/react-v15.html)
  * [React v15.0 Release Candidate 2](https://legacy.reactjs.org/blog/2016/03/16/react-v15-rc2.html)
  * [React v15.0 Release Candidate](https://legacy.reactjs.org/blog/2016/03/07/react-v15-rc1.html)
  * [New Versioning Scheme](https://legacy.reactjs.org/blog/2016/02/19/new-versioning-scheme.html)
  * [Discontinuing IE 8 Support in React DOM](https://legacy.reactjs.org/blog/2016/01/12/discontinuing-ie8-support.html)
  * [Introducing React’s Error Code System](https://legacy.reactjs.org/blog/2016/07/11/introducing-reacts-error-code-system.html)
  * [React v15.0.1](https://legacy.reactjs.org/blog/2016/04/08/react-v15.0.1.html)
  * [React v15.4.0](https://legacy.reactjs.org/blog/2016/11/16/react-v15.4.0.html)
  * [React v15.5.0](https://legacy.reactjs.org/blog/2017/04/07/react-v15.5.0.html)
  * [React v15.6.0](https://legacy.reactjs.org/blog/2017/06/13/react-v15.6.0.html)
  * [React v15.6.2](https://legacy.reactjs.org/blog/2017/09/25/react-v15.6.2.html)



**Releases**

  * [v15.7.0 (October 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1570-october-14-2020)
  * [v15.6.2 (September 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1562-september-25-2017)
  * [v15.6.1 (June 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1561-june-14-2017)
  * [v15.6.0 (June 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1560-june-13-2017)
  * [v15.5.4 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1554-april-11-2017)
  * [v15.5.3 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1553-april-7-2017)
  * [v15.5.2 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1552-april-7-2017)
  * [v15.5.1 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1551-april-7-2017)
  * [v15.5.0 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1550-april-7-2017)
  * [v15.4.2 (January 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1542-january-6-2017)
  * [v15.4.1 (November 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1541-november-22-2016)
  * [v15.4.0 (November 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1540-november-16-2016)
  * [v15.3.2 (September 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1532-september-19-2016)
  * [v15.3.1 (August 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1531-august-19-2016)
  * [v15.3.0 (July 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1530-july-29-2016)
  * [v15.2.1 (July 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1521-july-8-2016)
  * [v15.2.0 (July 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1520-july-1-2016)
  * [v15.1.0 (May 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1510-may-20-2016)
  * [v15.0.2 (April 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1502-april-29-2016)
  * [v15.0.1 (April 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1501-april-8-2016)
  * [v15.0.0 (April 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1500-april-7-2016)



### React 0.14 [](#react-14 "Link for React 0.14 ")

**Blog Posts**

  * [React v0.14](https://legacy.reactjs.org/blog/2015/10/07/react-v0.14.html)
  * [React v0.14 Release Candidate](https://legacy.reactjs.org/blog/2015/09/10/react-v0.14-rc1.html)
  * [React v0.14 Beta 1](https://legacy.reactjs.org/blog/2015/07/03/react-v0.14-beta-1.html)
  * [New React Developer Tools](https://legacy.reactjs.org/blog/2015/09/02/new-react-developer-tools.html)
  * [New React Devtools Beta](https://legacy.reactjs.org/blog/2015/08/03/new-react-devtools-beta.html)
  * [React v0.14.1](https://legacy.reactjs.org/blog/2015/10/28/react-v0.14.1.html)
  * [React v0.14.2](https://legacy.reactjs.org/blog/2015/11/02/react-v0.14.2.html)
  * [React v0.14.3](https://legacy.reactjs.org/blog/2015/11/18/react-v0.14.3.html)
  * [React v0.14.4](https://legacy.reactjs.org/blog/2015/12/29/react-v0.14.4.html)
  * [React v0.14.8](https://legacy.reactjs.org/blog/2016/03/29/react-v0.14.8.html)



**Releases**

  * [v0.14.10 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#01410-october-14-2020)
  * [v0.14.8 (March 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0148-march-29-2016)
  * [v0.14.7 (January 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0147-january-28-2016)
  * [v0.14.6 (January 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0146-january-6-2016)
  * [v0.14.5 (December 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0145-december-29-2015)
  * [v0.14.4 (December 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0144-december-29-2015)
  * [v0.14.3 (November 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0143-november-18-2015)
  * [v0.14.2 (November 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0142-november-2-2015)
  * [v0.14.1 (October 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0141-october-28-2015)
  * [v0.14.0 (October 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0140-october-7-2015)



### React 0.13 [](#react-13 "Link for React 0.13 ")

**Blog Posts**

  * [React Native v0.4](https://legacy.reactjs.org/blog/2015/04/17/react-native-v0.4.html)
  * [React v0.13](https://legacy.reactjs.org/blog/2015/03/10/react-v0.13.html)
  * [React v0.13 RC2](https://legacy.reactjs.org/blog/2015/03/03/react-v0.13-rc2.html)
  * [React v0.13 RC](https://legacy.reactjs.org/blog/2015/02/24/react-v0.13-rc1.html)
  * [React v0.13.0 Beta 1](https://legacy.reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html)
  * [Streamlining React Elements](https://legacy.reactjs.org/blog/2015/02/24/streamlining-react-elements.html)
  * [Introducing Relay and GraphQL](https://legacy.reactjs.org/blog/2015/02/20/introducing-relay-and-graphql.html)
  * [Introducing React Native](https://legacy.reactjs.org/blog/2015/03/26/introducing-react-native.html)
  * [React v0.13.1](https://legacy.reactjs.org/blog/2015/03/16/react-v0.13.1.html)
  * [React v0.13.2](https://legacy.reactjs.org/blog/2015/04/18/react-v0.13.2.html)
  * [React v0.13.3](https://legacy.reactjs.org/blog/2015/05/08/react-v0.13.3.html)



**Releases**

  * [v0.13.3 (May 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0133-may-8-2015)
  * [v0.13.2 (April 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0132-april-18-2015)
  * [v0.13.1 (March 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0131-march-16-2015)
  * [v0.13.0 (March 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0130-march-10-2015)



### React 0.12 [](#react-12 "Link for React 0.12 ")

**Blog Posts**

  * [React v0.12](https://legacy.reactjs.org/blog/2014/10/28/react-v0.12.html)
  * [React v0.12 RC](https://legacy.reactjs.org/blog/2014/10/16/react-v0.12-rc1.html)
  * [Introducing React Elements](https://legacy.reactjs.org/blog/2014/10/14/introducing-react-elements.html)
  * [React v0.12.2](https://legacy.reactjs.org/blog/2014/12/18/react-v0.12.2.html)



**Releases**

  * [v0.12.2 (December 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0122-december-18-2014)
  * [v0.12.1 (November 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0121-november-18-2014)
  * [v0.12.0 (October 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0120-october-28-2014)



### React 0.11 [](#react-11 "Link for React 0.11 ")

**Blog Posts**

  * [React v0.11](https://legacy.reactjs.org/blog/2014/07/17/react-v0.11.html)
  * [React v0.11 RC](https://legacy.reactjs.org/blog/2014/07/13/react-v0.11-rc1.html)
  * [One Year of Open-Source React](https://legacy.reactjs.org/blog/2014/05/29/one-year-of-open-source-react.html)
  * [The Road to 1.0](https://legacy.reactjs.org/blog/2014/03/28/the-road-to-1.0.html)
  * [React v0.11.1](https://legacy.reactjs.org/blog/2014/07/25/react-v0.11.1.html)
  * [React v0.11.2](https://legacy.reactjs.org/blog/2014/09/16/react-v0.11.2.html)
  * [Introducing the JSX Specificaion](https://legacy.reactjs.org/blog/2014/09/03/introducing-the-jsx-specification.html)



**Releases**

  * [v0.11.2 (September 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0112-september-16-2014)
  * [v0.11.1 (July 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0111-july-24-2014)
  * [v0.11.0 (July 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0110-july-17-2014)



### React 0.10 and below [](#react-10-and-below "Link for React 0.10 and below ")

**Blog Posts**

  * [React v0.10](https://legacy.reactjs.org/blog/2014/03/21/react-v0.10.html)
  * [React v0.10 RC](https://legacy.reactjs.org/blog/2014/03/19/react-v0.10-rc1.html)
  * [React v0.9](https://legacy.reactjs.org/blog/2014/02/20/react-v0.9.html)
  * [React v0.9 RC](https://legacy.reactjs.org/blog/2014/02/16/react-v0.9-rc1.html)
  * [React Chrome Developer Tools](https://legacy.reactjs.org/blog/2014/01/02/react-chrome-developer-tools.html)
  * [React v0.8](https://legacy.reactjs.org/blog/2013/12/19/react-v0.8.0.html)
  * [React v0.5.2, v0.4.2](https://legacy.reactjs.org/blog/2013/12/18/react-v0.5.2-v0.4.2.html)
  * [React v0.5.1](https://legacy.reactjs.org/blog/2013/10/29/react-v0-5-1.html)
  * [React v0.5](https://legacy.reactjs.org/blog/2013/10/16/react-v0.5.0.html)
  * [React v0.4.1](https://legacy.reactjs.org/blog/2013/07/26/react-v0-4-1.html)
  * [React v0.4.0](https://legacy.reactjs.org/blog/2013/07/17/react-v0-4-0.html)
  * [New in React v0.4: Prop Validation and Default Values](https://legacy.reactjs.org/blog/2013/07/11/react-v0-4-prop-validation-and-default-values.html)
  * [New in React v0.4: Autobind by Default](https://legacy.reactjs.org/blog/2013/07/02/react-v0-4-autobind-by-default.html)
  * [React v0.3.3](https://legacy.reactjs.org/blog/2013/07/02/react-v0-4-autobind-by-default.html)



**Releases**

  * [v0.10.0 (March 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0100-march-21-2014)
  * [v0.9.0 (February 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#090-february-20-2014)
  * [v0.8.0 (December 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#080-december-19-2013)
  * [v0.5.2 (December 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#052-042-december-18-2013)
  * [v0.5.1 (October 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#051-october-29-2013)
  * [v0.5.0 (October 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#050-october-16-2013)
  * [v0.4.1 (July 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#041-july-26-2013)
  * [v0.4.0 (July 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#040-july-17-2013)
  * [v0.3.3 (June 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#033-june-20-2013)
  * [v0.3.2 (May 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#032-may-31-2013)
  * [v0.3.1 (May 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#031-may-30-2013)
  * [v0.3.0 (May 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#031-may-30-2013)



### Initial Commit [](#initial-commit "Link for Initial Commit ")

React was open-sourced on May 29, 2013. The initial commit is: `75897c`[: Initial public release](https://github.com/facebook/react/commit/75897c2dcd1dd3a6ca46284dd37e13d22b4b16b4)

See the first blog post: [Why did we build React?](https://legacy.reactjs.org/blog/2013/06/05/why-react.html)

React was open sourced at Facebook Seattle in 2013:

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Latest version: 19.0 ](#latest-version)
  * [Previous versions ](#previous-versions)
  * [Changelog ](#changelog)
  * [React 19 ](#react-19)
  * [React 18 ](#react-18)
  * [React 17 ](#react-17)
  * [React 16 ](#react-16)
  * [React 15 ](#react-15)
  * [React 0.14 ](#react-14)
  * [React 0.13 ](#react-13)
  * [React 0.12 ](#react-12)
  * [React 0.11 ](#react-11)
  * [React 0.10 and below ](#react-10-and-below)
  * [Initial Commit ](#initial-commit)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Quick Start[](#undefined "Link for this heading")

Welcome to the React documentation! This page will give you an introduction to 80% of the React concepts that you will use on a daily basis.

### You will learn

  * How to create and nest components
  * How to add markup and styles
  * How to display data
  * How to render conditions and lists
  * How to respond to events and update the screen
  * How to share data between components



## Creating and nesting components [](#components "Link for Creating and nesting components ")

React apps are made out of _components_. A component is a piece of the UI (user interface) that has its own logic and appearance. A component can be as small as a button, or as large as an entire page.

React components are JavaScript functions that return markup:

```


function MyButton() {

 return (

  <button>I'm a button</button>

 );

}


```


Now that you’ve declared `MyButton`, you can nest it into another component:

```


export default function MyApp() {

 return (

  <div>

   <h1>Welcome to my app</h1>

   <MyButton />

  </div>

 );

}


```


Notice that `<MyButton />` starts with a capital letter. That’s how you know it’s a React component. React component names must always start with a capital letter, while HTML tags must be lowercase.

Have a look at the result:

App.js

App.js

Download ResetFork

99

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

function MyButton() {

return (

<button>

I'm a button

</button>

);

}

export default function MyApp() {

return (

<div>

<h1>Welcome to my app</h1>

<MyButton />

</div>

);

}

[Open on CodeSandboxOpen Sandbox](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

Show more

The `export default` keywords specify the main component in the file. If you’re not familiar with some piece of JavaScript syntax, [MDN](https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export) and [javascript.info](https://javascript.info/import-export) have great references.

## Writing markup with JSX [](#writing-markup-with-jsx "Link for Writing markup with JSX ")

The markup syntax you’ve seen above is called _JSX_. It is optional, but most React projects use JSX for its convenience. All of the [tools we recommend for local development](/learn/installation) support JSX out of the box.

JSX is stricter than HTML. You have to close tags like `<br />`. Your component also can’t return multiple JSX tags. You have to wrap them into a shared parent, like a `<div>...</div>` or an empty `<>...</>` wrapper:

```


function AboutPage() {

 return (

  <>

   <h1>About</h1>

   <p>Hello there.<br />How do you do?</p>

  </>

 );

}


```


If you have a lot of HTML to port to JSX, you can use an [online converter.](https://transform.tools/html-to-jsx)

## Adding styles [](#adding-styles "Link for Adding styles ")

In React, you specify a CSS class with `className`. It works the same way as the HTML `class`[](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class) attribute:

```


<img className="avatar" />


```


Then you write the CSS rules for it in a separate CSS file:

```


/* In your CSS */

.avatar {

 border-radius: 50%;

}


```


React does not prescribe how you add CSS files. In the simplest case, you’ll add a `<link>`[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link) tag to your HTML. If you use a build tool or a framework, consult its documentation to learn how to add a CSS file to your project.

## Displaying data [](#displaying-data "Link for Displaying data ")

JSX lets you put markup into JavaScript. Curly braces let you “escape back” into JavaScript so that you can embed some variable from your code and display it to the user. For example, this will display `user.name`:

```


return (

 <h1>

  {user.name}

 </h1>

);


```


You can also “escape into JavaScript” from JSX attributes, but you have to use curly braces _instead of_ quotes. For example, `className="avatar"` passes the `"avatar"` string as the CSS class, but `src={user.imageUrl}` reads the JavaScript `user.imageUrl` variable value, and then passes that value as the `src` attribute:

```


return (

 <img

  className="avatar"

  src={user.imageUrl}

 />

);


```


You can put more complex expressions inside the JSX curly braces too, for example, [string concatenation](https://javascript.info/operators#string-concatenation-with-binary):

App.js

App.js

Download ResetFork

```
const user = {
 name: 'Hedy Lamarr',
 imageUrl: 'https://i.imgur.com/yXOvdOSs.jpg',
 imageSize: 90,
};
export default function Profile() {
 return (
  <>
   <h1>{user.name}</h1>
   <img
    className="avatar"
    src={user.imageUrl}
    alt={'Photo of ' + user.name}
    style={{
     width: user.imageSize,
     height: user.imageSize
    }}
   />
  </>
 );
}

```


Show more

In the above example, `style={{}}` is not a special syntax, but a regular `{}` object inside the `style={ }` JSX curly braces. You can use the `style` attribute when your styles depend on JavaScript variables.

## Conditional rendering [](#conditional-rendering "Link for Conditional rendering ")

In React, there is no special syntax for writing conditions. Instead, you’ll use the same techniques as you use when writing regular JavaScript code. For example, you can use an `if`[](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) statement to conditionally include JSX:

```


let content;

if (isLoggedIn) {

 content = <AdminPanel />;

} else {

 content = <LoginForm />;

}

return (

 <div>

  {content}

 </div>

);


```


If you prefer more compact code, you can use the [conditional `?` operator.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator) Unlike `if`, it works inside JSX:

```


<div>

 {isLoggedIn ? (

  <AdminPanel />

 ) : (

  <LoginForm />

 )}

</div>


```


When you don’t need the `else` branch, you can also use a shorter [logical `&&` syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#short-circuit_evaluation):

```


<div>

 {isLoggedIn && <AdminPanel />}

</div>


```


All of these approaches also work for conditionally specifying attributes. If you’re unfamiliar with some of this JavaScript syntax, you can start by always using `if...else`.

## Rendering lists [](#rendering-lists "Link for Rendering lists ")

You will rely on JavaScript features like `for`[ loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) and the [array `map()` function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) to render lists of components.

For example, let’s say you have an array of products:

```


const products = [

 { title: 'Cabbage', id: 1 },

 { title: 'Garlic', id: 2 },

 { title: 'Apple', id: 3 },

];


```


Inside your component, use the `map()` function to transform an array of products into an array of `<li>` items:

```


const listItems = products.map(product =>

 <li key={product.id}>

  {product.title}

 </li>

);

return (

 <ul>{listItems}</ul>

);


```


Notice how `<li>` has a `key` attribute. For each item in a list, you should pass a string or a number that uniquely identifies that item among its siblings. Usually, a key should be coming from your data, such as a database ID. React uses your keys to know what happened if you later insert, delete, or reorder the items.

App.js

App.js

Download ResetFork

```
const products = [
 { title: 'Cabbage', isFruit: false, id: 1 },
 { title: 'Garlic', isFruit: false, id: 2 },
 { title: 'Apple', isFruit: true, id: 3 },
];
export default function ShoppingList() {
 const listItems = products.map(product =>
  <li
   key={product.id}
   style={{
    color: product.isFruit ? 'magenta' : 'darkgreen'
   }}
  >
   {product.title}
  </li>
 );
 return (
  <ul>{listItems}</ul>
 );
}

```


Show more

## Responding to events [](#responding-to-events "Link for Responding to events ")

You can respond to events by declaring _event handler_ functions inside your components:

```


function MyButton() {

 function handleClick() {

  alert('You clicked me!');

 }

 return (

  <button onClick={handleClick}>

   Click me

  </button>

 );

}


```


Notice how `onClick={handleClick}` has no parentheses at the end! Do not _call_ the event handler function: you only need to _pass it down_. React will call your event handler when the user clicks the button.

## Updating the screen [](#updating-the-screen "Link for Updating the screen ")

Often, you’ll want your component to “remember” some information and display it. For example, maybe you want to count the number of times a button is clicked. To do this, add _state_ to your component.

First, import `useState`[](/reference/react/useState) from React:

```


import { useState } from 'react';


```


Now you can declare a _state variable_ inside your component:

```


function MyButton() {

 const [count, setCount] = useState(0);

 // ...


```


You’ll get two things from `useState`: the current state (`count`), and the function that lets you update it (`setCount`). You can give them any names, but the convention is to write `[something, setSomething]`.

The first time the button is displayed, `count` will be `0` because you passed `0` to `useState()`. When you want to change state, call `setCount()` and pass the new value to it. Clicking this button will increment the counter:

```


function MyButton() {

 const [count, setCount] = useState(0);

 function handleClick() {

  setCount(count + 1);

 }

 return (

  <button onClick={handleClick}>

   Clicked {count} times

  </button>

 );

}


```


React will call your component function again. This time, `count` will be `1`. Then it will be `2`. And so on.

If you render the same component multiple times, each will get its own state. Click each button separately:

App.js

App.js

Download ResetFork

```
import { useState } from 'react';
export default function MyApp() {
 return (
  <div>
   <h1>Counters that update separately</h1>
   <MyButton />
   <MyButton />
  </div>
 );
}
function MyButton() {
 const [count, setCount] = useState(0);
 function handleClick() {
  setCount(count + 1);
 }
 return (
  <button onClick={handleClick}>
   Clicked {count} times
  </button>
 );
}

```


Show more

Notice how each button “remembers” its own `count` state and doesn’t affect other buttons.

## Using Hooks [](#using-hooks "Link for Using Hooks ")

Functions starting with `use` are called _Hooks_. `useState` is a built-in Hook provided by React. You can find other built-in Hooks in the [API reference.](/reference/react) You can also write your own Hooks by combining the existing ones.

Hooks are more restrictive than other functions. You can only call Hooks _at the top_ of your components (or other Hooks). If you want to use `useState` in a condition or a loop, extract a new component and put it there.

## Sharing data between components [](#sharing-data-between-components "Link for Sharing data between components ")

In the previous example, each `MyButton` had its own independent `count`, and when each button was clicked, only the `count` for the button clicked changed:

Initially, each `MyButton`’s `count` state is `0`

The first `MyButton` updates its `count` to `1`

However, often you’ll need components to _share data and always update together_.

To make both `MyButton` components display the same `count` and update together, you need to move the state from the individual buttons “upwards” to the closest component containing all of them.

In this example, it is `MyApp`:

Initially, `MyApp`’s `count` state is `0` and is passed down to both children

On click, `MyApp` updates its `count` state to `1` and passes it down to both children

Now when you click either button, the `count` in `MyApp` will change, which will change both of the counts in `MyButton`. Here’s how you can express this in code.

First, _move the state up_ from `MyButton` into `MyApp`:

```


export default function MyApp() {

 const [count, setCount] = useState(0);

 function handleClick() {

  setCount(count + 1);

 }

 return (

  <div>

   <h1>Counters that update separately</h1>

   <MyButton />

   <MyButton />

  </div>

 );

}

function MyButton() {

 // ... we're moving code from here ...

}


```


Then, _pass the state down_ from `MyApp` to each `MyButton`, together with the shared click handler. You can pass information to `MyButton` using the JSX curly braces, just like you previously did with built-in tags like `<img>`:

```


export default function MyApp() {

 const [count, setCount] = useState(0);

 function handleClick() {

  setCount(count + 1);

 }

 return (

  <div>

   <h1>Counters that update together</h1>

   <MyButton count={count} onClick={handleClick} />

   <MyButton count={count} onClick={handleClick} />

  </div>

 );

}


```


The information you pass down like this is called _props_. Now the `MyApp` component contains the `count` state and the `handleClick` event handler, and _passes both of them down as props_ to each of the buttons.

Finally, change `MyButton` to _read_ the props you have passed from its parent component:

```


function MyButton({ count, onClick }) {

 return (

  <button onClick={onClick}>

   Clicked {count} times

  </button>

 );

}


```


When you click the button, the `onClick` handler fires. Each button’s `onClick` prop was set to the `handleClick` function inside `MyApp`, so the code inside of it runs. That code calls `setCount(count + 1)`, incrementing the `count` state variable. The new `count` value is passed as a prop to each button, so they all show the new value. This is called “lifting state up”. By moving state up, you’ve shared it between components.

App.js

App.js

Download ResetFork

```
import { useState } from 'react';
export default function MyApp() {
 const [count, setCount] = useState(0);
 function handleClick() {
  setCount(count + 1);
 }
 return (
  <div>
   <h1>Counters that update together</h1>
   <MyButton count={count} onClick={handleClick} />
   <MyButton count={count} onClick={handleClick} />
  </div>
 );
}
function MyButton({ count, onClick }) {
 return (
  <button onClick={onClick}>
   Clicked {count} times
  </button>
 );
}

```


Show more

## Next Steps [](#next-steps "Link for Next Steps ")

By now, you know the basics of how to write React code!

Check out the [Tutorial](/learn/tutorial-tic-tac-toe) to put them into practice and build your first mini-app with React.

[NextTutorial: Tic-Tac-Toe](/learn/tutorial-tic-tac-toe)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Creating and nesting components ](#components)
  * [Writing markup with JSX ](#writing-markup-with-jsx)
  * [Adding styles ](#adding-styles)
  * [Displaying data ](#displaying-data)
  * [Conditional rendering ](#conditional-rendering)
  * [Rendering lists ](#rendering-lists)
  * [Responding to events ](#responding-to-events)
  * [Updating the screen ](#updating-the-screen)
  * [Using Hooks ](#using-hooks)
  * [Sharing data between components ](#sharing-data-between-components)
  * [Next Steps ](#next-steps)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### react@19

  * [Overview ](/reference/react "Overview")
  * [Hooks ](/reference/react/hooks "Hooks")

    * [useActionState ](/reference/react/useActionState "useActionState")
    * [useCallback ](/reference/react/useCallback "useCallback")
    * [useContext ](/reference/react/useContext "useContext")
    * [useDebugValue ](/reference/react/useDebugValue "useDebugValue")
    * [useDeferredValue ](/reference/react/useDeferredValue "useDeferredValue")
    * [useEffect ](/reference/react/useEffect "useEffect")
    * [useId ](/reference/react/useId "useId")
    * [useImperativeHandle ](/reference/react/useImperativeHandle "useImperativeHandle")
    * [useInsertionEffect ](/reference/react/useInsertionEffect "useInsertionEffect")
    * [useLayoutEffect ](/reference/react/useLayoutEffect "useLayoutEffect")
    * [useMemo ](/reference/react/useMemo "useMemo")
    * [useOptimistic ](/reference/react/useOptimistic "useOptimistic")
    * [useReducer ](/reference/react/useReducer "useReducer")
    * [useRef ](/reference/react/useRef "useRef")
    * [useState ](/reference/react/useState "useState")
    * [useSyncExternalStore ](/reference/react/useSyncExternalStore "useSyncExternalStore")
    * [useTransition ](/reference/react/useTransition "useTransition")

  * [Components ](/reference/react/components "Components")

    * [<Fragment> (<>) ](/reference/react/Fragment "<Fragment> \(<>\)")
    * [<Profiler> ](/reference/react/Profiler "<Profiler>")
    * [<StrictMode> ](/reference/react/StrictMode "<StrictMode>")
    * [<Suspense> ](/reference/react/Suspense "<Suspense>")

  * [APIs ](/reference/react/apis "APIs")

    * [act ](/reference/react/act "act")
    * [cache ](/reference/react/cache "cache")
    * [createContext ](/reference/react/createContext "createContext")
    * [lazy ](/reference/react/lazy "lazy")
    * [memo ](/reference/react/memo "memo")
    * [startTransition ](/reference/react/startTransition "startTransition")
    * [use ](/reference/react/use "use")
    * [experimental_taintObjectReference  - This feature is available in the latest Canary](/reference/react/experimental_taintObjectReference "experimental_taintObjectReference")
    * [experimental_taintUniqueValue  - This feature is available in the latest Canary](/reference/react/experimental_taintUniqueValue "experimental_taintUniqueValue")

### react-dom@19

  * [Hooks ](/reference/react-dom/hooks "Hooks")

    * [useFormStatus ](/reference/react-dom/hooks/useFormStatus "useFormStatus")

  * [Components ](/reference/react-dom/components "Components")

    * [Common (e.g. <div>) ](/reference/react-dom/components/common "Common \(e.g. <div>\)")
    * [<form> ](/reference/react-dom/components/form "<form>")
    * [<input> ](/reference/react-dom/components/input "<input>")
    * [<option> ](/reference/react-dom/components/option "<option>")
    * [<progress> ](/reference/react-dom/components/progress "<progress>")
    * [<select> ](/reference/react-dom/components/select "<select>")
    * [<textarea> ](/reference/react-dom/components/textarea "<textarea>")
    * [<link> ](/reference/react-dom/components/link "<link>")
    * [<meta> ](/reference/react-dom/components/meta "<meta>")
    * [<script> ](/reference/react-dom/components/script "<script>")
    * [<style> ](/reference/react-dom/components/style "<style>")
    * [<title> ](/reference/react-dom/components/title "<title>")

  * [APIs ](/reference/react-dom "APIs")

    * [createPortal ](/reference/react-dom/createPortal "createPortal")
    * [flushSync ](/reference/react-dom/flushSync "flushSync")
    * [preconnect ](/reference/react-dom/preconnect "preconnect")
    * [prefetchDNS ](/reference/react-dom/prefetchDNS "prefetchDNS")
    * [preinit ](/reference/react-dom/preinit "preinit")
    * [preinitModule ](/reference/react-dom/preinitModule "preinitModule")
    * [preload ](/reference/react-dom/preload "preload")
    * [preloadModule ](/reference/react-dom/preloadModule "preloadModule")

  * [Client APIs ](/reference/react-dom/client "Client APIs")

    * [createRoot ](/reference/react-dom/client/createRoot "createRoot")
    * [hydrateRoot ](/reference/react-dom/client/hydrateRoot "hydrateRoot")

  * [Server APIs ](/reference/react-dom/server "Server APIs")

    * [renderToPipeableStream ](/reference/react-dom/server/renderToPipeableStream "renderToPipeableStream")
    * [renderToReadableStream ](/reference/react-dom/server/renderToReadableStream "renderToReadableStream")
    * [renderToStaticMarkup ](/reference/react-dom/server/renderToStaticMarkup "renderToStaticMarkup")
    * [renderToString ](/reference/react-dom/server/renderToString "renderToString")

  * [Static APIs ](/reference/react-dom/static "Static APIs")

    * [prerender ](/reference/react-dom/static/prerender "prerender")
    * [prerenderToNodeStream ](/reference/react-dom/static/prerenderToNodeStream "prerenderToNodeStream")

### Rules of React

  * [Overview ](/reference/rules "Overview")

    * [Components and Hooks must be pure ](/reference/rules/components-and-hooks-must-be-pure "Components and Hooks must be pure")
    * [React calls Components and Hooks ](/reference/rules/react-calls-components-and-hooks "React calls Components and Hooks")
    * [Rules of Hooks ](/reference/rules/rules-of-hooks "Rules of Hooks")

### React Server Components

  * [Server Components ](/reference/rsc/server-components "Server Components")
  * [Server Functions ](/reference/rsc/server-functions "Server Functions")
  * [Directives ](/reference/rsc/directives "Directives")

    * ['use client' ](/reference/rsc/use-client "'use client'")
    * ['use server' ](/reference/rsc/use-server "'use server'")

### Legacy APIs

  * [Legacy React APIs ](/reference/react/legacy "Legacy React APIs")

    * [Children ](/reference/react/Children "Children")
    * [cloneElement ](/reference/react/cloneElement "cloneElement")
    * [Component ](/reference/react/Component "Component")
    * [createElement ](/reference/react/createElement "createElement")
    * [createRef ](/reference/react/createRef "createRef")
    * [forwardRef ](/reference/react/forwardRef "forwardRef")
    * [isValidElement ](/reference/react/isValidElement "isValidElement")
    * [PureComponent ](/reference/react/PureComponent "PureComponent")




Is this page useful?

[API Reference](/reference/react)

# React Reference Overview[](#undefined "Link for this heading")

This section provides detailed reference documentation for working with React. For an introduction to React, please visit the [Learn](/learn) section.

The React reference documentation is broken down into functional subsections:

## React [](#react "Link for React ")

Programmatic React features:

  * [Hooks](/reference/react/hooks) - Use different React features from your components.
  * [Components](/reference/react/components) - Built-in components that you can use in your JSX.
  * [APIs](/reference/react/apis) - APIs that are useful for defining components.
  * [Directives](/reference/rsc/directives) - Provide instructions to bundlers compatible with React Server Components.



## React DOM [](#react-dom "Link for React DOM ")

React-dom contains features that are only supported for web applications (which run in the browser DOM environment). This section is broken into the following:

  * [Hooks](/reference/react-dom/hooks) - Hooks for web applications which run in the browser DOM environment.
  * [Components](/reference/react-dom/components) - React supports all of the browser built-in HTML and SVG components.
  * [APIs](/reference/react-dom) - The `react-dom` package contains methods supported only in web applications.
  * [Client APIs](/reference/react-dom/client) - The `react-dom/client` APIs let you render React components on the client (in the browser).
  * [Server APIs](/reference/react-dom/server) - The `react-dom/server` APIs let you render React components to HTML on the server.



## Rules of React [](#rules-of-react "Link for Rules of React ")

React has idioms — or rules — for how to express patterns in a way that is easy to understand and yields high-quality applications:

  * [Components and Hooks must be pure](/reference/rules/components-and-hooks-must-be-pure) – Purity makes your code easier to understand, debug, and allows React to automatically optimize your components and hooks correctly.
  * [React calls Components and Hooks](/reference/rules/react-calls-components-and-hooks) – React is responsible for rendering components and hooks when necessary to optimize the user experience.
  * [Rules of Hooks](/reference/rules/rules-of-hooks) – Hooks are defined using JavaScript functions, but they represent a special type of reusable UI logic with restrictions on where they can be called.



## Legacy APIs [](#legacy-apis "Link for Legacy APIs ")

  * [Legacy APIs](/reference/react/legacy) - Exported from the `react` package, but not recommended for use in newly written code.



[NextHooks](/reference/react/hooks)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [React ](#react)
  * [React DOM ](#react-dom)
  * [Rules of React ](#rules-of-react)
  * [Legacy APIs ](#legacy-apis)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# React Community[](#undefined "Link for this heading")

React has a community of millions of developers. On this page we’ve listed some React-related communities that you can be a part of; see the other pages in this section for additional online and in-person learning materials.

## Code of Conduct [](#code-of-conduct "Link for Code of Conduct ")

Before participating in React’s communities, [please read our Code of Conduct.](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md) We have adopted the [Contributor Covenant](https://www.contributor-covenant.org/) and we expect that all community members adhere to the guidelines within.

## Stack Overflow [](#stack-overflow "Link for Stack Overflow ")

Stack Overflow is a popular forum to ask code-level questions or if you’re stuck with a specific error. Read through the [existing questions](https://stackoverflow.com/questions/tagged/reactjs) tagged with **reactjs** or [ask your own](https://stackoverflow.com/questions/ask?tags=reactjs)!

## Popular Discussion Forums [](#popular-discussion-forums "Link for Popular Discussion Forums ")

There are many online forums which are a great place for discussion about best practices and application architecture as well as the future of React. If you have an answerable code-level question, Stack Overflow is usually a better fit.

Each community consists of many thousands of React users.

  * [DEV’s React community](https://dev.to/t/react)
  * [Hashnode’s React community](https://hashnode.com/n/reactjs)
  * [Reactiflux online chat](https://discord.gg/reactiflux)



## News [](#news "Link for News ")

For the latest news about React, and the [official React blog](/blog) on this website.

[NextReact Conferences](/community/conferences)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Code of Conduct ](#code-of-conduct)
  * [Stack Overflow ](#stack-overflow)
  * [Popular Discussion Forums ](#popular-discussion-forums)
  * [News ](#news)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React Blog[](#undefined "Link for this heading")

This blog is the official source for the updates from the React team. Anything important, including release notes or deprecation notices, will be posted here first. You can also follow the account on Twitter, but you won’t miss anything essential if you only read this blog.

## [React v19 December 5, 2024In the React 19 Upgrade Guide, we shared step-by-step instructions for upgrading your app to React 19. In this post, we’ll give an overview of the new features in React 19, and how you can adopt them …Read more](/blog/2024/12/05/react-19)## [React Compiler Beta ReleaseOctober 21, 2024We announced an experimental release of React Compiler at React Conf 2024. We’ve made a lot of progress since then, and in this post we want to share what’s next for React Compiler …Read more](/blog/2024/10/21/react-compiler-beta-release)## [React Conf 2024 RecapMay 22, 2024Last week we hosted React Conf 2024, a two-day conference in Henderson, Nevada where 700+ attendees gathered in-person to discuss the latest in UI engineering. This was our first in-person conference since 2019, and we were thrilled to be able to bring the community together again …Read more](/blog/2024/05/22/react-conf-2024-recap)## [React 19 Upgrade GuideApril 25, 2024The improvements added to React 19 require some breaking changes, but we’ve worked to make the upgrade as smooth as possible, and we don’t expect the changes to impact most apps. In this post, we will guide you through the steps for upgrading libraries to React 19 …Read more](/blog/2024/04/25/react-19-upgrade-guide)## [React Labs: What We've Been Working On – February 2024February 15, 2024In React Labs posts, we write about projects in active research and development. Since our last update, we’ve made significant progress on React Compiler, new features, and React 19, and we’d like to share what we learned.Read more](/blog/2024/02/15/react-labs-what-we-have-been-working-on-february-2024)## [React Canaries: Incremental Feature Rollout Outside MetaMay 3, 2023Traditionally, new React features used to only be available at Meta first, and land in the open source releases later. We’d like to offer the React community an option to adopt individual new features as soon as their design is close to final—similar to how Meta uses React internally. We are introducing a new officially supported Canary release channel. It lets curated setups like frameworks decouple adoption of individual React features from the React release schedule.Read more](/blog/2023/05/03/react-canaries)## [React Labs: What We've Been Working On – March 2023March 22, 2023In React Labs posts, we write about projects in active research and development. Since our last update, we’ve made significant progress on React Server Components, Asset Loading, Optimizing Compiler, Offscreen Rendering, and Transition Tracing, and we’d like to share what we learned.Read more](/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023)## [Introducing react.devMarch 16, 2023Today we are thrilled to launch react.dev, the new home for React and its documentation. In this post, we would like to give you a tour of the new site.Read more](/blog/2023/03/16/introducing-react-dev)## [React Labs: What We've Been Working On – June 2022June 15, 2022React 18 was years in the making, and with it brought valuable lessons for the React team. Its release was the result of many years of research and exploring many paths. Some of those paths were successful; many more were dead-ends that led to new insights. One lesson we’ve learned is that it’s frustrating for the community to wait for new features without having insight into these paths that we’re exploring…Read more](/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022)## [React v18.0March 29, 2022React 18 is now available on npm! In our last post, we shared step-by-step instructions for upgrading your app to React 18. In this post, we’ll give an overview of what’s new in React 18, and what it means for the future…Read more](/blog/2022/03/29/react-v18)## [How to Upgrade to React 18March 8, 2022As we shared in the release post, React 18 introduces features powered by our new concurrent renderer, with a gradual adoption strategy for existing applications. In this post, we will guide you through the steps for upgrading to React 18…Read more](/blog/2022/03/08/react-18-upgrade-guide)## [React Conf 2021 RecapDecember 17, 2021Last week we hosted our 6th React Conf. In previous years, we’ve used the React Conf stage to deliver industry changing announcements such as React Native and React Hooks. This year, we shared our multi-platform vision for React, starting with the release of React 18 and gradual adoption of concurrent features…Read more](/blog/2021/12/17/react-conf-2021-recap)## [The Plan for React 18June 8, 2021The React team is excited to share a few updates:

  * We’ve started work on the React 18 release, which will be our next major version.
  * We’ve created a Working Group to prepare the community for gradual adoption of new features in React 18.
  * We’ve published a React 18 Alpha so that library authors can try it and provide feedback…

Read more](/blog/2021/06/08/the-plan-for-react-18)## [Introducing Zero-Bundle-Size React Server ComponentsDecember 21, 20202020 has been a long year. As it comes to an end we wanted to share a special Holiday Update on our research into zero-bundle-size React Server Components. To introduce React Server Components, we have prepared a talk and a demo. If you want, you can check them out during the holidays, or later when work picks back up in the new year…Read more](/blog/2020/12/21/data-fetching-with-react-server-components)

### All release notes [](#all-release-notes "Link for All release notes ")

Not every React release deserves its own blog post, but you can find a detailed changelog for every release in the `CHANGELOG.md`[](https://github.com/facebook/react/blob/main/CHANGELOG.md) file in the React repository, as well as on the [Releases](https://github.com/facebook/react/releases) page.

### Older posts [](#older-posts "Link for Older posts ")

See the [older posts.](https://reactjs.org/blog/all.html)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Translations[](#undefined "Link for this heading")

React docs are translated by the global community into many languages all over the world.

## Source site [](#main-site "Link for Source site ")

All translations are provided from the canonical source docs:

  * [English](https://react.dev/) — [Contribute](https://github.com/reactjs/react.dev/)



## Full translations [](#full-translations "Link for Full translations ")

  * [French (Français)](https://fr.react.dev/) — [Contribute](https://github.com/reactjs/fr.react.dev)
  * [Japanese (日本語)](https://ja.react.dev/) — [Contribute](https://github.com/reactjs/ja.react.dev)
  * [Korean (한국어)](https://ko.react.dev/) — [Contribute](https://github.com/reactjs/ko.react.dev)
  * [Simplified Chinese (简体中文)](https://zh-hans.react.dev/) — [Contribute](https://github.com/reactjs/zh-hans.react.dev)
  * [Spanish (Español)](https://es.react.dev/) — [Contribute](https://github.com/reactjs/es.react.dev)
  * [Turkish (Türkçe)](https://tr.react.dev/) — [Contribute](https://github.com/reactjs/tr.react.dev)



## In-progress translations [](#in-progress-translations "Link for In-progress translations ")

For the progress of each translation, see: [Is React Translated Yet?](https://translations.react.dev/)

  * [Arabic (العربية)](https://ar.react.dev/) — [Contribute](https://github.com/reactjs/ar.react.dev)
  * [Azerbaijani (Azərbaycanca)](https://az.react.dev/) — [Contribute](https://github.com/reactjs/az.react.dev)
  * [Belarusian (Беларуская)](https://be.react.dev/) — [Contribute](https://github.com/reactjs/be.react.dev)
  * [Bengali (বাংলা)](https://bn.react.dev/) — [Contribute](https://github.com/reactjs/bn.react.dev)
  * [Czech (Čeština)](https://cs.react.dev/) — [Contribute](https://github.com/reactjs/cs.react.dev)
  * [Finnish (Suomi)](https://fi.react.dev/) — [Contribute](https://github.com/reactjs/fi.react.dev)
  * [German (Deutsch)](https://de.react.dev/) — [Contribute](https://github.com/reactjs/de.react.dev)
  * [Gujarati (ગુજરાતી)](https://gu.react.dev/) — [Contribute](https://github.com/reactjs/gu.react.dev)
  * [Hebrew (עברית)](https://he.react.dev/) — [Contribute](https://github.com/reactjs/he.react.dev)
  * [Hindi (हिन्दी)](https://hi.react.dev/) — [Contribute](https://github.com/reactjs/hi.react.dev)
  * [Hungarian (magyar)](https://hu.react.dev/) — [Contribute](https://github.com/reactjs/hu.react.dev)
  * [Icelandic (Íslenska)](https://is.react.dev/) — [Contribute](https://github.com/reactjs/is.react.dev)
  * [Indonesian (Bahasa Indonesia)](https://id.react.dev/) — [Contribute](https://github.com/reactjs/id.react.dev)
  * [Italian (Italiano)](https://it.react.dev/) — [Contribute](https://github.com/reactjs/it.react.dev)
  * [Kazakh (Қазақша)](https://kk.react.dev/) — [Contribute](https://github.com/reactjs/kk.react.dev)
  * [Lao (ພາສາລາວ)](https://lo.react.dev/) — [Contribute](https://github.com/reactjs/lo.react.dev)
  * [Macedonian (Македонски)](https://mk.react.dev/) — [Contribute](https://github.com/reactjs/mk.react.dev)
  * [Malayalam (മലയാളം)](https://ml.react.dev/) — [Contribute](https://github.com/reactjs/ml.react.dev)
  * [Mongolian (Монгол хэл)](https://mn.react.dev/) — [Contribute](https://github.com/reactjs/mn.react.dev)
  * [Persian (فارسی)](https://fa.react.dev/) — [Contribute](https://github.com/reactjs/fa.react.dev)
  * [Polish (Polski)](https://pl.react.dev/) — [Contribute](https://github.com/reactjs/pl.react.dev)
  * [Portuguese (Brazil) (Português do Brasil)](https://pt-br.react.dev/) — [Contribute](https://github.com/reactjs/pt-br.react.dev)
  * [Russian (Русский)](https://ru.react.dev/) — [Contribute](https://github.com/reactjs/ru.react.dev)
  * [Serbian (Srpski)](https://sr.react.dev/) — [Contribute](https://github.com/reactjs/sr.react.dev)
  * [Sinhala (සිංහල)](https://si.react.dev/) — [Contribute](https://github.com/reactjs/si.react.dev)
  * [Swahili (Kiswahili)](https://sw.react.dev/) — [Contribute](https://github.com/reactjs/sw.react.dev)
  * [Tamil (தமிழ்)](https://ta.react.dev/) — [Contribute](https://github.com/reactjs/ta.react.dev)
  * [Telugu (తెలుగు)](https://te.react.dev/) — [Contribute](https://github.com/reactjs/te.react.dev)
  * [Traditional Chinese (繁體中文)](https://zh-hant.react.dev/) — [Contribute](https://github.com/reactjs/zh-hant.react.dev)
  * [Ukrainian (Українська)](https://uk.react.dev/) — [Contribute](https://github.com/reactjs/uk.react.dev)
  * [Urdu (اردو)](https://ur.react.dev/) — [Contribute](https://github.com/reactjs/ur.react.dev)
  * [Vietnamese (Tiếng Việt)](https://vi.react.dev/) — [Contribute](https://github.com/reactjs/vi.react.dev)



## How to contribute [](#how-to-contribute "Link for How to contribute ")

You can contribute to the translation efforts!

The community conducts the translation work for the React docs on each language-specific fork of react.dev. Typical translation work involves directly translating a Markdown file and creating a pull request. Click the “contribute” link above to the GitHub repository for your language, and follow the instructions there to help with the translation effort.

If you want to start a new translation for your language, visit: [translations.react.dev](https://github.com/reactjs/translations.react.dev)

[PreviousDocs Contributors](/community/docs-contributors)[NextAcknowledgements](/community/acknowledgements)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Source site ](#main-site)
  * [Full translations ](#full-translations)
  * [In-progress translations ](#in-progress-translations)
  * [How to contribute ](#how-to-contribute)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

[Installation](/learn/installation)

# Add React to an Existing Project[](#undefined "Link for this heading")

If you want to add some interactivity to your existing project, you don’t have to rewrite it in React. Add React to your existing stack, and render interactive React components anywhere.

### Note

**You need to install[Node.js](https://nodejs.org/en/) for local development.** Although you can [try React](/learn/installation#try-react) online or with a simple HTML page, realistically most JavaScript tooling you’ll want to use for development requires Node.js.

## Using React for an entire subroute of your existing website [](#using-react-for-an-entire-subroute-of-your-existing-website "Link for Using React for an entire subroute of your existing website ")

Let’s say you have an existing web app at `example.com` built with another server technology (like Rails), and you want to implement all routes starting with `example.com/some-app/` fully with React.

Here’s how we recommend to set it up:

  1. **Build the React part of your app** using one of the [React-based frameworks](/learn/start-a-new-react-project).
  2. **Specify`/some-app` as the _base path_** in your framework’s configuration (here’s how: [Next.js](https://nextjs.org/docs/api-reference/next.config.js/basepath), [Gatsby](https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/path-prefix/)).
  3. **Configure your server or a proxy** so that all requests under `/some-app/` are handled by your React app.



This ensures the React part of your app can [benefit from the best practices](/learn/start-a-new-react-project#can-i-use-react-without-a-framework) baked into those frameworks.

Many React-based frameworks are full-stack and let your React app take advantage of the server. However, you can use the same approach even if you can’t or don’t want to run JavaScript on the server. In that case, serve the HTML/CSS/JS export (`next export`[ output](https://nextjs.org/docs/advanced-features/static-html-export) for Next.js, default for Gatsby) at `/some-app/` instead.

## Using React for a part of your existing page [](#using-react-for-a-part-of-your-existing-page "Link for Using React for a part of your existing page ")

Let’s say you have an existing page built with another technology (either a server one like Rails, or a client one like Backbone), and you want to render interactive React components somewhere on that page. That’s a common way to integrate React—in fact, it’s how most React usage looked at Meta for many years!

You can do this in two steps:

  1. **Set up a JavaScript environment** that lets you use the [JSX syntax](/learn/writing-markup-with-jsx), split your code into modules with the `import`[](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) / `export`[](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) syntax, and use packages (for example, React) from the [npm](https://www.npmjs.com/) package registry.
  2. **Render your React components** where you want to see them on the page.



The exact approach depends on your existing page setup, so let’s walk through some details.

### Step 1: Set up a modular JavaScript environment [](#step-1-set-up-a-modular-javascript-environment "Link for Step 1: Set up a modular JavaScript environment ")

A modular JavaScript environment lets you write your React components in individual files, as opposed to writing all of your code in a single file. It also lets you use all the wonderful packages published by other developers on the [npm](https://www.npmjs.com/) registry—including React itself! How you do this depends on your existing setup:

  * **If your app is already split into files that use`import` statements,** try to use the setup you already have. Check whether writing `<div />` in your JS code causes a syntax error. If it causes a syntax error, you might need to [transform your JavaScript code with Babel](https://babeljs.io/setup), and enable the [Babel React preset](https://babeljs.io/docs/babel-preset-react) to use JSX.

  * **If your app doesn’t have an existing setup for compiling JavaScript modules,** set it up with [Vite](https://vitejs.dev/). The Vite community maintains [many integrations with backend frameworks](https://github.com/vitejs/awesome-vite#integrations-with-backends), including Rails, Django, and Laravel. If your backend framework is not listed, [follow this guide](https://vitejs.dev/guide/backend-integration.html) to manually integrate Vite builds with your backend.




To check whether your setup works, run this command in your project folder:

Terminal

Copy

npm install react react-dom

Then add these lines of code at the top of your main JavaScript file (it might be called `index.js` or `main.js`):

index.js

index.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { createRoot } from 'react-dom/client';
// Clear the existing HTML content
document.body.innerHTML = '<div id="app"></div>';
// Render your React component instead
const root = createRoot(document.getElementById('app'));
root.render(<h1>Hello, world</h1>);

```


If the entire content of your page was replaced by a “Hello, world!”, everything worked! Keep reading.

### Note

Integrating a modular JavaScript environment into an existing project for the first time can feel intimidating, but it’s worth it! If you get stuck, try our [community resources](/community) or the [Vite Chat](https://chat.vitejs.dev/).

### Step 2: Render React components anywhere on the page [](#step-2-render-react-components-anywhere-on-the-page "Link for Step 2: Render React components anywhere on the page ")

In the previous step, you put this code at the top of your main file:

```


import { createRoot } from 'react-dom/client';

// Clear the existing HTML content

document.body.innerHTML = '<div id="app"></div>';

// Render your React component instead

const root = createRoot(document.getElementById('app'));

root.render(<h1>Hello, world</h1>);


```


Of course, you don’t actually want to clear the existing HTML content!

Delete this code.

Instead, you probably want to render your React components in specific places in your HTML. Open your HTML page (or the server templates that generate it) and add a unique `id`[](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id) attribute to any tag, for example:

```


<!-- ... somewhere in your html ... -->

<nav id="navigation"></nav>

<!-- ... more html ... -->


```


This lets you find that HTML element with `document.getElementById`[](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById) and pass it to `createRoot`[](/reference/react-dom/client/createRoot) so that you can render your own React component inside:

index.jsindex.html

index.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { createRoot } from 'react-dom/client';
function NavigationBar() {
 // TODO: Actually implement a navigation bar
 return <h1>Hello from React!</h1>;
}
const domNode = document.getElementById('navigation');
const root = createRoot(domNode);
root.render(<NavigationBar />);

```


Notice how the original HTML content from `index.html` is preserved, but your own `NavigationBar` React component now appears inside the `<nav id="navigation">` from your HTML. Read the `createRoot`[ usage documentation](/reference/react-dom/client/createRoot#rendering-a-page-partially-built-with-react) to learn more about rendering React components inside an existing HTML page.

When you adopt React in an existing project, it’s common to start with small interactive components (like buttons), and then gradually keep “moving upwards” until eventually your entire page is built with React. If you ever reach that point, we recommend migrating to [a React framework](/learn/start-a-new-react-project) right after to get the most out of React.

## Using React Native in an existing native mobile app [](#using-react-native-in-an-existing-native-mobile-app "Link for Using React Native in an existing native mobile app ")

[React Native](https://reactnative.dev/) can also be integrated into existing native apps incrementally. If you have an existing native app for Android (Java or Kotlin) or iOS (Objective-C or Swift), [follow this guide](https://reactnative.dev/docs/integration-with-existing-apps) to add a React Native screen to it.

[PreviousStart a New React Project](/learn/start-a-new-react-project)[NextEditor Setup](/learn/editor-setup)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Using React for an entire subroute of your existing website ](#using-react-for-an-entire-subroute-of-your-existing-website)
  * [Using React for a part of your existing page ](#using-react-for-a-part-of-your-existing-page)
  * [Step 1: Set up a modular JavaScript environment ](#step-1-set-up-a-modular-javascript-environment)
  * [Step 2: Render React components anywhere on the page ](#step-2-render-react-components-anywhere-on-the-page)
  * [Using React Native in an existing native mobile app ](#using-react-native-in-an-existing-native-mobile-app)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

[Installation](/learn/installation)

# Start a New React Project[](#undefined "Link for this heading")

If you want to build a new app or a new website fully with React, we recommend picking one of the React-powered frameworks popular in the community.

You can use React without a framework, however we’ve found that most apps and sites eventually build solutions to common problems such as code-splitting, routing, data fetching, and generating HTML. These problems are common to all UI libraries, not just React.

By starting with a framework, you can get started with React quickly, and avoid essentially building your own framework later.

##### Deep Dive

#### Can I use React without a framework? [](#can-i-use-react-without-a-framework "Link for Can I use React without a framework? ")

Show Details

You can definitely use React without a framework—that’s how you’d [use React for a part of your page.](/learn/add-react-to-an-existing-project#using-react-for-a-part-of-your-existing-page) **However, if you’re building a new app or a site fully with React, we recommend using a framework.**

Here’s why.

Even if you don’t need routing or data fetching at first, you’ll likely want to add some libraries for them. As your JavaScript bundle grows with every new feature, you might have to figure out how to split code for every route individually. As your data fetching needs get more complex, you are likely to encounter server-client network waterfalls that make your app feel very slow. As your audience includes more users with poor network conditions and low-end devices, you might need to generate HTML from your components to display content early—either on the server, or during the build time. Changing your setup to run some of your code on the server or during the build can be very tricky.

**These problems are not React-specific. This is why Svelte has SvelteKit, Vue has Nuxt, and so on.** To solve these problems on your own, you’ll need to integrate your bundler with your router and with your data fetching library. It’s not hard to get an initial setup working, but there are a lot of subtleties involved in making an app that loads quickly even as it grows over time. You’ll want to send down the minimal amount of app code but do so in a single client–server roundtrip, in parallel with any data required for the page. You’ll likely want the page to be interactive before your JavaScript code even runs, to support progressive enhancement. You may want to generate a folder of fully static HTML files for your marketing pages that can be hosted anywhere and still work with JavaScript disabled. Building these capabilities yourself takes real work.

**React frameworks on this page solve problems like these by default, with no extra work from your side.** They let you start very lean and then scale your app with your needs. Each React framework has a community, so finding answers to questions and upgrading tooling is easier. Frameworks also give structure to your code, helping you and others retain context and skills between different projects. Conversely, with a custom setup it’s easier to get stuck on unsupported dependency versions, and you’ll essentially end up creating your own framework—albeit one with no community or upgrade path (and if it’s anything like the ones we’ve made in the past, more haphazardly designed).

If your app has unusual constraints not served well by these frameworks, or you prefer to solve these problems yourself, you can roll your own custom setup with React. Grab `react` and `react-dom` from npm, set up your custom build process with a bundler like [Vite](https://vitejs.dev/) or [Parcel](https://parceljs.org/), and add other tools as you need them for routing, static generation or server-side rendering, and more.

## Production-grade React frameworks [](#production-grade-react-frameworks "Link for Production-grade React frameworks ")

These frameworks support all the features you need to deploy and scale your app in production and are working towards supporting our [full-stack architecture vision](#which-features-make-up-the-react-teams-full-stack-architecture-vision). All of the frameworks we recommend are open source with active communities for support, and can be deployed to your own server or a hosting provider. If you’re a framework author interested in being included on this list, [please let us know](https://github.com/reactjs/react.dev/issues/new?assignees=&labels=type%3A+framework&projects=&template=3-framework.yml&title=%5BFramework%5D%3A+).

### Next.js [](#nextjs-pages-router "Link for Next.js ")

**[Next.js’ Pages Router](https://nextjs.org/) is a full-stack React framework.** It’s versatile and lets you create React apps of any size—from a mostly static blog to a complex dynamic application. To create a new Next.js project, run in your terminal:

Terminal

Copy

npx create-next-app@latest

If you’re new to Next.js, check out the [learn Next.js course.](https://nextjs.org/learn)

Next.js is maintained by [Vercel](https://vercel.com/). You can [deploy a Next.js app](https://nextjs.org/docs/app/building-your-application/deploying) to any Node.js or serverless hosting, or to your own server. Next.js also supports a [static export](https://nextjs.org/docs/pages/building-your-application/deploying/static-exports) which doesn’t require a server.

### Remix [](#remix "Link for Remix ")

**[Remix](https://remix.run/) is a full-stack React framework with nested routing.** It lets you break your app into nested parts that can load data in parallel and refresh in response to the user actions. To create a new Remix project, run:

Terminal

Copy

npx create-remix

If you’re new to Remix, check out the Remix [blog tutorial](https://remix.run/docs/en/main/tutorials/blog) (short) and [app tutorial](https://remix.run/docs/en/main/tutorials/jokes) (long).

Remix is maintained by [Shopify](https://www.shopify.com/). When you create a Remix project, you need to [pick your deployment target](https://remix.run/docs/en/main/guides/deployment). You can deploy a Remix app to any Node.js or serverless hosting by using or writing an [adapter](https://remix.run/docs/en/main/other-api/adapter).

### Gatsby [](#gatsby "Link for Gatsby ")

**[Gatsby](https://www.gatsbyjs.com/) is a React framework for fast CMS-backed websites.** Its rich plugin ecosystem and its GraphQL data layer simplify integrating content, APIs, and services into one website. To create a new Gatsby project, run:

Terminal

Copy

npx create-gatsby

If you’re new to Gatsby, check out the [Gatsby tutorial.](https://www.gatsbyjs.com/docs/tutorial/)

Gatsby is maintained by [Netlify](https://www.netlify.com/). You can [deploy a fully static Gatsby site](https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting) to any static hosting. If you opt into using server-only features, make sure your hosting provider supports them for Gatsby.

### Expo (for native apps) [](#expo "Link for Expo \(for native apps\) ")

**[Expo](https://expo.dev/) is a React framework that lets you create universal Android, iOS, and web apps with truly native UIs.** It provides an SDK for [React Native](https://reactnative.dev/) that makes the native parts easier to use. To create a new Expo project, run:

Terminal

Copy

npx create-expo-app

If you’re new to Expo, check out the [Expo tutorial](https://docs.expo.dev/tutorial/introduction/).

Expo is maintained by [Expo (the company)](https://expo.dev/about). Building apps with Expo is free, and you can submit them to the Google and Apple app stores without restrictions. Expo additionally provides opt-in paid cloud services.

## Bleeding-edge React frameworks [](#bleeding-edge-react-frameworks "Link for Bleeding-edge React frameworks ")

As we’ve explored how to continue improving React, we realized that integrating React more closely with frameworks (specifically, with routing, bundling, and server technologies) is our biggest opportunity to help React users build better apps. The Next.js team has agreed to collaborate with us in researching, developing, integrating, and testing framework-agnostic bleeding-edge React features like [React Server Components.](/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023#react-server-components)

These features are getting closer to being production-ready every day, and we’ve been in talks with other bundler and framework developers about integrating them. Our hope is that in a year or two, all frameworks listed on this page will have full support for these features. (If you’re a framework author interested in partnering with us to experiment with these features, please let us know!)

### Next.js (App Router) [](#nextjs-app-router "Link for Next.js \(App Router\) ")

**[Next.js’s App Router](https://nextjs.org/docs) is a redesign of the Next.js APIs aiming to fulfill the React team’s full-stack architecture vision.** It lets you fetch data in asynchronous components that run on the server or even during the build.

Next.js is maintained by [Vercel](https://vercel.com/). You can [deploy a Next.js app](https://nextjs.org/docs/app/building-your-application/deploying) to any Node.js or serverless hosting, or to your own server. Next.js also supports [static export](https://nextjs.org/docs/app/building-your-application/deploying/static-exports) which doesn’t require a server.

##### Deep Dive

#### Which features make up the React team’s full-stack architecture vision? [](#which-features-make-up-the-react-teams-full-stack-architecture-vision "Link for Which features make up the React team’s full-stack architecture vision? ")

Show Details

Next.js’s App Router bundler fully implements the official [React Server Components specification](https://github.com/reactjs/rfcs/blob/main/text/0188-server-components.md). This lets you mix build-time, server-only, and interactive components in a single React tree.

For example, you can write a server-only React component as an `async` function that reads from a database or from a file. Then you can pass data down from it to your interactive components:

```


// This component runs *only* on the server (or during the build).

async function Talks({ confId }) {

 // 1. You're on the server, so you can talk to your data layer. API endpoint not required.

 const talks = await db.Talks.findAll({ confId });

 // 2. Add any amount of rendering logic. It won't make your JavaScript bundle larger.

 const videos = talks.map(talk => talk.video);

 // 3. Pass the data down to the components that will run in the browser.

 return <SearchableVideoList videos={videos} />;

}


```


Next.js’s App Router also integrates [data fetching with Suspense](/blog/2022/03/29/react-v18#suspense-in-data-frameworks). This lets you specify a loading state (like a skeleton placeholder) for different parts of your user interface directly in your React tree:

```


<Suspense fallback={<TalksLoading />}>

 <Talks confId={conf.id} />

</Suspense>


```


Server Components and Suspense are React features rather than Next.js features. However, adopting them at the framework level requires buy-in and non-trivial implementation work. At the moment, the Next.js App Router is the most complete implementation. The React team is working with bundler developers to make these features easier to implement in the next generation of frameworks.

[PreviousInstallation](/learn/installation)[NextAdd React to an Existing Project](/learn/add-react-to-an-existing-project)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Production-grade React frameworks ](#production-grade-react-frameworks)
  * [Next.js ](#nextjs-pages-router)
  * [Remix ](#remix)
  * [Gatsby ](#gatsby)
  * [Expo (for native apps) ](#expo)
  * [Bleeding-edge React frameworks ](#bleeding-edge-react-frameworks)
  * [Next.js (App Router) ](#nextjs-app-router)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React v19[](#undefined "Link for this heading")

December 05, 2024 by [The React Team](/community/team)

### Note

### React 19 is now stable! [](#react-19-is-now-stable "Link for React 19 is now stable! ")

Additions since this post was originally shared with the React 19 RC in April:

  * **Pre-warming for suspended trees** : see [Improvements to Suspense](/blog/2024/04/25/react-19-upgrade-guide#improvements-to-suspense).
  * **React DOM static APIs** : see [New React DOM Static APIs](#new-react-dom-static-apis).



_The date for this post has been updated to reflect the stable release date._

React v19 is now available on npm!

In our [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide), we shared step-by-step instructions for upgrading your app to React 19. In this post, we’ll give an overview of the new features in React 19, and how you can adopt them.

  * [What’s new in React 19](#whats-new-in-react-19)
  * [Improvements in React 19](#improvements-in-react-19)
  * [How to upgrade](#how-to-upgrade)



For a list of breaking changes, see the [Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide).

## What’s new in React 19 [](#whats-new-in-react-19 "Link for What’s new in React 19 ")

### Actions [](#actions "Link for Actions ")

A common use case in React apps is to perform a data mutation and then update state in response. For example, when a user submits a form to change their name, you will make an API request, and then handle the response. In the past, you would need to handle pending states, errors, optimistic updates, and sequential requests manually.

For example, you could handle the pending and error state in `useState`:

```


// Before Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, setIsPending] = useState(false);

 const handleSubmit = async () => {

  setIsPending(true);

  const error = await updateName(name);

  setIsPending(false);

  if (error) {

   setError(error);

   return;

  } 

  redirect("/path");

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


In React 19, we’re adding support for using async functions in transitions to handle pending states, errors, forms, and optimistic updates automatically.

For example, you can use `useTransition` to handle the pending state for you:

```


// Using pending state from Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, startTransition] = useTransition();

 const handleSubmit = () => {

  startTransition(async () => {

   const error = await updateName(name);

   if (error) {

    setError(error);

    return;

   } 

   redirect("/path");

  })

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


The async transition will immediately set the `isPending` state to true, make the async request(s), and switch `isPending` to false after any transitions. This allows you to keep the current UI responsive and interactive while the data is changing.

### Note

#### By convention, functions that use async transitions are called “Actions”. [](#by-convention-functions-that-use-async-transitions-are-called-actions "Link for By convention, functions that use async transitions are called “Actions”. ")

Actions automatically manage submitting data for you:

  * **Pending state** : Actions provide a pending state that starts at the beginning of a request and automatically resets when the final state update is committed.
  * **Optimistic updates** : Actions support the new `useOptimistic`[](#new-hook-optimistic-updates) hook so you can show users instant feedback while the requests are submitting.
  * **Error handling** : Actions provide error handling so you can display Error Boundaries when a request fails, and revert optimistic updates to their original value automatically.
  * **Forms** : `<form>` elements now support passing functions to the `action` and `formAction` props. Passing functions to the `action` props use Actions by default and reset the form automatically after submission.



Building on top of Actions, React 19 introduces `useOptimistic`[](#new-hook-optimistic-updates) to manage optimistic updates, and a new hook `React.useActionState`[](#new-hook-useactionstate) to handle common cases for Actions. In `react-dom` we’re adding `<form>`[ Actions](#form-actions) to manage forms automatically and `useFormStatus`[](#new-hook-useformstatus) to support the common cases for Actions in forms.

In React 19, the above example can be simplified to:

```


// Using <form> Actions and useActionState

function ChangeName({ name, setName }) {

 const [error, submitAction, isPending] = useActionState(

  async (previousState, formData) => {

   const error = await updateName(formData.get("name"));

   if (error) {

    return error;

   }

   redirect("/path");

   return null;

  },

  null,

 );

 return (

  <form action={submitAction}>

   <input type="text" name="name" />

   <button type="submit" disabled={isPending}>Update</button>

   {error && <p>{error}</p>}

  </form>

 );

}


```


In the next section, we’ll break down each of the new Action features in React 19.

### New hook: `useActionState` [](#new-hook-useactionstate "Link for this heading")

To make the common cases easier for Actions, we’ve added a new hook called `useActionState`:

```


const [error, submitAction, isPending] = useActionState(

 async (previousState, newName) => {

  const error = await updateName(newName);

  if (error) {

   // You can return any result of the action.

   // Here, we return only the error.

   return error;

  }

  // handle success

  return null;

 },

 null,

);


```


`useActionState` accepts a function (the “Action”), and returns a wrapped Action to call. This works because Actions compose. When the wrapped Action is called, `useActionState` will return the last result of the Action as `data`, and the pending state of the Action as `pending`.

### Note

`React.useActionState` was previously called `ReactDOM.useFormState` in the Canary releases, but we’ve renamed it and deprecated `useFormState`.

See [#28491](https://github.com/facebook/react/pull/28491) for more info.

For more information, see the docs for `useActionState`[](/reference/react/useActionState).

### React DOM: `<form>` Actions [](#form-actions "Link for this heading")

Actions are also integrated with React 19’s new `<form>` features for `react-dom`. We’ve added support for passing functions as the `action` and `formAction` props of `<form>`, `<input>`, and `<button>` elements to automatically submit forms with Actions:

```


<form action={actionFunction}>


```


When a `<form>` Action succeeds, React will automatically reset the form for uncontrolled components. If you need to reset the `<form>` manually, you can call the new `requestFormReset` React DOM API.

For more information, see the `react-dom` docs for `<form>`[](/reference/react-dom/components/form), `<input>`[](/reference/react-dom/components/input), and `<button>`.

### React DOM: New hook: `useFormStatus` [](#new-hook-useformstatus "Link for this heading")

In design systems, it’s common to write design components that need access to information about the `<form>` they’re in, without drilling props down to the component. This can be done via Context, but to make the common case easier, we’ve added a new hook `useFormStatus`:

```


import {useFormStatus} from 'react-dom';

function DesignButton() {

 const {pending} = useFormStatus();

 return <button type="submit" disabled={pending} />

}


```


`useFormStatus` reads the status of the parent `<form>` as if the form was a Context provider.

For more information, see the `react-dom` docs for `useFormStatus`[](/reference/react-dom/hooks/useFormStatus).

### New hook: `useOptimistic` [](#new-hook-optimistic-updates "Link for this heading")

Another common UI pattern when performing a data mutation is to show the final state optimistically while the async request is underway. In React 19, we’re adding a new hook called `useOptimistic` to make this easier:

```


function ChangeName({currentName, onUpdateName}) {

 const [optimisticName, setOptimisticName] = useOptimistic(currentName);

 const submitAction = async formData => {

  const newName = formData.get("name");

  setOptimisticName(newName);

  const updatedName = await updateName(newName);

  onUpdateName(updatedName);

 };

 return (

  <form action={submitAction}>

   <p>Your name is: {optimisticName}</p>

   <p>

    <label>Change Name:</label>

    <input

     type="text"

     name="name"

     disabled={currentName !== optimisticName}

    />

   </p>

  </form>

 );

}


```


The `useOptimistic` hook will immediately render the `optimisticName` while the `updateName` request is in progress. When the update finishes or errors, React will automatically switch back to the `currentName` value.

For more information, see the docs for `useOptimistic`[](/reference/react/useOptimistic).

### New API: `use` [](#new-feature-use "Link for this heading")

In React 19 we’re introducing a new API to read resources in render: `use`.

For example, you can read a promise with `use`, and React will Suspend until the promise resolves:

```


import {use} from 'react';

function Comments({commentsPromise}) {

 // `use` will suspend until the promise resolves.

 const comments = use(commentsPromise);

 return comments.map(comment => <p key={comment.id}>{comment}</p>);

}

function Page({commentsPromise}) {

 // When `use` suspends in Comments,

 // this Suspense boundary will be shown.

 return (

  <Suspense fallback={<div>Loading...</div>}>

   <Comments commentsPromise={commentsPromise} />

  </Suspense>

 )

}


```


### Note

#### `use` does not support promises created in render. [](#use-does-not-support-promises-created-in-render "Link for this heading")

If you try to pass a promise created in render to `use`, React will warn:

Console

A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework.

To fix, you need to pass a promise from a suspense powered library or framework that supports caching for promises. In the future we plan to ship features to make it easier to cache promises in render.

You can also read context with `use`, allowing you to read Context conditionally such as after early returns:

```


import {use} from 'react';

import ThemeContext from './ThemeContext'

function Heading({children}) {

 if (children == null) {

  return null;

 }

 // This would not work with useContext

 // because of the early return.

 const theme = use(ThemeContext);

 return (

  <h1 style={{color: theme.color}}>

   {children}

  </h1>

 );

}


```


The `use` API can only be called in render, similar to hooks. Unlike hooks, `use` can be called conditionally. In the future we plan to support more ways to consume resources in render with `use`.

For more information, see the docs for `use`[](/reference/react/use).

## New React DOM Static APIs [](#new-react-dom-static-apis "Link for New React DOM Static APIs ")

We’ve added two new APIs to `react-dom/static` for static site generation:

  * `prerender`[](/reference/react-dom/static/prerender)
  * `prerenderToNodeStream`[](/reference/react-dom/static/prerenderToNodeStream)



These new APIs improve on `renderToString` by waiting for data to load for static HTML generation. They are designed to work with streaming environments like Node.js Streams and Web Streams. For example, in a Web Stream environment, you can prerender a React tree to static HTML with `prerender`:

```


import { prerender } from 'react-dom/static';

async function handler(request) {

 const {prelude} = await prerender(<App />, {

  bootstrapScripts: ['/main.js']

 });

 return new Response(prelude, {

  headers: { 'content-type': 'text/html' },

 });

}


```


Prerender APIs will wait for all data to load before returning the static HTML stream. Streams can be converted to strings, or sent with a streaming response. They do not support streaming content as it loads, which is supported by the existing [React DOM server rendering APIs](/reference/react-dom/server).

For more information, see [React DOM Static APIs](/reference/react-dom/static).

## React Server Components [](#react-server-components "Link for React Server Components ")

### Server Components [](#server-components "Link for Server Components ")

Server Components are a new option that allows rendering components ahead of time, before bundling, in an environment separate from your client application or SSR server. This separate environment is the “server” in React Server Components. Server Components can run once at build time on your CI server, or they can be run for each request using a web server.

React 19 includes all of the React Server Components features included from the Canary channel. This means libraries that ship with Server Components can now target React 19 as a peer dependency with a `react-server` [export condition](https://github.com/reactjs/rfcs/blob/main/text/0227-server-module-conventions.md#react-server-conditional-exports) for use in frameworks that support the [Full-stack React Architecture](/learn/start-a-new-react-project#which-features-make-up-the-react-teams-full-stack-architecture-vision).

### Note

#### How do I build support for Server Components? [](#how-do-i-build-support-for-server-components "Link for How do I build support for Server Components? ")

While React Server Components in React 19 are stable and will not break between minor versions, the underlying APIs used to implement a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x.

To support React Server Components as a bundler or framework, we recommend pinning to a specific React version, or using the Canary release. We will continue working with bundlers and frameworks to stabilize the APIs used to implement React Server Components in the future.

For more, see the docs for [React Server Components](/reference/rsc/server-components).

### Server Actions [](#server-actions "Link for Server Actions ")

Server Actions allow Client Components to call async functions executed on the server.

When a Server Action is defined with the `"use server"` directive, your framework will automatically create a reference to the server function, and pass that reference to the Client Component. When that function is called on the client, React will send a request to the server to execute the function, and return the result.

### Note

#### There is no directive for Server Components. [](#there-is-no-directive-for-server-components "Link for There is no directive for Server Components. ")

A common misunderstanding is that Server Components are denoted by `"use server"`, but there is no directive for Server Components. The `"use server"` directive is used for Server Actions.

For more info, see the docs for [Directives](/reference/rsc/directives).

Server Actions can be created in Server Components and passed as props to Client Components, or they can be imported and used in Client Components.

For more, see the docs for [React Server Actions](/reference/rsc/server-actions).

## Improvements in React 19 [](#improvements-in-react-19 "Link for Improvements in React 19 ")

### `ref` as a prop [](#ref-as-a-prop "Link for this heading")

Starting in React 19, you can now access `ref` as a prop for function components:

```


function MyInput({placeholder, ref}) {

 return <input placeholder={placeholder} ref={ref} />

}

//...

<MyInput ref={ref} />


```


New function components will no longer need `forwardRef`, and we will be publishing a codemod to automatically update your components to use the new `ref` prop. In future versions we will deprecate and remove `forwardRef`.

### Note

`refs` passed to classes are not passed as props since they reference the component instance.

### Diffs for hydration errors [](#diffs-for-hydration-errors "Link for Diffs for hydration errors ")

We also improved error reporting for hydration errors in `react-dom`. For example, instead of logging multiple errors in DEV without any information about the mismatch:

Console

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Uncaught Error: Text content does not match server-rendered HTML. at checkForUnmatchedText …

We now log a single message with a diff of the mismatch:

Console

Uncaught Error: Hydration failed because the server rendered HTML didn’t match the client. As a result this tree will be regenerated on the client. This can happen if an SSR-ed Client Component used: - A server/client branch `if (typeof window !== 'undefined')`. - Variable input such as `Date.now()` or `Math.random()` which changes each time it’s called. - Date formatting in a user’s locale which doesn’t match the server. - External changing data without sending a snapshot of it along with the HTML. - Invalid HTML tag nesting. It can also happen if the client has a browser extension installed which messes with the HTML before React loaded. <https://react.dev/link/hydration-mismatch> <App> <span> + Client - Server at throwOnHydrationMismatch …

### `<Context>` as a provider [](#context-as-a-provider "Link for this heading")

In React 19, you can render `<Context>` as a provider instead of `<Context.Provider>`:

```


const ThemeContext = createContext('');

function App({children}) {

 return (

  <ThemeContext value="dark">

   {children}

  </ThemeContext>

 ); 

}


```


New Context providers can use `<Context>` and we will be publishing a codemod to convert existing providers. In future versions we will deprecate `<Context.Provider>`.

### Cleanup functions for refs [](#cleanup-functions-for-refs "Link for Cleanup functions for refs ")

We now support returning a cleanup function from `ref` callbacks:

```


<input

 ref={(ref) => {

  // ref created

  // NEW: return a cleanup function to reset

  // the ref when element is removed from DOM.

  return () => {

   // ref cleanup

  };

 }}

/>


```


When the component unmounts, React will call the cleanup function returned from the `ref` callback. This works for DOM refs, refs to class components, and `useImperativeHandle`.

### Note

Previously, React would call `ref` functions with `null` when unmounting the component. If your `ref` returns a cleanup function, React will now skip this step.

In future versions, we will deprecate calling refs with `null` when unmounting components.

Due to the introduction of ref cleanup functions, returning anything else from a `ref` callback will now be rejected by TypeScript. The fix is usually to stop using implicit returns, for example:

```


- <div ref={current => (instance = current)} />

+ <div ref={current => {instance = current}} />


```


The original code returned the instance of the `HTMLDivElement` and TypeScript wouldn’t know if this was _supposed_ to be a cleanup function or if you didn’t want to return a cleanup function.

You can codemod this pattern with `no-implicit-ref-callback-return`[](https://github.com/eps1lon/types-react-codemod/#no-implicit-ref-callback-return).

### `useDeferredValue` initial value [](#use-deferred-value-initial-value "Link for this heading")

We’ve added an `initialValue` option to `useDeferredValue`:

```


function Search({deferredValue}) {

 // On initial render the value is ''.

 // Then a re-render is scheduled with the deferredValue.

 const value = useDeferredValue(deferredValue, '');

 return (

  <Results query={value} />

 );

}


```


When initialValue is provided, `useDeferredValue` will return it as `value` for the initial render of the component, and schedules a re-render in the background with the deferredValue returned.

For more, see `useDeferredValue`[](/reference/react/useDeferredValue).

### Support for Document Metadata [](#support-for-metadata-tags "Link for Support for Document Metadata ")

In HTML, document metadata tags like `<title>`, `<link>`, and `<meta>` are reserved for placement in the `<head>` section of the document. In React, the component that decides what metadata is appropriate for the app may be very far from the place where you render the `<head>` or React does not render the `<head>` at all. In the past, these elements would need to be inserted manually in an effect, or by libraries like `react-helmet`[](https://github.com/nfl/react-helmet), and required careful handling when server rendering a React application.

In React 19, we’re adding support for rendering document metadata tags in components natively:

```


function BlogPost({post}) {

 return (

  <article>

   <h1>{post.title}</h1>

   <title>{post.title}</title>

   <meta name="author" content="Josh" />

   <link rel="author" href="https://twitter.com/joshcstory/" />

   <meta name="keywords" content={post.keywords} />

   <p>

    Eee equals em-see-squared...

   </p>

  </article>

 );

}


```


When React renders this component, it will see the `<title>` `<link>` and `<meta>` tags, and automatically hoist them to the `<head>` section of document. By supporting these metadata tags natively, we’re able to ensure they work with client-only apps, streaming SSR, and Server Components.

### Note

#### You may still want a Metadata library [](#you-may-still-want-a-metadata-library "Link for You may still want a Metadata library ")

For simple use cases, rendering Document Metadata as tags may be suitable, but libraries can offer more powerful features like overriding generic metadata with specific metadata based on the current route. These features make it easier for frameworks and libraries like `react-helmet`[](https://github.com/nfl/react-helmet) to support metadata tags, rather than replace them.

For more info, see the docs for `<title>`[](/reference/react-dom/components/title), `<link>`[](/reference/react-dom/components/link), and `<meta>`[](/reference/react-dom/components/meta).

### Support for stylesheets [](#support-for-stylesheets "Link for Support for stylesheets ")

Stylesheets, both externally linked (`<link rel="stylesheet" href="...">`) and inline (`<style>...</style>`), require careful positioning in the DOM due to style precedence rules. Building a stylesheet capability that allows for composability within components is hard, so users often end up either loading all of their styles far from the components that may depend on them, or they use a style library which encapsulates this complexity.

In React 19, we’re addressing this complexity and providing even deeper integration into Concurrent Rendering on the Client and Streaming Rendering on the Server with built in support for stylesheets. If you tell React the `precedence` of your stylesheet it will manage the insertion order of the stylesheet in the DOM and ensure that the stylesheet (if external) is loaded before revealing content that depends on those style rules.

```


function ComponentOne() {

 return (

  <Suspense fallback="loading...">

   <link rel="stylesheet" href="foo" precedence="default" />

   <link rel="stylesheet" href="bar" precedence="high" />

   <article class="foo-class bar-class">

    {...}

   </article>

  </Suspense>

 )

}

function ComponentTwo() {

 return (

  <div>

   <p>{...}</p>

   <link rel="stylesheet" href="baz" precedence="default" /> <-- will be inserted between foo & bar

  </div>

 )

}


```


During Server Side Rendering React will include the stylesheet in the `<head>`, which ensures that the browser will not paint until it has loaded. If the stylesheet is discovered late after we’ve already started streaming, React will ensure that the stylesheet is inserted into the `<head>` on the client before revealing the content of a Suspense boundary that depends on that stylesheet.

During Client Side Rendering React will wait for newly rendered stylesheets to load before committing the render. If you render this component from multiple places within your application React will only include the stylesheet once in the document:

```


function App() {

 return <>

  <ComponentOne />

  ...

  <ComponentOne /> // won't lead to a duplicate stylesheet link in the DOM

 </>

}


```


For users accustomed to loading stylesheets manually this is an opportunity to locate those stylesheets alongside the components that depend on them allowing for better local reasoning and an easier time ensuring you only load the stylesheets that you actually depend on.

Style libraries and style integrations with bundlers can also adopt this new capability so even if you don’t directly render your own stylesheets, you can still benefit as your tools are upgraded to use this feature.

For more details, read the docs for `<link>`[](/reference/react-dom/components/link) and `<style>`[](/reference/react-dom/components/style).

### Support for async scripts [](#support-for-async-scripts "Link for Support for async scripts ")

In HTML normal scripts (`<script src="...">`) and deferred scripts (`<script defer="" src="...">`) load in document order which makes rendering these kinds of scripts deep within your component tree challenging. Async scripts (`<script async="" src="...">`) however will load in arbitrary order.

In React 19 we’ve included better support for async scripts by allowing you to render them anywhere in your component tree, inside the components that actually depend on the script, without having to manage relocating and deduplicating script instances.

```


function MyComponent() {

 return (

  <div>

   <script async={true} src="..." />

   Hello World

  </div>

 )

}

function App() {

 <html>

  <body>

   <MyComponent>

   ...

   <MyComponent> // won't lead to duplicate script in the DOM

  </body>

 </html>

}


```


In all rendering environments, async scripts will be deduplicated so that React will only load and execute the script once even if it is rendered by multiple different components.

In Server Side Rendering, async scripts will be included in the `<head>` and prioritized behind more critical resources that block paint such as stylesheets, fonts, and image preloads.

For more details, read the docs for `<script>`[](/reference/react-dom/components/script).

### Support for preloading resources [](#support-for-preloading-resources "Link for Support for preloading resources ")

During initial document load and on client side updates, telling the Browser about resources that it will likely need to load as early as possible can have a dramatic effect on page performance.

React 19 includes a number of new APIs for loading and preloading Browser resources to make it as easy as possible to build great experiences that aren’t held back by inefficient resource loading.

```


import { prefetchDNS, preconnect, preload, preinit } from 'react-dom'

function MyComponent() {

 preinit('https://.../path/to/some/script.js', {as: 'script' }) // loads and executes this script eagerly

 preload('https://.../path/to/font.woff', { as: 'font' }) // preloads this font

 preload('https://.../path/to/stylesheet.css', { as: 'style' }) // preloads this stylesheet

 prefetchDNS('https://...') // when you may not actually request anything from this host

 preconnect('https://...') // when you will request something but aren't sure what

}


```


```


<!-- the above would result in the following DOM/HTML -->

<html>

 <head>

  <!-- links/scripts are prioritized by their utility to early loading, not call order -->

  <link rel="prefetch-dns" href="https://...">

  <link rel="preconnect" href="https://...">

  <link rel="preload" as="font" href="https://.../path/to/font.woff">

  <link rel="preload" as="style" href="https://.../path/to/stylesheet.css">

  <script async="" src="https://.../path/to/some/script.js"></script>

 </head>

 <body>

  ...

 </body>

</html>


```


These APIs can be used to optimize initial page loads by moving discovery of additional resources like fonts out of stylesheet loading. They can also make client updates faster by prefetching a list of resources used by an anticipated navigation and then eagerly preloading those resources on click or even on hover.

For more details see [Resource Preloading APIs](/reference/react-dom#resource-preloading-apis).

### Compatibility with third-party scripts and extensions [](#compatibility-with-third-party-scripts-and-extensions "Link for Compatibility with third-party scripts and extensions ")

We’ve improved hydration to account for third-party scripts and browser extensions.

When hydrating, if an element that renders on the client doesn’t match the element found in the HTML from the server, React will force a client re-render to fix up the content. Previously, if an element was inserted by third-party scripts or browser extensions, it would trigger a mismatch error and client render.

In React 19, unexpected tags in the `<head>` and `<body>` will be skipped over, avoiding the mismatch errors. If React needs to re-render the entire document due to an unrelated hydration mismatch, it will leave in place stylesheets inserted by third-party scripts and browser extensions.

### Better error reporting [](#error-handling "Link for Better error reporting ")

We improved error handling in React 19 to remove duplication and provide options for handling caught and uncaught errors. For example, when there’s an error in render caught by an Error Boundary, previously React would throw the error twice (once for the original error, then again after failing to automatically recover), and then call `console.error` with info about where the error occurred.

This resulted in three errors for every caught error:

Console

Uncaught Error: hit at Throws at renderWithHooks …

Uncaught Error: hit <-- Duplicate at Throws at renderWithHooks …

The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary.

In React 19, we log a single error with all the error information included:

Console

Error: hit at Throws at renderWithHooks … The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary. at ErrorBoundary at App

Additionally, we’ve added two new root options to complement `onRecoverableError`:

  * `onCaughtError`: called when React catches an error in an Error Boundary.
  * `onUncaughtError`: called when an error is thrown and not caught by an Error Boundary.
  * `onRecoverableError`: called when an error is thrown and automatically recovered.



For more info and examples, see the docs for `createRoot`[](/reference/react-dom/client/createRoot) and `hydrateRoot`[](/reference/react-dom/client/hydrateRoot).

### Support for Custom Elements [](#support-for-custom-elements "Link for Support for Custom Elements ")

React 19 adds full support for custom elements and passes all tests on [Custom Elements Everywhere](https://custom-elements-everywhere.com/).

In past versions, using Custom Elements in React has been difficult because React treated unrecognized props as attributes rather than properties. In React 19, we’ve added support for properties that works on the client and during SSR with the following strategy:

  * **Server Side Rendering** : props passed to a custom element will render as attributes if their type is a primitive value like `string`, `number`, or the value is `true`. Props with non-primitive types like `object`, `symbol`, `function`, or value `false` will be omitted.
  * **Client Side Rendering** : props that match a property on the Custom Element instance will be assigned as properties, otherwise they will be assigned as attributes.



Thanks to [Joey Arhar](https://github.com/josepharhar) for driving the design and implementation of Custom Element support in React.

#### How to upgrade [](#how-to-upgrade "Link for How to upgrade ")

See the [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide) for step-by-step instructions and a full list of breaking and notable changes.

_Note: this post was originally published 04/25/2024 and has been updated to 12/05/2024 with the stable release._

[ PreviousBlog](/blog)[NextReact Compiler Beta Release and Roadmap](/blog/2024/10/21/react-compiler-beta-release)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React Compiler Beta Release[](#undefined "Link for this heading")

October 21, 2024 by .

The React team is excited to share new updates:

  1. We’re publishing React Compiler Beta today, so that early adopters and library maintainers can try it and provide feedback.
  2. We’re officially supporting React Compiler for apps on React 17+, through an optional `react-compiler-runtime` package.
  3. We’re opening up public membership of the [React Compiler Working Group](https://github.com/reactwg/react-compiler) to prepare the community for gradual adoption of the compiler.



At [React Conf 2024](/blog/2024/05/22/react-conf-2024-recap), we announced the experimental release of React Compiler, a build-time tool that optimizes your React app through automatic memoization. [You can find an introduction to React Compiler here](/learn/react-compiler).

Since the first release, we’ve fixed numerous bugs reported by the React community, received several high quality bug fixes and contributions[1](#user-content-fn-1) to the compiler, made the compiler more resilient to the broad diversity of JavaScript patterns, and have continued to roll out the compiler more widely at Meta.

In this post, we want to share what’s next for React Compiler.

## Try React Compiler Beta today [](#try-react-compiler-beta-today "Link for Try React Compiler Beta today ")

At [React India 2024](https://www.youtube.com/watch?v=qd5yk2gxbtg), we shared an update on React Compiler. Today, we are excited to announce a new Beta release of React Compiler and ESLint plugin. New betas are published to npm using the `@beta` tag.

To install React Compiler Beta:

Terminal

Copy

npm install -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta

Or, if you’re using Yarn:

Terminal

Copy

yarn add -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta

You can watch talk at React India here:

## We recommend everyone use the React Compiler linter today [](#we-recommend-everyone-use-the-react-compiler-linter-today "Link for We recommend everyone use the React Compiler linter today ")

React Compiler’s ESLint plugin helps developers proactively identify and correct [Rules of React](/reference/rules) violations. **We strongly recommend everyone use the linter today**. The linter does not require that you have the compiler installed, so you can use it independently, even if you are not ready to try out the compiler.

To install the linter only:

Terminal

Copy

npm install -D eslint-plugin-react-compiler@beta

Or, if you’re using Yarn:

Terminal

Copy

yarn add -D eslint-plugin-react-compiler@beta

After installation you can enable the linter by [adding it to your ESLint config](/learn/react-compiler#installing-eslint-plugin-react-compiler). Using the linter helps identify Rules of React breakages, making it easier to adopt the compiler when it’s fully released.

## Backwards Compatibility [](#backwards-compatibility "Link for Backwards Compatibility ")

React Compiler produces code that depends on runtime APIs added in React 19, but we’ve since added support for the compiler to also work with React 17 and 18. If you are not on React 19 yet, in the Beta release you can now try out React Compiler by specifying a minimum `target` in your compiler config, and adding `react-compiler-runtime` as a dependency. [You can find docs on this here](/learn/react-compiler#using-react-compiler-with-react-17-or-18).

## Using React Compiler in libraries [](#using-react-compiler-in-libraries "Link for Using React Compiler in libraries ")

Our initial release was focused on identifying major issues with using the compiler in applications. We’ve gotten great feedback and have substantially improved the compiler since then. We’re now ready for broad feedback from the community, and for library authors to try out the compiler to improve performance and the developer experience of maintaining your library.

React Compiler can also be used to compile libraries. Because React Compiler needs to run on the original source code prior to any code transformations, it is not possible for an application’s build pipeline to compile the libraries they use. Hence, our recommendation is for library maintainers to independently compile and test their libraries with the compiler, and ship compiled code to npm.

Because your code is pre-compiled, users of your library will not need to have the compiler enabled in order to benefit from the automatic memoization applied to your library. If your library targets apps not yet on React 19, specify a minimum `target` and add `react-compiler-runtime` as a direct dependency. The runtime package will use the correct implementation of APIs depending on the application’s version, and polyfill the missing APIs if necessary.

[You can find more docs on this here.](/learn/react-compiler#using-the-compiler-on-libraries)

## Opening up React Compiler Working Group to everyone [](#opening-up-react-compiler-working-group-to-everyone "Link for Opening up React Compiler Working Group to everyone ")

We previously announced the invite-only [React Compiler Working Group](https://github.com/reactwg/react-compiler) at React Conf to provide feedback, ask questions, and collaborate on the compiler’s experimental release.

From today, together with the Beta release of React Compiler, we are opening up Working Group membership to everyone. The goal of the React Compiler Working Group is to prepare the ecosystem for a smooth, gradual adoption of React Compiler by existing applications and libraries. Please continue to file bug reports in the [React repo](https://github.com/facebook/react), but please leave feedback, ask questions, or share ideas in the [Working Group discussion forum](https://github.com/reactwg/react-compiler/discussions).

The core team will also use the discussions repo to share our research findings. As the Stable Release gets closer, any important information will also be posted on this forum.

## React Compiler at Meta [](#react-compiler-at-meta "Link for React Compiler at Meta ")

At [React Conf](/blog/2024/05/22/react-conf-2024-recap), we shared that our rollout of the compiler on Quest Store and Instagram were successful. Since then, we’ve deployed React Compiler across several more major web apps at Meta, including and [Threads](https://www.threads.net). That means if you’ve used any of these apps recently, you may have had your experience powered by the compiler. We were able to onboard these apps onto the compiler with few code changes required, in a monorepo with more than 100,000 React components.

We’ve seen notable performance improvements across all of these apps. As we’ve rolled out, we’re continuing to see results on the order of [the wins we shared previously at ReactConf](https://youtu.be/lyEKhv8-3n0?t=3223). These apps have already been heavily hand tuned and optimized by Meta engineers and React experts over the years, so even improvements on the order of a few percent are a huge win for us.

We also expected developer productivity wins from React Compiler. To measure this, we collaborated with our data science partners at Meta[2](#user-content-fn-2) to conduct a thorough statistical analysis of the impact of manual memoization on productivity. Before rolling out the compiler at Meta, we discovered that only about 8% of React pull requests used manual memoization and that these pull requests took 31-46% longer to author[3](#user-content-fn-3). This confirmed our intuition that manual memoization introduces cognitive overhead, and we anticipate that React Compiler will lead to more efficient code authoring and review. Notably, React Compiler also ensures that _all_ code is memoized by default, not just the (in our case) 8% where developers explicitly apply memoization.

## Roadmap to Stable [](#roadmap-to-stable "Link for Roadmap to Stable ")

_This is not a final roadmap, and is subject to change._

We intend to ship a Release Candidate of the compiler in the near future following the Beta release, when the majority of apps and libraries that follow the Rules of React have been proven to work well with the compiler. After a period of final feedback from the community, we plan on a Stable Release for the compiler. The Stable Release will mark the beginning of a new foundation for React, and all apps and libraries will be strongly recommended to use the compiler and ESLint plugin.

  * ✅ Experimental: Released at React Conf 2024, primarily for feedback from early adopters.
  * ✅ Public Beta: Available today, for feedback from the wider community.
  * 🚧 Release Candidate (RC): React Compiler works for the majority of rule-following apps and libraries without issue.
  * 🚧 General Availability: After final feedback period from the community.



These releases also include the compiler’s ESLint plugin, which surfaces diagnostics statically analyzed by the compiler. We plan to combine the existing eslint-plugin-react-hooks plugin with the compiler’s ESLint plugin, so only one plugin needs to be installed.

Post-Stable, we plan to add more compiler optimizations and improvements. This includes both continual improvements to automatic memoization, and new optimizations altogether, with minimal to no change of product code. Upgrading to each new release of the compiler is aimed to be straightforward, and each upgrade will continue to improve performance and add better handling of diverse JavaScript and React patterns.

Throughout this process, we also plan to prototype an IDE extension for React. It is still very early in research, so we expect to be able to share more of our findings with you in a future React Labs blog post.

Thanks to , , , [Alex Taylor](https://github.com/alexmckenley), , and for reviewing and editing this post.

## Footnotes[](#footnote-label "Link for Footnotes")

  1. Thanks [@nikeee](https://github.com/facebook/react/pulls?q=is%3Apr+author%3Anikeee), [@henryqdineen](https://github.com/facebook/react/pulls?q=is%3Apr+author%3Ahenryqdineen), [@TrickyPi](https://github.com/facebook/react/pulls?q=is%3Apr+author%3ATrickyPi), and several others for their contributions to the compiler. [↩](#user-content-fnref-1)

  2. Thanks for leading this study on React Compiler at Meta, and for reviewing this post. [↩](#user-content-fnref-2)

  3. After controlling on author tenure, diff length/complexity, and other potential confounding factors. [↩](#user-content-fnref-3)




[PreviousReact 19](/blog/2024/12/05/react-19)[NextReact Conf 2024 Recap](/blog/2024/05/22/react-conf-2024-recap)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React Conf 2024 Recap[](#undefined "Link for this heading")

May 22, 2024 by .

Last week we hosted React Conf 2024, a two-day conference in Henderson, Nevada where 700+ attendees gathered in-person to discuss the latest in UI engineering. This was our first in-person conference since 2019, and we were thrilled to be able to bring the community together again.

At React Conf 2024, we announced the [React 19 RC](/blog/2024/12/05/react-19), the [React Native New Architecture Beta](https://github.com/reactwg/react-native-new-architecture/discussions/189), and an experimental release of the [React Compiler](/learn/react-compiler). The community also took the stage to announce [React Router v7](https://remix.run/blog/merging-remix-and-react-router), [Universal Server Components](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=20765s) in Expo Router, React Server Components in [RedwoodJS](https://redwoodjs.com/blog/rsc-now-in-redwoodjs), and much more.

The entire [day 1](https://www.youtube.com/watch?v=T8TZQ6k4SLE) and [day 2](https://www.youtube.com/watch?v=0ckOUBiuxVY) streams are available online. In this post, we’ll summarize the talks and announcements from the event.

## Day 1 [](#day-1 "Link for Day 1 ")

_[Watch the full day 1 stream here.](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=973s)_

To kick off day 1, Meta CTO [Andrew “Boz” Bosworth](https://www.threads.net/@boztank) shared a welcome message followed by an introduction by , who manages the React Org at Meta, and our MC .

In the day 1 keynote, shared our goals and vision for React to make it easy for anyone to build great user experiences. followed with a State of React, where she shared that React was downloaded over 1 billion times in 2023, and that 37% of new developers learn to program with React. Finally, she highlighted the work of the React community to make React, React.

For more, check out these talks from the community later in the conference:

  * [Vanilla React](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=5542s) by 
  * [React Rhythm & Blues](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=12728s) by 
  * [RedwoodJS, now with React Server Components](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=26815s) by 
  * [Introducing Universal React Server Components in Expo Router](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=20765s) by 



Next in the keynote, and shared new features coming in React 19, and announced the React 19 RC which is ready for testing in production. Check out all the features in the [React 19 release post](/blog/2024/12/05/react-19), and see these talks for deep dives on the new features:

  * [What’s new in React 19](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=8880s) by 
  * [React Unpacked: A Roadmap to React 19](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=10112s) by 
  * [React 19 Deep Dive: Coordinating HTML](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=24916s) by 
  * [Enhancing Forms with React Server Components](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=25280s) by 
  * [React for Two Computers](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=18825s) by 
  * [And Now You Understand React Server Components](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=11256s) by 



Finally, we ended the keynote with , , and announcing that the React Compiler is now [Open Source](https://github.com/facebook/react/pull/29061), and sharing an experimental version of the React Compiler to try out.

For more information on using the Compiler and how it works, check out [the docs](/learn/react-compiler) and these talks:

  * [Forget About Memo](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=12020s) by 
  * [React Compiler Deep Dive](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=9313s) by and 



Watch the full day 1 keynote here:

## Day 2 [](#day-2 "Link for Day 2 ")

_[Watch the full day 2 stream here.](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=1720s)_

To kick off day 2, shared a welcome message, followed by a Thank You from and an introduction by our Chief Vibes Officer .

In the day 2 keynote, shared the State of React Native, including 78 million downloads in 2023. He also highlighted apps using React Native including 2000+ screens used inside of Meta; the product details page in Facebook Marketplace, which is visited more than 2 billion times per day; and part of the Microsoft Windows Start Menu and some features in almost every Microsoft Office product across mobile and desktop.

Nicola also highlighted all the work the community does to support React Native including libraries, frameworks, and multiple platforms. For more, check out these talks from the community:

  * [Extending React Native beyond Mobile and Desktop Apps](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=5798s) by and 
  * [Spatial computing with React](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=22525s) by 



continued the day 2 keynote by announcing that the React Native New Architecture is now in Beta and ready for apps to adopt in production. He shared new features and improvements in the new architecture, and shared the roadmap for the future of React Native. For more check out:

  * [Cross Platform React](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=26569s) by [Olga Zinoveva](https://github.com/SlyCaptainFlint) and 



Next in the keynote, Nicola announced that we are now recommending starting with a framework like Expo for all new apps created with React Native. With the change, he also announced a new React Native homepage and new Getting Started docs. You can view the new Getting Started guide in the [React Native docs](https://reactnative.dev/docs/next/environment-setup).

Finally, to end the keynote, shared the latest features and improvements in Expo, and how to get started developing with React Native using Expo.

Watch the full day 2 keynote here:

## Q&A [](#q-and-a "Link for Q&A ")

The React and React Native teams also ended each day with a Q&A session:

  * [React Q&A](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=27518s) hosted by 
  * [React Native Q&A](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=27935s) hosted by 



## And more… [](#and-more "Link for And more… ")

We also heard talks on accessibility, error reporting, css, and more:

  * [Demystifying accessibility in React apps](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=20655s) by 
  * [Pigment CSS, CSS in the server component age](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=21696s) by 
  * [Real-time React Server Components](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=24070s) by 
  * [Let’s break React Rules](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=25862s) by 
  * [Solve 100% of your errors](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=19881s) by [Ryan Albrecht](https://github.com/ryan953)



## Thank you [](#thank-you "Link for Thank you ")

Thank you to all the staff, speakers, and participants who made React Conf 2024 possible. There are too many to list, but we want to thank a few in particular.

Thank you to , the team at [Callstack](https://www.callstack.com/), and our React Team Developer Advocate for helping to plan the entire event; and to [Sunny Leggett](https://zeroslopeevents.com/about) and everyone from [Zero Slope](https://zeroslopeevents.com) for helping to organize the event.

Thank you for being our MC and Chief Vibes Officer; and to and for hosting the Q&A sessions.

Thank you and for welcoming us each day and providing direction on structure and content; and to for joining us with a special message during the after-party.

Thank you [Ricky Hanlon](https://www.youtube.com/watch?v=FxTZL2U-uKg&t=1263s) for providing detailed feedback on talks, working on slide designs, and generally filling in the gaps to sweat the details.

Thank you [Callstack](https://www.callstack.com/) for building the conference website; and to and the [Expo](https://expo.dev/) team for building the conference mobile app.

Thank you to all the sponsors who made the event possible: [Remix](https://remix.run/), [Amazon](https://developer.amazon.com/apps-and-games?cmp=US_2024_05_3P_React-Conf-2024&ch=prtnr&chlast=prtnr&pub=ref&publast=ref&type=org&typelast=org), [MUI](https://mui.com/), [Sentry](https://sentry.io/for/react/?utm_source=sponsored-conf&utm_medium=sponsored-event&utm_campaign=frontend-fy25q2-evergreen&utm_content=logo-reactconf2024-learnmore), [Abbott](https://www.jobs.abbott/software), [Expo](https://expo.dev/), [RedwoodJS](https://redwoodjs.com/), and [Vercel](https://vercel.com).

Thank you to the AV Team for the visuals, stage, and sound; and to the Westin Hotel for hosting us.

Thank you to all the speakers who shared their knowledge and experiences with the community.

Finally, thank you to everyone who attended in person and online to show what makes React, React. React is more than a library, it is a community, and it was inspiring to see everyone come together to share and learn together.

See you next time!

[PreviousReact Compiler Beta Release and Roadmap](/blog/2024/10/21/react-compiler-beta-release)[NextReact 19 RC](/blog/2024/04/25/react-19)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React v19[](#undefined "Link for this heading")

December 05, 2024 by [The React Team](/community/team)

### Note

### React 19 is now stable! [](#react-19-is-now-stable "Link for React 19 is now stable! ")

Additions since this post was originally shared with the React 19 RC in April:

  * **Pre-warming for suspended trees** : see [Improvements to Suspense](/blog/2024/04/25/react-19-upgrade-guide#improvements-to-suspense).
  * **React DOM static APIs** : see [New React DOM Static APIs](#new-react-dom-static-apis).



_The date for this post has been updated to reflect the stable release date._

React v19 is now available on npm!

In our [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide), we shared step-by-step instructions for upgrading your app to React 19. In this post, we’ll give an overview of the new features in React 19, and how you can adopt them.

  * [What’s new in React 19](#whats-new-in-react-19)
  * [Improvements in React 19](#improvements-in-react-19)
  * [How to upgrade](#how-to-upgrade)



For a list of breaking changes, see the [Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide).

## What’s new in React 19 [](#whats-new-in-react-19 "Link for What’s new in React 19 ")

### Actions [](#actions "Link for Actions ")

A common use case in React apps is to perform a data mutation and then update state in response. For example, when a user submits a form to change their name, you will make an API request, and then handle the response. In the past, you would need to handle pending states, errors, optimistic updates, and sequential requests manually.

For example, you could handle the pending and error state in `useState`:

```


// Before Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, setIsPending] = useState(false);

 const handleSubmit = async () => {

  setIsPending(true);

  const error = await updateName(name);

  setIsPending(false);

  if (error) {

   setError(error);

   return;

  } 

  redirect("/path");

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


In React 19, we’re adding support for using async functions in transitions to handle pending states, errors, forms, and optimistic updates automatically.

For example, you can use `useTransition` to handle the pending state for you:

```


// Using pending state from Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, startTransition] = useTransition();

 const handleSubmit = () => {

  startTransition(async () => {

   const error = await updateName(name);

   if (error) {

    setError(error);

    return;

   } 

   redirect("/path");

  })

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


The async transition will immediately set the `isPending` state to true, make the async request(s), and switch `isPending` to false after any transitions. This allows you to keep the current UI responsive and interactive while the data is changing.

### Note

#### By convention, functions that use async transitions are called “Actions”. [](#by-convention-functions-that-use-async-transitions-are-called-actions "Link for By convention, functions that use async transitions are called “Actions”. ")

Actions automatically manage submitting data for you:

  * **Pending state** : Actions provide a pending state that starts at the beginning of a request and automatically resets when the final state update is committed.
  * **Optimistic updates** : Actions support the new `useOptimistic`[](#new-hook-optimistic-updates) hook so you can show users instant feedback while the requests are submitting.
  * **Error handling** : Actions provide error handling so you can display Error Boundaries when a request fails, and revert optimistic updates to their original value automatically.
  * **Forms** : `<form>` elements now support passing functions to the `action` and `formAction` props. Passing functions to the `action` props use Actions by default and reset the form automatically after submission.



Building on top of Actions, React 19 introduces `useOptimistic`[](#new-hook-optimistic-updates) to manage optimistic updates, and a new hook `React.useActionState`[](#new-hook-useactionstate) to handle common cases for Actions. In `react-dom` we’re adding `<form>`[ Actions](#form-actions) to manage forms automatically and `useFormStatus`[](#new-hook-useformstatus) to support the common cases for Actions in forms.

In React 19, the above example can be simplified to:

```


// Using <form> Actions and useActionState

function ChangeName({ name, setName }) {

 const [error, submitAction, isPending] = useActionState(

  async (previousState, formData) => {

   const error = await updateName(formData.get("name"));

   if (error) {

    return error;

   }

   redirect("/path");

   return null;

  },

  null,

 );

 return (

  <form action={submitAction}>

   <input type="text" name="name" />

   <button type="submit" disabled={isPending}>Update</button>

   {error && <p>{error}</p>}

  </form>

 );

}


```


In the next section, we’ll break down each of the new Action features in React 19.

### New hook: `useActionState` [](#new-hook-useactionstate "Link for this heading")

To make the common cases easier for Actions, we’ve added a new hook called `useActionState`:

```


const [error, submitAction, isPending] = useActionState(

 async (previousState, newName) => {

  const error = await updateName(newName);

  if (error) {

   // You can return any result of the action.

   // Here, we return only the error.

   return error;

  }

  // handle success

  return null;

 },

 null,

);


```


`useActionState` accepts a function (the “Action”), and returns a wrapped Action to call. This works because Actions compose. When the wrapped Action is called, `useActionState` will return the last result of the Action as `data`, and the pending state of the Action as `pending`.

### Note

`React.useActionState` was previously called `ReactDOM.useFormState` in the Canary releases, but we’ve renamed it and deprecated `useFormState`.

See [#28491](https://github.com/facebook/react/pull/28491) for more info.

For more information, see the docs for `useActionState`[](/reference/react/useActionState).

### React DOM: `<form>` Actions [](#form-actions "Link for this heading")

Actions are also integrated with React 19’s new `<form>` features for `react-dom`. We’ve added support for passing functions as the `action` and `formAction` props of `<form>`, `<input>`, and `<button>` elements to automatically submit forms with Actions:

```


<form action={actionFunction}>


```


When a `<form>` Action succeeds, React will automatically reset the form for uncontrolled components. If you need to reset the `<form>` manually, you can call the new `requestFormReset` React DOM API.

For more information, see the `react-dom` docs for `<form>`[](/reference/react-dom/components/form), `<input>`[](/reference/react-dom/components/input), and `<button>`.

### React DOM: New hook: `useFormStatus` [](#new-hook-useformstatus "Link for this heading")

In design systems, it’s common to write design components that need access to information about the `<form>` they’re in, without drilling props down to the component. This can be done via Context, but to make the common case easier, we’ve added a new hook `useFormStatus`:

```


import {useFormStatus} from 'react-dom';

function DesignButton() {

 const {pending} = useFormStatus();

 return <button type="submit" disabled={pending} />

}


```


`useFormStatus` reads the status of the parent `<form>` as if the form was a Context provider.

For more information, see the `react-dom` docs for `useFormStatus`[](/reference/react-dom/hooks/useFormStatus).

### New hook: `useOptimistic` [](#new-hook-optimistic-updates "Link for this heading")

Another common UI pattern when performing a data mutation is to show the final state optimistically while the async request is underway. In React 19, we’re adding a new hook called `useOptimistic` to make this easier:

```


function ChangeName({currentName, onUpdateName}) {

 const [optimisticName, setOptimisticName] = useOptimistic(currentName);

 const submitAction = async formData => {

  const newName = formData.get("name");

  setOptimisticName(newName);

  const updatedName = await updateName(newName);

  onUpdateName(updatedName);

 };

 return (

  <form action={submitAction}>

   <p>Your name is: {optimisticName}</p>

   <p>

    <label>Change Name:</label>

    <input

     type="text"

     name="name"

     disabled={currentName !== optimisticName}

    />

   </p>

  </form>

 );

}


```


The `useOptimistic` hook will immediately render the `optimisticName` while the `updateName` request is in progress. When the update finishes or errors, React will automatically switch back to the `currentName` value.

For more information, see the docs for `useOptimistic`[](/reference/react/useOptimistic).

### New API: `use` [](#new-feature-use "Link for this heading")

In React 19 we’re introducing a new API to read resources in render: `use`.

For example, you can read a promise with `use`, and React will Suspend until the promise resolves:

```


import {use} from 'react';

function Comments({commentsPromise}) {

 // `use` will suspend until the promise resolves.

 const comments = use(commentsPromise);

 return comments.map(comment => <p key={comment.id}>{comment}</p>);

}

function Page({commentsPromise}) {

 // When `use` suspends in Comments,

 // this Suspense boundary will be shown.

 return (

  <Suspense fallback={<div>Loading...</div>}>

   <Comments commentsPromise={commentsPromise} />

  </Suspense>

 )

}


```


### Note

#### `use` does not support promises created in render. [](#use-does-not-support-promises-created-in-render "Link for this heading")

If you try to pass a promise created in render to `use`, React will warn:

Console

A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework.

To fix, you need to pass a promise from a suspense powered library or framework that supports caching for promises. In the future we plan to ship features to make it easier to cache promises in render.

You can also read context with `use`, allowing you to read Context conditionally such as after early returns:

```


import {use} from 'react';

import ThemeContext from './ThemeContext'

function Heading({children}) {

 if (children == null) {

  return null;

 }

 // This would not work with useContext

 // because of the early return.

 const theme = use(ThemeContext);

 return (

  <h1 style={{color: theme.color}}>

   {children}

  </h1>

 );

}


```


The `use` API can only be called in render, similar to hooks. Unlike hooks, `use` can be called conditionally. In the future we plan to support more ways to consume resources in render with `use`.

For more information, see the docs for `use`[](/reference/react/use).

## New React DOM Static APIs [](#new-react-dom-static-apis "Link for New React DOM Static APIs ")

We’ve added two new APIs to `react-dom/static` for static site generation:

  * `prerender`[](/reference/react-dom/static/prerender)
  * `prerenderToNodeStream`[](/reference/react-dom/static/prerenderToNodeStream)



These new APIs improve on `renderToString` by waiting for data to load for static HTML generation. They are designed to work with streaming environments like Node.js Streams and Web Streams. For example, in a Web Stream environment, you can prerender a React tree to static HTML with `prerender`:

```


import { prerender } from 'react-dom/static';

async function handler(request) {

 const {prelude} = await prerender(<App />, {

  bootstrapScripts: ['/main.js']

 });

 return new Response(prelude, {

  headers: { 'content-type': 'text/html' },

 });

}


```


Prerender APIs will wait for all data to load before returning the static HTML stream. Streams can be converted to strings, or sent with a streaming response. They do not support streaming content as it loads, which is supported by the existing [React DOM server rendering APIs](/reference/react-dom/server).

For more information, see [React DOM Static APIs](/reference/react-dom/static).

## React Server Components [](#react-server-components "Link for React Server Components ")

### Server Components [](#server-components "Link for Server Components ")

Server Components are a new option that allows rendering components ahead of time, before bundling, in an environment separate from your client application or SSR server. This separate environment is the “server” in React Server Components. Server Components can run once at build time on your CI server, or they can be run for each request using a web server.

React 19 includes all of the React Server Components features included from the Canary channel. This means libraries that ship with Server Components can now target React 19 as a peer dependency with a `react-server` [export condition](https://github.com/reactjs/rfcs/blob/main/text/0227-server-module-conventions.md#react-server-conditional-exports) for use in frameworks that support the [Full-stack React Architecture](/learn/start-a-new-react-project#which-features-make-up-the-react-teams-full-stack-architecture-vision).

### Note

#### How do I build support for Server Components? [](#how-do-i-build-support-for-server-components "Link for How do I build support for Server Components? ")

While React Server Components in React 19 are stable and will not break between minor versions, the underlying APIs used to implement a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x.

To support React Server Components as a bundler or framework, we recommend pinning to a specific React version, or using the Canary release. We will continue working with bundlers and frameworks to stabilize the APIs used to implement React Server Components in the future.

For more, see the docs for [React Server Components](/reference/rsc/server-components).

### Server Actions [](#server-actions "Link for Server Actions ")

Server Actions allow Client Components to call async functions executed on the server.

When a Server Action is defined with the `"use server"` directive, your framework will automatically create a reference to the server function, and pass that reference to the Client Component. When that function is called on the client, React will send a request to the server to execute the function, and return the result.

### Note

#### There is no directive for Server Components. [](#there-is-no-directive-for-server-components "Link for There is no directive for Server Components. ")

A common misunderstanding is that Server Components are denoted by `"use server"`, but there is no directive for Server Components. The `"use server"` directive is used for Server Actions.

For more info, see the docs for [Directives](/reference/rsc/directives).

Server Actions can be created in Server Components and passed as props to Client Components, or they can be imported and used in Client Components.

For more, see the docs for [React Server Actions](/reference/rsc/server-actions).

## Improvements in React 19 [](#improvements-in-react-19 "Link for Improvements in React 19 ")

### `ref` as a prop [](#ref-as-a-prop "Link for this heading")

Starting in React 19, you can now access `ref` as a prop for function components:

```


function MyInput({placeholder, ref}) {

 return <input placeholder={placeholder} ref={ref} />

}

//...

<MyInput ref={ref} />


```


New function components will no longer need `forwardRef`, and we will be publishing a codemod to automatically update your components to use the new `ref` prop. In future versions we will deprecate and remove `forwardRef`.

### Note

`refs` passed to classes are not passed as props since they reference the component instance.

### Diffs for hydration errors [](#diffs-for-hydration-errors "Link for Diffs for hydration errors ")

We also improved error reporting for hydration errors in `react-dom`. For example, instead of logging multiple errors in DEV without any information about the mismatch:

Console

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Uncaught Error: Text content does not match server-rendered HTML. at checkForUnmatchedText …

We now log a single message with a diff of the mismatch:

Console

Uncaught Error: Hydration failed because the server rendered HTML didn’t match the client. As a result this tree will be regenerated on the client. This can happen if an SSR-ed Client Component used: - A server/client branch `if (typeof window !== 'undefined')`. - Variable input such as `Date.now()` or `Math.random()` which changes each time it’s called. - Date formatting in a user’s locale which doesn’t match the server. - External changing data without sending a snapshot of it along with the HTML. - Invalid HTML tag nesting. It can also happen if the client has a browser extension installed which messes with the HTML before React loaded. <https://react.dev/link/hydration-mismatch> <App> <span> + Client - Server at throwOnHydrationMismatch …

### `<Context>` as a provider [](#context-as-a-provider "Link for this heading")

In React 19, you can render `<Context>` as a provider instead of `<Context.Provider>`:

```


const ThemeContext = createContext('');

function App({children}) {

 return (

  <ThemeContext value="dark">

   {children}

  </ThemeContext>

 ); 

}


```


New Context providers can use `<Context>` and we will be publishing a codemod to convert existing providers. In future versions we will deprecate `<Context.Provider>`.

### Cleanup functions for refs [](#cleanup-functions-for-refs "Link for Cleanup functions for refs ")

We now support returning a cleanup function from `ref` callbacks:

```


<input

 ref={(ref) => {

  // ref created

  // NEW: return a cleanup function to reset

  // the ref when element is removed from DOM.

  return () => {

   // ref cleanup

  };

 }}

/>


```


When the component unmounts, React will call the cleanup function returned from the `ref` callback. This works for DOM refs, refs to class components, and `useImperativeHandle`.

### Note

Previously, React would call `ref` functions with `null` when unmounting the component. If your `ref` returns a cleanup function, React will now skip this step.

In future versions, we will deprecate calling refs with `null` when unmounting components.

Due to the introduction of ref cleanup functions, returning anything else from a `ref` callback will now be rejected by TypeScript. The fix is usually to stop using implicit returns, for example:

```


- <div ref={current => (instance = current)} />

+ <div ref={current => {instance = current}} />


```


The original code returned the instance of the `HTMLDivElement` and TypeScript wouldn’t know if this was _supposed_ to be a cleanup function or if you didn’t want to return a cleanup function.

You can codemod this pattern with `no-implicit-ref-callback-return`[](https://github.com/eps1lon/types-react-codemod/#no-implicit-ref-callback-return).

### `useDeferredValue` initial value [](#use-deferred-value-initial-value "Link for this heading")

We’ve added an `initialValue` option to `useDeferredValue`:

```


function Search({deferredValue}) {

 // On initial render the value is ''.

 // Then a re-render is scheduled with the deferredValue.

 const value = useDeferredValue(deferredValue, '');

 return (

  <Results query={value} />

 );

}


```


When initialValue is provided, `useDeferredValue` will return it as `value` for the initial render of the component, and schedules a re-render in the background with the deferredValue returned.

For more, see `useDeferredValue`[](/reference/react/useDeferredValue).

### Support for Document Metadata [](#support-for-metadata-tags "Link for Support for Document Metadata ")

In HTML, document metadata tags like `<title>`, `<link>`, and `<meta>` are reserved for placement in the `<head>` section of the document. In React, the component that decides what metadata is appropriate for the app may be very far from the place where you render the `<head>` or React does not render the `<head>` at all. In the past, these elements would need to be inserted manually in an effect, or by libraries like `react-helmet`[](https://github.com/nfl/react-helmet), and required careful handling when server rendering a React application.

In React 19, we’re adding support for rendering document metadata tags in components natively:

```


function BlogPost({post}) {

 return (

  <article>

   <h1>{post.title}</h1>

   <title>{post.title}</title>

   <meta name="author" content="Josh" />

   <link rel="author" href="https://twitter.com/joshcstory/" />

   <meta name="keywords" content={post.keywords} />

   <p>

    Eee equals em-see-squared...

   </p>

  </article>

 );

}


```


When React renders this component, it will see the `<title>` `<link>` and `<meta>` tags, and automatically hoist them to the `<head>` section of document. By supporting these metadata tags natively, we’re able to ensure they work with client-only apps, streaming SSR, and Server Components.

### Note

#### You may still want a Metadata library [](#you-may-still-want-a-metadata-library "Link for You may still want a Metadata library ")

For simple use cases, rendering Document Metadata as tags may be suitable, but libraries can offer more powerful features like overriding generic metadata with specific metadata based on the current route. These features make it easier for frameworks and libraries like `react-helmet`[](https://github.com/nfl/react-helmet) to support metadata tags, rather than replace them.

For more info, see the docs for `<title>`[](/reference/react-dom/components/title), `<link>`[](/reference/react-dom/components/link), and `<meta>`[](/reference/react-dom/components/meta).

### Support for stylesheets [](#support-for-stylesheets "Link for Support for stylesheets ")

Stylesheets, both externally linked (`<link rel="stylesheet" href="...">`) and inline (`<style>...</style>`), require careful positioning in the DOM due to style precedence rules. Building a stylesheet capability that allows for composability within components is hard, so users often end up either loading all of their styles far from the components that may depend on them, or they use a style library which encapsulates this complexity.

In React 19, we’re addressing this complexity and providing even deeper integration into Concurrent Rendering on the Client and Streaming Rendering on the Server with built in support for stylesheets. If you tell React the `precedence` of your stylesheet it will manage the insertion order of the stylesheet in the DOM and ensure that the stylesheet (if external) is loaded before revealing content that depends on those style rules.

```


function ComponentOne() {

 return (

  <Suspense fallback="loading...">

   <link rel="stylesheet" href="foo" precedence="default" />

   <link rel="stylesheet" href="bar" precedence="high" />

   <article class="foo-class bar-class">

    {...}

   </article>

  </Suspense>

 )

}

function ComponentTwo() {

 return (

  <div>

   <p>{...}</p>

   <link rel="stylesheet" href="baz" precedence="default" /> <-- will be inserted between foo & bar

  </div>

 )

}


```


During Server Side Rendering React will include the stylesheet in the `<head>`, which ensures that the browser will not paint until it has loaded. If the stylesheet is discovered late after we’ve already started streaming, React will ensure that the stylesheet is inserted into the `<head>` on the client before revealing the content of a Suspense boundary that depends on that stylesheet.

During Client Side Rendering React will wait for newly rendered stylesheets to load before committing the render. If you render this component from multiple places within your application React will only include the stylesheet once in the document:

```


function App() {

 return <>

  <ComponentOne />

  ...

  <ComponentOne /> // won't lead to a duplicate stylesheet link in the DOM

 </>

}


```


For users accustomed to loading stylesheets manually this is an opportunity to locate those stylesheets alongside the components that depend on them allowing for better local reasoning and an easier time ensuring you only load the stylesheets that you actually depend on.

Style libraries and style integrations with bundlers can also adopt this new capability so even if you don’t directly render your own stylesheets, you can still benefit as your tools are upgraded to use this feature.

For more details, read the docs for `<link>`[](/reference/react-dom/components/link) and `<style>`[](/reference/react-dom/components/style).

### Support for async scripts [](#support-for-async-scripts "Link for Support for async scripts ")

In HTML normal scripts (`<script src="...">`) and deferred scripts (`<script defer="" src="...">`) load in document order which makes rendering these kinds of scripts deep within your component tree challenging. Async scripts (`<script async="" src="...">`) however will load in arbitrary order.

In React 19 we’ve included better support for async scripts by allowing you to render them anywhere in your component tree, inside the components that actually depend on the script, without having to manage relocating and deduplicating script instances.

```


function MyComponent() {

 return (

  <div>

   <script async={true} src="..." />

   Hello World

  </div>

 )

}

function App() {

 <html>

  <body>

   <MyComponent>

   ...

   <MyComponent> // won't lead to duplicate script in the DOM

  </body>

 </html>

}


```


In all rendering environments, async scripts will be deduplicated so that React will only load and execute the script once even if it is rendered by multiple different components.

In Server Side Rendering, async scripts will be included in the `<head>` and prioritized behind more critical resources that block paint such as stylesheets, fonts, and image preloads.

For more details, read the docs for `<script>`[](/reference/react-dom/components/script).

### Support for preloading resources [](#support-for-preloading-resources "Link for Support for preloading resources ")

During initial document load and on client side updates, telling the Browser about resources that it will likely need to load as early as possible can have a dramatic effect on page performance.

React 19 includes a number of new APIs for loading and preloading Browser resources to make it as easy as possible to build great experiences that aren’t held back by inefficient resource loading.

```


import { prefetchDNS, preconnect, preload, preinit } from 'react-dom'

function MyComponent() {

 preinit('https://.../path/to/some/script.js', {as: 'script' }) // loads and executes this script eagerly

 preload('https://.../path/to/font.woff', { as: 'font' }) // preloads this font

 preload('https://.../path/to/stylesheet.css', { as: 'style' }) // preloads this stylesheet

 prefetchDNS('https://...') // when you may not actually request anything from this host

 preconnect('https://...') // when you will request something but aren't sure what

}


```


```


<!-- the above would result in the following DOM/HTML -->

<html>

 <head>

  <!-- links/scripts are prioritized by their utility to early loading, not call order -->

  <link rel="prefetch-dns" href="https://...">

  <link rel="preconnect" href="https://...">

  <link rel="preload" as="font" href="https://.../path/to/font.woff">

  <link rel="preload" as="style" href="https://.../path/to/stylesheet.css">

  <script async="" src="https://.../path/to/some/script.js"></script>

 </head>

 <body>

  ...

 </body>

</html>


```


These APIs can be used to optimize initial page loads by moving discovery of additional resources like fonts out of stylesheet loading. They can also make client updates faster by prefetching a list of resources used by an anticipated navigation and then eagerly preloading those resources on click or even on hover.

For more details see [Resource Preloading APIs](/reference/react-dom#resource-preloading-apis).

### Compatibility with third-party scripts and extensions [](#compatibility-with-third-party-scripts-and-extensions "Link for Compatibility with third-party scripts and extensions ")

We’ve improved hydration to account for third-party scripts and browser extensions.

When hydrating, if an element that renders on the client doesn’t match the element found in the HTML from the server, React will force a client re-render to fix up the content. Previously, if an element was inserted by third-party scripts or browser extensions, it would trigger a mismatch error and client render.

In React 19, unexpected tags in the `<head>` and `<body>` will be skipped over, avoiding the mismatch errors. If React needs to re-render the entire document due to an unrelated hydration mismatch, it will leave in place stylesheets inserted by third-party scripts and browser extensions.

### Better error reporting [](#error-handling "Link for Better error reporting ")

We improved error handling in React 19 to remove duplication and provide options for handling caught and uncaught errors. For example, when there’s an error in render caught by an Error Boundary, previously React would throw the error twice (once for the original error, then again after failing to automatically recover), and then call `console.error` with info about where the error occurred.

This resulted in three errors for every caught error:

Console

Uncaught Error: hit at Throws at renderWithHooks …

Uncaught Error: hit <-- Duplicate at Throws at renderWithHooks …

The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary.

In React 19, we log a single error with all the error information included:

Console

Error: hit at Throws at renderWithHooks … The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary. at ErrorBoundary at App

Additionally, we’ve added two new root options to complement `onRecoverableError`:

  * `onCaughtError`: called when React catches an error in an Error Boundary.
  * `onUncaughtError`: called when an error is thrown and not caught by an Error Boundary.
  * `onRecoverableError`: called when an error is thrown and automatically recovered.



For more info and examples, see the docs for `createRoot`[](/reference/react-dom/client/createRoot) and `hydrateRoot`[](/reference/react-dom/client/hydrateRoot).

### Support for Custom Elements [](#support-for-custom-elements "Link for Support for Custom Elements ")

React 19 adds full support for custom elements and passes all tests on [Custom Elements Everywhere](https://custom-elements-everywhere.com/).

In past versions, using Custom Elements in React has been difficult because React treated unrecognized props as attributes rather than properties. In React 19, we’ve added support for properties that works on the client and during SSR with the following strategy:

  * **Server Side Rendering** : props passed to a custom element will render as attributes if their type is a primitive value like `string`, `number`, or the value is `true`. Props with non-primitive types like `object`, `symbol`, `function`, or value `false` will be omitted.
  * **Client Side Rendering** : props that match a property on the Custom Element instance will be assigned as properties, otherwise they will be assigned as attributes.



Thanks to [Joey Arhar](https://github.com/josepharhar) for driving the design and implementation of Custom Element support in React.

#### How to upgrade [](#how-to-upgrade "Link for How to upgrade ")

See the [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide) for step-by-step instructions and a full list of breaking and notable changes.

_Note: this post was originally published 04/25/2024 and has been updated to 12/05/2024 with the stable release._

[ PreviousBlog](/blog)[NextReact Compiler Beta Release and Roadmap](/blog/2024/10/21/react-compiler-beta-release)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Installation[](#undefined "Link for this heading")

React has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.

### In this chapter

  * [How to start a new React project](/learn/start-a-new-react-project)
  * [How to add React to an existing project](/learn/add-react-to-an-existing-project)
  * [How to set up your editor](/learn/editor-setup)
  * [How to install React Developer Tools](/learn/react-developer-tools)



## Try React [](#try-react "Link for Try React ")

You don’t need to install anything to play with React. Try editing this sandbox!

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

9

1

2

3

4

5

6

7

8

function Greeting({ name }) {

return <h1>Hello, {name}</h1>;

}

export default function App() {

return <Greeting name="world" />

}

You can edit it directly or open it in a new tab by pressing the “Fork” button in the upper right corner.

Most pages in the React documentation contain sandboxes like this. Outside of the React documentation, there are many online sandboxes that support React: for example, [CodeSandbox](https://codesandbox.io/s/new), [StackBlitz](https://stackblitz.com/fork/react), or [CodePen.](https://codepen.io/pen?template=QWYVwWN)

### Try React locally [](#try-react-locally "Link for Try React locally ")

To try React locally on your computer, [download this HTML page.](https://gist.githubusercontent.com/gaearon/0275b1e1518599bbeafcde4722e79ed1/raw/db72dcbf3384ee1708c4a07d3be79860db04bff0/example.html) Open it in your editor and in your browser!

## Start a new React project [](#start-a-new-react-project "Link for Start a new React project ")

If you want to build an app or a website fully with React, [start a new React project.](/learn/start-a-new-react-project)

## Add React to an existing project [](#add-react-to-an-existing-project "Link for Add React to an existing project ")

If want to try using React in your existing app or a website, [add React to an existing project.](/learn/add-react-to-an-existing-project)

## Next steps [](#next-steps "Link for Next steps ")

Head to the [Quick Start](/learn) guide for a tour of the most important React concepts you will encounter every day.

[PreviousThinking in React](/learn/thinking-in-react)[NextStart a New React Project](/learn/start-a-new-react-project)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Try React ](#try-react)
  * [Try React locally ](#try-react-locally)
  * [Start a new React project ](#start-a-new-react-project)
  * [Add React to an existing project ](#add-react-to-an-existing-project)
  * [Next steps ](#next-steps)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Describing the UI[](#undefined "Link for this heading")

React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable _components._ From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.

### In this chapter

  * [How to write your first React component](/learn/your-first-component)
  * [When and how to create multi-component files](/learn/importing-and-exporting-components)
  * [How to add markup to JavaScript with JSX](/learn/writing-markup-with-jsx)
  * [How to use curly braces with JSX to access JavaScript functionality from your components](/learn/javascript-in-jsx-with-curly-braces)
  * [How to configure components with props](/learn/passing-props-to-a-component)
  * [How to conditionally render components](/learn/conditional-rendering)
  * [How to render multiple components at a time](/learn/rendering-lists)
  * [How to avoid confusing bugs by keeping components pure](/learn/keeping-components-pure)
  * [Why understanding your UI as trees is useful](/learn/understanding-your-ui-as-a-tree)



## Your first component [](#your-first-component "Link for Your first component ")

React applications are built from isolated pieces of UI called _components_. A React component is a JavaScript function that you can sprinkle with markup. Components can be as small as a button, or as large as an entire page. Here is a `Gallery` component rendering three `Profile` components:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

99

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

function Profile() {

return (

<img

src="https://i.imgur.com/MK3eW3As.jpg"

alt="Katherine Johnson"

/>

);

}

export default function Gallery() {

return (

<section>

<h1>Amazing scientists</h1>

<Profile />

<Profile />

<Profile />

</section>

);

}

Show more

## Ready to learn this topic?

Read **[Your First Component](/learn/your-first-component)** to learn how to declare and use React components.

[Read More](/learn/your-first-component)

## Importing and exporting components [](#importing-and-exporting-components "Link for Importing and exporting components ")

You can declare many components in one file, but large files can get difficult to navigate. To solve this, you can _export_ a component into its own file, and then _import_ that component from another file:

Gallery.jsProfile.js

Gallery.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import Profile from './Profile.js';
export default function Gallery() {
 return (
  <section>
   <h1>Amazing scientists</h1>
   <Profile />
   <Profile />
   <Profile />
  </section>
 );
}

```


## Ready to learn this topic?

Read **[Importing and Exporting Components](/learn/importing-and-exporting-components)** to learn how to split components into their own files.

[Read More](/learn/importing-and-exporting-components)

## Writing markup with JSX [](#writing-markup-with-jsx "Link for Writing markup with JSX ")

Each React component is a JavaScript function that may contain some markup that React renders into the browser. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information.

If we paste existing HTML markup into a React component, it won’t always work:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
export default function TodoList() {
 return (
  // This doesn't quite work!
  <h1>Hedy Lamarr's Todos</h1>
  <img
   src="https://i.imgur.com/yXOvdOSs.jpg"
   alt="Hedy Lamarr"
   class="photo"
  >
  <ul>
   <li>Invent new traffic lights
   <li>Rehearse a movie scene
   <li>Improve spectrum technology
  </ul>

```


Show more

If you have existing HTML like this, you can fix it using a [converter](https://transform.tools/html-to-jsx):

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
export default function TodoList() {
 return (
  <>
   <h1>Hedy Lamarr's Todos</h1>
   <img
    src="https://i.imgur.com/yXOvdOSs.jpg"
    alt="Hedy Lamarr"
    className="photo"
   />
   <ul>
    <li>Invent new traffic lights</li>
    <li>Rehearse a movie scene</li>
    <li>Improve spectrum technology</li>
   </ul>
  </>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Writing Markup with JSX](/learn/writing-markup-with-jsx)** to learn how to write valid JSX.

[Read More](/learn/writing-markup-with-jsx)

## JavaScript in JSX with curly braces [](#javascript-in-jsx-with-curly-braces "Link for JavaScript in JSX with curly braces ")

JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to “open a window” to JavaScript:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
const person = {
 name: 'Gregorio Y. Zara',
 theme: {
  backgroundColor: 'black',
  color: 'pink'
 }
};
export default function TodoList() {
 return (
  <div style={person.theme}>
   <h1>{person.name}'s Todos</h1>
   <img
    className="avatar"
    src="https://i.imgur.com/7vQD0fPs.jpg"
    alt="Gregorio Y. Zara"
   />
   <ul>
    <li>Improve the videophone</li>
    <li>Prepare aeronautics lectures</li>
    <li>Work on the alcohol-fuelled engine</li>
   </ul>
  </div>
 );
}

```


Show more

## Ready to learn this topic?

Read **[JavaScript in JSX with Curly Braces](/learn/javascript-in-jsx-with-curly-braces)** to learn how to access JavaScript data from JSX.

[Read More](/learn/javascript-in-jsx-with-curly-braces)

## Passing props to a component [](#passing-props-to-a-component "Link for Passing props to a component ")

React components use _props_ to communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, functions, and even JSX!

App.jsutils.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { getImageUrl } from './utils.js'
export default function Profile() {
 return (
  <Card>
   <Avatar
    size={100}
    person={{
     name: 'Katsuko Saruhashi',
     imageId: 'YfeOqp2'
    }}
   />
  </Card>
 );
}
function Avatar({ person, size }) {
 return (
  <img
   className="avatar"
   src={getImageUrl(person)}
   alt={person.name}
   width={size}
   height={size}
  />
 );
}
function Card({ children }) {
 return (
  <div className="card">
   {children}
  </div>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Passing Props to a Component](/learn/passing-props-to-a-component)** to learn how to pass and read props.

[Read More](/learn/passing-props-to-a-component)

## Conditional rendering [](#conditional-rendering "Link for Conditional rendering ")

Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like `if` statements, `&&`, and `? :` operators.

In this example, the JavaScript `&&` operator is used to conditionally render a checkmark:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
function Item({ name, isPacked }) {
 return (
  <li className="item">
   {name} {isPacked && '✅'}
  </li>
 );
}
export default function PackingList() {
 return (
  <section>
   <h1>Sally Ride's Packing List</h1>
   <ul>
    <Item
     isPacked={true}
     name="Space suit"
    />
    <Item
     isPacked={true}
     name="Helmet with a golden leaf"
    />
    <Item
     isPacked={false}
     name="Photo of Tam"
    />
   </ul>
  </section>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Conditional Rendering](/learn/conditional-rendering)** to learn the different ways to render content conditionally.

[Read More](/learn/conditional-rendering)

## Rendering lists [](#rendering-lists "Link for Rendering lists ")

You will often want to display multiple similar components from a collection of data. You can use JavaScript’s `filter()` and `map()` with React to filter and transform your array of data into an array of components.

For each array item, you will need to specify a `key`. Usually, you will want to use an ID from the database as a `key`. Keys let React keep track of each item’s place in the list even if the list changes.

App.jsdata.jsutils.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { people } from './data.js';
import { getImageUrl } from './utils.js';
export default function List() {
 const listItems = people.map(person =>
  <li key={person.id}>
   <img
    src={getImageUrl(person)}
    alt={person.name}
   />
   <p>
    <b>{person.name}:</b>
    {' ' + person.profession + ' '}
    known for {person.accomplishment}
   </p>
  </li>
 );
 return (
  <article>
   <h1>Scientists</h1>
   <ul>{listItems}</ul>
  </article>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Rendering Lists](/learn/rendering-lists)** to learn how to render a list of components, and how to choose a key.

[Read More](/learn/rendering-lists)

## Keeping components pure [](#keeping-components-pure "Link for Keeping components pure ")

Some JavaScript functions are _pure._ A pure function:

  * **Minds its own business.** It does not change any objects or variables that existed before it was called.
  * **Same inputs, same output.** Given the same inputs, a pure function should always return the same result.



By strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. Here is an example of an impure component:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
let guest = 0;
function Cup() {
 // Bad: changing a preexisting variable!
 guest = guest + 1;
 return <h2>Tea cup for guest #{guest}</h2>;
}
export default function TeaSet() {
 return (
  <>
   <Cup />
   <Cup />
   <Cup />
  </>
 );
}

```


Show more

You can make this component pure by passing a prop instead of modifying a preexisting variable:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
function Cup({ guest }) {
 return <h2>Tea cup for guest #{guest}</h2>;
}
export default function TeaSet() {
 return (
  <>
   <Cup guest={1} />
   <Cup guest={2} />
   <Cup guest={3} />
  </>
 );
}

```


## Ready to learn this topic?

Read **[Keeping Components Pure](/learn/keeping-components-pure)** to learn how to write components as pure, predictable functions.

[Read More](/learn/keeping-components-pure)

## Your UI as a tree [](#your-ui-as-a-tree "Link for Your UI as a tree ")

React uses trees to model the relationships between components and modules.

A React render tree is a representation of the parent and child relationship between components.

An example React render tree.

Components near the top of the tree, near the root component, are considered top-level components. Components with no child components are leaf components. This categorization of components is useful for understanding data flow and rendering performance.

Modelling the relationship between JavaScript modules is another useful way to understand your app. We refer to it as a module dependency tree.

An example module dependency tree.

A dependency tree is often used by build tools to bundle all the relevant JavaScript code for the client to download and render. A large bundle size regresses user experience for React apps. Understanding the module dependency tree is helpful to debug such issues.

## Ready to learn this topic?

Read **[Your UI as a Tree](/learn/understanding-your-ui-as-a-tree)** to learn how to create a render and module dependency trees for a React app and how they’re useful mental models for improving user experience and performance.

[Read More](/learn/understanding-your-ui-as-a-tree)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Your First Component](/learn/your-first-component) to start reading this chapter page by page!

Or, if you’re already familiar with these topics, why not read about [Adding Interactivity](/learn/adding-interactivity)?

[NextYour First Component](/learn/your-first-component)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Your first component ](#your-first-component)
  * [Importing and exporting components ](#importing-and-exporting-components)
  * [Writing markup with JSX ](#writing-markup-with-jsx)
  * [JavaScript in JSX with curly braces ](#javascript-in-jsx-with-curly-braces)
  * [Passing props to a component ](#passing-props-to-a-component)
  * [Conditional rendering ](#conditional-rendering)
  * [Rendering lists ](#rendering-lists)
  * [Keeping components pure ](#keeping-components-pure)
  * [Your UI as a tree ](#your-ui-as-a-tree)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Adding Interactivity[](#undefined "Link for this heading")

Some things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is called _state._ You can add state to any component, and update it as needed. In this chapter, you’ll learn how to write components that handle interactions, update their state, and display different output over time.

### In this chapter

  * [How to handle user-initiated events](/learn/responding-to-events)
  * [How to make components “remember” information with state](/learn/state-a-components-memory)
  * [How React updates the UI in two phases](/learn/render-and-commit)
  * [Why state doesn’t update right after you change it](/learn/state-as-a-snapshot)
  * [How to queue multiple state updates](/learn/queueing-a-series-of-state-updates)
  * [How to update an object in state](/learn/updating-objects-in-state)
  * [How to update an array in state](/learn/updating-arrays-in-state)



## Responding to events [](#responding-to-events "Link for Responding to events ")

React lets you add _event handlers_ to your JSX. Event handlers are your own functions that will be triggered in response to user interactions like clicking, hovering, focusing on form inputs, and so on.

Built-in components like `<button>` only support built-in browser events like `onClick`. However, you can also create your own components, and give their event handler props any application-specific names that you like.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
export default function App() {
 return (
  <Toolbar
   onPlayMovie={() => alert('Playing!')}
   onUploadImage={() => alert('Uploading!')}
  />
 );
}
function Toolbar({ onPlayMovie, onUploadImage }) {
 return (
  <div>
   <Button onClick={onPlayMovie}>
    Play Movie
   </Button>
   <Button onClick={onUploadImage}>
    Upload Image
   </Button>
  </div>
 );
}
function Button({ onClick, children }) {
 return (
  <button onClick={onClick}>
   {children}
  </button>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Responding to Events](/learn/responding-to-events)** to learn how to add event handlers.

[Read More](/learn/responding-to-events)

## State: a component’s memory [](#state-a-components-memory "Link for State: a component’s memory ")

Components often need to change what’s on the screen as a result of an interaction. Typing into the form should update the input field, clicking “next” on an image carousel should change which image is displayed, clicking “buy” puts a product in the shopping cart. Components need to “remember” things: the current input value, the current image, the shopping cart. In React, this kind of component-specific memory is called _state._

You can add state to a component with a `useState`[](/reference/react/useState) Hook. _Hooks_ are special functions that let your components use React features (state is one of those features). The `useState` Hook lets you declare a state variable. It takes the initial state and returns a pair of values: the current state, and a state setter function that lets you update it.

```


const [index, setIndex] = useState(0);

const [showMore, setShowMore] = useState(false);


```


Here is how an image gallery uses and updates state on click:

App.jsdata.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
import { sculptureList } from './data.js';
export default function Gallery() {
 const [index, setIndex] = useState(0);
 const [showMore, setShowMore] = useState(false);
 const hasNext = index < sculptureList.length - 1;
 function handleNextClick() {
  if (hasNext) {
   setIndex(index + 1);
  } else {
   setIndex(0);
  }
 }
 function handleMoreClick() {
  setShowMore(!showMore);
 }
 let sculpture = sculptureList[index];
 return (
  <>
   <button onClick={handleNextClick}>
    Next
   </button>
   <h2>
    <i>{sculpture.name} </i>
    by {sculpture.artist}
   </h2>
   <h3>
    ({index + 1} of {sculptureList.length})
   </h3>
   <button onClick={handleMoreClick}>
    {showMore ? 'Hide' : 'Show'} details
   </button>
   {showMore && <p>{sculpture.description}</p>}
   <img
    src={sculpture.url}
    alt={sculpture.alt}
   />
  </>
 );
}

```


Show more

## Ready to learn this topic?

Read **[State: A Component’s Memory](/learn/state-a-components-memory)** to learn how to remember a value and update it on interaction.

[Read More](/learn/state-a-components-memory)

## Render and commit [](#render-and-commit "Link for Render and commit ")

Before your components are displayed on the screen, they must be rendered by React. Understanding the steps in this process will help you think about how your code executes and explain its behavior.

Imagine that your components are cooks in the kitchen, assembling tasty dishes from ingredients. In this scenario, React is the waiter who puts in requests from customers and brings them their orders. This process of requesting and serving UI has three steps:

  1. **Triggering** a render (delivering the diner’s order to the kitchen)
  2. **Rendering** the component (preparing the order in the kitchen)
  3. **Committing** to the DOM (placing the order on the table)



  1. Trigger
  2. Render
  3. Commit



Illustrated by [Rachel Lee Nabors](https://nearestnabors.com/)

## Ready to learn this topic?

Read **[Render and Commit](/learn/render-and-commit)** to learn the lifecycle of a UI update.

[Read More](/learn/render-and-commit)

## State as a snapshot [](#state-as-a-snapshot "Link for State as a snapshot ")

Unlike regular JavaScript variables, React state behaves more like a snapshot. Setting it does not change the state variable you already have, but instead triggers a re-render. This can be surprising at first!

```


console.log(count); // 0

setCount(count + 1); // Request a re-render with 1

console.log(count); // Still 0!


```


This behavior helps you avoid subtle bugs. Here is a little chat app. Try to guess what happens if you press “Send” first and _then_ change the recipient to Bob. Whose name will appear in the `alert` five seconds later?

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [to, setTo] = useState('Alice');
 const [message, setMessage] = useState('Hello');
 function handleSubmit(e) {
  e.preventDefault();
  setTimeout(() => {
   alert(`You said ${message} to ${to}`);
  }, 5000);
 }
 return (
  <form onSubmit={handleSubmit}>
   <label>
    To:{' '}
    <select
     value={to}
     onChange={e => setTo(e.target.value)}>
     <option value="Alice">Alice</option>
     <option value="Bob">Bob</option>
    </select>
   </label>
   <textarea
    placeholder="Message"
    value={message}
    onChange={e => setMessage(e.target.value)}
   />
   <button type="submit">Send</button>
  </form>
 );
}

```


Show more

## Ready to learn this topic?

Read **[State as a Snapshot](/learn/state-as-a-snapshot)** to learn why state appears “fixed” and unchanging inside the event handlers.

[Read More](/learn/state-as-a-snapshot)

## Queueing a series of state updates [](#queueing-a-series-of-state-updates "Link for Queueing a series of state updates ")

This component is buggy: clicking “+3” increments the score only once.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Counter() {
 const [score, setScore] = useState(0);
 function increment() {
  setScore(score + 1);
 }
 return (
  <>
   <button onClick={() => increment()}>+1</button>
   <button onClick={() => {
    increment();
    increment();
    increment();
   }}>+3</button>
   <h1>Score: {score}</h1>
  </>
 )
}

```


Show more

[State as a Snapshot](/learn/state-as-a-snapshot) explains why this is happening. Setting state requests a new re-render, but does not change it in the already running code. So `score` continues to be `0` right after you call `setScore(score + 1)`.

```


console.log(score); // 0

setScore(score + 1); // setScore(0 + 1);

console.log(score); // 0

setScore(score + 1); // setScore(0 + 1);

console.log(score); // 0

setScore(score + 1); // setScore(0 + 1);

console.log(score); // 0


```


You can fix this by passing an _updater function_ when setting state. Notice how replacing `setScore(score + 1)` with `setScore(s => s + 1)` fixes the “+3” button. This lets you queue multiple state updates.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Counter() {
 const [score, setScore] = useState(0);
 function increment() {
  setScore(s => s + 1);
 }
 return (
  <>
   <button onClick={() => increment()}>+1</button>
   <button onClick={() => {
    increment();
    increment();
    increment();
   }}>+3</button>
   <h1>Score: {score}</h1>
  </>
 )
}

```


Show more

## Ready to learn this topic?

Read **[Queueing a Series of State Updates](/learn/queueing-a-series-of-state-updates)** to learn how to queue a sequence of state updates.

[Read More](/learn/queueing-a-series-of-state-updates)

## Updating objects in state [](#updating-objects-in-state "Link for Updating objects in state ")

State can hold any kind of JavaScript value, including objects. But you shouldn’t change objects and arrays that you hold in the React state directly. Instead, when you want to update an object and array, you need to create a new one (or make a copy of an existing one), and then update the state to use that copy.

Usually, you will use the `...` spread syntax to copy objects and arrays that you want to change. For example, updating a nested object could look like this:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [person, setPerson] = useState({
  name: 'Niki de Saint Phalle',
  artwork: {
   title: 'Blue Nana',
   city: 'Hamburg',
   image: 'https://i.imgur.com/Sd1AgUOm.jpg',
  }
 });
 function handleNameChange(e) {
  setPerson({
   ...person,
   name: e.target.value
  });
 }
 function handleTitleChange(e) {
  setPerson({
   ...person,
   artwork: {
    ...person.artwork,
    title: e.target.value
   }
  });
 }
 function handleCityChange(e) {
  setPerson({
   ...person,
   artwork: {
    ...person.artwork,
    city: e.target.value
   }
  });
 }
 function handleImageChange(e) {
  setPerson({
   ...person,
   artwork: {
    ...person.artwork,
    image: e.target.value
   }
  });
 }
 return (
  <>
   <label>
    Name:
    <input
     value={person.name}
     onChange={handleNameChange}
    />
   </label>
   <label>
    Title:
    <input
     value={person.artwork.title}
     onChange={handleTitleChange}
    />
   </label>
   <label>
    City:
    <input
     value={person.artwork.city}
     onChange={handleCityChange}
    />
   </label>
   <label>
    Image:
    <input
     value={person.artwork.image}
     onChange={handleImageChange}
    />
   </label>
   <p>
    <i>{person.artwork.title}</i>
    {' by '}
    {person.name}
    <br />
    (located in {person.artwork.city})
   </p>
   <img
    src={person.artwork.image}
    alt={person.artwork.title}
   />
  </>
 );
}

```


Show more

If copying objects in code gets tedious, you can use a library like [Immer](https://github.com/immerjs/use-immer) to reduce repetitive code:

package.jsonApp.js

package.json

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
{
 "dependencies": {
  "immer": "1.7.3",
  "react": "latest",
  "react-dom": "latest",
  "react-scripts": "latest",
  "use-immer": "0.5.1"
 },
 "scripts": {
  "start": "react-scripts start",
  "build": "react-scripts build",
  "test": "react-scripts test --env=jsdom",
  "eject": "react-scripts eject"
 },
 "devDependencies": {}
}
```


## Ready to learn this topic?

Read **[Updating Objects in State](/learn/updating-objects-in-state)** to learn how to update objects correctly.

[Read More](/learn/updating-objects-in-state)

## Updating arrays in state [](#updating-arrays-in-state "Link for Updating arrays in state ")

Arrays are another type of mutable JavaScript objects you can store in state and should treat as read-only. Just like with objects, when you want to update an array stored in state, you need to create a new one (or make a copy of an existing one), and then set state to use the new array:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
const initialList = [
 { id: 0, title: 'Big Bellies', seen: false },
 { id: 1, title: 'Lunar Landscape', seen: false },
 { id: 2, title: 'Terracotta Army', seen: true },
];
export default function BucketList() {
 const [list, setList] = useState(
  initialList
 );
 function handleToggle(artworkId, nextSeen) {
  setList(list.map(artwork => {
   if (artwork.id === artworkId) {
    return { ...artwork, seen: nextSeen };
   } else {
    return artwork;
   }
  }));
 }
 return (
  <>
   <h1>Art Bucket List</h1>
   <h2>My list of art to see:</h2>
   <ItemList
    artworks={list}
    onToggle={handleToggle} />
  </>
 );
}
function ItemList({ artworks, onToggle }) {
 return (
  <ul>
   {artworks.map(artwork => (
    <li key={artwork.id}>
     <label>
      <input
       type="checkbox"
       checked={artwork.seen}
       onChange={e => {
        onToggle(
         artwork.id,
         e.target.checked
        );
       }}
      />
      {artwork.title}
     </label>
    </li>
   ))}
  </ul>
 );
}

```


Show more

If copying arrays in code gets tedious, you can use a library like [Immer](https://github.com/immerjs/use-immer) to reduce repetitive code:

package.jsonApp.js

package.json

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
{
 "dependencies": {
  "immer": "1.7.3",
  "react": "latest",
  "react-dom": "latest",
  "react-scripts": "latest",
  "use-immer": "0.5.1"
 },
 "scripts": {
  "start": "react-scripts start",
  "build": "react-scripts build",
  "test": "react-scripts test --env=jsdom",
  "eject": "react-scripts eject"
 },
 "devDependencies": {}
}
```


## Ready to learn this topic?

Read **[Updating Arrays in State](/learn/updating-arrays-in-state)** to learn how to update arrays correctly.

[Read More](/learn/updating-arrays-in-state)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Responding to Events](/learn/responding-to-events) to start reading this chapter page by page!

Or, if you’re already familiar with these topics, why not read about [Managing State](/learn/managing-state)?

[PreviousYour UI as a Tree](/learn/understanding-your-ui-as-a-tree)[NextResponding to Events](/learn/responding-to-events)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Responding to events ](#responding-to-events)
  * [State: a component’s memory ](#state-a-components-memory)
  * [Render and commit ](#render-and-commit)
  * [State as a snapshot ](#state-as-a-snapshot)
  * [Queueing a series of state updates ](#queueing-a-series-of-state-updates)
  * [Updating objects in state ](#updating-objects-in-state)
  * [Updating arrays in state ](#updating-arrays-in-state)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Managing State[](#undefined "Link for this heading")

Intermediate

As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you’ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.

### In this chapter

  * [How to think about UI changes as state changes](/learn/reacting-to-input-with-state)
  * [How to structure state well](/learn/choosing-the-state-structure)
  * [How to “lift state up” to share it between components](/learn/sharing-state-between-components)
  * [How to control whether the state gets preserved or reset](/learn/preserving-and-resetting-state)
  * [How to consolidate complex state logic in a function](/learn/extracting-state-logic-into-a-reducer)
  * [How to pass information without “prop drilling”](/learn/passing-data-deeply-with-context)
  * [How to scale state management as your app grows](/learn/scaling-up-with-reducer-and-context)



## Reacting to input with state [](#reacting-to-input-with-state "Link for Reacting to input with state ")

With React, you won’t modify the UI from code directly. For example, you won’t write commands like “disable the button”, “enable the button”, “show the success message”, etc. Instead, you will describe the UI you want to see for the different visual states of your component (“initial state”, “typing state”, “success state”), and then trigger the state changes in response to user input. This is similar to how designers think about UI.

Here is a quiz form built using React. Note how it uses the `status` state variable to determine whether to enable or disable the submit button, and whether to show the success message instead.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [answer, setAnswer] = useState('');
 const [error, setError] = useState(null);
 const [status, setStatus] = useState('typing');
 if (status === 'success') {
  return <h1>That's right!</h1>
 }
 async function handleSubmit(e) {
  e.preventDefault();
  setStatus('submitting');
  try {
   await submitForm(answer);
   setStatus('success');
  } catch (err) {
   setStatus('typing');
   setError(err);
  }
 }
 function handleTextareaChange(e) {
  setAnswer(e.target.value);
 }
 return (
  <>
   <h2>City quiz</h2>
   <p>
    In which city is there a billboard that turns air into drinkable water?
   </p>
   <form onSubmit={handleSubmit}>
    <textarea
     value={answer}
     onChange={handleTextareaChange}
     disabled={status === 'submitting'}
    />
    <br />
    <button disabled={
     answer.length === 0 ||
     status === 'submitting'
    }>
     Submit
    </button>
    {error !== null &&
     <p className="Error">
      {error.message}
     </p>
    }
   </form>
  </>
 );
}
function submitForm(answer) {
 // Pretend it's hitting the network.
 return new Promise((resolve, reject) => {
  setTimeout(() => {
   let shouldError = answer.toLowerCase() !== 'lima'
   if (shouldError) {
    reject(new Error('Good guess but a wrong answer. Try again!'));
   } else {
    resolve();
   }
  }, 1500);
 });
}

```


Show more

## Ready to learn this topic?

Read **[Reacting to Input with State](/learn/reacting-to-input-with-state)** to learn how to approach interactions with a state-driven mindset.

[Read More](/learn/reacting-to-input-with-state)

## Choosing the state structure [](#choosing-the-state-structure "Link for Choosing the state structure ")

Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. The most important principle is that state shouldn’t contain redundant or duplicated information. If there’s unnecessary state, it’s easy to forget to update it, and introduce bugs!

For example, this form has a **redundant** `fullName` state variable:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [firstName, setFirstName] = useState('');
 const [lastName, setLastName] = useState('');
 const [fullName, setFullName] = useState('');
 function handleFirstNameChange(e) {
  setFirstName(e.target.value);
  setFullName(e.target.value + ' ' + lastName);
 }
 function handleLastNameChange(e) {
  setLastName(e.target.value);
  setFullName(firstName + ' ' + e.target.value);
 }
 return (
  <>
   <h2>Let’s check you in</h2>
   <label>
    First name:{' '}
    <input
     value={firstName}
     onChange={handleFirstNameChange}
    />
   </label>
   <label>
    Last name:{' '}
    <input
     value={lastName}
     onChange={handleLastNameChange}
    />
   </label>
   <p>
    Your ticket will be issued to: <b>{fullName}</b>
   </p>
  </>
 );
}

```


Show more

You can remove it and simplify the code by calculating `fullName` while the component is rendering:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [firstName, setFirstName] = useState('');
 const [lastName, setLastName] = useState('');
 const fullName = firstName + ' ' + lastName;
 function handleFirstNameChange(e) {
  setFirstName(e.target.value);
 }
 function handleLastNameChange(e) {
  setLastName(e.target.value);
 }
 return (
  <>
   <h2>Let’s check you in</h2>
   <label>
    First name:{' '}
    <input
     value={firstName}
     onChange={handleFirstNameChange}
    />
   </label>
   <label>
    Last name:{' '}
    <input
     value={lastName}
     onChange={handleLastNameChange}
    />
   </label>
   <p>
    Your ticket will be issued to: <b>{fullName}</b>
   </p>
  </>
 );
}

```


Show more

This might seem like a small change, but many bugs in React apps are fixed this way.

## Ready to learn this topic?

Read **[Choosing the State Structure](/learn/choosing-the-state-structure)** to learn how to design the state shape to avoid bugs.

[Read More](/learn/choosing-the-state-structure)

## Sharing state between components [](#sharing-state-between-components "Link for Sharing state between components ")

Sometimes, you want the state of two components to always change together. To do it, remove state from both of them, move it to their closest common parent, and then pass it down to them via props. This is known as “lifting state up”, and it’s one of the most common things you will do writing React code.

In this example, only one panel should be active at a time. To achieve this, instead of keeping the active state inside each individual panel, the parent component holds the state and specifies the props for its children.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Accordion() {
 const [activeIndex, setActiveIndex] = useState(0);
 return (
  <>
   <h2>Almaty, Kazakhstan</h2>
   <Panel
    title="About"
    isActive={activeIndex === 0}
    onShow={() => setActiveIndex(0)}
   >
    With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.
   </Panel>
   <Panel
    title="Etymology"
    isActive={activeIndex === 1}
    onShow={() => setActiveIndex(1)}
   >
    The name comes from <span lang="kk-KZ">алма</span>, the Kazakh word for "apple" and is often translated as "full of apples". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang="la">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.
   </Panel>
  </>
 );
}
function Panel({
 title,
 children,
 isActive,
 onShow
}) {
 return (
  <section className="panel">
   <h3>{title}</h3>
   {isActive ? (
    <p>{children}</p>
   ) : (
    <button onClick={onShow}>
     Show
    </button>
   )}
  </section>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Sharing State Between Components](/learn/sharing-state-between-components)** to learn how to lift state up and keep components in sync.

[Read More](/learn/sharing-state-between-components)

## Preserving and resetting state [](#preserving-and-resetting-state "Link for Preserving and resetting state ")

When you re-render a component, React needs to decide which parts of the tree to keep (and update), and which parts to discard or re-create from scratch. In most cases, React’s automatic behavior works well enough. By default, React preserves the parts of the tree that “match up” with the previously rendered component tree.

However, sometimes this is not what you want. In this chat app, typing a message and then switching the recipient does not reset the input. This can make the user accidentally send a message to the wrong person:

App.jsContactList.jsChat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
import Chat from './Chat.js';
import ContactList from './ContactList.js';
export default function Messenger() {
 const [to, setTo] = useState(contacts[0]);
 return (
  <div>
   <ContactList
    contacts={contacts}
    selectedContact={to}
    onSelect={contact => setTo(contact)}
   />
   <Chat contact={to} />
  </div>
 )
}
const contacts = [
 { name: 'Taylor', email: 'taylor@mail.com' },
 { name: 'Alice', email: 'alice@mail.com' },
 { name: 'Bob', email: 'bob@mail.com' }
];

```


Show more

React lets you override the default behavior, and _force_ a component to reset its state by passing it a different `key`, like `<Chat key={email} />`. This tells React that if the recipient is different, it should be considered a _different_ `Chat` component that needs to be re-created from scratch with the new data (and UI like inputs). Now switching between the recipients resets the input field—even though you render the same component.

App.jsContactList.jsChat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
import Chat from './Chat.js';
import ContactList from './ContactList.js';
export default function Messenger() {
 const [to, setTo] = useState(contacts[0]);
 return (
  <div>
   <ContactList
    contacts={contacts}
    selectedContact={to}
    onSelect={contact => setTo(contact)}
   />
   <Chat key={to.email} contact={to} />
  </div>
 )
}
const contacts = [
 { name: 'Taylor', email: 'taylor@mail.com' },
 { name: 'Alice', email: 'alice@mail.com' },
 { name: 'Bob', email: 'bob@mail.com' }
];

```


Show more

## Ready to learn this topic?

Read **[Preserving and Resetting State](/learn/preserving-and-resetting-state)** to learn the lifetime of state and how to control it.

[Read More](/learn/preserving-and-resetting-state)

## Extracting state logic into a reducer [](#extracting-state-logic-into-a-reducer "Link for Extracting state logic into a reducer ")

Components with many state updates spread across many event handlers can get overwhelming. For these cases, you can consolidate all the state update logic outside your component in a single function, called “reducer”. Your event handlers become concise because they only specify the user “actions”. At the bottom of the file, the reducer function specifies how the state should update in response to each action!

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useReducer } from 'react';
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';
export default function TaskApp() {
 const [tasks, dispatch] = useReducer(
  tasksReducer,
  initialTasks
 );
 function handleAddTask(text) {
  dispatch({
   type: 'added',
   id: nextId++,
   text: text,
  });
 }
 function handleChangeTask(task) {
  dispatch({
   type: 'changed',
   task: task
  });
 }
 function handleDeleteTask(taskId) {
  dispatch({
   type: 'deleted',
   id: taskId
  });
 }
 return (
  <>
   <h1>Prague itinerary</h1>
   <AddTask
    onAddTask={handleAddTask}
   />
   <TaskList
    tasks={tasks}
    onChangeTask={handleChangeTask}
    onDeleteTask={handleDeleteTask}
   />
  </>
 );
}
function tasksReducer(tasks, action) {
 switch (action.type) {
  case 'added': {
   return [...tasks, {
    id: action.id,
    text: action.text,
    done: false
   }];
  }
  case 'changed': {
   return tasks.map(t => {
    if (t.id === action.task.id) {
     return action.task;
    } else {
     return t;
    }
   });
  }
  case 'deleted': {
   return tasks.filter(t => t.id !== action.id);
  }
  default: {
   throw Error('Unknown action: ' + action.type);
  }
 }
}
let nextId = 3;
const initialTasks = [
 { id: 0, text: 'Visit Kafka Museum', done: true },
 { id: 1, text: 'Watch a puppet show', done: false },
 { id: 2, text: 'Lennon Wall pic', done: false }
];

```


Show more

## Ready to learn this topic?

Read **[Extracting State Logic into a Reducer](/learn/extracting-state-logic-into-a-reducer)** to learn how to consolidate logic in the reducer function.

[Read More](/learn/extracting-state-logic-into-a-reducer)

## Passing data deeply with context [](#passing-data-deeply-with-context "Link for Passing data deeply with context ")

Usually, you will pass information from a parent component to a child component via props. But passing props can become inconvenient if you need to pass some prop through many components, or if many components need the same information. Context lets the parent component make some information available to any component in the tree below it—no matter how deep it is—without passing it explicitly through props.

Here, the `Heading` component determines its heading level by “asking” the closest `Section` for its level. Each `Section` tracks its own level by asking the parent `Section` and adding one to it. Every `Section` provides information to all components below it without passing props—it does that through context.

App.jsSection.jsHeading.jsLevelContext.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import Heading from './Heading.js';
import Section from './Section.js';
export default function Page() {
 return (
  <Section>
   <Heading>Title</Heading>
   <Section>
    <Heading>Heading</Heading>
    <Heading>Heading</Heading>
    <Heading>Heading</Heading>
    <Section>
     <Heading>Sub-heading</Heading>
     <Heading>Sub-heading</Heading>
     <Heading>Sub-heading</Heading>
     <Section>
      <Heading>Sub-sub-heading</Heading>
      <Heading>Sub-sub-heading</Heading>
      <Heading>Sub-sub-heading</Heading>
     </Section>
    </Section>
   </Section>
  </Section>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Passing Data Deeply with Context](/learn/passing-data-deeply-with-context)** to learn about using context as an alternative to passing props.

[Read More](/learn/passing-data-deeply-with-context)

## Scaling up with reducer and context [](#scaling-up-with-reducer-and-context "Link for Scaling up with reducer and context ")

Reducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.

With this approach, a parent component with complex state manages it with a reducer. Other components anywhere deep in the tree can read its state via context. They can also dispatch actions to update that state.

App.jsTasksContext.jsAddTask.jsTaskList.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';
import { TasksProvider } from './TasksContext.js';
export default function TaskApp() {
 return (
  <TasksProvider>
   <h1>Day off in Kyoto</h1>
   <AddTask />
   <TaskList />
  </TasksProvider>
 );
}

```


## Ready to learn this topic?

Read **[Scaling Up with Reducer and Context](/learn/scaling-up-with-reducer-and-context)** to learn how state management scales in a growing app.

[Read More](/learn/scaling-up-with-reducer-and-context)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Reacting to Input with State](/learn/reacting-to-input-with-state) to start reading this chapter page by page!

Or, if you’re already familiar with these topics, why not read about [Escape Hatches](/learn/escape-hatches)?

[PreviousUpdating Arrays in State](/learn/updating-arrays-in-state)[NextReacting to Input with State](/learn/reacting-to-input-with-state)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Reacting to input with state ](#reacting-to-input-with-state)
  * [Choosing the state structure ](#choosing-the-state-structure)
  * [Sharing state between components ](#sharing-state-between-components)
  * [Preserving and resetting state ](#preserving-and-resetting-state)
  * [Extracting state logic into a reducer ](#extracting-state-logic-into-a-reducer)
  * [Passing data deeply with context ](#passing-data-deeply-with-context)
  * [Scaling up with reducer and context ](#scaling-up-with-reducer-and-context)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Escape Hatches[](#undefined "Link for this heading")

Advanced

Some of your components may need to control and synchronize with systems outside of React. For example, you might need to focus an input using the browser API, play and pause a video player implemented without React, or connect and listen to messages from a remote server. In this chapter, you’ll learn the escape hatches that let you “step outside” React and connect to external systems. Most of your application logic and data flow should not rely on these features.

### In this chapter

  * [How to “remember” information without re-rendering](/learn/referencing-values-with-refs)
  * [How to access DOM elements managed by React](/learn/manipulating-the-dom-with-refs)
  * [How to synchronize components with external systems](/learn/synchronizing-with-effects)
  * [How to remove unnecessary Effects from your components](/learn/you-might-not-need-an-effect)
  * [How an Effect’s lifecycle is different from a component’s](/learn/lifecycle-of-reactive-effects)
  * [How to prevent some values from re-triggering Effects](/learn/separating-events-from-effects)
  * [How to make your Effect re-run less often](/learn/removing-effect-dependencies)
  * [How to share logic between components](/learn/reusing-logic-with-custom-hooks)



## Referencing values with refs [](#referencing-values-with-refs "Link for Referencing values with refs ")

When you want a component to “remember” some information, but you don’t want that information to [trigger new renders](/learn/render-and-commit), you can use a _ref_ :

```


const ref = useRef(0);


```


Like state, refs are retained by React between re-renders. However, setting state re-renders a component. Changing a ref does not! You can access the current value of that ref through the `ref.current` property.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useRef } from 'react';
export default function Counter() {
 let ref = useRef(0);
 function handleClick() {
  ref.current = ref.current + 1;
  alert('You clicked ' + ref.current + ' times!');
 }
 return (
  <button onClick={handleClick}>
   Click me!
  </button>
 );
}

```


Show more

A ref is like a secret pocket of your component that React doesn’t track. For example, you can use refs to store [timeout IDs](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#return_value), [DOM elements](https://developer.mozilla.org/en-US/docs/Web/API/Element), and other objects that don’t impact the component’s rendering output.

## Ready to learn this topic?

Read **[Referencing Values with Refs](/learn/referencing-values-with-refs)** to learn how to use refs to remember information.

[Read More](/learn/referencing-values-with-refs)

## Manipulating the DOM with refs [](#manipulating-the-dom-with-refs "Link for Manipulating the DOM with refs ")

React automatically updates the DOM to match your render output, so your components won’t often need to manipulate it. However, sometimes you might need access to the DOM elements managed by React—for example, to focus a node, scroll to it, or measure its size and position. There is no built-in way to do those things in React, so you will need a ref to the DOM node. For example, clicking the button will focus the input using a ref:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useRef } from 'react';
export default function Form() {
 const inputRef = useRef(null);
 function handleClick() {
  inputRef.current.focus();
 }
 return (
  <>
   <input ref={inputRef} />
   <button onClick={handleClick}>
    Focus the input
   </button>
  </>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Manipulating the DOM with Refs](/learn/manipulating-the-dom-with-refs)** to learn how to access DOM elements managed by React.

[Read More](/learn/manipulating-the-dom-with-refs)

## Synchronizing with Effects [](#synchronizing-with-effects "Link for Synchronizing with Effects ")

Some components need to synchronize with external systems. For example, you might want to control a non-React component based on the React state, set up a server connection, or send an analytics log when a component appears on the screen. Unlike event handlers, which let you handle particular events, _Effects_ let you run some code after rendering. Use them to synchronize your component with a system outside of React.

Press Play/Pause a few times and see how the video player stays synchronized to the `isPlaying` prop value:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useRef, useEffect } from 'react';
function VideoPlayer({ src, isPlaying }) {
 const ref = useRef(null);
 useEffect(() => {
  if (isPlaying) {
   ref.current.play();
  } else {
   ref.current.pause();
  }
 }, [isPlaying]);
 return <video ref={ref} src={src} loop playsInline />;
}
export default function App() {
 const [isPlaying, setIsPlaying] = useState(false);
 return (
  <>
   <button onClick={() => setIsPlaying(!isPlaying)}>
    {isPlaying ? 'Pause' : 'Play'}
   </button>
   <VideoPlayer
    isPlaying={isPlaying}
    src="https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4"
   />
  </>
 );
}

```


Show more

Many Effects also “clean up” after themselves. For example, an Effect that sets up a connection to a chat server should return a _cleanup function_ that tells React how to disconnect your component from that server:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
export default function ChatRoom() {
 useEffect(() => {
  const connection = createConnection();
  connection.connect();
  return () => connection.disconnect();
 }, []);
 return <h1>Welcome to the chat!</h1>;
}

```


In development, React will immediately run and clean up your Effect one extra time. This is why you see `"✅ Connecting..."` printed twice. This ensures that you don’t forget to implement the cleanup function.

## Ready to learn this topic?

Read **[Synchronizing with Effects](/learn/synchronizing-with-effects)** to learn how to synchronize components with external systems.

[Read More](/learn/synchronizing-with-effects)

## You Might Not Need An Effect [](#you-might-not-need-an-effect "Link for You Might Not Need An Effect ")

Effects are an escape hatch from the React paradigm. They let you “step outside” of React and synchronize your components with some external system. If there is no external system involved (for example, if you want to update a component’s state when some props or state change), you shouldn’t need an Effect. Removing unnecessary Effects will make your code easier to follow, faster to run, and less error-prone.

There are two common cases in which you don’t need Effects:

  * **You don’t need Effects to transform data for rendering.**
  * **You don’t need Effects to handle user events.**



For example, you don’t need an Effect to adjust some state based on other state:

```


function Form() {

 const [firstName, setFirstName] = useState('Taylor');

 const [lastName, setLastName] = useState('Swift');

 // 🔴 Avoid: redundant state and unnecessary Effect

 const [fullName, setFullName] = useState('');

 useEffect(() => {

  setFullName(firstName + ' ' + lastName);

 }, [firstName, lastName]);

 // ...

}


```


Instead, calculate as much as you can while rendering:

```


function Form() {

 const [firstName, setFirstName] = useState('Taylor');

 const [lastName, setLastName] = useState('Swift');

 // ✅ Good: calculated during rendering

 const fullName = firstName + ' ' + lastName;

 // ...

}


```


However, you _do_ need Effects to synchronize with external systems.

## Ready to learn this topic?

Read **[You Might Not Need an Effect](/learn/you-might-not-need-an-effect)** to learn how to remove unnecessary Effects.

[Read More](/learn/you-might-not-need-an-effect)

## Lifecycle of reactive effects [](#lifecycle-of-reactive-effects "Link for Lifecycle of reactive effects ")

Effects have a different lifecycle from components. Components may mount, update, or unmount. An Effect can only do two things: to start synchronizing something, and later to stop synchronizing it. This cycle can happen multiple times if your Effect depends on props and state that change over time.

This Effect depends on the value of the `roomId` prop. Props are _reactive values,_ which means they can change on a re-render. Notice that the Effect _re-synchronizes_ (and re-connects to the server) if `roomId` changes:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId }) {
 useEffect(() => {
  const connection = createConnection(serverUrl, roomId);
  connection.connect();
  return () => connection.disconnect();
 }, [roomId]);
 return <h1>Welcome to the {roomId} room!</h1>;
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <hr />
   <ChatRoom roomId={roomId} />
  </>
 );
}

```


Show more

React provides a linter rule to check that you’ve specified your Effect’s dependencies correctly. If you forget to specify `roomId` in the list of dependencies in the above example, the linter will find that bug automatically.

## Ready to learn this topic?

Read **[Lifecycle of Reactive Events](/learn/lifecycle-of-reactive-effects)** to learn how an Effect’s lifecycle is different from a component’s.

[Read More](/learn/lifecycle-of-reactive-effects)

## Separating events from Effects [](#separating-events-from-effects "Link for Separating events from Effects ")

### Under Construction

This section describes an **experimental API that has not yet been released** in a stable version of React.

Event handlers only re-run when you perform the same interaction again. Unlike event handlers, Effects re-synchronize if any of the values they read, like props or state, are different than during last render. Sometimes, you want a mix of both behaviors: an Effect that re-runs in response to some values but not others.

All code inside Effects is _reactive._ It will run again if some reactive value it reads has changed due to a re-render. For example, this Effect will re-connect to the chat if either `roomId` or `theme` have changed:

App.jschat.jsnotifications.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection, sendMessage } from './chat.js';
import { showNotification } from './notifications.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId, theme }) {
 useEffect(() => {
  const connection = createConnection(serverUrl, roomId);
  connection.on('connected', () => {
   showNotification('Connected!', theme);
  });
  connection.connect();
  return () => connection.disconnect();
 }, [roomId, theme]);
 return <h1>Welcome to the {roomId} room!</h1>
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 const [isDark, setIsDark] = useState(false);
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <label>
    <input
     type="checkbox"
     checked={isDark}
     onChange={e => setIsDark(e.target.checked)}
    />
    Use dark theme
   </label>
   <hr />
   <ChatRoom
    roomId={roomId}
    theme={isDark ? 'dark' : 'light'} 
   />
  </>
 );
}

```


Show more

This is not ideal. You want to re-connect to the chat only if the `roomId` has changed. Switching the `theme` shouldn’t re-connect to the chat! Move the code reading `theme` out of your Effect into an _Effect Event_ :

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { experimental_useEffectEvent as useEffectEvent } from 'react';
import { createConnection, sendMessage } from './chat.js';
import { showNotification } from './notifications.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId, theme }) {
 const onConnected = useEffectEvent(() => {
  showNotification('Connected!', theme);
 });
 useEffect(() => {
  const connection = createConnection(serverUrl, roomId);
  connection.on('connected', () => {
   onConnected();
  });
  connection.connect();
  return () => connection.disconnect();
 }, [roomId]);
 return <h1>Welcome to the {roomId} room!</h1>
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 const [isDark, setIsDark] = useState(false);
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <label>
    <input
     type="checkbox"
     checked={isDark}
     onChange={e => setIsDark(e.target.checked)}
    />
    Use dark theme
   </label>
   <hr />
   <ChatRoom
    roomId={roomId}
    theme={isDark ? 'dark' : 'light'} 
   />
  </>
 );
}

```


Show more

Code inside Effect Events isn’t reactive, so changing the `theme` no longer makes your Effect re-connect.

## Ready to learn this topic?

Read **[Separating Events from Effects](/learn/separating-events-from-effects)** to learn how to prevent some values from re-triggering Effects.

[Read More](/learn/separating-events-from-effects)

## Removing Effect dependencies [](#removing-effect-dependencies "Link for Removing Effect dependencies ")

When you write an Effect, the linter will verify that you’ve included every reactive value (like props and state) that the Effect reads in the list of your Effect’s dependencies. This ensures that your Effect remains synchronized with the latest props and state of your component. Unnecessary dependencies may cause your Effect to run too often, or even create an infinite loop. The way you remove them depends on the case.

For example, this Effect depends on the `options` object which gets re-created every time you edit the input:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId }) {
 const [message, setMessage] = useState('');
 const options = {
  serverUrl: serverUrl,
  roomId: roomId
 };
 useEffect(() => {
  const connection = createConnection(options);
  connection.connect();
  return () => connection.disconnect();
 }, [options]);
 return (
  <>
   <h1>Welcome to the {roomId} room!</h1>
   <input value={message} onChange={e => setMessage(e.target.value)} />
  </>
 );
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <hr />
   <ChatRoom roomId={roomId} />
  </>
 );
}

```


Show more

You don’t want the chat to re-connect every time you start typing a message in that chat. To fix this problem, move creation of the `options` object inside the Effect so that the Effect only depends on the `roomId` string:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId }) {
 const [message, setMessage] = useState('');
 useEffect(() => {
  const options = {
   serverUrl: serverUrl,
   roomId: roomId
  };
  const connection = createConnection(options);
  connection.connect();
  return () => connection.disconnect();
 }, [roomId]);
 return (
  <>
   <h1>Welcome to the {roomId} room!</h1>
   <input value={message} onChange={e => setMessage(e.target.value)} />
  </>
 );
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <hr />
   <ChatRoom roomId={roomId} />
  </>
 );
}

```


Show more

Notice that you didn’t start by editing the dependency list to remove the `options` dependency. That would be wrong. Instead, you changed the surrounding code so that the dependency became _unnecessary._ Think of the dependency list as a list of all the reactive values used by your Effect’s code. You don’t intentionally choose what to put on that list. The list describes your code. To change the dependency list, change the code.

## Ready to learn this topic?

Read **[Removing Effect Dependencies](/learn/removing-effect-dependencies)** to learn how to make your Effect re-run less often.

[Read More](/learn/removing-effect-dependencies)

## Reusing logic with custom Hooks [](#reusing-logic-with-custom-hooks "Link for Reusing logic with custom Hooks ")

React comes with built-in Hooks like `useState`, `useContext`, and `useEffect`. Sometimes, you’ll wish that there was a Hook for some more specific purpose: for example, to fetch data, to keep track of whether the user is online, or to connect to a chat room. To do this, you can create your own Hooks for your application’s needs.

In this example, the `usePointerPosition` custom Hook tracks the cursor position, while `useDelayedValue` custom Hook returns a value that’s “lagging behind” the value you passed by a certain number of milliseconds. Move the cursor over the sandbox preview area to see a moving trail of dots following the cursor:

App.jsusePointerPosition.jsuseDelayedValue.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { usePointerPosition } from './usePointerPosition.js';
import { useDelayedValue } from './useDelayedValue.js';
export default function Canvas() {
 const pos1 = usePointerPosition();
 const pos2 = useDelayedValue(pos1, 100);
 const pos3 = useDelayedValue(pos2, 200);
 const pos4 = useDelayedValue(pos3, 100);
 const pos5 = useDelayedValue(pos4, 50);
 return (
  <>
   <Dot position={pos1} opacity={1} />
   <Dot position={pos2} opacity={0.8} />
   <Dot position={pos3} opacity={0.6} />
   <Dot position={pos4} opacity={0.4} />
   <Dot position={pos5} opacity={0.2} />
  </>
 );
}
function Dot({ position, opacity }) {
 return (
  <div style={{
   position: 'absolute',
   backgroundColor: 'pink',
   borderRadius: '50%',
   opacity,
   transform: `translate(${position.x}px, ${position.y}px)`,
   pointerEvents: 'none',
   left: -20,
   top: -20,
   width: 40,
   height: 40,
  }} />
 );
}

```


Show more

You can create custom Hooks, compose them together, pass data between them, and reuse them between components. As your app grows, you will write fewer Effects by hand because you’ll be able to reuse custom Hooks you already wrote. There are also many excellent custom Hooks maintained by the React community.

## Ready to learn this topic?

Read **[Reusing Logic with Custom Hooks](/learn/reusing-logic-with-custom-hooks)** to learn how to share logic between components.

[Read More](/learn/reusing-logic-with-custom-hooks)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Referencing Values with Refs](/learn/referencing-values-with-refs) to start reading this chapter page by page!

[PreviousScaling Up with Reducer and Context](/learn/scaling-up-with-reducer-and-context)[NextReferencing Values with Refs](/learn/referencing-values-with-refs)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Referencing values with refs ](#referencing-values-with-refs)
  * [Manipulating the DOM with refs ](#manipulating-the-dom-with-refs)
  * [Synchronizing with Effects ](#synchronizing-with-effects)
  * [You Might Not Need An Effect ](#you-might-not-need-an-effect)
  * [Lifecycle of reactive effects ](#lifecycle-of-reactive-effects)
  * [Separating events from Effects ](#separating-events-from-effects)
  * [Removing Effect dependencies ](#removing-effect-dependencies)
  * [Reusing logic with custom Hooks ](#reusing-logic-with-custom-hooks)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### react@19

  * [Overview ](/reference/react "Overview")
  * [Hooks ](/reference/react/hooks "Hooks")

    * [useActionState ](/reference/react/useActionState "useActionState")
    * [useCallback ](/reference/react/useCallback "useCallback")
    * [useContext ](/reference/react/useContext "useContext")
    * [useDebugValue ](/reference/react/useDebugValue "useDebugValue")
    * [useDeferredValue ](/reference/react/useDeferredValue "useDeferredValue")
    * [useEffect ](/reference/react/useEffect "useEffect")
    * [useId ](/reference/react/useId "useId")
    * [useImperativeHandle ](/reference/react/useImperativeHandle "useImperativeHandle")
    * [useInsertionEffect ](/reference/react/useInsertionEffect "useInsertionEffect")
    * [useLayoutEffect ](/reference/react/useLayoutEffect "useLayoutEffect")
    * [useMemo ](/reference/react/useMemo "useMemo")
    * [useOptimistic ](/reference/react/useOptimistic "useOptimistic")
    * [useReducer ](/reference/react/useReducer "useReducer")
    * [useRef ](/reference/react/useRef "useRef")
    * [useState ](/reference/react/useState "useState")
    * [useSyncExternalStore ](/reference/react/useSyncExternalStore "useSyncExternalStore")
    * [useTransition ](/reference/react/useTransition "useTransition")

  * [Components ](/reference/react/components "Components")

    * [<Fragment> (<>) ](/reference/react/Fragment "<Fragment> \(<>\)")
    * [<Profiler> ](/reference/react/Profiler "<Profiler>")
    * [<StrictMode> ](/reference/react/StrictMode "<StrictMode>")
    * [<Suspense> ](/reference/react/Suspense "<Suspense>")

  * [APIs ](/reference/react/apis "APIs")

    * [act ](/reference/react/act "act")
    * [cache ](/reference/react/cache "cache")
    * [createContext ](/reference/react/createContext "createContext")
    * [lazy ](/reference/react/lazy "lazy")
    * [memo ](/reference/react/memo "memo")
    * [startTransition ](/reference/react/startTransition "startTransition")
    * [use ](/reference/react/use "use")
    * [experimental_taintObjectReference  - This feature is available in the latest Canary](/reference/react/experimental_taintObjectReference "experimental_taintObjectReference")
    * [experimental_taintUniqueValue  - This feature is available in the latest Canary](/reference/react/experimental_taintUniqueValue "experimental_taintUniqueValue")

### react-dom@19

  * [Hooks ](/reference/react-dom/hooks "Hooks")

    * [useFormStatus ](/reference/react-dom/hooks/useFormStatus "useFormStatus")

  * [Components ](/reference/react-dom/components "Components")

    * [Common (e.g. <div>) ](/reference/react-dom/components/common "Common \(e.g. <div>\)")
    * [<form> ](/reference/react-dom/components/form "<form>")
    * [<input> ](/reference/react-dom/components/input "<input>")
    * [<option> ](/reference/react-dom/components/option "<option>")
    * [<progress> ](/reference/react-dom/components/progress "<progress>")
    * [<select> ](/reference/react-dom/components/select "<select>")
    * [<textarea> ](/reference/react-dom/components/textarea "<textarea>")
    * [<link> ](/reference/react-dom/components/link "<link>")
    * [<meta> ](/reference/react-dom/components/meta "<meta>")
    * [<script> ](/reference/react-dom/components/script "<script>")
    * [<style> ](/reference/react-dom/components/style "<style>")
    * [<title> ](/reference/react-dom/components/title "<title>")

  * [APIs ](/reference/react-dom "APIs")

    * [createPortal ](/reference/react-dom/createPortal "createPortal")
    * [flushSync ](/reference/react-dom/flushSync "flushSync")
    * [preconnect ](/reference/react-dom/preconnect "preconnect")
    * [prefetchDNS ](/reference/react-dom/prefetchDNS "prefetchDNS")
    * [preinit ](/reference/react-dom/preinit "preinit")
    * [preinitModule ](/reference/react-dom/preinitModule "preinitModule")
    * [preload ](/reference/react-dom/preload "preload")
    * [preloadModule ](/reference/react-dom/preloadModule "preloadModule")

  * [Client APIs ](/reference/react-dom/client "Client APIs")

    * [createRoot ](/reference/react-dom/client/createRoot "createRoot")
    * [hydrateRoot ](/reference/react-dom/client/hydrateRoot "hydrateRoot")

  * [Server APIs ](/reference/react-dom/server "Server APIs")

    * [renderToPipeableStream ](/reference/react-dom/server/renderToPipeableStream "renderToPipeableStream")
    * [renderToReadableStream ](/reference/react-dom/server/renderToReadableStream "renderToReadableStream")
    * [renderToStaticMarkup ](/reference/react-dom/server/renderToStaticMarkup "renderToStaticMarkup")
    * [renderToString ](/reference/react-dom/server/renderToString "renderToString")

  * [Static APIs ](/reference/react-dom/static "Static APIs")

    * [prerender ](/reference/react-dom/static/prerender "prerender")
    * [prerenderToNodeStream ](/reference/react-dom/static/prerenderToNodeStream "prerenderToNodeStream")

### Rules of React

  * [Overview ](/reference/rules "Overview")

    * [Components and Hooks must be pure ](/reference/rules/components-and-hooks-must-be-pure "Components and Hooks must be pure")
    * [React calls Components and Hooks ](/reference/rules/react-calls-components-and-hooks "React calls Components and Hooks")
    * [Rules of Hooks ](/reference/rules/rules-of-hooks "Rules of Hooks")

### React Server Components

  * [Server Components ](/reference/rsc/server-components "Server Components")
  * [Server Functions ](/reference/rsc/server-functions "Server Functions")
  * [Directives ](/reference/rsc/directives "Directives")

    * ['use client' ](/reference/rsc/use-client "'use client'")
    * ['use server' ](/reference/rsc/use-server "'use server'")

### Legacy APIs

  * [Legacy React APIs ](/reference/react/legacy "Legacy React APIs")

    * [Children ](/reference/react/Children "Children")
    * [cloneElement ](/reference/react/cloneElement "cloneElement")
    * [Component ](/reference/react/Component "Component")
    * [createElement ](/reference/react/createElement "createElement")
    * [createRef ](/reference/react/createRef "createRef")
    * [forwardRef ](/reference/react/forwardRef "forwardRef")
    * [isValidElement ](/reference/react/isValidElement "isValidElement")
    * [PureComponent ](/reference/react/PureComponent "PureComponent")




Is this page useful?

[API Reference](/reference/react)

# React DOM APIs[](#undefined "Link for this heading")

The `react-dom` package contains methods that are only supported for the web applications (which run in the browser DOM environment). They are not supported for React Native.

## APIs [](#apis "Link for APIs ")

These APIs can be imported from your components. They are rarely used:

  * `createPortal`[](/reference/react-dom/createPortal) lets you render child components in a different part of the DOM tree.
  * `flushSync`[](/reference/react-dom/flushSync) lets you force React to flush a state update and update the DOM synchronously.



## Resource Preloading APIs [](#resource-preloading-apis "Link for Resource Preloading APIs ")

These APIs can be used to make apps faster by pre-loading resources such as scripts, stylesheets, and fonts as soon as you know you need them, for example before navigating to another page where the resources will be used.

[React-based frameworks](/learn/start-a-new-react-project) frequently handle resource loading for you, so you might not have to call these APIs yourself. Consult your framework’s documentation for details.

  * `prefetchDNS`[](/reference/react-dom/prefetchDNS) lets you prefetch the IP address of a DNS domain name that you expect to connect to.
  * `preconnect`[](/reference/react-dom/preconnect) lets you connect to a server you expect to request resources from, even if you don’t know what resources you’ll need yet.
  * `preload`[](/reference/react-dom/preload) lets you fetch a stylesheet, font, image, or external script that you expect to use.
  * `preloadModule`[](/reference/react-dom/preloadModule) lets you fetch an ESM module that you expect to use.
  * `preinit`[](/reference/react-dom/preinit) lets you fetch and evaluate an external script or fetch and insert a stylesheet.
  * `preinitModule`[](/reference/react-dom/preinitModule) lets you fetch and evaluate an ESM module.



## Entry points [](#entry-points "Link for Entry points ")

The `react-dom` package provides two additional entry points:

  * `react-dom/client`[](/reference/react-dom/client) contains APIs to render React components on the client (in the browser).
  * `react-dom/server`[](/reference/react-dom/server) contains APIs to render React components on the server.



## Removed APIs [](#removed-apis "Link for Removed APIs ")

These APIs were removed in React 19:

  * `findDOMNode`[](https://18.react.dev/reference/react-dom/findDOMNode): see [alternatives](https://18.react.dev/reference/react-dom/findDOMNode#alternatives).
  * `hydrate`[](https://18.react.dev/reference/react-dom/hydrate): use `hydrateRoot`[](/reference/react-dom/client/hydrateRoot) instead.
  * `render`[](https://18.react.dev/reference/react-dom/render): use `createRoot`[](/reference/react-dom/client/createRoot) instead.
  * `unmountComponentAtNode`[](/reference/react-dom/unmountComponentAtNode): use `root.unmount()`[](/reference/react-dom/client/createRoot#root-unmount) instead.
  * `renderToNodeStream`[](https://18.react.dev/reference/react-dom/server/renderToNodeStream): use `react-dom/server`[](/reference/react-dom/server) APIs instead.
  * `renderToStaticNodeStream`[](https://18.react.dev/reference/react-dom/server/renderToStaticNodeStream): use `react-dom/server`[](/reference/react-dom/server) APIs instead.



[Previous<title>](/reference/react-dom/components/title)[NextcreatePortal](/reference/react-dom/createPortal)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [APIs ](#apis)
  * [Resource Preloading APIs ](#resource-preloading-apis)
  * [Entry points ](#entry-points)
  * [Removed APIs ](#removed-apis)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Meet the Team[](#undefined "Link for this heading")

React development is led by a dedicated team working full time at Meta. It also receives contributions from people all over the world.

## React Core [](#react-core "Link for React Core ")

The React Core team members work full time on the core component APIs, the engine that powers React DOM and React Native, React DevTools, and the React documentation website.

Current members of the React team are listed in alphabetical order below.

### Andrew Clark[](#andrew-clark "Link for Andrew Clark")

Engineer at Vercel

Andrew got started with web development by making sites with WordPress, and eventually tricked himself into doing JavaScript. His favorite pastime is karaoke. Andrew is either a Disney villain or a Disney princess, depending on the day.

[acdlite](https://threads.net/acdlite)

[ acdlite](https://github.com/acdlite)

### Dan Abramov[](#dan-abramov "Link for Dan Abramov")

Independent Engineer

Dan got into programming after he accidentally discovered Visual Basic inside Microsoft PowerPoint. He has found his true calling in turning [Sebastian](#sebastian-markb%C3%A5ge)’s tweets into long-form blog posts. Dan occasionally wins at Fortnite by hiding in a bush until the game ends.

[danabra.mov](https://bsky.app/profile/danabra.mov)

[ gaearon](https://github.com/gaearon)

### Eli White[](#eli-white "Link for Eli White")

Engineering Manager at Meta

Eli got into programming after he got suspended from middle school for hacking. He has been working on React and React Native since 2017. He enjoys eating treats, especially ice cream and apple pie. You can find Eli trying quirky activities like parkour, indoor skydiving, and aerial silks.

[elicwhite](https://threads.net/elicwhite)

[ TheSavior](https://github.com/TheSavior)

### Jack Pope[](#jack-pope "Link for Jack Pope")

Engineer at Meta

Shortly after being introduced to AutoHotkey, Jack had written scripts to automate everything he could think of. When reaching limitations there, he dove headfirst into web app development and hasn’t looked back. Most recently, Jack worked on the web platform at Instagram before moving to React. His favorite programming language is JSX.

[ jackpope](https://github.com/jackpope)

[ jackpope.me](https://jackpope.me)

### Jason Bonta[](#jason-bonta "Link for Jason Bonta")

Engineering Manager at Meta

Jason abandoned embedded C for a career in front-end engineering and never looked back. Armed with esoteric CSS knowledge and a passion for beautiful UI, Jason joined Facebook in 2010, where he now feels privileged to have seen JavaScript development come of age. Though he may not understand how `for...of` loops work, he loves getting to work with brilliant people on projects that enable amazing UX.

[someextent](https://threads.net/someextent)

### Joe Savona[](#joe-savona "Link for Joe Savona")

Engineer at Meta

Joe was planning to major in math and philosophy but got into computer science after writing physics simulations in Matlab. Prior to React, he worked on Relay, RSocket.js, and the Skip programming language. While he’s not building some sort of reactive system he enjoys running, studying Japanese, and spending time with his family.

[joesavona](https://threads.net/joesavona)

[ josephsavona](https://github.com/josephsavona)

### Josh Story[](#josh-story "Link for Josh Story")

Engineer at Vercel

Josh majored in Mathematics and discovered programming while in college. His first professional developer job was to program insurance rate calculations in Microsoft Excel, the paragon of Reactive Programming which must be why he now works on React. In between that time Josh has been an IC, Manager, and Executive at a few startups. outside of work he likes to push his limits with cooking.

[storyhb.com](https://bsky.app/profile/storyhb.com)

[ gnoff](https://github.com/gnoff)

### Lauren Tan[](#lauren-tan "Link for Lauren Tan")

Engineer at Meta

Lauren’s programming career peaked when she first discovered the `<marquee>` tag. She’s been chasing that high ever since. She studied Finance instead of CS in college, so she learned to code using Excel. Lauren enjoys dropping cheeky memes in chat, playing video games with her partner, learning Korean, and petting her dog Zelda.

[potetotes](https://threads.net/potetotes)

[no.lol](https://bsky.app/profile/no.lol)

[ poteto](https://github.com/poteto)

### Luna Wei[](#luna-wei "Link for Luna Wei")

Engineer at Meta

Luna first learnt the fundamentals of python at the age of 6 from her father. Since then, she has been unstoppable. Luna aspires to be a gen z, and the road to success is paved with environmental advocacy, urban gardening and lots of quality time with her Voo-Doo’d (as pictured).

[lunaleaps](https://threads.net/lunaleaps)

[ lunaleaps](https://github.com/lunaleaps)

### Matt Carroll[](#matt-carroll "Link for Matt Carroll")

Developer Advocate at Meta

Matt stumbled into coding, and since then, has become enamored with creating things in communities that can’t be created alone. Prior to React, he worked on YouTube, the Google Assistant, Fuchsia, and Google Cloud AI and Evernote. When he’s not trying to make better developer tools he enjoys the mountains, jazz, and spending time with his family.

[mattcarrollcode](https://threads.net/mattcarrollcode)

[ mattcarrollcode](https://github.com/mattcarrollcode)

### Mofei Zhang[](#mofei-zhang "Link for Mofei Zhang")

Engineer at Meta

Mofei started programming when she realized it can help her cheat in video games. She focused on operating systems in undergrad / grad school, but now finds herself happily tinkering on React. Outside of work, she enjoys debugging bouldering problems and planning her next backpacking trip(s).

[z_mofei](https://threads.net/z_mofei)

[ mofeiZ](https://github.com/mofeiZ)

### Noah Lemen[](#noah-lemen "Link for Noah Lemen")

Engineer at Meta

Noah’s interest in UI programming sparked during his education in music technology at NYU. At Meta, he’s worked on internal tools, browsers, web performance, and is currently focused on React. Outside of work, Noah can be found tinkering with synthesizers or spending time with his cat.

[noahlemen](https://threads.net/noahlemen)

[ noahlemen](https://github.com/noahlemen)

[ noahle.men](https://noahle.men)

### Rick Hanlon[](#rick-hanlon "Link for Rick Hanlon")

Engineer at Meta

Ricky majored in theoretical math and somehow found himself on the React Native team for a couple years before joining the React team. When he’s not programming you can find him snowboarding, biking, climbing, golfing, or closing GitHub issues that do not match the issue template.

[rickhanlonii](https://threads.net/rickhanlonii)

[ricky.fm](https://bsky.app/profile/ricky.fm)

[ rickhanlonii](https://github.com/rickhanlonii)

### Ruslan Lesiutin[](#ruslan-lesiutin "Link for Ruslan Lesiutin")

Engineer at Meta

Ruslan’s introduction to UI programming started when he was a kid by manually editing HTML templates for his custom gaming forums. Somehow, he ended up majoring in Computer Science. He enjoys music, games, and memes. Mostly memes.

[lesiutin](https://threads.net/lesiutin)

[ hoxyq](https://github.com/hoxyq)

### Sathya Gunasekaran [](#sathya-gunasekaran "Link for Sathya Gunasekaran ")

Engineer at Meta

Sathya hated the Dragon Book in school but somehow ended up working on compilers all his career. When he’s not compiling React components, he’s either drinking coffee or eating yet another Dosa.

[gsathya.03](https://threads.net/gsathya.03)

[ gsathya](https://github.com/gsathya)

### Sebastian Markbåge[](#sebastian-markbåge "Link for Sebastian Markbåge")

Engineer at Vercel

Sebastian majored in psychology. He’s usually quiet. Even when he says something, it often doesn’t make sense to the rest of us until a few months later. The correct way to pronounce his surname is “mark-boa-geh” but he settled for “mark-beige” out of pragmatism — and that’s how he approaches React.

[sebmarkbage](https://threads.net/sebmarkbage)

[ sebmarkbage](https://github.com/sebmarkbage)

### Sebastian Silbermann[](#sebastian-silbermann "Link for Sebastian Silbermann")

Engineer at Vercel

Sebastian learned programming to make the browser games he played during class more enjoyable. Eventually this lead to contributing to as much open source code as possible. Outside of coding he’s busy making sure people don’t confuse him with the other Sebastians and Zilberman of the React community.

[sebsilbermann](https://threads.net/sebsilbermann)

[ eps1lon](https://github.com/eps1lon)

### Seth Webster[](#seth-webster "Link for Seth Webster")

Engineering Manager at Meta

Seth started programming as a kid growing up in Tucson, AZ. After school, he was bitten by the music bug and was a touring musician for about 10 years before returning to _work_ , starting with Intuit. In his spare time, he loves [taking pictures](https://www.sethwebster.com) and flying for animal rescues in the northeastern United States.

[sethwebster](https://threads.net/sethwebster)

[ sethwebster](https://github.com/sethwebster)

[ sethwebster.com](https://sethwebster.com)

### Sophie Alpert[](#sophie-alpert "Link for Sophie Alpert")

Independent Engineer

Four days after React was released, Sophie rewrote the entirety of her then-current project to use it, which she now realizes was perhaps a bit reckless. After she became the project’s #1 committer, she wondered why she wasn’t getting paid by Facebook like everyone else was and joined the team officially to lead React through its adolescent years. Though she quit that job years ago, somehow she’s still in the team’s group chats and “providing value”.

[sophiebits](https://threads.net/sophiebits)

[ sophiebits](https://github.com/sophiebits)

[ sophiebits.com](https://sophiebits.com)

### Tianyu Yao[](#tianyu-yao "Link for Tianyu Yao")

Engineer at Meta

Tianyu’s interest in computers started as a kid because he loves video games. So he majored in computer science and still plays childish games like League of Legends. When he is not in front of a computer, he enjoys playing with his two kittens, hiking and kayaking.

[ tyao1](https://github.com/tyao1)

### Yuzhi Zheng[](#yuzhi-zheng "Link for Yuzhi Zheng")

Engineering Manager at Meta

Yuzhi studied Computer Science in school. She liked the instant gratification of seeing code come to life without having to physically be in a laboratory. Now she’s a manager in the React org. Before management, she used to work on the Relay data fetching framework. In her spare time, Yuzhi enjoys optimizing her life via gardening and home improvement projects.

[yuzhiz](https://threads.net/yuzhiz)

[ yuzhi](https://github.com/yuzhi)

## Past contributors [](#past-contributors "Link for Past contributors ")

You can find the past team members and other people who significantly contributed to React over the years on the [acknowledgements](/community/acknowledgements) page.

[PreviousReact Videos](/community/videos)[NextDocs Contributors](/community/docs-contributors)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [React Core ](#react-core)
  * [Andrew Clark](#andrew-clark)
  * [Dan Abramov](#dan-abramov)
  * [Eli White](#eli-white)
  * [Jack Pope](#jack-pope)
  * [Jason Bonta](#jason-bonta)
  * [Joe Savona](#joe-savona)
  * [Josh Story](#josh-story)
  * [Lauren Tan](#lauren-tan)
  * [Luna Wei](#luna-wei)
  * [Matt Carroll](#matt-carroll)
  * [Mofei Zhang](#mofei-zhang)
  * [Noah Lemen](#noah-lemen)
  * [Rick Hanlon](#rick-hanlon)
  * [Ruslan Lesiutin](#ruslan-lesiutin)
  * [Sathya Gunasekaran ](#sathya-gunasekaran)
  * [Sebastian Markbåge](#sebastian-markbåge)
  * [Sebastian Silbermann](#sebastian-silbermann)
  * [Seth Webster](#seth-webster)
  * [Sophie Alpert](#sophie-alpert)
  * [Tianyu Yao](#tianyu-yao)
  * [Yuzhi Zheng](#yuzhi-zheng)
  * [Past contributors ](#past-contributors)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Docs Contributors[](#undefined "Link for this heading")

React documentation is written and maintained by the [React team](/community/team) and [external contributors.](https://github.com/reactjs/react.dev/graphs/contributors) On this page, we’d like to thank a few people who’ve made significant contributions to this site.

## Content [](#content "Link for Content ")

  * : editing, writing, illustrating
  * : writing, curriculum design
  * : example code
  * : writing
  * : writing
  * : writing
  * : writing
  * : writing
  * : editing, writing
  * : reviews, advice
  * : feedback



## Design [](#design "Link for Design ")

  * : site design
  * [Razvan Gradinar](https://dribbble.com/GradinarRazvan): sandbox design
  * [Maggie Appleton](https://maggieappleton.com/): diagram system
  * : color-coded explanations



## Development [](#development "Link for Development ")

  * : site development
  * [ThisDotLabs](https://www.thisdot.co/) (, ): site development
  * [CodeSandbox](https://codesandbox.io/) (, , , ): sandbox integration
  * : site development
  * : site development
  * [Harish Kumar](https://www.strek.in/): development and maintenance
  * : sandbox improvements



We’d also like to thank countless alpha testers and community members who gave us feedback along the way.

[PreviousMeet the Team](/community/team)[NextTranslations](/community/translations)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Content ](#content)
  * [Design ](#design)
  * [Development ](#development)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Acknowledgements[](#undefined "Link for this heading")

React was originally created by [Jordan Walke.](https://github.com/jordwalke) Today, React has a [dedicated full-time team working on it](/community/team), as well as over a thousand [open source contributors.](https://github.com/facebook/react/graphs/contributors)

## Past contributors [](#past-contributors "Link for Past contributors ")

We’d like to recognize a few people who have made significant contributions to React and its documentation in the past and have helped maintain them over the years:

  * [Almero Steyn](https://github.com/AlmeroSteyn)
  * [Andreas Svensson](https://github.com/syranide)
  * [Alex Krolick](https://github.com/alexkrolick)
  * [Alexey Pyltsyn](https://github.com/lex111)
  * [Andrey Lunyov](https://github.com/alunyov)
  * [Brandon Dail](https://github.com/aweary)
  * [Brian Vaughn](https://github.com/bvaughn)
  * [Caleb Meredith](https://github.com/calebmer)
  * [Chang Yan](https://github.com/cyan33)
  * [Cheng Lou](https://github.com/chenglou)
  * [Christoph Nakazawa](https://github.com/cpojer)
  * [Christopher Chedeau](https://github.com/vjeux)
  * [Clement Hoang](https://github.com/clemmy)
  * [Dave McCabe](https://github.com/davidmccabe)
  * [Dominic Gannaway](https://github.com/trueadm)
  * [Flarnie Marchan](https://github.com/flarnie)
  * [Jason Quense](https://github.com/jquense)
  * [Jesse Beach](https://github.com/jessebeach)
  * [Jessica Franco](https://github.com/Jessidhia)
  * [Jim Sproch](https://github.com/jimfb)
  * [Josh Duck](https://github.com/joshduck)
  * [Joe Critchley](https://github.com/joecritch)
  * [Jeff Morrison](https://github.com/jeffmo)
  * [Luna Ruan](https://github.com/lunaruan)
  * [Kathryn Middleton](https://github.com/kmiddleton14)
  * [Keyan Zhang](https://github.com/keyz)
  * [Marco Salazar](https://github.com/salazarm)
  * [Mengdi Chen](https://github.com/mondaychen)
  * [Nat Alison](https://github.com/tesseralis)
  * [Nathan Hunzaker](https://github.com/nhunzaker)
  * [Nicolas Gallagher](https://github.com/necolas)
  * [Paul O’Shannessy](https://github.com/zpao)
  * [Pete Hunt](https://github.com/petehunt)
  * [Philipp Spiess](https://github.com/philipp-spiess)
  * [Rachel Nabors](https://github.com/rachelnabors)
  * [Robert Zhang](https://github.com/robertzhidealx)
  * [Samuel Susla](https://github.com/sammy-SC)
  * [Sander Spies](https://github.com/sanderspies)
  * [Sasha Aickin](https://github.com/aickin)
  * [Sean Keegan](https://github.com/seanryankeegan)
  * [Sophia Shoemaker](https://github.com/mrscobbler)
  * [Sunil Pai](https://github.com/threepointone)
  * [Tim Yung](https://github.com/yungsters)
  * [Xuan Huang](https://github.com/huxpro)



This list is not exhaustive.

We’d like to give special thanks to [Tom Occhino](https://github.com/tomocchino) and [Adam Wolff](https://github.com/wolffiex) for their guidance and support over the years. We are also thankful to all the volunteers who [translated React into other languages.](https://translations.react.dev/)

## Additional Thanks [](#additional-thanks "Link for Additional Thanks ")

Additionally, we’re grateful to:

  * [Jeff Barczewski](https://github.com/jeffbski) for allowing us to use the `react` package name on npm
  * [Christopher Aue](https://christopheraue.net/) for letting us use the reactjs.com domain name and the username on Twitter
  * [ProjectMoon](https://github.com/ProjectMoon) for letting us use the [flux](https://www.npmjs.com/package/flux) package name on npm
  * Shane Anderson for allowing us to use the [react](https://github.com/react) org on GitHub



[PreviousTranslations](/community/translations)[NextVersioning Policy](/community/versioning-policy)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Past contributors ](#past-contributors)
  * [Additional Thanks ](#additional-thanks)


[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact%2Freleases)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact%2Freleases)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Freleases%2Findex&source=header-repo&source_repo=facebook%2Freact) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ facebook ](/facebook) / **[react](/facebook/react) ** Public

  * [ Notifications ](/login?return_to=%2Ffacebook%2Freact) You must be signed in to change notification settings
  * [ Fork 47.2k ](/login?return_to=%2Ffacebook%2Freact)
  * [ Star  231k ](/login?return_to=%2Ffacebook%2Freact)




  * [ Code ](/facebook/react)
  * [ Issues 758 ](/facebook/react/issues)
  * [ Pull requests 168 ](/facebook/react/pulls)
  * [ Actions ](/facebook/react/actions)
  * [ Projects 0 ](/facebook/react/projects)
  * [ Wiki ](/facebook/react/wiki)
  * [ Security ](/facebook/react/security)
  * [ Insights ](/facebook/react/pulse)



Additional navigation options

  * [ Code  ](/facebook/react)
  * [ Issues  ](/facebook/react/issues)
  * [ Pull requests  ](/facebook/react/pulls)
  * [ Actions  ](/facebook/react/actions)
  * [ Projects  ](/facebook/react/projects)
  * [ Wiki  ](/facebook/react/wiki)
  * [ Security  ](/facebook/react/security)
  * [ Insights  ](/facebook/react/pulse)



# Releases: facebook/react

[Releases](/facebook/react/releases) [Tags](/facebook/react/tags)

Releases · facebook/react

## 19.0.0 (December 5, 2024)

05 Dec 21:05 

[jackpope](/jackpope)

[ v19.0.0  ](/facebook/react/tree/v19.0.0)

[ `7aa5dda`](/facebook/react/commit/7aa5dda3b3e4c2baa905a59b922ae7ec14734b24)

This commit was created on GitHub.com and signed with GitHub’s **verified signature**. 

GPG key ID: B5690EEEBB952194 [Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v19.0.0)

Loading

[View all tags](/facebook/react/tags)

[19.0.0 (December 5, 2024)](/facebook/react/releases/tag/v19.0.0) [Latest](/facebook/react/releases/latest)

[Latest](/facebook/react/releases/latest)

Below is a list of all new features, APIs, deprecations, and breaking changes. Read [React 19 release post](https://react.dev/blog/2024/04/25/react-19) and [React 19 upgrade guide](https://react.dev/blog/2024/04/25/react-19-upgrade-guide) for more information.

> Note: To help make the upgrade to React 19 easier, we’ve published a react@18.3 release that is identical to 18.2 but adds warnings for deprecated APIs and other changes that are needed for React 19. We recommend upgrading to React 18.3.1 first to help identify any issues before upgrading to React 19.

## New Features

### React

  * Actions: `startTransition` can now accept async functions. Functions passed to `startTransition` are called “Actions”. A given Transition can include one or more Actions which update state in the background and update the UI with one commit. In addition to updating state, Actions can now perform side effects including async requests, and the Action will wait for the work to finish before finishing the Transition. This feature allows Transitions to include side effects like `fetch()` in the pending state, and provides support for error handling, and optimistic updates.
  * `useActionState`: is a new hook to order Actions inside of a Transition with access to the state of the action, and the pending state. It accepts a reducer that can call Actions, and the initial state used for first render. It also accepts an optional string that is used if the action is passed to a form `action` prop to support progressive enhancement in forms.
  * `useOptimistic`: is a new hook to update state while a Transition is in progress. It returns the state, and a set function that can be called inside a transition to “optimistically” update the state to expected final value immediately while the Transition completes in the background. When the transition finishes, the state is updated to the new value.
  * `use`: is a new API that allows reading resources in render. In React 19, `use` accepts a promise or Context. If provided a promise, `use` will suspend until a value is resolved. `use` can only be used in render but can be called conditionally.
  * `ref` as a prop: Refs can now be used as props, removing the need for `forwardRef`.
  * **Suspense sibling pre-warming** : When a component suspends, React will immediately commit the fallback of the nearest Suspense boundary, without waiting for the entire sibling tree to render. After the fallback commits, React will schedule another render for the suspended siblings to “pre-warm” lazy requests.



### React DOM Client

  * `<form> action` prop: Form Actions allow you to manage forms automatically and integrate with `useFormStatus`. When a `<form> action` succeeds, React will automatically reset the form for uncontrolled components. The form can be reset manually with the new `requestFormReset` API.
  * `<button> and <input> formAction` prop: Actions can be passed to the `formAction` prop to configure form submission behavior. This allows using different Actions depending on the input.
  * `useFormStatus`: is a new hook that provides the status of the parent `<form> action`, as if the form was a Context provider. The hook returns the values: `pending`, `data`, `method`, and `action`.
  * Support for Document Metadata: We’ve added support for rendering document metadata tags in components natively. React will automatically hoist them into the `<head>` section of the document.
  * Support for Stylesheets: React 19 will ensure stylesheets are inserted into the `<head>` on the client before revealing the content of a Suspense boundary that depends on that stylesheet.
  * Support for async scripts: Async scripts can be rendered anywhere in the component tree and React will handle ordering and deduplication.
  * Support for preloading resources: React 19 ships with `preinit`, `preload`, `prefetchDNS`, and `preconnect` APIs to optimize initial page loads by moving discovery of additional resources like fonts out of stylesheet loading. They can also be used to prefetch resources used by an anticipated navigation.



### React DOM Server

  * Added `prerender` and `prerenderToNodeStream` APIs for static site generation. They are designed to work with streaming environments like Node.js Streams and Web Streams. Unlike `renderToString`, they wait for data to load for HTML generation.



### React Server Components

  * RSC features such as directives, server components, and server functions are now stable. This means libraries that ship with Server Components can now target React 19 as a peer dependency with a react-server export condition for use in frameworks that support the Full-stack React Architecture. The underlying APIs used to implement a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x. See [docs](https://19.react.dev/reference/rsc/server-components) for how to support React Server Components.



## Deprecations

  * Deprecated: `element.ref` access: React 19 supports ref as a prop, so we’re deprecating `element.ref` in favor of `element.props.ref`. Accessing will result in a warning.
  * `react-test-renderer`: In React 19, react-test-renderer logs a deprecation warning and has switched to concurrent rendering for web usage. We recommend migrating your tests to @testinglibrary.com/docs/react-testing-library/intro/) or @testingesting-library.com/docs/react-native-testing-library/intro)



## Breaking Changes

React 19 brings in a number of breaking changes, including the removals of long-deprecated APIs. We recommend first upgrading to `18.3.1`, where we've added additional deprecation warnings. Check out the [upgrade guide](https://19.react.dev/blog/2024/04/25/react-19-upgrade-guide) for more details and guidance on codemodding.

### React

  * New JSX Transform is now required: We introduced [a new JSX transform](https://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html) in 2020 to improve bundle size and use JSX without importing React. In React 19, we’re adding additional improvements like using ref as a prop and JSX speed improvements that require the new transform.
  * Errors in render are not re-thrown: Errors that are not caught by an Error Boundary are now reported to window.reportError. Errors that are caught by an Error Boundary are reported to console.error. We’ve introduced `onUncaughtError` and `onCaughtError` methods to `createRoot` and `hydrateRoot` to customize this error handling.
  * Removed: `propTypes`: Using `propTypes` will now be silently ignored. If required, we recommend migrating to TypeScript or another type-checking solution.
  * Removed: `defaultProps` for functions: ES6 default parameters can be used in place. Class components continue to support `defaultProps` since there is no ES6 alternative.
  * Removed: `contextTypes` and `getChildContext`: Legacy Context for class components has been removed in favor of the `contextType` API.
  * Removed: string refs: Any usage of string refs need to be migrated to ref callbacks.
  * Removed: Module pattern factories: A rarely used pattern that can be migrated to regular functions.
  * Removed: `React.createFactory`: Now that JSX is broadly supported, all `createFactory` usage can be migrated to JSX components.
  * Removed: `react-test-renderer/shallow`: This has been a re-export of [react-shallow-renderer](https://github.com/enzymejs/react-shallow-renderer) since React 18. If needed, you can continue to use the third-party package directly. We recommend using @testinglibrary.com/docs/react-testing-library/intro/) or @testingesting-library.com/docs/react-native-testing-library/intro) instead.



### React DOM

  * Removed: `react-dom/test-utils`: We’ve moved `act` from `react-dom/test-utils` to react. All other utilities have been removed.
  * Removed: `ReactDOM`.`render`, `ReactDOM`.`hydrate`: These have been removed in favor of the concurrent equivalents: `ReactDOM`.`createRoot` and `ReactDOM.hydrateRoot`.
  * Removed: `unmountComponentAtNode`: Removed in favor of `root.unmount()`.
  * Removed: `ReactDOM`.`findDOMNode`: You can replace `ReactDOM`.`findDOMNode` with DOM Refs.



## Notable Changes

### React

  * `<Context>` as a provider: You can now render `<Context>` as a provider instead of `<Context.Provider>`.
  * Cleanup functions for refs: When the component unmounts, React will call the cleanup function returned from the ref callback.
  * `useDeferredValue` initial value argument: When provided, `useDeferredValue` will return the initial value for the initial render of a component, then schedule a re-render in the background with the `deferredValue` returned.
  * Support for Custom Elements: React 19 now passes all tests on [Custom Elements Everywhere](https://custom-elements-everywhere.com/).
  * StrictMode changes: `useMemo` and `useCallback` will now reuse the memoized results from the first render, during the second render. Additionally, StrictMode will now double-invoke ref callback functions on initial mount.
  * UMD builds removed: To load React 19 with a script tag, we recommend using an ESM-based CDN such as [esm.sh](http://esm.sh).



### React DOM

  * Diffs for hydration errors: In the case of a mismatch, React 19 logs a single error with a diff of the mismatched content.
  * Compatibility with third-party scripts and extensions: React will now force a client re-render to fix up any mismatched content caused by elements inserted by third-party JS.



## TypeScript Changes

The most common changes can be codemodded with `npx types-react-codemod@latest preset-19 ./path-to-your-react-ts-files`.

  * Removed deprecated TypeScript types: 
    * `ReactChild` (replacement: `React.ReactElement | number | string)`
    * `ReactFragment` (replacement: `Iterable<React.ReactNode>`)
    * `ReactNodeArray` (replacement: `ReadonlyArray<React.ReactNode>`)
    * `ReactText` (replacement:...



[Read more](/facebook/react/releases/tag/v19.0.0)

### Contributors

  * [ ](https://github.com/sophiebits)
  * [ ](https://github.com/kassens)
  * [ ](https://github.com/devongovett)
  * [ ](https://github.com/bvaughn)
  * [ ](https://github.com/sebmarkbage)
  * [ ](https://github.com/styfle)
  * [ ](https://github.com/danieltott)
  * [ ](https://github.com/unstubbable)
  * [ ](https://github.com/jupapios)
  * [ ](https://github.com/gaearon)
  * [ ](https://github.com/markerikson)
  * [ ](https://github.com/sokra)
  * [ ](https://github.com/JonnyBurger)
  * [ ](https://github.com/sammy-SC)
  * [ ](https://github.com/pandaiolo)
  * [ ](https://github.com/HenriqueLimas)
  * [ ](https://github.com/rickhanlonii)
  * [ ](https://github.com/gnoff)
  * [ ](https://github.com/colinhacks)
  * [ ](https://github.com/acdlite)
  * [ ](https://github.com/phryneas)
  * [ ](https://github.com/KarimP)
  * [ ](https://github.com/hansottowirtz)
  * [ ](https://github.com/tyao1)
  * [ ](https://github.com/timneutkens)
  * [ ](https://github.com/liuyenwei)
  * [ ](https://github.com/josepharhar)
  * [ ](https://github.com/jackpope)
  * [ ](https://github.com/feedthejim)
  * [ ](https://github.com/eps1lon)
  * [ ](https://github.com/lubieowoce)
  * [ ](https://github.com/himself65)
  * [ ](https://github.com/jellevoost)
  * [ ](https://github.com/sweetliquid)
  * [ ](https://github.com/ling1726)
  * [ ](https://github.com/mofeiZ)
  * [ ](https://github.com/yujunjung)
  * [ ](https://github.com/SouSingh)



sophiebits, kassens, and 36 other contributors 

Assets 2

Loading

👍 285 hhrrr, lbeckman314, matheuspergoli, raix, jonz94, Foshati, nikischin, 4ndrs, zach-betz-hln, diego-aquino, and 275 more reacted with thumbs up emoji 😄 45 Dmitriy-Frostoff, M21H, dBianchii, li-jia-nan, chemistwang, yisen91, haegeon-kim, th2205, ChiaJune, Entropy-10, and 35 more reacted with laugh emoji 🎉 216 cherniavskii, webbertakken, reichhartd, lbeckman314, camiloan, ArtKullashi, matheuspergoli, raix, jonz94, esvyridov, and 206 more reacted with hooray emoji ❤️ 95 4ndrs, dwalker93, diego-aquino, breadadams, kachkaev, tgmarinho, dylanjmcdonald, hongbo-miao, zweimach, HamoBoker, and 85 more reacted with heart emoji 🚀 123 marcosbotene, lbeckman314, ArtKullashi, fawzii0x3, matheuspergoli, raix, skyfrk, jonz94, MatthewHerbst, Foshati, and 113 more reacted with rocket emoji 👀 40 Dmitriy-Frostoff, M21H, avindra, dBianchii, yisen91, huongdevvn, staaky, haegeon-kim, Kin-Xemer, coder-hxl, and 30 more reacted with eyes emoji

All reactions

  * 👍 285 reactions
  * 😄 45 reactions
  * 🎉 216 reactions
  * ❤️ 95 reactions
  * 🚀 123 reactions
  * 👀 40 reactions



464 people reacted

## eslint-plugin-react-hooks@5.0.0 (Oct 11, 2024)

11 Oct 13:32 

[eps1lon](/eps1lon)

[ eslint-plugin-react-hooks@5.0.0  ](/facebook/react/tree/eslint-plugin-react-hooks%405.0.0)

[ `0911120`](/facebook/react/commit/09111202d617477b63507b41e8b6c3101b4afd87)

This commit was created on GitHub.com and signed with GitHub’s **verified signature**. 

GPG key ID: B5690EEEBB952194 [Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...eslint-plugin-react-hooks%405.0.0)

Loading

[View all tags](/facebook/react/tags)

[eslint-plugin-react-hooks@5.0.0 (Oct 11, 2024)](/facebook/react/releases/tag/eslint-plugin-react-hooks%405.0.0)

This release only contains `eslint-plugin-react-hooks`. Notably, new violations and support for ESLint v9 were added.

## `eslint-plugin-react-hooks`

  * **New Violations:** Component names now need to start with an uppercase letter instead of a non-lowercase letter. This means `_Button` or `_component` are no longer valid. ([@kassens](https://github.com/kassens)) in [#25162](https://github.com/facebook/react/pull/25162) For example, in 

```
function _Component() {
 useState()
 ^^^^^^^^ A React Hook "useState" is called in function "_Component" which is neither a Component nor a custom React Hook function.
}
```


`_Component` should be renamed to `Component`.


  * Add support for ESLint v9. ([@eps1lon](https://github.com/eps1lon) in [#28773](https://github.com/facebook/react/pull/28773))
  * Consider dispatch from `useActionState` stable. ([@eps1lon](https://github.com/eps1lon) in [#29665](https://github.com/facebook/react/pull/29665))
  * Accept `as` expression in callback. ([@StyleShit](https://github.com/StyleShit) in [#28202](https://github.com/facebook/react/pull/28202))
  * Accept `as` expressions in deps array. ([@StyleShit](https://github.com/StyleShit) in [#28189](https://github.com/facebook/react/pull/28189))
  * Treat `React.use()` the same as `use()`. ([@kassens](https://github.com/kassens) in [#27769](https://github.com/facebook/react/pull/27769))
  * Move `use()` lint to non-experimental. ([@kassens](https://github.com/kassens) in [#27768](https://github.com/facebook/react/pull/27768))
  * Support Flow `as` expressions. ([@cpojer](https://github.com/cpojer) in [#27590](https://github.com/facebook/react/pull/27590))
  * Allow `useEffect(fn, undefined)`. ([@kassens](https://github.com/kassens) in [#27525](https://github.com/facebook/react/pull/27525))
  * Disallow hooks in async functions. ([@acdlite](https://github.com/acdlite) in [#27045](https://github.com/facebook/react/pull/27045))
  * Rename experimental `useEvent` to `useEffectEvent`. ([@sebmarkbage](https://github.com/sebmarkbage) in [#25881](https://github.com/facebook/react/pull/25881))
  * Lint for presence of `useEvent` functions in dependency lists. ([@poteto](https://github.com/poteto) in [#25512](https://github.com/facebook/react/pull/25512))
  * Check `useEvent` references instead. ([@poteto](https://github.com/poteto) in [#25319](https://github.com/facebook/react/pull/25319))
  * Update `RulesOfHooks` with `useEvent` rules. ([@poteto](https://github.com/poteto) in [#25285](https://github.com/facebook/react/pull/25285))



Assets 2

Loading

👍 177 mkosir, Amoz19, nilsingwersen, gunters63, kevinpainchaud, fiskryeziu, aryaemami59, re-taro, Shakeskeyboarde, m3thom, and 167 more reacted with thumbs up emoji 😄 3 aalmanasir, GeorgeDzvengwe, and ScriptKnight-Master reacted with laugh emoji 🎉 74 mkosir, Amoz19, QuantumChemist, kevinpainchaud, daniellmiranda, aryaemami59, re-taro, Shakeskeyboarde, alinnert, haodaking, and 64 more reacted with hooray emoji ❤️ 60 mkosir, QuantumChemist, kevinpainchaud, aryaemami59, re-taro, Shakeskeyboarde, slk333, 4ndrs, ShobhitShah1, DavidGDA, and 50 more reacted with heart emoji 🚀 50 mkosir, Amoz19, QuantumChemist, LeunensMichiel, kevinpainchaud, aryaemami59, re-taro, monkey0722, Shakeskeyboarde, rodamaral, and 40 more reacted with rocket emoji 👀 20 Dmitriy-Frostoff, MidlajYH, rodrigomoyano11, Denisskas, lucipas, JamBalaya56562, fadrian06, warmachine028, zdu-strong, Talaxy009, and 10 more reacted with eyes emoji

All reactions

  * 👍 177 reactions
  * 😄 3 reactions
  * 🎉 74 reactions
  * ❤️ 60 reactions
  * 🚀 50 reactions
  * 👀 20 reactions



247 people reacted

## 18.3.1 (April 26, 2024)

26 Apr 19:53 

[rickhanlonii](/rickhanlonii)

[ v18.3.1  ](/facebook/react/tree/v18.3.1)

[ `f1338f8`](/facebook/react/commit/f1338f8080abd1386454a10bbf93d67bfe37ce85)

This commit was signed with the committer’s **verified signature**. 

[ ](/acdlite) [acdlite](/acdlite) Andrew Clark 

SSH Key Fingerprint: kMgJy+7AI/mxxpuyx1Qgc7NZY55dREBRubChEAYfi7I [Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v18.3.1)

Loading

[View all tags](/facebook/react/tags)

[18.3.1 (April 26, 2024)](/facebook/react/releases/tag/v18.3.1)

  * Export `act` from `react` [f1338f](https://github.com/facebook/react/commit/f1338f8080abd1386454a10bbf93d67bfe37ce85)



Assets 2

Loading

👍 293 franz-bendezu, rockyzhang24, IVLIU, jhosep98, golamrabbiazad, manyeyes, undesicimo, doooss, einer20, IntelligentSynthesis, and 283 more reacted with thumbs up emoji 😄 84 jafar-jabr, 1zilc, sergiocarneiro, lin72h, MuhamedAyoub, pwbriggs, undesicimo, silkyland, Marukome0743, MeherabSamir, and 74 more reacted with laugh emoji 🎉 79 hendriknielaender, advanceddev, marcio-grecio, Rel1cx, dbstratta, poteto, ZachLegros, clemstoquart, mkosir, ykzts, and 69 more reacted with hooray emoji ❤️ 96 4ndrs, batosai, marcio-grecio, dbstratta, hrasoa, poteto, mkosir, 1zilc, lin72h, xxrjun, and 86 more reacted with heart emoji 🚀 88 hendriknielaender, KirianCaumes, sampain, xxrjun, marcio-grecio, dbstratta, poteto, esau-morais, mkosir, lin72h, and 78 more reacted with rocket emoji 👀 14 mtayyebdeveloper, CapitanArdeshir, subham007-coder, codewithnathan97, jaimin-bariya, youne-elma, Rucellmai61, trungle33, Quanzhitong, Sudharsan0727, and 4 more reacted with eyes emoji

All reactions

  * 👍 293 reactions
  * 😄 84 reactions
  * 🎉 79 reactions
  * ❤️ 96 reactions
  * 🚀 88 reactions
  * 👀 14 reactions



441 people reacted

## 18.3.0 (April 25, 2024)

26 Apr 19:48 

[rickhanlonii](/rickhanlonii)

[ v18.3.0  ](/facebook/react/tree/v18.3.0)

[ `8a015b6`](/facebook/react/commit/8a015b68cc060079878e426610e64e86fb328f8d)

This commit was signed with the committer’s **verified signature**. 

[ ](/acdlite) [acdlite](/acdlite) Andrew Clark 

SSH Key Fingerprint: kMgJy+7AI/mxxpuyx1Qgc7NZY55dREBRubChEAYfi7I [Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v18.3.0)

Loading

[View all tags](/facebook/react/tags)

[18.3.0 (April 25, 2024)](/facebook/react/releases/tag/v18.3.0)

This release is identical to 18.2 but adds warnings for deprecated APIs and other changes that are needed for React 19.

Read the [React 19 Upgrade Guide](https://react.dev/blog/2024/04/25/react-19-upgrade-guide) for more info.

### React

  * Allow writing to `this.refs` to support string ref codemod [909071](https://github.com/facebook/react/commit/9090712fd3ca4e1099e1f92e67933c2cb4f32552)
  * Warn for deprecated `findDOMNode` outside StrictMode [c3b283](https://github.com/facebook/react/commit/c3b283964108b0e8dbcf1f9eb2e7e67815e39dfb)
  * Warn for deprecated `test-utils` methods [d4ea75](https://github.com/facebook/react/commit/d4ea75dc4258095593b6ac764289f42bddeb835c)
  * Warn for deprecated Legacy Context outside StrictMode [415ee0](https://github.com/facebook/react/commit/415ee0e6ea0fe3e288e65868df2e3241143d5f7f)
  * Warn for deprecated string refs outside StrictMode [#25383](https://github.com/facebook/react/pull/25383)
  * Warn for deprecated `defaultProps` for function components [#25699](https://github.com/facebook/react/pull/25699)
  * Warn when spreading `key` [#25697](https://github.com/facebook/react/pull/25697)
  * Warn when using `act` from `test-utils` [d4ea75](https://github.com/facebook/react/commit/d4ea75dc4258095593b6ac764289f42bddeb835c)



### React DOM

  * Warn for deprecated `unmountComponentAtNode` [8a015b](https://github.com/facebook/react/commit/8a015b68cc060079878e426610e64e86fb328f8d)
  * Warn for deprecated `renderToStaticNodeStream` [#28874](https://github.com/facebook/react/pull/28874)



Assets 2

Loading

👍 115 ChrisWiles, eifr, poteto, clemstoquart, zdu-strong, lin72h, golamrabbiazad, makoto14, ParasSolanki, ramunecroft, and 105 more reacted with thumbs up emoji 😄 24 vozaldi, fadrian06, vikiboss, 1weiho, MidlajYH, lnhrdt, zudydy, gmerwan, oy-itstedpark, w00khyung, and 14 more reacted with laugh emoji 🎉 39 ChrisWiles, Arechii, poteto, ykzts, zdu-strong, lin72h, golamrabbiazad, pwbriggs, syahrizaldev, fadrian06, and 29 more reacted with hooray emoji ❤️ 48 4ndrs, ChrisWiles, poteto, controversial, Bikossor, rendrom, zdu-strong, lin72h, AhmedBaset, golamrabbiazad, and 38 more reacted with heart emoji 🚀 61 mzaien, llegomark, KirianCaumes, dbstratta, Abhiek187, 87xie, 4ndrs, ChrisWiles, rivajunior, poteto, and 51 more reacted with rocket emoji 👀 4 ixsamar, thisisengineer, kronos456, and MagdyKishk reacted with eyes emoji

All reactions

  * 👍 115 reactions
  * 😄 24 reactions
  * 🎉 39 reactions
  * ❤️ 48 reactions
  * 🚀 61 reactions
  * 👀 4 reactions



179 people reacted

## 18.2.0 (June 14, 2022)

14 Jun 19:54 

[gnoff](/gnoff)

[ v18.2.0  ](/facebook/react/tree/v18.2.0)

[ `9e3b772`](/facebook/react/commit/9e3b772b8cabbd8cadc7522ebe3dde3279e79d9e)

This commit was created on GitHub.com and signed with GitHub’s **verified signature**. The key has expired. 

GPG key ID: 4AEE18F83AFDEB23

Expired

[Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v18.2.0)

Loading

[View all tags](/facebook/react/tags)

[18.2.0 (June 14, 2022)](/facebook/react/releases/tag/v18.2.0)

### React DOM

  * Provide a component stack as a second argument to `onRecoverableError`. ([@gnoff](https://github.com/gnoff) in [#24591](https://github.com/facebook/react/pull/24591))
  * Fix hydrating into `document` causing a blank page on mismatch. ([@gnoff](https://github.com/gnoff) in [#24523](https://github.com/facebook/react/pull/24523))
  * Fix false positive hydration errors with Suspense. ([@gnoff](https://github.com/gnoff) in [#24480](https://github.com/facebook/react/pull/24480) and [@acdlite](https://github.com/acdlite) in [#24532](https://github.com/facebook/react/pull/24532))
  * Fix ignored `setState` in Safari when adding an iframe. ([@gaearon](https://github.com/gaearon) in [#24459](https://github.com/facebook/react/pull/24459))



### React DOM Server

  * Pass information about server errors to the client. ([@salazarm](https://github.com/salazarm) and [@gnoff](https://github.com/gnoff) in [#24551](https://github.com/facebook/react/pull/24551) and [#24591](https://github.com/facebook/react/pull/24591))
  * Allow to provide a reason when aborting the HTML stream. ([@gnoff](https://github.com/gnoff) in [#24680](https://github.com/facebook/react/pull/24680))
  * Eliminate extraneous text separators in the HTML where possible. ([@gnoff](https://github.com/gnoff) in [#24630](https://github.com/facebook/react/pull/24630))
  * Disallow complex children inside `<title>` elements to match the browser constraints. ([@gnoff](https://github.com/gnoff) in [#24679](https://github.com/facebook/react/pull/24679))
  * Fix buffering in some worker environments by explicitly setting `highWaterMark` to `0`. ([@jplhomer](https://github.com/jplhomer) in [#24641](https://github.com/facebook/react/pull/24641))



### Server Components (Experimental)

  * Add support for `useId()` inside Server Components. ([@gnoff](https://github.com/gnoff)) in [#24172](https://github.com/facebook/react/pull/24172)



Assets 2

Loading

👍 498 apostolos, morellodev, marcotterra, chanan, dillingham, dcsaszar, davbrito, salvoravida, Resetnak, unrealapex, and 488 more reacted with thumbs up emoji 😄 71 wajeshubham, Huinno-YoonJaeYoon, leonardssh, anaslaham, mhndev, gregarega1993, Ahmedgkanria, lin72h, huynhdev24, Zinoujoker, and 61 more reacted with laugh emoji 🎉 120 mkosir, kazuhitonakayama, rvitaliy, ivanov-v, fatihcandev, aramnazaryan, OmerWow, outbackStack, xiel, tronikelis, and 110 more reacted with hooray emoji ❤️ 178 LakhderAmine99, pavinthan, RazvanRauta, morellodev, jplhomer, blittle, Berrones-Edwin, salvoravida, unrealapex, electron-space, and 168 more reacted with heart emoji 🚀 148 svengreb, unigazer, morellodev, blittle, kachkaev, jakejarvis, brneor, lmachens, salvoravida, unrealapex, and 138 more reacted with rocket emoji 👀 76 MrDanOak, adiezdev, outbackStack, tronikelis, MertHaddad, rivailruiz, andreLDias, EarlGeorge, jamieshark, libeyondea, and 66 more reacted with eyes emoji

All reactions

  * 👍 498 reactions
  * 😄 71 reactions
  * 🎉 120 reactions
  * ❤️ 178 reactions
  * 🚀 148 reactions
  * 👀 76 reactions



696 people reacted

## 18.1.0 (April 26, 2022)

26 Apr 21:15 

[acdlite](/acdlite)

[ v18.1.0  ](/facebook/react/tree/v18.1.0)

[ `22edb9f`](/facebook/react/commit/22edb9f777d27369fd2c1fad378f74e237b6dfd3)

This commit was created on GitHub.com and signed with GitHub’s **verified signature**. The key has expired. 

GPG key ID: 4AEE18F83AFDEB23

Expired

[Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v18.1.0)

Loading

[View all tags](/facebook/react/tags)

[18.1.0 (April 26, 2022)](/facebook/react/releases/tag/v18.1.0)

### React DOM

  * Fix the false positive warning about `react-dom/client` when using UMD bundle. ([@alireza-molaee](https://github.com/alireza-molaee) in [#24274](https://github.com/facebook/react/pull/24274))
  * Fix `suppressHydrationWarning` to work in production too. ([@gaearon](https://github.com/gaearon) in [#24271](https://github.com/facebook/react/pull/24271))
  * Fix `componentWillUnmount` firing twice inside of Suspense. ([@acdlite](https://github.com/acdlite) in [#24308](https://github.com/facebook/react/pull/24308))
  * Fix some transition updates being ignored. ([@acdlite](https://github.com/acdlite) in [#24353](https://github.com/facebook/react/pull/24353))
  * Fix `useDeferredValue` causing an infinite loop when passed an unmemoized value. ([@acdlite](https://github.com/acdlite) in [#24247](https://github.com/facebook/react/pull/24247))
  * Fix throttling of revealing Suspense fallbacks. ([@sunderls](https://github.com/sunderls) in [#24253](https://github.com/facebook/react/pull/24253))
  * Fix an inconsistency in whether the props object is the same between renders. ([@Andarist](https://github.com/Andarist) and [@acdlite](https://github.com/acdlite) in [#24421](https://github.com/facebook/react/pull/24421))
  * Fix a missing warning about a `setState` loop in `useEffect`. ([@gaearon](https://github.com/gaearon) in [#24298](https://github.com/facebook/react/pull/24298))
  * Fix a spurious hydration error. ([@gnoff](https://github.com/gnoff) in [#24404](https://github.com/facebook/react/pull/24404))
  * Warn when calling `setState` in `useInsertionEffect`. ([@gaearon](https://github.com/gaearon) in [#24295](https://github.com/facebook/react/pull/24295))
  * Ensure the reason for hydration errors is always displayed. ([@gaearon](https://github.com/gaearon) in [#24276](https://github.com/facebook/react/pull/24276))



### React DOM Server

  * Fix escaping for the `bootstrapScriptContent` contents. ([@gnoff](https://github.com/gnoff) in [#24385](https://github.com/facebook/react/pull/24385))
  * Significantly improve performance of `renderToPipeableStream`. ([@gnoff](https://github.com/gnoff) in [#24291](https://github.com/facebook/react/pull/24291))



### ESLint Plugin: React Hooks

  * Fix false positive errors with a large number of branches. ([@scyron6](https://github.com/scyron6) in [#24287](https://github.com/facebook/react/pull/24287))
  * Don't consider a known dependency stable when the variable is reassigned. ([@afzalsayed96](https://github.com/afzalsayed96) in [#24343](https://github.com/facebook/react/pull/24343))



### Use Subscription

  * Replace the implementation with the `use-sync-external-store` shim. ([@gaearon](https://github.com/gaearon) in [#24289](https://github.com/facebook/react/pull/24289))



Assets 2

Loading

👍 250 natewu, yusufneeson, rockchalkwushock, liu-yihong, NetLancer, jkoon90, devrsi0n, songjianet, gaby, donguks, and 240 more reacted with thumbs up emoji 😄 53 dimaMachina, hundehausen, nathan3boss, sajadevo, naji0329, alexander-grube, yairdyule, HillLiu, thevuong, zhuangya, and 43 more reacted with laugh emoji 🎉 98 dimaMachina, whoisjordangarcia, hundehausen, akamfoad, ecreeth, nathan3boss, sajadevo, naji0329, alexander-grube, import-brain, and 88 more reacted with hooray emoji ❤️ 72 eideard-hm, thevuong, lucasgdb, phobal, imjordanxd, beetcb, NoMoreViolence, raix, kasipavankumar, mkosir, and 62 more reacted with heart emoji 🚀 84 dimaMachina, hundehausen, svengreb, nathan3boss, sajadevo, naji0329, alexander-grube, import-brain, duzitug, TIMMLOPK, and 74 more reacted with rocket emoji 👀 46 ahsouza, thepmsquare, 3lang3, rodamaral, world56, charlie043, NoMoreViolence, U-C-S, tobyleye, oliverloops, and 36 more reacted with eyes emoji

All reactions

  * 👍 250 reactions
  * 😄 53 reactions
  * 🎉 98 reactions
  * ❤️ 72 reactions
  * 🚀 84 reactions
  * 👀 46 reactions



371 people reacted

## 18.0.0 (March 29, 2022)

29 Mar 17:22 

[acdlite](/acdlite)

[ v18.0.0  ](/facebook/react/tree/v18.0.0)

[ `34aa5cf`](/facebook/react/commit/34aa5cfe0d9b6ec4667e02bf46ab34d83dfb2d6d)

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v18.0.0)

Loading

[View all tags](/facebook/react/tags)

[18.0.0 (March 29, 2022)](/facebook/react/releases/tag/v18.0.0)

Below is a list of all new features, APIs, deprecations, and breaking changes. Read [React 18 release post](https://reactjs.org/blog/2022/03/29/react-v18.html) and [React 18 upgrade guide](https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html) for more information.

### New Features

### React

  * `useId` is a new hook for generating unique IDs on both the client and server, while avoiding hydration mismatches. It is primarily useful for component libraries integrating with accessibility APIs that require unique IDs. This solves an issue that already exists in React 17 and below, but it’s even more important in React 18 because of how the new streaming server renderer delivers HTML out-of-order.
  * `startTransition` and `useTransition` let you mark some state updates as not urgent. Other state updates are considered urgent by default. React will allow urgent state updates (for example, updating a text input) to interrupt non-urgent state updates (for example, rendering a list of search results).
  * `useDeferredValue` lets you defer re-rendering a non-urgent part of the tree. It is similar to debouncing, but has a few advantages compared to it. There is no fixed time delay, so React will attempt the deferred render right after the first render is reflected on the screen. The deferred render is interruptible and doesn't block user input.
  * `useSyncExternalStore` is a new hook that allows external stores to support concurrent reads by forcing updates to the store to be synchronous. It removes the need for `useEffect` when implementing subscriptions to external data sources, and is recommended for any library that integrates with state external to React.
  * `useInsertionEffect` is a new hook that allows CSS-in-JS libraries to address performance issues of injecting styles in render. Unless you’ve already built a CSS-in-JS library we don’t expect you to ever use this. This hook will run after the DOM is mutated, but before layout effects read the new layout. This solves an issue that already exists in React 17 and below, but is even more important in React 18 because React yields to the browser during concurrent rendering, giving it a chance to recalculate layout.



### React DOM Client

These new APIs are now exported from `react-dom/client`:

  * `createRoot`: New method to create a root to `render` or `unmount`. Use it instead of `ReactDOM.render`. New features in React 18 don't work without it.
  * `hydrateRoot`: New method to hydrate a server rendered application. Use it instead of `ReactDOM.hydrate` in conjunction with the new React DOM Server APIs. New features in React 18 don't work without it.



Both `createRoot` and `hydrateRoot` accept a new option called `onRecoverableError` in case you want to be notified when React recovers from errors during rendering or hydration for logging. By default, React will use `reportError`[](https://developer.mozilla.org/en-US/docs/Web/API/reportError), or `console.error` in the older browsers.

### React DOM Server

These new APIs are now exported from `react-dom/server` and have full support for streaming Suspense on the server:

  * `renderToPipeableStream`: for streaming in Node environments.
  * `renderToReadableStream`: for modern edge runtime environments, such as Deno and Cloudflare workers.



The existing `renderToString` method keeps working but is discouraged.

## Deprecations

  * `react-dom`: `ReactDOM.render` has been deprecated. Using it will warn and run your app in React 17 mode.
  * `react-dom`: `ReactDOM.hydrate` has been deprecated. Using it will warn and run your app in React 17 mode.
  * `react-dom`: `ReactDOM.unmountComponentAtNode` has been deprecated.
  * `react-dom`: `ReactDOM.renderSubtreeIntoContainer` has been deprecated.
  * `react-dom/server`: `ReactDOMServer.renderToNodeStream` has been deprecated.



## Breaking Changes

### React

  * **Automatic batching:** This release introduces a performance improvement that changes to the way React batches updates to do more batching automatically. See [Automatic batching for fewer renders in React 18](https://github.com/reactwg/react-18/discussions/21) for more info. In the rare case that you need to opt out, wrap the state update in `flushSync`.
  * **Stricter Strict Mode** : In the future, React will provide a feature that lets components preserve state between unmounts. To prepare for it, React 18 introduces a new development-only check to Strict Mode. React will automatically unmount and remount every component, whenever a component mounts for the first time, restoring the previous state on the second mount. If this breaks your app, consider removing Strict Mode until you can fix the components to be resilient to remounting with existing state.
  * **Consistent useEffect timing** : React now always synchronously flushes effect functions if the update was triggered during a discrete user input event such as a click or a keydown event. Previously, the behavior wasn't always predictable or consistent.
  * **Stricter hydration errors** : Hydration mismatches due to missing or extra text content are now treated like errors instead of warnings. React will no longer attempt to "patch up" individual nodes by inserting or deleting a node on the client in an attempt to match the server markup, and will revert to client rendering up to the closest `<Suspense>` boundary in the tree. This ensures the hydrated tree is consistent and avoids potential privacy and security holes that can be caused by hydration mismatches.
  * **Suspense trees are always consistent:** If a component suspends before it's fully added to the tree, React will not add it to the tree in an incomplete state or fire its effects. Instead, React will throw away the new tree completely, wait for the asynchronous operation to finish, and then retry rendering again from scratch. React will render the retry attempt concurrently, and without blocking the browser.
  * **Layout Effects with Suspense** : When a tree re-suspends and reverts to a fallback, React will now clean up layout effects, and then re-create them when the content inside the boundary is shown again. This fixes an issue which prevented component libraries from correctly measuring layout when used with Suspense.
  * **New JS Environment Requirements** : React now depends on modern browsers features including `Promise`, `Symbol`, and `Object.assign`. If you support older browsers and devices such as Internet Explorer which do not provide modern browser features natively or have non-compliant implementations, consider including a global polyfill in your bundled application.



### Scheduler (Experimental)

  * Remove unstable `scheduler/tracing` API



## Notable Changes

### React

  * **Components can now render`undefined` :** React no longer throws if you return `undefined` from a component. This makes the allowed component return values consistent with values that are allowed in the middle of a component tree. We suggest to use a linter to prevent mistakes like forgetting a `return` statement before JSX.
  * **In tests,`act` warnings are now opt-in:** If you're running end-to-end tests, the `act` warnings are unnecessary. We've introduced an [opt-in](https://github.com/reactwg/react-18/discussions/102) mechanism so you can enable them only for unit tests where they are useful and beneficial.
  * **No warning about`setState` on unmounted components:** Previously, React warned about memory leaks when you call `setState` on an unmounted component. This warning was added for subscriptions, but people primarily run into it in scenarios where setting state is fine, and workarounds make the code worse. We've [removed](https://github.com/facebook/react/pull/22114) this warning.
  * **No suppression of console logs:** When you use Strict Mode, React renders each component twice to help you find unexpected side effects. In React 17, we've suppressed console logs for one of the two renders to make the logs easier to read. In response to [community feedback](https://github.com/facebook/react/issues/21783) about this being confusing, we've removed the suppression. Instead, if you have React DevTools installed, the second log's renders will be displayed in grey, and there will be an option (off by default) to suppress them completely.
  * **Improved memory usage:** React now cleans up more internal fields on unmount, making the impact from unfixed memory leaks that may exist in your application code less severe.



### React DOM Server

  * **`renderToString`:** Will no longer error when suspending on the server. Instead, it will emit the fallback HTML for the closest `<Suspense>` boundary and then retry rendering the same content on the client. It is still recommended that you switch to a streaming API like `renderToPipeableStream` or `renderToReadableStream` instead.
  * **`renderToStaticMarkup`:** Will no longer error when suspending on the server. Instead, it will emit the fallback HTML for the closest `<Suspense>` boundary and retry rendering on the client.



## All Changes

## React

  * Add `useTransition` and `useDeferredValue` to separate urgent updates from transitions. ([#10426](https://github.com/facebook/react/pull/10426), [#10715](https://github.com/facebook/react/pull/10715), [#15593](https://github.com/facebook/react/pull/15593), [#15272](https://github.com/facebook/react/pull/15272), [#15578](https://github.com/facebook/react/pull/15578), [#15769](https://github.com/facebook/react/pull/15769), [#17058](https://github.com/facebook/react/pull/17058), [#18796](https://github.com/facebook/react/pull/18796), [#19121](https://github.com/facebook/react/pull/19121), [#19703](https://github.com/facebook/react/pull/19703), [#19719](https://github.com/facebook/react/pull/19719), [#19724](https://github.com/facebook/react/pull/19724), [#20672](https://github.com/facebook/react/pull/20672), [#20976](https://github.com/facebook/react/pull/20976) by [[@acdlite](https://github.com/acdlite)](<https://git>...



[Read more](/facebook/react/releases/tag/v18.0.0)

Assets 2

Loading

👍 711 aabuhijleh, chayeoi, medanat, yezz123, targos, ricardocanelas, hundehausen, lin72h, andreasnilssondev, AlekseiAndriushin, and 701 more reacted with thumbs up emoji 😄 123 ricardocanelas, lin72h, reichhartd, birdview-HongKi, must479, kytosai, tronikelis, JulesPatry, xxxxue, pedro-lb, and 113 more reacted with laugh emoji 🎉 313 ricardocanelas, hundehausen, lin72h, reichhartd, mario-jerkovic, mahmoudkandeel, RemyMachado, A1101101IR, saitergun, joulev, and 303 more reacted with hooray emoji ❤️ 242 ricardocanelas, lin72h, reichhartd, matuzalemsteles, mario-jerkovic, mahmoudkandeel, birdview-HongKi, josuazurbruegg, fpiaggio-optiwe, sshquack, and 232 more reacted with heart emoji 🚀 256 Danieltf100, medanat, leonardopliski, luoxuhai, aslupin, andipaetzold, RafaelBahiense, ricardocanelas, hundehausen, lin72h, and 246 more reacted with rocket emoji 👀 109 luoxuhai, yezz123, ricardocanelas, reichhartd, sudovijay, tronikelis, JulesPatry, Illu, xxxxue, pedro-lb, and 99 more reacted with eyes emoji

All reactions

  * 👍 711 reactions
  * 😄 123 reactions
  * 🎉 313 reactions
  * ❤️ 242 reactions
  * 🚀 256 reactions
  * 👀 109 reactions



960 people reacted

## 17.0.2 (March 22, 2021)

22 Mar 22:00 

[gaearon](/gaearon)

[ v17.0.2  ](/facebook/react/tree/v17.0.2)

[ `12adaff`](/facebook/react/commit/12adaffef7105e2714f82651ea51936c563fe15c)

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v17.0.2)

Loading

[View all tags](/facebook/react/tags)

[17.0.2 (March 22, 2021)](/facebook/react/releases/tag/v17.0.2)

### React DOM

  * Remove an unused dependency to address the `SharedArrayBuffer`[ cross-origin isolation warning](https://developer.chrome.com/blog/enabling-shared-array-buffer/). ([@koba04](https://github.com/koba04) and [@bvaughn](https://github.com/bvaughn) in [#20831](https://github.com/facebook/react/pull/20831), [#20832](https://github.com/facebook/react/pull/20832), and [#20840](https://github.com/facebook/react/pull/20840))



## Artifacts

  * react: <https://unpkg.com/react@17.0.2/umd/>
  * react-art: <https://unpkg.com/react-art@17.0.2/umd/>
  * react-dom: <https://unpkg.com/react-dom@17.0.2/umd/>
  * react-is: <https://unpkg.com/react-is@17.0.2/umd/>
  * react-test-renderer: <https://unpkg.com/react-test-renderer@17.0.2/umd/>
  * scheduler: <https://unpkg.com/scheduler@0.20.2/umd/>



Assets 2

Loading

👍 148 asumaran, moongue, niubaba63, ogawaryu, lkzwc, cdslily, Mayandev, cococov, Nikolozi-Code, luvagu, and 138 more reacted with thumbs up emoji 😄 42 asumaran, cococov, sungkwangkim, leandrowilliam, shourysharma, andrey1997acer, zeayal, NavidMansuri5155, pH-7, 365kim, and 32 more reacted with laugh emoji 🎉 51 asumaran, cococov, sungkwangkim, shourysharma, raysubham, andrey1997acer, zeayal, imaksp, NavidMansuri5155, pH-7, and 41 more reacted with hooray emoji ❤️ 53 asumaran, mohitsinhchavda, shourysharma, raysubham, andrey1997acer, zeayal, NavidMansuri5155, 365kim, masudparvezsajjad, zereight, and 43 more reacted with heart emoji 🚀 55 asumaran, maxpou, cococov, sungkwangkim, leandrowilliam, crazy-grizzly, mohitsinhchavda, shourysharma, raysubham, theory-of-soul, and 45 more reacted with rocket emoji 👀 40 asumaran, cococov, shourysharma, andrey1997acer, zeayal, NavidMansuri5155, jettandres, DJLuis97, 365kim, rodamaral, and 30 more reacted with eyes emoji

All reactions

  * 👍 148 reactions
  * 😄 42 reactions
  * 🎉 51 reactions
  * ❤️ 53 reactions
  * 🚀 55 reactions
  * 👀 40 reactions



187 people reacted

## 17.0.1 (October 22, 2020)

22 Mar 21:59 

[gaearon](/gaearon)

[ v17.0.1  ](/facebook/react/tree/v17.0.1)

[ `8e5adfb`](/facebook/react/commit/8e5adfbd7e605bda9c5e96c10e015b3dc0df688e)

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v17.0.1)

Loading

[View all tags](/facebook/react/tags)

[17.0.1 (October 22, 2020)](/facebook/react/releases/tag/v17.0.1)

### React DOM

  * Fix a crash in IE11. ([@gaearon](https://github.com/gaearon) in [#20071](https://github.com/facebook/react/pull/20071))



Assets 2

Loading

👍 2 chris6090 and ikhtearalamshawonmollah54321 reacted with thumbs up emoji 😄 14 hoa00, farm16, ArthurIanb, joshkautz, vituchini, liuhaiyang1997, Schweinepriester, theoludwig, huynhdev24, njosueofficol, and 4 more reacted with laugh emoji 🎉 2 chris6090 and ikhtearalamshawonmollah54321 reacted with hooray emoji ❤️ 14 SonNg2k, farzadrastgar, rex11458, sadeghbarati, Jmenache, 010265mohamadazat, jose1937JS, vahidalvandi, njosueofficol, krishangopalgupta, and 4 more reacted with heart emoji 🚀 3 dream2023, chris6090, and ikhtearalamshawonmollah54321 reacted with rocket emoji 👀 5 zereight, sadeghbarati, kstejas, vkzkvkzk, and chris6090 reacted with eyes emoji

All reactions

  * 👍 2 reactions
  * 😄 14 reactions
  * 🎉 2 reactions
  * ❤️ 14 reactions
  * 🚀 3 reactions
  * 👀 5 reactions



29 people reacted

## 17.0.0 (October 20, 2020)

20 Oct 20:45 

[gaearon](/gaearon)

[ v17.0.0  ](/facebook/react/tree/v17.0.0)

[ `89b6109`](/facebook/react/commit/89b610969d70d788f8c9769e3fa5b0044f5737ab)

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v17.0.0)

Loading

[View all tags](/facebook/react/tags)

[17.0.0 (October 20, 2020)](/facebook/react/releases/tag/v17.0.0)

Today, we are releasing React 17!

**[Learn more about React 17 and how to update to it on the official React blog.](https://reactjs.org/blog/2020/10/20/react-v17.html)**

### React

  * Add `react/jsx-runtime` and `react/jsx-dev-runtime` for the [new JSX transform](https://babeljs.io/blog/2020/03/16/7.9.0#a-new-jsx-transform-11154-https-githubcom-babel-babel-pull-11154). ([@lunaruan](https://github.com/lunaruan) in [#18299](https://github.com/facebook/react/pull/18299))
  * Build component stacks from native error frames. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18561](https://github.com/facebook/react/pull/18561))
  * Allow to specify `displayName` on context for improved stacks. ([@eps1lon](https://github.com/eps1lon) in [#18224](https://github.com/facebook/react/pull/18224))
  * Prevent `'use strict'` from leaking in the UMD bundles. ([@koba04](https://github.com/koba04) in [#19614](https://github.com/facebook/react/pull/19614))
  * Stop using `fb.me` for redirects. ([@cylim](https://github.com/cylim) in [#19598](https://github.com/facebook/react/pull/19598))



### React DOM

  * Delegate events to roots instead of `document`. ([@trueadm](https://github.com/trueadm) in [#18195](https://github.com/facebook/react/pull/18195) and [others](https://github.com/facebook/react/pulls?q=is%3Apr+author%3Atrueadm+modern+event+is%3Amerged))
  * Clean up all effects before running any next effects. ([@bvaughn](https://github.com/bvaughn) in [#17947](https://github.com/facebook/react/pull/17947))
  * Run `useEffect` cleanup functions asynchronously. ([@bvaughn](https://github.com/bvaughn) in [#17925](https://github.com/facebook/react/pull/17925))
  * Use browser `focusin` and `focusout` for `onFocus` and `onBlur`. ([@trueadm](https://github.com/trueadm) in [#19186](https://github.com/facebook/react/pull/19186))
  * Make all `Capture` events use the browser capture phase. ([@trueadm](https://github.com/trueadm) in [#19221](https://github.com/facebook/react/pull/19221))
  * Don't emulate bubbling of the `onScroll` event. ([@gaearon](https://github.com/gaearon) in [#19464](https://github.com/facebook/react/pull/19464))
  * Throw if `forwardRef` or `memo` component returns `undefined`. ([@gaearon](https://github.com/gaearon) in [#19550](https://github.com/facebook/react/pull/19550))
  * Remove event pooling. ([@trueadm](https://github.com/trueadm) in [#18969](https://github.com/facebook/react/pull/18969))
  * Stop exposing internals that won’t be needed by React Native Web. ([@necolas](https://github.com/necolas) in [#18483](https://github.com/facebook/react/pull/18483))
  * Attach all known event listeners when the root mounts. ([@gaearon](https://github.com/gaearon) in [#19659](https://github.com/facebook/react/pull/19659))
  * Disable `console` in the second render pass of DEV mode double render. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18547](https://github.com/facebook/react/pull/18547))
  * Deprecate the undocumented and misleading `ReactTestUtils.SimulateNative` API. ([@gaearon](https://github.com/gaearon) in [#13407](https://github.com/facebook/react/pull/13407))
  * Rename private field names used in the internals. ([@gaearon](https://github.com/gaearon) in [#18377](https://github.com/facebook/react/pull/18377))
  * Don't call User Timing API in development. ([@gaearon](https://github.com/gaearon) in [#18417](https://github.com/facebook/react/pull/18417))
  * Disable console during the repeated render in Strict Mode. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18547](https://github.com/facebook/react/pull/18547))
  * In Strict Mode, double-render components without Hooks too. ([@eps1lon](https://github.com/eps1lon) in [#18430](https://github.com/facebook/react/pull/18430))
  * Allow calling `ReactDOM.flushSync` during lifecycle methods (but warn). ([@sebmarkbage](https://github.com/sebmarkbage) in [#18759](https://github.com/facebook/react/pull/18759))
  * Add the `code` property to the keyboard event objects. ([@bl00mber](https://github.com/bl00mber) in [#18287](https://github.com/facebook/react/pull/18287))
  * Add the `disableRemotePlayback` property for `video` elements. ([@tombrowndev](https://github.com/tombrowndev) in [#18619](https://github.com/facebook/react/pull/18619))
  * Add the `enterKeyHint` property for `input` elements. ([@eps1lon](https://github.com/eps1lon) in [#18634](https://github.com/facebook/react/pull/18634))
  * Warn when no `value` is provided to `<Context.Provider>`. ([@charlie1404](https://github.com/charlie1404) in [#19054](https://github.com/facebook/react/pull/19054))
  * Warn when `memo` or `forwardRef` components return `undefined`. ([@bvaughn](https://github.com/bvaughn) in [#19550](https://github.com/facebook/react/pull/19550))
  * Improve the error message for invalid updates. ([@JoviDeCroock](https://github.com/JoviDeCroock) in [#18316](https://github.com/facebook/react/pull/18316))
  * Exclude forwardRef and memo from stack frames. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18559](https://github.com/facebook/react/pull/18559))
  * Improve the error message when switching between controlled and uncontrolled inputs. ([@vcarl](https://github.com/vcarl) in [#17070](https://github.com/facebook/react/pull/17070))
  * Keep `onTouchStart`, `onTouchMove`, and `onWheel` passive. ([@gaearon](https://github.com/gaearon) in [#19654](https://github.com/facebook/react/pull/19654))
  * Fix `setState` hanging in development inside a closed iframe. ([@gaearon](https://github.com/gaearon) in [#19220](https://github.com/facebook/react/pull/19220))
  * Fix rendering bailout for lazy components with `defaultProps`. ([@jddxf](https://github.com/jddxf) in [#18539](https://github.com/facebook/react/pull/18539))
  * Fix a false positive warning when `dangerouslySetInnerHTML` is `undefined`. ([@eps1lon](https://github.com/eps1lon) in [#18676](https://github.com/facebook/react/pull/18676))
  * Fix Test Utils with non-standard `require` implementation. ([@just-boris](https://github.com/just-boris) in [#18632](https://github.com/facebook/react/pull/18632))
  * Fix `onBeforeInput` reporting an incorrect `event.type`. ([@eps1lon](https://github.com/eps1lon) in [#19561](https://github.com/facebook/react/pull/19561))
  * Fix `event.relatedTarget` reported as `undefined` in Firefox. ([@claytercek](https://github.com/claytercek) in [#19607](https://github.com/facebook/react/pull/19607))
  * Fix "unspecified error" in IE11. ([@hemakshis](https://github.com/hemakshis) in [#19664](https://github.com/facebook/react/pull/19664))
  * Fix rendering into a shadow root. ([@Jack-Works](https://github.com/Jack-Works) in [#15894](https://github.com/facebook/react/pull/15894))
  * Fix `movementX/Y` polyfill with capture events. ([@gaearon](https://github.com/gaearon) in [#19672](https://github.com/facebook/react/pull/19672))
  * Use delegation for `onSubmit` and `onReset` events. ([@gaearon](https://github.com/gaearon) in [#19333](https://github.com/facebook/react/pull/19333))
  * Improve memory usage. ([@trueadm](https://github.com/trueadm) in [#18970](https://github.com/facebook/react/pull/18970))



### React DOM Server

  * Make `useCallback` behavior consistent with `useMemo` for the server renderer. ([@alexmckenley](https://github.com/alexmckenley) in [#18783](https://github.com/facebook/react/pull/18783))
  * Fix state leaking when a function component throws. ([@pmaccart](https://github.com/pmaccart) in [#19212](https://github.com/facebook/react/pull/19212))



### React Test Renderer

  * Improve `findByType` error message. ([@henryqdineen](https://github.com/henryqdineen) in [#17439](https://github.com/facebook/react/pull/17439))



### Concurrent Mode (Experimental)

  * Revamp the priority batching heuristics. ([@acdlite](https://github.com/acdlite) in [#18796](https://github.com/facebook/react/pull/18796))
  * Add the `unstable_` prefix before the experimental APIs. ([@acdlite](https://github.com/acdlite) in [#18825](https://github.com/facebook/react/pull/18825))
  * Remove `unstable_discreteUpdates` and `unstable_flushDiscreteUpdates`. ([@trueadm](https://github.com/trueadm) in [#18825](https://github.com/facebook/react/pull/18825))
  * Remove the `timeoutMs` argument. ([@acdlite](https://github.com/acdlite) in [#19703](https://github.com/facebook/react/pull/19703))
  * Disable `<div hidden />` prerendering in favor of a different future API. ([@acdlite](https://github.com/acdlite) in [#18917](https://github.com/facebook/react/pull/18917))
  * Add `unstable_expectedLoadTime` to Suspense for CPU-bound trees. ([@acdlite](https://github.com/acdlite) in [#19936](https://github.com/facebook/react/pull/19936))
  * Add an experimental `unstable_useOpaqueIdentifier` Hook. ([@lunaruan](https://github.com/lunaruan) in [#17322](https://github.com/facebook/react/pull/17322))
  * Add an experimental `unstable_startTransition` API. ([@rickhanlonii](https://github.com/rickhanlonii) in [#19696](https://github.com/facebook/react/pull/19696))
  * Using `act` in the test renderer no longer flushes Suspense fallbacks. ([@acdlite](https://github.com/acdlite) in [#18596](https://github.com/facebook/react/pull/18596))
  * Use global render timeout for CPU Suspense. ([@sebmarkbage](https://github.com/sebmarkbage) in [#19643](https://github.com/facebook/react/pull/19643))
  * Clear the existing root content before mounting. ([@bvaughn](https://github.com/bvaughn) in [#18730](https://github.com/facebook/react/pull/18730))
  * Fix a bug with error boundaries. ([@acdlite](https://github.com/acdlite) in [#18265](https://github.com/facebook/react/pull/18265))
  * Fix a bug causing dropped updates in a suspended tree. ([@acdlite](https://github.com/acdlite) in [#18384](https://github.com/facebook/react/pull/18384) and [#18457](https://github.com/facebook/react/pull/18457))
  * Fix a bug causing dropped render phase updates. ([@acdlite](https://github.com/acdlite) in [#18537](https://github.com/facebook/react/pull/18537))
  * Fix a bug in Suspens...



[Read more](/facebook/react/releases/tag/v17.0.0)

Assets 2

Loading

👍 22 kwiniarski97, eduardo-fernandes-marques, andriyor, sadeghbarati, bulabulaka, Jmenache, lucas-dolsan, yusoofsh, HazemKhaled, jamesalmeida, and 12 more reacted with thumbs up emoji 😄 2 subham007-coder and lin72h reacted with laugh emoji 🎉 7 perseus98, hansfpc, Shubhamsharma585, kyuhyunIm, chris6090, lin72h, and ikhtearalamshawonmollah54321 reacted with hooray emoji ❤️ 9 0xping, gonzalovazquez, theenadayalan-byjus, hansfpc, Shubhamsharma585, kyuhyunIm, chris6090, lin72h, and ikhtearalamshawonmollah54321 reacted with heart emoji 🚀 8 duzitug, hansfpc, gokul-pathak, Shubhamsharma585, kyuhyunIm, chris6090, lin72h, and ikhtearalamshawonmollah54321 reacted with rocket emoji 👀 5 huynhdev24, Shubhamsharma585, kyuhyunIm, Arnavdons, and chris6090 reacted with eyes emoji

All reactions

  * 👍 22 reactions
  * 😄 2 reactions
  * 🎉 7 reactions
  * ❤️ 9 reactions
  * 🚀 8 reactions
  * 👀 5 reactions



30 people reacted

Previous _1_ [2](/facebook/react/releases?page=2) [3](/facebook/react/releases?page=3) [4](/facebook/react/releases?page=4) [5](/facebook/react/releases?page=5) … [10](/facebook/react/releases?page=10) [11](/facebook/react/releases?page=11) [Next](/facebook/react/releases?page=2)

Previous [Next](/facebook/react/releases?page=2)

## Footer

[ ](https://github.com "GitHub") © 2024 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You can’t perform that action at this time. 
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

How A Small Team of Developers Created React at Facebook | React.js: The Documentary

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

95%

•

Up next

LiveUpcoming

CancelPlay Now

[From Node.js to Deno: How It All Began9:12](https://www.youtube.com/watch?v=zxitJn9MwYs)

[Node.js: The Documentary [OFFICIAL TRAILER]1:51](https://www.youtube.com/watch?v=SfWPqr04srM)

Honeypot | Europe's Developer-Focused Job Platform

honeypot.io

[Sign up](https://www.youtube.com/redirect?event=endscreen&redir_token=QUFFLUhqbFpTaVZORGtqUFBRcWlrVTdKanhoWDdwTTFWZ3xBQ3Jtc0ttVHl2THFBZ2J3NUFnUHJqbkVmQnBodThRNG9fZE1ncXdqdDJrdFo1NkdsWkFkVnJaQWxKRWhNNlc0MTI4b2lmeFIwS2ppUzgza1dFZFJGQVh5dzAzdDBjZzBIQkEtQkpRYVJBd2pYWnVUS0VjVEVoWQ&q=honeypot.io)

Honeypot

Subscribe

Subscribed

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?v=LB8KwiiUGy0 "Next \(SHIFT+n\)")

0:00 / 1:18:14•Watch full videoLive

•

•

Scroll for details

#  How A Small Team of Developers Created React at Facebook | React.js: The Documentary

[](/@Honeypotio)

[Honeypot](/@Honeypotio)

Honeypot 

238K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

37K

Share

Download

Download 

Save

1.4M views1 year ago

1,422,617 views • Premiered Feb 10, 2023 

Show less 

React is easily one of the single most popular libraries in use today. Given that it was made within a juggernaut like Facebook, you might have assumed it was always destined for success.…...more 

...more 

Transcript

Follow along using the transcript.

Show transcript

### [Honeypot 238K subscribers  ](/@Honeypotio)

[Videos](/channel/UCsUalyRg43M8D60mtHe6YcA/videos)

[About](/channel/UCsUalyRg43M8D60mtHe6YcA/about)

[Videos](/channel/UCsUalyRg43M8D60mtHe6YcA/videos)[About](/channel/UCsUalyRg43M8D60mtHe6YcA/about)[Twitter](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqazlNRDJPZWJORXJ3WW9tcEhxUjR5blJzUmpad3xBQ3Jtc0tuOFlNV1NTNnJicVY0REV4SjBjQkRxcmxrRGxCZm5lMFpwV01vOVQyc0pReHp2end1Z1J2dll1WlRLR3dQUGR6SzhjNzg3Q1pMQXhVNGNUVnpsZlpaTWpuR1hmTThNUzlZNUlQOFRrT01zcWpvcmdrbw&q=https%3A%2F%2Ftwitter.com%2Fhoneypotio)[Linkedin](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbmVEMF9aV0pIQXNfeEtmQ0ZDcW5IeVdNa2hQQXxBQ3Jtc0tsU0txTFZiYUJOcG9sM1pwVmlqUWNpS2ZJWlZDZFZRUHQ1VlpTQ3dnb0hFXzNnVm1XVUdMc3pGbXRNWFczbVowLU9FUk1TMkNFb3FuRjh1NS05ZWFwNmQyOHJOdXBTMElmOVhLNE05cVdMZjlsRndIaw&q=https%3A%2F%2Fwww.linkedin.com%2Fcompany%2F10210811%2F)[Instagram](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa18xSHVNUnFuZmxZb1RwTU4tcDhFY1UtNjBJUXxBQ3Jtc0tsMWtZSzZrY2pMMExadkU4TEh0N3dQYjE0WlktMDNNZjZwVVBKUkx6ekNNQzZYSURIR2hiVERKTkZkWGhiMEZfakpQd0g0MzQxbEY1QV82UHVQVTBlUWxlMlUtTlZkQ3JIbWQtczJqanBoUlhBWHVFdw&q=https%3A%2F%2Fwww.instagram.com%2Fhoneypot.cult%2F)[Facebook](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbVQ5cmJvVE5KczdOdkk1T2Z3aXpQa1E1cThEd3xBQ3Jtc0ttR0EwMWk4d0RKNU9FOUtaeUxoNGlkNFFrVmV5ZUxGMno4NGRMYnFNZ1dGQ2pHQVBxbk5FVTZBdFZCTnlnUXpYYlhzU0FXR2hLR3pqV2NHLXVvM0ZUTmFhWmhlQnRrTmxjYjEwUExfVnBUa1ptbkxPQQ&q=https%3A%2F%2Fwww.facebook.com%2FHoneypotio%2F)

[ 7:14 7:14  ](/watch?v=WvRcZkuXmpo) [ Andrew Clark on the Creation of Redux by Honeypot ](/watch?v=WvRcZkuXmpo)

Show less 

## Live chat replay

See what others said about this video while it was live.

Open panel

# How A Small Team of Developers Created React at Facebook | React.js: The Documentary

1,422,617 views1.4M views

Premiered Feb 10, 2023

37K

Share

Download

Download 

Save

##  Comments 1.1K

Top comments  Newest first 

##  Description

How A Small Team of Developers Created React at Facebook | React.js: The Documentary

React is easily one of the single most popular libraries in use today. Given that it was made within a juggernaut like Facebook, you might have assumed it was always destined for success. But what if we told you that React’s first brush with the public sphere was anything but glamorous? React.js: The Documentary brings you the full story behind the early days of React, focusing on the dedicated group of developers who helped bring it to the world stage. This story is told by an all-star cast of developers like Tom Occhino, Christopher Chedeau, Pete Hunt, Sebastian Markbåge, Dan Abramov, and many more. Check out the home for untold developer stories around open source, careers and all the other cool stuff developers are doing at cult.honeypot.io. Honeypot is a developer-focused job platform, on a mission to get developers great jobs. Wanna see what we're all about? Visit honeypot.io to find a job you love. To learn more about Honeypot: [https://bit.ly/3OGoDjG](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbkRtdVV3QWVSUTNiSFp0VDMxRV8ycWV0NjFFQXxBQ3Jtc0tuQVZ4bGJRZ0NmOWprWUxaR0dlNlh3VlpwRTN4MzJKa0hDckM0ZGxkY1pZMVdBeXMzVFVTM3ZScU1VMF9sbDRIVUdzVXgxZnFyTGF6RlFOWDNpdDl1Q04wRmcyZWpELXU3SzVaOUg1b1FxSDlNRnRFNA&q=https%3A%2F%2Fbit.ly%2F3OGoDjG&v=8pDqJVdNa44) Follow the cast: Adam Wolff: [ / dmwlff ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnF4Y2I0ZV9yT0o2M2lGWk9QOEpMcGRwbVU4QXxBQ3Jtc0tsbS0yRHFIbWhGenhHZFg4Zm83Z3VzVlBoeTVmcDQ0SElRM2Y3dTBZbDVfVUxlcEN4VDljNjZwVWF2QXNDTzdnVVRhY3J5QnZPc25JZFg1aDhUNElCMGtlSkQ4NVNRMkt5M2I2VUQ0X2JickZWVWp4TQ&q=https%3A%2F%2Ftwitter.com%2Fdmwlff&v=8pDqJVdNa44) Andrew Clark: [ / acdlite ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbTJnTmNZanhWNWNXSkp0QVIyWk1tS2JvS3dYd3xBQ3Jtc0trSmticXFZY3BQQVNDdlRmcnRDa0l5cFNfTzczaXZOVmJjWnFQWlpTeUJMM1UwRVlYRXBianhwNDhmYTFidURhQnBZSGlXQUJUR1o0LXBUenphOFFXSVFJQzhmUHZacWlEVHRGNVZnWGxaYld2T1czYw&q=https%3A%2F%2Ftwitter.com%2Facdlite&v=8pDqJVdNa44) Christopher Chedeau: [ / vjeux ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbVBOaTQ1TGE0Y1BZd0F3UU5nYlR0bVByN2xiQXxBQ3Jtc0trWGVCbldXbl9NZHRxajFVOU9ZUjN1azlOMzFQcmkxSWNZZ0dxV2ZSNWtnQU5lZkR1SXl5Z0ZrelFfR3FzaXlmeXZkWnBINUYtRDBLcVM1U1lzbldmUUQwQnBGQV9rWVlGNmgtOWU1NEZCUWw1b0Z3cw&q=https%3A%2F%2Ftwitter.com%2FVjeux&v=8pDqJVdNa44) Dan Abramov: [ / dan_abramov ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbVpEMnMxdUFmSWQ3cElFcWJuSllxWmpPbEo0d3xBQ3Jtc0traGFiQTdJcnlqSTEyZkJlMG9xeHdrYzM3dXprZGhDa0FuSy1rempHdGkySE8xME5hbjkyTHpOdGtOMmR3cDczNU85VlhnZU12bWdiQXIyYTUzQ1k3Q095YWdTUHpVQUp4cklhOG53NHFJR1Z4YkcxMA&q=https%3A%2F%2Ftwitter.com%2Fdan_abramov&v=8pDqJVdNa44) David Nolen: [ / swannodette ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2NldF90LWdicTdVNVJvLUYzYTcxMFcwN200UXxBQ3Jtc0trS05WZ1N1bmVnUUxSZlhoVmhGZk41YUM2MVRKSVEteDRRLTZiUHpDQXFKZGc4ZnJ2UjFTM3I3dE5sRkJ0aHdtVHFHSHJKci1HRFFJcnpVVllNUmVMWDdKWV9FYTFMWUpwR1VIaFJ0MEVrMlJ3OFM0OA&q=https%3A%2F%2Ftwitter.com%2Fswannodette&v=8pDqJVdNa44) Lee Byron: [ / leeb ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqazE5dWFPNWlONmZRNTBmR2Z4bUJ3aXg5SUtrZ3xBQ3Jtc0tsc09YMksyNlp5Q2c4WFBXb25LcWNxaUlNcWpiQTRvVjVnMklZTWZMT3RBSURvemJkcm0xNHZVU25BOG9kZ1VaREdESnBpZEJ3Y0hhVC0yQzFSdmNpZDhWeC1FQjRPOHdzM3VwX2g3VW5OTURLclBJVQ&q=https%3A%2F%2Ftwitter.com%2Fleeb&v=8pDqJVdNa44) Michael Chan: [ / chantastic ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2hvOTdXMU1kSVJUbXZBbGNsa2p1ZWltSEpOQXxBQ3Jtc0tsRXFoaHJRQ05EUXhRbTRUNDZ0akRvUF82ZjBZOTR6WlFSUFdlOWgzNkFvVVIyelFJMFhXTDNzcTFXYUlsRFVxVEtqaUhvV3NCMEVkc2s5RTNNdzFfcUJQTXllWmo0UGJhWWZwT0xiZi1waG9ER0Y1cw&q=https%3A%2F%2Ftwitter.com%2Fchantastic&v=8pDqJVdNa44) Pete Hunt: [ / floydophone ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbmFwSEtuQkxzX0hLLWxrSWRCZDNwVk1uMVVZQXxBQ3Jtc0trMVJLNWpEbVJjSDNzV2UwNFZ3Ylh5SnYwWFAzSzRDYUEtWjZ0TVRJWF83RDdvNFdzV2p5cnJURUdiSnpDMlIzXzgxZ2RnUWpIcFdXeUJZbzJrY0R0M01FZVRVRFZCQmFva3hWMVo3bkJOTENBaGJoWQ&q=https%3A%2F%2Ftwitter.com%2Ffloydophone&v=8pDqJVdNa44) Sebastian Markbåge: [ / sebmarkbage ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnhqdzZTYnRjNy1xbGZ6MDlUOXFndTRuUHlPUXxBQ3Jtc0ttRmhpMl9kd1M0STJHd01UTWJ1d2xQMV9mRWpCUVp4Yk5GbkdyMjl2ZVZkX1Y5Rzh1aDVWVWtNMksyelI2ZWVpWklITk1DSExWbEcxWnI0ZHE2Y3hnTS1kZ2kzSzFPQjBYSjBWbVE4aEtPcmNBaUN4Yw&q=https%3A%2F%2Ftwitter.com%2Fsebmarkbage&v=8pDqJVdNa44) Shane O'Sullivan: [ / chofter ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2taQTVUdEhaQmdXNGdVQ2VHTlNPU2FsM2h0d3xBQ3Jtc0tsWmtnWGZHa0U3eE5LeDZsV05hUE9BazVEX0pVVHFJeThpc3dIYjBkQ3FNTEZzdlRCRzBpVHVzZ01PZHJOb3ZxTkRBaXRUc2ZIRHptdncwRVFCSkNEWWx5ZnY3Q3V1a1VHX3AybndhWE55M1ZhSUZJMA&q=https%3A%2F%2Ftwitter.com%2FChofter&v=8pDqJVdNa44) and [https://chofter.com/](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbERWUWI5X3lLbGNUNlMwRGVxSEdlZXE5REFYd3xBQ3Jtc0ttUUcxWTFBTllOWFpYNThSb1FFa3ljOFhoQVRheVRDM0lQcmtESDdkUGV1by1UZVpFMmpjUEEzaHlmUjZTVXdFcF9PUlFJLUR5NVNTWnkyazJXcEoxQjlRYTZZTFFzbXJueW8xWDl6azBfbXE5aEJORQ&q=https%3A%2F%2Fchofter.com%2F&v=8pDqJVdNa44) Sophie Alpert: [ / sophiebits ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbFlxampVMGRnSVJtaGoySmZEbDJtRHhpbVh4QXxBQ3Jtc0tsNE1vREpxQ09OdzlGb1J3a1JXaE1xc0FvUUEwWk9yeTZYUDU5QWp3WV9vVkRldm9sWW9EeUtKRUpudUdUbmtIeHNyVTRBcnpGNXdwTEd4SlBnbzg1elE3U3JnTmlraFVBVXVVTHI3YWU2WDVyRHRFTQ&q=https%3A%2F%2Ftwitter.com%2Fsophiebits&v=8pDqJVdNa44) and [https://sophiebits.com/](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa0JjdjA3SVVuNFpFN2x5bjVsb09iTERmSUUzUXxBQ3Jtc0treVdSY00yb2taQlZ2MnFXUFNyTW9YcE5OcHZicS1ZdUdJaktPUi1JSWpwZjFDMTRPTHRiNkN0MFhjT3VTaWYyOFFwT1plMUdCWXJTclhJdlhScGtQV0FZSk1BUk0xQmRRZW5JRzhMSHBnM1F4MHBydw&q=https%3A%2F%2Fsophiebits.com%2F&v=8pDqJVdNa44) Tom Occhino: [ / tomocchino ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbm1hWjBRSTd5cHZxbWUwVDZ5bWtkNWFnV294d3xBQ3Jtc0tuNWR4RWZuT2dGaEVqZlJIM2VqcE91LWVIVzdjSkJGcE05U21xaFZuSjJYUmh6T242RnRnemdHMXZaa2xSWGk1UWEwWkNUQzI4bVNILXFqMEJxaGJ1Z3RfdzVfNlRvUkc2YmpSNzJJRjhRcE1BZXd2WQ&q=https%3A%2F%2Ftwitter.com%2Ftomocchino&v=8pDqJVdNa44) Tony Casparro: [ / iamtonyc ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbHpHdnYzeVU3ejRwQWgzdHQyYmxxXzZRYWFDZ3xBQ3Jtc0ttOFdUblpiTlNSTVlKc0N5SWgxazBxczRWaGFvMEZ3alVZYzVpekk2dWh2Rk94Z05PbXRGeFRrNTVGRGVvZE0yQi1rS204QnUzcU9hN3A3NUU1MXZFT1J0VmRaNmpWYUl6MHptN0xyMlZSRTJ1aEFuSQ&q=https%3A%2F%2Ftwitter.com%2FIamTonyC&v=8pDqJVdNa44) Many people contributed to React throughout the years and this documentary is just a little slice of that history. You can find full acknowledgements here: [https://reactjs.org/acknowledgements....](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnF3MmJJcHV3NV9BWklhNWJqSmxvZktueUROQXxBQ3Jtc0ttNVVuOVFnc1FWcW5sXzBGbVhjd1JQbzJyNXpHYldnMTk5VXdhTmx1ck1vRXdqcWxCODJrYVg4a0dINUlSU19pUTdERGNHRHBrclozdnVRb0lOVE9nYVo4cl9KVjFscjJqYVNWa2xFZ21oWHZIRHFKWQ&q=https%3A%2F%2Freactjs.org%2Facknowledgements.html&v=8pDqJVdNa44) Thanks to these amazing people for translating subtitles: Charlie: [ / charliesbot ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa3JQYUJxemI4UC1fWGFjbHpvRVY0aVZsaHRpUXxBQ3Jtc0tsV3V0Zkg0Z1RKWkhSN040Q3BieE1nZEpzTFR2OVdjLWp5UjM0T1VvTndKSFJHOVVEUFJyT3BkTHh3OEVmTEo2d2dpbHowUEZqVlZrYmxmU29scDg5VTVrTENrcFd2SERwblZxU25UUE5CMTNpbWFHdw&q=https%3A%2F%2Ftwitter.com%2Fcharliesbot&v=8pDqJVdNa44) Jose: [ / jbetosalinas ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa0ljdnZfOHpqd3I4cWVKZ1Nic1NkQlRtWDc1QXxBQ3Jtc0trVldLc0hleThQYlNub3pnalg1QkZxLUlLRlA5a2JoWTN1WW40V29XcEJBelRPdm12NzZtYzlFWE5WZHZnSVNQd2RTai1xdXRSM0pGWkowRnhpMUVhMWdRVlVnazFhSUdiN2l2TEVFZkM4UHNkVGM1cw&q=https%3A%2F%2Ftwitter.com%2Fjbetosalinas&v=8pDqJVdNa44) Gustavo Gonçalves Follow us: Twitter: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2lqQWNUVGpmaXNFc2trOEkwOV9zNTNSTkFYQXxBQ3Jtc0trNVR1QU5aaURDZWp0WXI0UUNlQkNyRlQxQUN0N2FBZzBDXzE3M29GbWpkaVJnTnh3OHFkMDhrbzZ5dWljcHFZQ2x5bzFiazQ0a2hfekF1N3c5RERJUFJDM3JZVmFZTTRJcmQ3X2VFQnU5SktFMzdEaw&q=https%3A%2F%2Ftwitter.com%2Fhoneypotio&v=8pDqJVdNa44) Facebook: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbUpQSkNvV0d0dkZXYVFJbllNT01Yc3dZQUwzUXxBQ3Jtc0tuQnEwaUdEa1BtRlIzd2FSSTV4bW03dEwwOGFRZnVTdk4ybTNSdzBVcHAtd0JXbDZwS2djMXJ2cTFzZUZHQmx3OFR4U0tnZFlrNzJlMlQxa3A5S3czeHlFSWVoUWM0bGlzTk41cWJNMDJzM0tROEdZbw&q=https%3A%2F%2Fwww.facebook.com%2FHoneypotio%2F&v=8pDqJVdNa44) LinkedIn: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2dFcmRaWWtWN0c4d1Mxd0RjUTNjMDFXWXNuUXxBQ3Jtc0tsNk00RHFMU2NMSl8yWUZEcDNvaFViZ2p2aDNqR3hiaHlNNWotdUNfWEprT0tlY2hhUFN5Vk5SOGE0OWRjRUZHVXlqMF9NcUhGSjBVbWFnenc5YS1IdTJHc0Q0YWJEY0YtQmFnZDRhMkp1eDlCU29nQQ&q=https%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fhoneypotio%2F&v=8pDqJVdNa44) Instagram: [ / honeypot.cult ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbS1iQ1FGeEhpanNkTHpSVVNOdzlDQ2VVaU9VUXxBQ3Jtc0tuUDJqYy1Rbk16am1IOHZGWTZrUUlsWWVKYXoyYk9VS29FeGZ0MjJBQlZhRHRia3owaWdiWUFtd0FfQmVSZVh3a2ZwczNxek9mMm9KcXdSV2U3SHpNeDZhNTU0X3lZdkJmemxTblhFZHM0d25kWGpNNA&q=https%3A%2F%2Fwww.instagram.com%2Fhoneypot.cult%2F&v=8pDqJVdNa44)

Show less ...more

React is easily one of the single most popular libraries in use today. Given that it was made within a juggernaut like Facebook, you might have assumed it was always destined for success. But what if we told you that React’s first brush with the public sphere was anything but glamorous? React.js: The Documentary brings you the full story behind the early days of React, focusing on the dedicated group of developers who helped bring it to the world stage. This story is told by an all-star cast of developers like Tom Occhino, Christopher Chedeau, Pete Hunt, Sebastian Markbåge, Dan Abramov, and many more. Check out the home for untold developer stories around open source, careers and all the other cool stuff developers are doing at cult.honeypot.io. Honeypot is a developer-focused job platform, on a mission to get developers great jobs. Wanna see what we're all about? Visit honeypot.io to find a job you love. To learn more about Honeypot: [https://bit.ly/3OGoDjG](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbkRtdVV3QWVSUTNiSFp0VDMxRV8ycWV0NjFFQXxBQ3Jtc0tuQVZ4bGJRZ0NmOWprWUxaR0dlNlh3VlpwRTN4MzJKa0hDckM0ZGxkY1pZMVdBeXMzVFVTM3ZScU1VMF9sbDRIVUdzVXgxZnFyTGF6RlFOWDNpdDl1Q04wRmcyZWpELXU3SzVaOUg1b1FxSDlNRnRFNA&q=https%3A%2F%2Fbit.ly%2F3OGoDjG&v=8pDqJVdNa44) Follow the cast: Adam Wolff: [ / dmwlff ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnF4Y2I0ZV9yT0o2M2lGWk9QOEpMcGRwbVU4QXxBQ3Jtc0tsbS0yRHFIbWhGenhHZFg4Zm83Z3VzVlBoeTVmcDQ0SElRM2Y3dTBZbDVfVUxlcEN4VDljNjZwVWF2QXNDTzdnVVRhY3J5QnZPc25JZFg1aDhUNElCMGtlSkQ4NVNRMkt5M2I2VUQ0X2JickZWVWp4TQ&q=https%3A%2F%2Ftwitter.com%2Fdmwlff&v=8pDqJVdNa44) Andrew Clark: [ / acdlite ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbTJnTmNZanhWNWNXSkp0QVIyWk1tS2JvS3dYd3xBQ3Jtc0trSmticXFZY3BQQVNDdlRmcnRDa0l5cFNfTzczaXZOVmJjWnFQWlpTeUJMM1UwRVlYRXBianhwNDhmYTFidURhQnBZSGlXQUJUR1o0LXBUenphOFFXSVFJQzhmUHZacWlEVHRGNVZnWGxaYld2T1czYw&q=https%3A%2F%2Ftwitter.com%2Facdlite&v=8pDqJVdNa44) Christopher Chedeau: [ / vjeux ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbVBOaTQ1TGE0Y1BZd0F3UU5nYlR0bVByN2xiQXxBQ3Jtc0trWGVCbldXbl9NZHRxajFVOU9ZUjN1azlOMzFQcmkxSWNZZ0dxV2ZSNWtnQU5lZkR1SXl5Z0ZrelFfR3FzaXlmeXZkWnBINUYtRDBLcVM1U1lzbldmUUQwQnBGQV9rWVlGNmgtOWU1NEZCUWw1b0Z3cw&q=https%3A%2F%2Ftwitter.com%2FVjeux&v=8pDqJVdNa44) Dan Abramov: [ / dan_abramov ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbVpEMnMxdUFmSWQ3cElFcWJuSllxWmpPbEo0d3xBQ3Jtc0traGFiQTdJcnlqSTEyZkJlMG9xeHdrYzM3dXprZGhDa0FuSy1rempHdGkySE8xME5hbjkyTHpOdGtOMmR3cDczNU85VlhnZU12bWdiQXIyYTUzQ1k3Q095YWdTUHpVQUp4cklhOG53NHFJR1Z4YkcxMA&q=https%3A%2F%2Ftwitter.com%2Fdan_abramov&v=8pDqJVdNa44) David Nolen: [ / swannodette ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2NldF90LWdicTdVNVJvLUYzYTcxMFcwN200UXxBQ3Jtc0trS05WZ1N1bmVnUUxSZlhoVmhGZk41YUM2MVRKSVEteDRRLTZiUHpDQXFKZGc4ZnJ2UjFTM3I3dE5sRkJ0aHdtVHFHSHJKci1HRFFJcnpVVllNUmVMWDdKWV9FYTFMWUpwR1VIaFJ0MEVrMlJ3OFM0OA&q=https%3A%2F%2Ftwitter.com%2Fswannodette&v=8pDqJVdNa44) Lee Byron: [ / leeb ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqazE5dWFPNWlONmZRNTBmR2Z4bUJ3aXg5SUtrZ3xBQ3Jtc0tsc09YMksyNlp5Q2c4WFBXb25LcWNxaUlNcWpiQTRvVjVnMklZTWZMT3RBSURvemJkcm0xNHZVU25BOG9kZ1VaREdESnBpZEJ3Y0hhVC0yQzFSdmNpZDhWeC1FQjRPOHdzM3VwX2g3VW5OTURLclBJVQ&q=https%3A%2F%2Ftwitter.com%2Fleeb&v=8pDqJVdNa44) Michael Chan: [ / chantastic ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2hvOTdXMU1kSVJUbXZBbGNsa2p1ZWltSEpOQXxBQ3Jtc0tsRXFoaHJRQ05EUXhRbTRUNDZ0akRvUF82ZjBZOTR6WlFSUFdlOWgzNkFvVVIyelFJMFhXTDNzcTFXYUlsRFVxVEtqaUhvV3NCMEVkc2s5RTNNdzFfcUJQTXllWmo0UGJhWWZwT0xiZi1waG9ER0Y1cw&q=https%3A%2F%2Ftwitter.com%2Fchantastic&v=8pDqJVdNa44) Pete Hunt: [ / floydophone ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbmFwSEtuQkxzX0hLLWxrSWRCZDNwVk1uMVVZQXxBQ3Jtc0trMVJLNWpEbVJjSDNzV2UwNFZ3Ylh5SnYwWFAzSzRDYUEtWjZ0TVRJWF83RDdvNFdzV2p5cnJURUdiSnpDMlIzXzgxZ2RnUWpIcFdXeUJZbzJrY0R0M01FZVRVRFZCQmFva3hWMVo3bkJOTENBaGJoWQ&q=https%3A%2F%2Ftwitter.com%2Ffloydophone&v=8pDqJVdNa44) Sebastian Markbåge: [ / sebmarkbage ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnhqdzZTYnRjNy1xbGZ6MDlUOXFndTRuUHlPUXxBQ3Jtc0ttRmhpMl9kd1M0STJHd01UTWJ1d2xQMV9mRWpCUVp4Yk5GbkdyMjl2ZVZkX1Y5Rzh1aDVWVWtNMksyelI2ZWVpWklITk1DSExWbEcxWnI0ZHE2Y3hnTS1kZ2kzSzFPQjBYSjBWbVE4aEtPcmNBaUN4Yw&q=https%3A%2F%2Ftwitter.com%2Fsebmarkbage&v=8pDqJVdNa44) Shane O'Sullivan: [ / chofter ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2taQTVUdEhaQmdXNGdVQ2VHTlNPU2FsM2h0d3xBQ3Jtc0tsWmtnWGZHa0U3eE5LeDZsV05hUE9BazVEX0pVVHFJeThpc3dIYjBkQ3FNTEZzdlRCRzBpVHVzZ01PZHJOb3ZxTkRBaXRUc2ZIRHptdncwRVFCSkNEWWx5ZnY3Q3V1a1VHX3AybndhWE55M1ZhSUZJMA&q=https%3A%2F%2Ftwitter.com%2FChofter&v=8pDqJVdNa44) and [https://chofter.com/](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbERWUWI5X3lLbGNUNlMwRGVxSEdlZXE5REFYd3xBQ3Jtc0ttUUcxWTFBTllOWFpYNThSb1FFa3ljOFhoQVRheVRDM0lQcmtESDdkUGV1by1UZVpFMmpjUEEzaHlmUjZTVXdFcF9PUlFJLUR5NVNTWnkyazJXcEoxQjlRYTZZTFFzbXJueW8xWDl6azBfbXE5aEJORQ&q=https%3A%2F%2Fchofter.com%2F&v=8pDqJVdNa44) Sophie Alpert: [ / sophiebits ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbFlxampVMGRnSVJtaGoySmZEbDJtRHhpbVh4QXxBQ3Jtc0tsNE1vREpxQ09OdzlGb1J3a1JXaE1xc0FvUUEwWk9yeTZYUDU5QWp3WV9vVkRldm9sWW9EeUtKRUpudUdUbmtIeHNyVTRBcnpGNXdwTEd4SlBnbzg1elE3U3JnTmlraFVBVXVVTHI3YWU2WDVyRHRFTQ&q=https%3A%2F%2Ftwitter.com%2Fsophiebits&v=8pDqJVdNa44) and [https://sophiebits.com/](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa0JjdjA3SVVuNFpFN2x5bjVsb09iTERmSUUzUXxBQ3Jtc0treVdSY00yb2taQlZ2MnFXUFNyTW9YcE5OcHZicS1ZdUdJaktPUi1JSWpwZjFDMTRPTHRiNkN0MFhjT3VTaWYyOFFwT1plMUdCWXJTclhJdlhScGtQV0FZSk1BUk0xQmRRZW5JRzhMSHBnM1F4MHBydw&q=https%3A%2F%2Fsophiebits.com%2F&v=8pDqJVdNa44) Tom Occhino: [ / tomocchino ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbm1hWjBRSTd5cHZxbWUwVDZ5bWtkNWFnV294d3xBQ3Jtc0tuNWR4RWZuT2dGaEVqZlJIM2VqcE91LWVIVzdjSkJGcE05U21xaFZuSjJYUmh6T242RnRnemdHMXZaa2xSWGk1UWEwWkNUQzI4bVNILXFqMEJxaGJ1Z3RfdzVfNlRvUkc2YmpSNzJJRjhRcE1BZXd2WQ&q=https%3A%2F%2Ftwitter.com%2Ftomocchino&v=8pDqJVdNa44) Tony Casparro: [ / iamtonyc ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbHpHdnYzeVU3ejRwQWgzdHQyYmxxXzZRYWFDZ3xBQ3Jtc0ttOFdUblpiTlNSTVlKc0N5SWgxazBxczRWaGFvMEZ3alVZYzVpekk2dWh2Rk94Z05PbXRGeFRrNTVGRGVvZE0yQi1rS204QnUzcU9hN3A3NUU1MXZFT1J0VmRaNmpWYUl6MHptN0xyMlZSRTJ1aEFuSQ&q=https%3A%2F%2Ftwitter.com%2FIamTonyC&v=8pDqJVdNa44) Many people contributed to React throughout the years and this documentary is just a little slice of that history. You can find full acknowledgements here: [https://reactjs.org/acknowledgements....](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnF3MmJJcHV3NV9BWklhNWJqSmxvZktueUROQXxBQ3Jtc0ttNVVuOVFnc1FWcW5sXzBGbVhjd1JQbzJyNXpHYldnMTk5VXdhTmx1ck1vRXdqcWxCODJrYVg4a0dINUlSU19pUTdERGNHRHBrclozdnVRb0lOVE9nYVo4cl9KVjFscjJqYVNWa2xFZ21oWHZIRHFKWQ&q=https%3A%2F%2Freactjs.org%2Facknowledgements.html&v=8pDqJVdNa44) Thanks to these amazing people for translating subtitles: Charlie: [ / charliesbot ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa3JQYUJxemI4UC1fWGFjbHpvRVY0aVZsaHRpUXxBQ3Jtc0tsV3V0Zkg0Z1RKWkhSN040Q3BieE1nZEpzTFR2OVdjLWp5UjM0T1VvTndKSFJHOVVEUFJyT3BkTHh3OEVmTEo2d2dpbHowUEZqVlZrYmxmU29scDg5VTVrTENrcFd2SERwblZxU25UUE5CMTNpbWFHdw&q=https%3A%2F%2Ftwitter.com%2Fcharliesbot&v=8pDqJVdNa44) Jose: [ / jbetosalinas ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa0ljdnZfOHpqd3I4cWVKZ1Nic1NkQlRtWDc1QXxBQ3Jtc0trVldLc0hleThQYlNub3pnalg1QkZxLUlLRlA5a2JoWTN1WW40V29XcEJBelRPdm12NzZtYzlFWE5WZHZnSVNQd2RTai1xdXRSM0pGWkowRnhpMUVhMWdRVlVnazFhSUdiN2l2TEVFZkM4UHNkVGM1cw&q=https%3A%2F%2Ftwitter.com%2Fjbetosalinas&v=8pDqJVdNa44) Gustavo Gonçalves Follow us: Twitter: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2lqQWNUVGpmaXNFc2trOEkwOV9zNTNSTkFYQXxBQ3Jtc0trNVR1QU5aaURDZWp0WXI0UUNlQkNyRlQxQUN0N2FBZzBDXzE3M29GbWpkaVJnTnh3OHFkMDhrbzZ5dWljcHFZQ2x5bzFiazQ0a2hfekF1N3c5RERJUFJDM3JZVmFZTTRJcmQ3X2VFQnU5SktFMzdEaw&q=https%3A%2F%2Ftwitter.com%2Fhoneypotio&v=8pDqJVdNa44) Facebook: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbUpQSkNvV0d0dkZXYVFJbllNT01Yc3dZQUwzUXxBQ3Jtc0tuQnEwaUdEa1BtRlIzd2FSSTV4bW03dEwwOGFRZnVTdk4ybTNSdzBVcHAtd0JXbDZwS2djMXJ2cTFzZUZHQmx3OFR4U0tnZFlrNzJlMlQxa3A5S3czeHlFSWVoUWM0bGlzTk41cWJNMDJzM0tROEdZbw&q=https%3A%2F%2Fwww.facebook.com%2FHoneypotio%2F&v=8pDqJVdNa44) LinkedIn: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2dFcmRaWWtWN0c4d1Mxd0RjUTNjMDFXWXNuUXxBQ3Jtc0tsNk00RHFMU2NMSl8yWUZEcDNvaFViZ2p2aDNqR3hiaHlNNWotdUNfWEprT0tlY2hhUFN5Vk5SOGE0OWRjRUZHVXlqMF9NcUhGSjBVbWFnenc5YS1IdTJHc0Q0YWJEY0YtQmFnZDRhMkp1eDlCU29nQQ&q=https%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fhoneypotio%2F&v=8pDqJVdNa44) Instagram: [ / honeypot.cult ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbS1iQ1FGeEhpanNkTHpSVVNOdzlDQ2VVaU9VUXxBQ3Jtc0tuUDJqYy1Rbk16am1IOHZGWTZrUUlsWWVKYXoyYk9VS29FeGZ0MjJBQlZhRHRia3owaWdiWUFtd0FfQmVSZVh3a2ZwczNxek9mMm9KcXdSV2U3SHpNeDZhNTU0X3lZdkJmemxTblhFZHM0d25kWGpNNA&q=https%3A%2F%2Fwww.instagram.com%2Fhoneypot.cult%2F&v=8pDqJVdNa44)…...more 

...more Show less 

Transcript

Follow along using the transcript.

Show transcript

### [Honeypot 238K subscribers  ](/@Honeypotio)

[Videos](/channel/UCsUalyRg43M8D60mtHe6YcA/videos)

[About](/channel/UCsUalyRg43M8D60mtHe6YcA/about)

[Videos](/channel/UCsUalyRg43M8D60mtHe6YcA/videos)[About](/channel/UCsUalyRg43M8D60mtHe6YcA/about)[Twitter](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqazlNRDJPZWJORXJ3WW9tcEhxUjR5blJzUmpad3xBQ3Jtc0tuOFlNV1NTNnJicVY0REV4SjBjQkRxcmxrRGxCZm5lMFpwV01vOVQyc0pReHp2end1Z1J2dll1WlRLR3dQUGR6SzhjNzg3Q1pMQXhVNGNUVnpsZlpaTWpuR1hmTThNUzlZNUlQOFRrT01zcWpvcmdrbw&q=https%3A%2F%2Ftwitter.com%2Fhoneypotio)[Linkedin](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbmVEMF9aV0pIQXNfeEtmQ0ZDcW5IeVdNa2hQQXxBQ3Jtc0tsU0txTFZiYUJOcG9sM1pwVmlqUWNpS2ZJWlZDZFZRUHQ1VlpTQ3dnb0hFXzNnVm1XVUdMc3pGbXRNWFczbVowLU9FUk1TMkNFb3FuRjh1NS05ZWFwNmQyOHJOdXBTMElmOVhLNE05cVdMZjlsRndIaw&q=https%3A%2F%2Fwww.linkedin.com%2Fcompany%2F10210811%2F)[Instagram](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa18xSHVNUnFuZmxZb1RwTU4tcDhFY1UtNjBJUXxBQ3Jtc0tsMWtZSzZrY2pMMExadkU4TEh0N3dQYjE0WlktMDNNZjZwVVBKUkx6ekNNQzZYSURIR2hiVERKTkZkWGhiMEZfakpQd0g0MzQxbEY1QV82UHVQVTBlUWxlMlUtTlZkQ3JIbWQtczJqanBoUlhBWHVFdw&q=https%3A%2F%2Fwww.instagram.com%2Fhoneypot.cult%2F)[Facebook](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbVQ5cmJvVE5KczdOdkk1T2Z3aXpQa1E1cThEd3xBQ3Jtc0ttR0EwMWk4d0RKNU9FOUtaeUxoNGlkNFFrVmV5ZUxGMno4NGRMYnFNZ1dGQ2pHQVBxbk5FVTZBdFZCTnlnUXpYYlhzU0FXR2hLR3pqV2NHLXVvM0ZUTmFhWmhlQnRrTmxjYjEwUExfVnBUa1ptbkxPQQ&q=https%3A%2F%2Fwww.facebook.com%2FHoneypotio%2F)

[ 7:14 7:14  ](/watch?v=WvRcZkuXmpo) [ Andrew Clark on the Creation of Redux by Honeypot ](/watch?v=WvRcZkuXmpo)

##  Transcript

NaN / NaN

Show chat replay

[ 1:02:49 1:02:49 Now playing ](/watch?v=LB8KwiiUGy0)

### [ Node.js: The Documentary | An origin story  Honeypot Honeypot  • • 680K views 8 months ago ](/watch?v=LB8KwiiUGy0)

[ ](/watch?v=SqcY0GlETPk)

### [ React Tutorial for Beginners  Programming with Mosh Programming with Mosh  • • 3.6M views 1 year ago ](/watch?v=SqcY0GlETPk)

[ ](/watch?v=783ccP__No8)

### [ GraphQL: The Documentary  Honeypot Honeypot  • • 578K views 5 years ago ](/watch?v=783ccP__No8)

[ ](/watch?v=WXuK6gekU1Y)

### [ AlphaGo - The Movie | Full award-winning documentary  Google DeepMind Google DeepMind  • • 36M views 4 years ago ](/watch?v=WXuK6gekU1Y)

[ ](/watch?v=PaQkIoTrSLY)

### [ From Nerd Olympics to Tech Entrepreneurship: Mike Serbinis' Story  Mark MacLeod Mark MacLeod  • • 34 views 2 days ago New ](/watch?v=PaQkIoTrSLY)

[ ](/watch?v=U6s2pdxebSo)

### [ TypeScript Origins: The Documentary  OfferZen Origins OfferZen Origins  • • 298K views 1 year ago ](/watch?v=U6s2pdxebSo)

[ ](/watch?v=OrxmtDw4pVI)

### [ Vue.js: The Documentary  Honeypot Honeypot  • • 1.5M views 4 years ago ](/watch?v=OrxmtDw4pVI)
Tap to unmute

[Open App](vnd.youtube://m.youtube.com/watch?v=x7cQ3mrcKaY&feature=mweb_c3_open_app_11268432&itc_campaign=mweb_c3_open_app_11268432&redirect_app_store_ios=1&app=desktop)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[Sign in](https://accounts.google.com/ServiceLogin?service=youtube&uilel=3&passive=true&continue=https%3A%2F%2Fwww.youtube.com%2Fsignin%3Faction_handle_signin%3Dtrue%26app%3Ddesktop%26hl%3Den%26next%3Dhttps%253A%252F%252Fwww.youtube.com%252Fwatch%253Fv%253DKVZ-P-ZI6W4&hl=en&ec=65620)

[ ](/ "YouTube Home") IN 

React.js Conf 2015 Keynote - Introducing React Native

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Up next

LiveUpcoming

CancelPlay Now

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?v=7rDsRXj9-cU "Next \(SHIFT+n\)")

0:00 / 31:46•Watch full videoLive

•

•

Scroll for details

#  React.js Conf 2015 Keynote - Introducing React Native

[](/@MetaDevelopers)

[Meta Developers](/@MetaDevelopers)

Meta Developers 

173K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

2.5K

Share

Download

Download 

Save

306K views9 years ago

306,342 views • Jan 28, 2015 

Show less 

Tom Occhino reviews the past and present of React in 2015, and teases where it's going next.…...more 

...more 

## 

Key moments

View all

#### [Facebook Ads Org Facebook Ads Org 1:54 ](/watch?v=KVZ-P-ZI6W4&t=114s)

#### [Facebook Ads Org ](/watch?v=KVZ-P-ZI6W4&t=114s)

1:54

#### [Complicated Apps Complicated Apps 2:26 ](/watch?v=KVZ-P-ZI6W4&t=146s)

#### [Complicated Apps ](/watch?v=KVZ-P-ZI6W4&t=146s)

2:26

#### [Cascading Updates Cascading Updates 3:05 ](/watch?v=KVZ-P-ZI6W4&t=185s)

#### [Cascading Updates ](/watch?v=KVZ-P-ZI6W4&t=185s)

3:05

#### [Unpredictable Code Unpredictable Code 3:33 ](/watch?v=KVZ-P-ZI6W4&t=213s)

#### [Unpredictable Code ](/watch?v=KVZ-P-ZI6W4&t=213s)

3:33

#### [Huge step backwards Huge step backwards 9:07 ](/watch?v=KVZ-P-ZI6W4&t=547s)

#### [Huge step backwards ](/watch?v=KVZ-P-ZI6W4&t=547s)

9:07

#### [What makes React so powerful? What makes React so powerful? 12:54 ](/watch?v=KVZ-P-ZI6W4&t=774s)

#### [What makes React so powerful? ](/watch?v=KVZ-P-ZI6W4&t=774s)

12:54

#### [Server rendering? Server rendering? 13:16 ](/watch?v=KVZ-P-ZI6W4&t=796s)

#### [Server rendering? ](/watch?v=KVZ-P-ZI6W4&t=796s)

13:16

#### [React wraps an imperative API with a declarative one React wraps an imperative API with a declarative one 14:00 ](/watch?v=KVZ-P-ZI6W4&t=840s)

#### [React wraps an imperative API with a declarative one ](/watch?v=KVZ-P-ZI6W4&t=840s)

14:00

Transcript

Follow along using the transcript.

Show transcript

### [Meta Developers 173K subscribers  ](/@MetaDevelopers)

[Videos](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/videos)

[About](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/about)

[Videos](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/videos)[About](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/about)[Website](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa3NZWjJkV29XeDMtT3d6UloySlNoeVBjUUZxUXxBQ3Jtc0trVmU5YmRTdTk5RDVHaWZuZFhaMWhFQW1ZYkczMGtlSVlvamFXb2Y0NHRza2tvQkpuNEVrVGdlQnBCWXFfaDktcnJWV001cnV1aGFZVWdLdjlVTEhVSnZkeFlMdG9OTHFWMGdLNHNhUmJYX3BremtSOA&q=https%3A%2F%2Fdevelopers.facebook.com%2F)[Facebook](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbVBNNHdSdHJ3UUdFbjQzdndiUlp6TGhuU2M5QXxBQ3Jtc0tueFZxLWVxMzZpNG5xcG5TQThJbVczUVRmem80cGRJSkpOQnlVUWIyYnRIVjZLbGpkbGY2b0dZaGFkcThaZ3UwTGt6c3ZXVkc0SG1tTnNIUWpNaU5CSGFKMDhRV2w5NGEyZDl5NXJuMzczb2c0RE02NA&q=https%3A%2F%2Fwww.facebook.com%2FMetaforDevelopers)[Instagram](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbE1sRFlkWUU5S3kxY3NFV1U5X2hjdVJSVWYzUXxBQ3Jtc0tuSWhmMjlDeWJZTGJrTmZnaEJyN21RU3Bka3hVNFhWUTk4aXBuU1ZPSW9LcldNXzRxcUNNR25xMXRsS2VTR0lrWVdTWWJQdUtGVjQzOXFFSXYxVHJad29UZW8tTVRTZXpyNmp4YWRYNGRzUUphQjl4MA&q=https%3A%2F%2Fwww.instagram.com%2Fmetafordevelopers%2F)[LinkedIn](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa21EOVc3Sk5qWTJPYzFqNC1VczRNc05pck42QXxBQ3Jtc0trSDhHR2IwaXBFcEpQbVZ3Vk52cUVLYURGaFQzN0FRdk9oZ09LUHU0T18xcTJqQXBmVXdEZ1ctSGdNbU9PSTV5R2pjYWtQNUVjdWprTERpNjJNcGpxUHItYXhsOXhzZ1F3enJxcGllRmNTdXNhU3ZMRQ&q=https%3A%2F%2Fwww.linkedin.com%2Fshowcase%2F6647805%2F)

Show less 

# React.js Conf 2015 Keynote - Introducing React Native

306,342 views306K views

Jan 28, 2015

2.5K

Share

Download

Download 

Save

##  Comments 74

Top comments  Newest first 

##  Key moments

#### [Facebook Ads Org Facebook Ads Org 1:54 ](/watch?v=KVZ-P-ZI6W4&t=114s)

#### [Facebook Ads Org ](/watch?v=KVZ-P-ZI6W4&t=114s)

1:54

#### [Complicated Apps Complicated Apps 2:26 ](/watch?v=KVZ-P-ZI6W4&t=146s)

#### [Complicated Apps ](/watch?v=KVZ-P-ZI6W4&t=146s)

2:26

#### [Cascading Updates Cascading Updates 3:05 ](/watch?v=KVZ-P-ZI6W4&t=185s)

#### [Cascading Updates ](/watch?v=KVZ-P-ZI6W4&t=185s)

3:05

#### [Unpredictable Code Unpredictable Code 3:33 ](/watch?v=KVZ-P-ZI6W4&t=213s)

#### [Unpredictable Code ](/watch?v=KVZ-P-ZI6W4&t=213s)

3:33

#### [Huge step backwards Huge step backwards 9:07 ](/watch?v=KVZ-P-ZI6W4&t=547s)

#### [Huge step backwards ](/watch?v=KVZ-P-ZI6W4&t=547s)

9:07

#### [What makes React so powerful? What makes React so powerful? 12:54 ](/watch?v=KVZ-P-ZI6W4&t=774s)

#### [What makes React so powerful? ](/watch?v=KVZ-P-ZI6W4&t=774s)

12:54

#### [Server rendering? Server rendering? 13:16 ](/watch?v=KVZ-P-ZI6W4&t=796s)

#### [Server rendering? ](/watch?v=KVZ-P-ZI6W4&t=796s)

13:16

#### [React wraps an imperative API with a declarative one React wraps an imperative API with a declarative one 14:00 ](/watch?v=KVZ-P-ZI6W4&t=840s)

#### [React wraps an imperative API with a declarative one ](/watch?v=KVZ-P-ZI6W4&t=840s)

14:00

#### [declarative - predictable declarative - predictable 14:35 ](/watch?v=KVZ-P-ZI6W4&t=875s)

#### [declarative - predictable ](/watch?v=KVZ-P-ZI6W4&t=875s)

14:35

#### [predictable -- confidence predictable -- confidence 14:55 ](/watch?v=KVZ-P-ZI6W4&t=895s)

#### [predictable -- confidence ](/watch?v=KVZ-P-ZI6W4&t=895s)

14:55

#### [confidence – reliability confidence – reliability 15:34 ](/watch?v=KVZ-P-ZI6W4&t=934s)

#### [confidence – reliability ](/watch?v=KVZ-P-ZI6W4&t=934s)

15:34

#### [React's real power lies in how it makes you to write your code React's real power lies in how it makes you to write your code 16:07 ](/watch?v=KVZ-P-ZI6W4&t=967s)

#### [React's real power lies in how it makes you to write your code ](/watch?v=KVZ-P-ZI6W4&t=967s)

16:07

#### [Sophisticated gesture handling Sophisticated gesture handling 19:16 ](/watch?v=KVZ-P-ZI6W4&t=1156s)

#### [Sophisticated gesture handling ](/watch?v=KVZ-P-ZI6W4&t=1156s)

19:16

#### [Native environment Native environment 20:45 ](/watch?v=KVZ-P-ZI6W4&t=1245s)

#### [Native environment ](/watch?v=KVZ-P-ZI6W4&t=1245s)

20:45

#### [React Native React Native 22:55 ](/watch?v=KVZ-P-ZI6W4&t=1375s)

#### [React Native ](/watch?v=KVZ-P-ZI6W4&t=1375s)

22:55

#### [demo demo 23:08 ](/watch?v=KVZ-P-ZI6W4&t=1388s)

#### [demo ](/watch?v=KVZ-P-ZI6W4&t=1388s)

23:08

#### [What was that? What was that? 25:15 ](/watch?v=KVZ-P-ZI6W4&t=1515s)

#### [What was that? ](/watch?v=KVZ-P-ZI6W4&t=1515s)

25:15

#### [Everything on screen was native Everything on screen was native 25:20 ](/watch?v=KVZ-P-ZI6W4&t=1520s)

#### [Everything on screen was native ](/watch?v=KVZ-P-ZI6W4&t=1520s)

25:20

#### [No WebView No WebView 25:34 ](/watch?v=KVZ-P-ZI6W4&t=1534s)

#### [No WebView ](/watch?v=KVZ-P-ZI6W4&t=1534s)

25:34

#### [Completely powered by JavaScript Completely powered by JavaScript 25:37 ](/watch?v=KVZ-P-ZI6W4&t=1537s)

#### [Completely powered by JavaScript ](/watch?v=KVZ-P-ZI6W4&t=1537s)

25:37

#### [This is working This is working 28:33 ](/watch?v=KVZ-P-ZI6W4&t=1713s)

#### [This is working ](/watch?v=KVZ-P-ZI6W4&t=1713s)

28:33

#### [Write once run anywhere Write once run anywhere 28:56 ](/watch?v=KVZ-P-ZI6W4&t=1736s)

#### [Write once run anywhere ](/watch?v=KVZ-P-ZI6W4&t=1736s)

28:56

#### [Learn once, write anywhere Learn once, write anywhere 29:14 ](/watch?v=KVZ-P-ZI6W4&t=1754s)

#### [Learn once, write anywhere ](/watch?v=KVZ-P-ZI6W4&t=1754s)

29:14

#### [Tomorrow Morning Tomorrow Morning 29:52 ](/watch?v=KVZ-P-ZI6W4&t=1792s)

#### [Tomorrow Morning ](/watch?v=KVZ-P-ZI6W4&t=1792s)

29:52

#### [Where's the code? Where's the code? 30:03 ](/watch?v=KVZ-P-ZI6W4&t=1803s)

#### [Where's the code? ](/watch?v=KVZ-P-ZI6W4&t=1803s)

30:03

#### [What happens next? What happens next? 30:48 ](/watch?v=KVZ-P-ZI6W4&t=1848s)

#### [What happens next? ](/watch?v=KVZ-P-ZI6W4&t=1848s)

30:48

#### [Existing Frameworks Influenced: All of them Existing Frameworks Influenced: All of them 31:12 ](/watch?v=KVZ-P-ZI6W4&t=1872s)

#### [Existing Frameworks Influenced: All of them ](/watch?v=KVZ-P-ZI6W4&t=1872s)

31:12

Sync to video time 

Sync to video time

##  Description

React.js Conf 2015 Keynote - Introducing React Native

2.5KLikes

306,342Views

2015Jan 28

Tom Occhino reviews the past and present of React in 2015, and teases where it's going next.

Show less ...more

Tom Occhino reviews the past and present of React in 2015, and teases where it's going next.…...more 

...more Show less 

## 

Key moments

View all

#### [Facebook Ads Org Facebook Ads Org 1:54 ](/watch?v=KVZ-P-ZI6W4&t=114s)

#### [Facebook Ads Org ](/watch?v=KVZ-P-ZI6W4&t=114s)

1:54

#### [Complicated Apps Complicated Apps 2:26 ](/watch?v=KVZ-P-ZI6W4&t=146s)

#### [Complicated Apps ](/watch?v=KVZ-P-ZI6W4&t=146s)

2:26

#### [Cascading Updates Cascading Updates 3:05 ](/watch?v=KVZ-P-ZI6W4&t=185s)

#### [Cascading Updates ](/watch?v=KVZ-P-ZI6W4&t=185s)

3:05

#### [Unpredictable Code Unpredictable Code 3:33 ](/watch?v=KVZ-P-ZI6W4&t=213s)

#### [Unpredictable Code ](/watch?v=KVZ-P-ZI6W4&t=213s)

3:33

Transcript

Follow along using the transcript.

Show transcript

### [Meta Developers 173K subscribers  ](/@MetaDevelopers)

[Videos](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/videos)

[About](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/about)

[Videos](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/videos)[About](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/about)[Website](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa3NZWjJkV29XeDMtT3d6UloySlNoeVBjUUZxUXxBQ3Jtc0trVmU5YmRTdTk5RDVHaWZuZFhaMWhFQW1ZYkczMGtlSVlvamFXb2Y0NHRza2tvQkpuNEVrVGdlQnBCWXFfaDktcnJWV001cnV1aGFZVWdLdjlVTEhVSnZkeFlMdG9OTHFWMGdLNHNhUmJYX3BremtSOA&q=https%3A%2F%2Fdevelopers.facebook.com%2F)[Facebook](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbVBNNHdSdHJ3UUdFbjQzdndiUlp6TGhuU2M5QXxBQ3Jtc0tueFZxLWVxMzZpNG5xcG5TQThJbVczUVRmem80cGRJSkpOQnlVUWIyYnRIVjZLbGpkbGY2b0dZaGFkcThaZ3UwTGt6c3ZXVkc0SG1tTnNIUWpNaU5CSGFKMDhRV2w5NGEyZDl5NXJuMzczb2c0RE02NA&q=https%3A%2F%2Fwww.facebook.com%2FMetaforDevelopers)[Instagram](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbE1sRFlkWUU5S3kxY3NFV1U5X2hjdVJSVWYzUXxBQ3Jtc0tuSWhmMjlDeWJZTGJrTmZnaEJyN21RU3Bka3hVNFhWUTk4aXBuU1ZPSW9LcldNXzRxcUNNR25xMXRsS2VTR0lrWVdTWWJQdUtGVjQzOXFFSXYxVHJad29UZW8tTVRTZXpyNmp4YWRYNGRzUUphQjl4MA&q=https%3A%2F%2Fwww.instagram.com%2Fmetafordevelopers%2F)[LinkedIn](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa21EOVc3Sk5qWTJPYzFqNC1VczRNc05pck42QXxBQ3Jtc0trSDhHR2IwaXBFcEpQbVZ3Vk52cUVLYURGaFQzN0FRdk9oZ09LUHU0T18xcTJqQXBmVXdEZ1ctSGdNbU9PSTV5R2pjYWtQNUVjdWprTERpNjJNcGpxUHItYXhsOXhzZ1F3enJxcGllRmNTdXNhU3ZMRQ&q=https%3A%2F%2Fwww.linkedin.com%2Fshowcase%2F6647805%2F)

##  Transcript

NaN / NaN

[ 30:14 30:14 Now playing ](/watch?v=7rDsRXj9-cU)

### [ React.js Conf 2015 Keynote 2 - A Deep Dive into React Native  Meta Developers Meta Developers  • • 149K views 9 years ago ](/watch?v=7rDsRXj9-cU)

[ ](/watch?v=8pDqJVdNa44)

### [ How A Small Team of Developers Created React at Facebook | React.js: The Documentary  Honeypot Honeypot  • • 1.4M views 1 year ago ](/watch?v=8pDqJVdNa44)

[ ](/watch?v=vwgmBsMSwmo)

### [ Introducing Agentforce 2.0 with Marc Benioff | Salesforce  Salesforce Salesforce  • • 20K views 10 hours ago New ](/watch?v=vwgmBsMSwmo)

[ ](/watch?v=Q5SMmKb7qVI)

### [ React Conf Keynote (Day 2)  React Conf React Conf  • • 14K views 4 months ago ](/watch?v=Q5SMmKb7qVI)

[ ](/watch?v=6aQgiJHReCI)

### [ React 19 is finally out!  Theo - t3․gg Theo - t3․gg  • • 64K views 8 days ago ](/watch?v=6aQgiJHReCI)

[ ](/watch?v=MGuKhcnrqGA)

### [ React.js Conf 2016 - Nick Schrock - Keynote  Meta Developers Meta Developers  • • 69K views 8 years ago ](/watch?v=MGuKhcnrqGA)

[ ](/watch?v=19g66ezsKAg)

### [ Next.js Conf 2024 Opening Keynote  Vercel Vercel  • • 17K views 1 month ago ](/watch?v=19g66ezsKAg)
Tap to unmute
[Data Fetching with React Server Components](https://m.youtube.com/watch?v=TQQPAU21ZUw)

Search

Share

Copy link

Info

Shopping

Tap to unmute

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.
[Skip to content](#geist-skip-nav)

[](https://vercel.com/home?utm_source=next-site&utm_medium=banner&utm_campaign=home "Go to Vercel homepage")

[](/?uwu=true "Go to the homepage")

[](/ "Go to the homepage")

Search documentation...`CtrlK`Search...`⌘K`

[](https://vercel.com/home?utm_source=next-site&utm_medium=banner&utm_campaign=home "Go to Vercel homepage")

[](/?uwu=true "Go to the homepage")

[](/ "Go to the homepage")

[Showcase](/showcase)[Docs](/docs "Documentation")[Blog](/blog)[Templates](https://vercel.com/templates/next.js?utm_source=next-site&utm_medium=navbar&utm_campaign=next_site_nav_templates)[Enterprise](https://vercel.com/contact/sales/nextjs?utm_source=next-site&utm_medium=navbar&utm_campaign=next_site_nav_enterprise)

Search documentation...`CtrlK`Search...`⌘K`[Deploy](https://vercel.com/new/clone?utm_source=next-site&utm_medium=banner&b=main&s=https%3A%2F%2Fgithub.com%2Fvercel%2Fvercel%2Ftree%2Fmain%2Fexamples%2Fnextjs&showOptionalTeamCreation=false&template=nextjs&teamCreateStatus=hidden&utm_campaign=home)[Learn](/learn)

# The React Framework for the Web

Used by some of the world's largest companies, Next.js enables you to create **high-quality web applications** with the power of React components.

[Get Started](/docs)[Learn Next.js](/learn?utm_source=next-site&utm_medium=homepage-cta&utm_campaign=home)

▲ ~ npx create-next-app@latest

## What's in Next.js?

Everything you need to build great products on the web.

[Original1440px375pxBuilt-in OptimizationsAutomatic Image, Font, and Script Optimizations for improved UX and Core Web Vitals.](/docs/app/building-your-application/optimizing/images)[Data FetchingMake your React component async and await your data. Next.js supports both server and client data fetching.](/docs/app/building-your-application/data-fetching)[Server ActionsRun server code by calling a function. Skip the API. Then, easily revalidate cached data and update your UI in one network roundtrip.](/docs/app/building-your-application/data-fetching/forms-and-mutations)[Advanced Routing & Nested LayoutsCreate routes using the file system, including support for more advanced routing patterns and UI layouts.](/docs/app/building-your-application/routing)

[Dynamic HTML StreamingInstantly stream UI from the server, integrated with the App Router and React Suspense.](/docs/app/building-your-application/routing/loading-ui-and-streaming)[CSS SupportStyle your application with your favorite tools, including support for CSS Modules, Tailwind CSS, and popular community libraries.](/docs/app/building-your-application/styling)[Route HandlersBuild API endpoints to securely connect with third-party services for handling auth or listening for webhooks.](/docs/app/building-your-application/routing/router-handlers)[MiddlewareTake control of the incoming request. Use code to define routing and access rules for authentication, experimentation, and internationalization.](/docs/app/building-your-application/routing/middleware)

[React Server ComponentsAdd components without sending additional client-side JavaScript. Built on the latest React features.](/docs/app/building-your-application/rendering/server-components)[Client and Server RenderingFlexible rendering and caching options, including Incremental Static Regeneration (ISR), on a per-page level.](/docs/app/building-your-application/rendering)[Next.js 15The power of full-stack to the frontend. Read the release notes.](/blog/next-15)

[Built-in OptimizationsAutomatic Image, Font, and Script Optimizations for improved UX and Core Web Vitals.](/docs/app/building-your-application/optimizing/images)[React Server ComponentsAdd components without sending additional client-side JavaScript. Built on the latest React features.](/docs/app/building-your-application/rendering/server-components)[Data FetchingMake your React component async and await your data. Next.js supports both server and client data fetching.](/docs/app/building-your-application/data-fetching)[Server ActionsRun server code by calling a function. Skip the API. Then, easily revalidate cached data and update your UI in one network roundtrip.](/docs/app/building-your-application/data-fetching/forms-and-mutations)[Advanced Routing & Nested LayoutsCreate routes using the file system, including support for more advanced routing patterns and UI layouts.](/docs/app/building-your-application/routing)

[Dynamic HTML StreamingInstantly stream UI from the server, integrated with the App Router and React Suspense.](/docs/app/building-your-application/routing/loading-ui-and-streaming)[CSS SupportStyle your application with your favorite tools, including support for CSS Modules, Tailwind CSS, and popular community libraries.](/docs/app/building-your-application/styling)[Route HandlersBuild API endpoints to securely connect with third-party services for handling auth or listening for webhooks.](/docs/app/building-your-application/routing/router-handlers)[MiddlewareTake control of the incoming request. Use code to define routing and access rules for authentication, experimentation, and internationalization.](/docs/app/building-your-application/routing/middleware)[Client and Server RenderingFlexible rendering and caching options, including Incremental Static Regeneration (ISR), on a per-page level.](/docs/app/building-your-application/rendering)[Next.js 15The power of full-stack to the frontend. Read the release notes.](/blog/next-15)

[Built-in OptimizationsAutomatic Image, Font, and Script Optimizations for improved UX and Core Web Vitals.](/docs/app/building-your-application/optimizing/images)[Dynamic HTML StreamingInstantly stream UI from the server, integrated with the App Router and React Suspense.](/docs/app/building-your-application/routing/loading-ui-and-streaming)[React Server ComponentsAdd components without sending additional client-side JavaScript. Built on the latest React features.](/docs/app/building-your-application/rendering/server-components)

[Data FetchingMake your React component async and await your data. Next.js supports both server and client data fetching.](/docs/app/building-your-application/data-fetching)[Server ActionsRun server code by calling a function. Skip the API. Then, easily revalidate cached data and update your UI in one network roundtrip.](/docs/app/building-your-application/data-fetching/forms-and-mutations)[Advanced Routing & Nested LayoutsCreate routes using the file system, including support for more advanced routing patterns and UI layouts.](/docs/app/building-your-application/routing)[CSS SupportStyle your application with your favorite tools, including support for CSS Modules, Tailwind CSS, and popular community libraries.](/docs/app/building-your-application/styling)[Route HandlersBuild API endpoints to securely connect with third-party services for handling auth or listening for webhooks.](/docs/app/building-your-application/routing/router-handlers)[MiddlewareTake control of the incoming request. Use code to define routing and access rules for authentication, experimentation, and internationalization.](/docs/app/building-your-application/routing/middleware)[Client and Server RenderingFlexible rendering and caching options, including Incremental Static Regeneration (ISR), on a per-page level.](/docs/app/building-your-application/rendering)

[Next.js 15The power of full-stack to the frontend. Read the release notes.](/blog/next-15)

## Built on a foundation of fast, production-grade tooling

Powered By

[ReactThe library for web and native user interfaces. Next.js is built on the latest React features, including Server Components and Actions.](https://react.dev)[TurbopackAn incremental bundler optimized for JavaScript and TypeScript, written in Rust , and built into Next.js.](https://turbo.build)[Speedy Web CompilerAn extensible Rust based platform for the next generation of fast developer tools, and can be used for both compilation and minification.](https://swc.rs)

## Get started in seconds

Deploy Next.js to Vercel

StarterEcommerceBlogAIPortfolioSaaSMulti-tenant AppsRealtime AppsDocumentationVirtual EventWeb3

Vercel is a frontend cloud from the creators of Next.js, making it easy to get started with Next.js quickly.

Jumpstart your Next.js development with pre-built solutions from Vercel and our community.

[Deploy a Template on Vercel](https://vercel.com/templates/next.js?utm_source=next-site&utm_medium=deploy-template-on-vercel-cta&utm_campaign=homepage-new)

Next.js Boilerplate

A Next.js starter from create-next-app.

Image Gallery Starter

An image gallery built on Next.js and Cloudinary.

Next.js Commerce

An all-in-one starter kit for high-performance ecommerce sites.

## The framework of choice when it matters

[Audible](/showcase)[Sonos](/showcase)

[Dice](/showcase)

[Notion](/showcase)

[Today](/showcase)[ProductHunt](/showcase)

[Nike](/showcase)[Washington Post](/showcase)

[Sonos](/showcase)[Audible](/showcase)[Nike](/showcase)

[Notion](/showcase)[ProductHunt](/showcase)[Washington Post](/showcase)

For **performance** , **efficiency** and **developer experience**. Next.js is trusted by some of the biggest names on the web.

[View the Next.js Showcase](/showcase)

## Customer Testimonials

> ### “With Next.js, we now consistently average 0.09 or lower for Cumulative Layout Shift, placing our site in the top tier for user experience and Core Web Vitals.”

Senior Software Engineer, Frontend

> ### “Our UI for Frame.io responds to user input within 100ms and all animations run at a consistent 60fps with Next.js.”

Charlton Roberts, Product Engineering

> ### “Next.js has been a game-changer for our agency work and team collaboration. Its powerful features have allowed us to build high-performance websites quickly and efficiently like never before.”

Daniel Lopes, Frontend Developer

[](https://vercel.com/home?utm_source=next-site&utm_medium=footer&utm_campaign=next-website "Go to the Vercel website")

[](https://github.com/vercel/next.js)[](https://bsky.app/profile/nextjs.org)

#### Resources

[Docs](/docs)[Learn](/learn)[Showcase](/showcase)[Blog](/blog)[Analytics](https://vercel.com/analytics?utm_source=next-site&utm_medium=footer&utm_campaign=home)[Next.js Conf](/conf)[Previews](https://vercel.com/products/previews?utm_source=next-site&utm_medium=footer&utm_campaign=home)

#### More

[Next.js Commerce](https://vercel.com/templates/next.js/nextjs-commerce?utm_source=next-site&utm_medium=footer&utm_campaign=home)[Contact Sales](https://vercel.com/contact/sales?utm_source=next-site&utm_medium=footer&utm_campaign=home)[GitHub](https://github.com/vercel/next.js)[Releases](https://github.com/vercel/next.js/releases)[Telemetry](/telemetry)[Governance](/governance)

#### About Vercel

[Next.js + Vercel](https://vercel.com/solutions/nextjs?utm_source=next-site&utm_medium=footer&utm_campaign=home)[Open Source Software](https://vercel.com/oss?utm_source=next-site&utm_medium=footer&utm_campaign=home)[GitHub](https://github.com/vercel)[Bluesky](https://bsky.app/profile/vercel.com)

#### Legal

[Privacy Policy](https://vercel.com/legal/privacy-policy)Cookie Preferences

#### Subscribe to our newsletter

Stay updated on new releases and features, guides, and case studies.

Subscribe

© 2024 Vercel, Inc.

[](https://github.com/vercel/next.js)[](https://bsky.app/profile/nextjs.org)
[](/)[Docs](/docs/en/main)[Blog](/blog)[Showcase](/showcase)[Resources](/resources)

[Docs](/docs/en/main)[Blog](/blog)[Showcase](/showcase)[Resources](/resources)

# Welcome to Remix

## Focused on web standards and modern web app UX, you’re simply going to build better websites

Remix is a full stack web framework that lets you focus on the user interface and work back through web standards to deliver a fast, slick, and resilient user experience. People are gonna love using your stuff.

[Get Started](/docs/start/quickstart)[Read the Docs](/docs)

```
export async function loader({ request }) {
 return getProjects();
}
export async function action({ request }) {
 const form = await request.formData();
 return createProject({
  title: form.get("title"),
 });
}
export default function Projects() {
 const projects = useLoaderData();
 const { state } = useNavigation();
 const busy = state === "submitting";
 return (
  <div>
   {projects.map((project) => (
    <Link to={project.slug}>
     {project.title}
    </Link>
   ))}
   <Form method="post">
    <input name="title" />
    <button type="submit" disabled={busy}>
     {busy
      ? "Creating..."
      : "Create New Project"}
    </button>
   </Form>
  </div>
 );
}

```


```
export async function loader({ request }) {
 return getProjects();
}
export async function action({ request }) {
 const form = await request.formData();
 return createProject({ title: form.get("title") });
}
export default function Projects() {
 const projects = useLoaderData();
 const { state } = useNavigation();
 const busy = state === "submitting";
 return (
  <div>
   {projects.map((project) => (
    <Link to={project.slug}>{project.title}</Link>
   ))}
   <Form method="post">
    <input name="title" />
    <button type="submit" disabled={busy}>
     {busy ? "Creating..." : "Create New Project"}
    </button>
   </Form>
  </div>
 );
}

```


## Testimonials

Twitter Logo

, 

Radix UI

> I've been waiting for something to encourage progressive enhancement in the React space *forever* and Remix truly is so much more. Proving we don't need to sacrifice React or choose SSG for a lightning fast, accessible UI, and the DX makes it all too easy 🤤

Cloudflare

> holy 💩 Remix is good

Discord, prev React Core

> I just rewrote my first Remix app on top of Cloudflare Workers and Supabase and it’s so damn good

Software Developer

> My mind is still blown away with Remix! So easy and elegant 😩. I love how it also focuses on Accessibility (Progressive Enhancement...) 🤯, A few days ago I was like wazzup with remix, we got Next.js and Svelte 😴 ... and now I'm fired up like crazy 😂. This is so good 🤤

Daffy, prev Vercel

> What’s really cool with Remix loaders is that you can do most of your data transformation and calculations there, like check if a list is empty, limit the number of records, only send specific attributes, so your React component just receives the data and renders it, no logic needed

Fullstack Dev, Frontside

> Remix is going to put developers on the Hot Path to build accessible, scaleable, and performant apps, that have stellar user experiences and amazing developer ergonomics. It's not only going to be a win for developers, but also a big win for the end-users!

Fullstack Developer

> In my opinion @remix_run will be game changer for corporate teams hesitant to adopt full stack JavaScript. The core concepts are so intuitive you can pick it up in a day, and it will even integrate into your existing stack.

Software Engineer, Box

> I love what @mjackson and @ryanflorence are doing with Remix! Deploying to AWS Lambda in under 30 seconds 🤯

Web Developer

> Building with @remix_run has been awesome so far. Having used Next.js for applications for years, the nested layouts are a wonderful feature. I also haven't learned this much about the web in years.

Web Developer

> I love using @remix_run for my website. Remix has improved my productivity as a front-end developer by empowering me to seamlessly switch between front-end and back-end code.

App Developer

> If you're doing #webdevelopment you should check out Remix 🔥 It's a new (old) paradigm for web dev, which simplifies our code, especially state management😅, speeds up our page loads, and gives us a mental model and framework we can rely on to create our best work

![](/wave.png)![](/loading.gif)

## While you were waiting for your static site to build, distributed web infra­structure got really good. Break through the static.

Remix is a seamless server and browser runtime that provides snappy page loads and instant transitions by leveraging distributed systems and native browser features instead of clunky static builds. Built on the Web Fetch API (instead of Node) **it can run anywhere**. It already runs natively on Cloudflare Workers, and of course supports serverless and traditional Node.js environments, so you can come as you are.

Page speed is only one aspect of our true goal though. We're after **better user experiences**. As you’ve pushed the boundaries of the web, your tools haven’t caught up to your appetite. **Remix is ready** to serve you from the initial request to the fanciest UX your designers can think up. Check it out 👀

## Remix has a cheat code:Nested Routes.

↑↑↓↓←→←→BA↵

Websites usually have levels of navigation that control child views.

Not only are these components pretty much always coupled to URL segments...

...they’re also the semantic boundary of data loading and code splitting.

Hover or tap the buttons to see how they’re all related

👇

<Root><Sales><Invoices><Invoice id={id}>

example.com/sales/invoices/102000

Fakebooks

Dashboard

Accounts

Sales

Expenses

Reports

Sales

Overview

Subscriptions

Invoices

Customers

Deposits

Overdue

$10,800

Due Soon

$62,000

Invoice List

Santa Monica

$10,800

1995

Overdue

Stankonia

$8,000

2000

Due Today

Ocean Avenue

$9,500

2003

Paid

Tubthumper

$14,000

1997

Due in 10 Days

Wide Open Sp...

$4,600

1998

Due in 8 Days

Stankonia

$8,000

Due Today • Invoiced 10/31/2000

Pro Plan

$6,000

Custom

$2,000

Net Total

$8,000

## What about loading states?

Through nested routes, Remix can eliminate nearly every loading state.

Most web apps fetch inside of components, creating request waterfalls, slower loads, and jank.

Remix loads data in parallel on the server and sends a fully formed HTML document. Way faster, jank free.

Without Remix

about:blank

document

root.js

user.json

sales.js

sales/nav.json

invoices.js

invoice.js

invoice/{id}.json

With Remix

about:blank

document

root.js

sales.js

invoices.js

invoice.js

(Keep scrolling to compare)

Say good­bye to Spinnageddon

Say good­bye to Spinnageddon

## Pre-fetching Everything

Nested routes allow Remix to make your app as fast as instant.

Remix can prefetch everything in parallel before the user clicks a link.

Public Data. User Data. Modules. Heck, even CSS.

Zero loading states. Zero skeleton UI. Zero jank.

Alright, you caught us, they’re just prefetch link tags, #useThePlatform

example.com/dashboard

Fakebooks

Dashboard

Accounts

Sales

Expenses

Reports

Dashboard

Recent Activity

Alerts

Messages

New Invoice

Customer

Stankonia

Net Total

$8,000

New Invoice

Customer

Ocean Avenue

Net Total

$9,500

## Data loading

... ![](/yawn.png)

You ever notice most of the code in your app is for changing data?

Imagine if React only had props and no way to set state. What’s the point? If a web framework helps you load data but doesn’t help you update it, what’s the point? Remix doesn’t drop you off at the `<form onSubmit>` cliff. (What the heck does `event.preventDefault` do anyway?)

Resilient, progressively enhanced data updates are built in.

It’s so simple it’s kind of silly. Just make a form...

...and an action on a route module. It looks like traditional HTML forms but enables fully dynamic web experiences you're after.

Remix runs the action server side, revalidates data client side, and even handles race conditions from resubmissions.

Get fancy with transition hooks and make some pending UI. Remix handles all the state, you simply ask for it.

Or get jiggy with some optimistic UI. Remix provides the data being sent to the server so you can skip the busy spinners for mutations, too.

HTML forms for mutations. Who knew?

```
export default function NewInvoice() {
 return (
  <Form method="post">
   <input type="text" name="company" />
   <input type="text" name="amount" />
   <button type="submit">Create</button>
  </Form>
 );
}

```


## Error Handling

:)

Your websites run into problems, but with Remix they don’t need to be refreshed. Error handling is hard to remember and hard to do. That’s why it’s built in.

Remix handles errors while Server Rendering. Errors while Client Rendering. Even errors in your server side data handling.

![](/qrcode.png)

## Route Error Boundaries keep the happy path happy.

Each route module can export an error boundary next to the default route component.

If an error is thrown, client or server side, users see the boundary instead of the default component.

Routes w/o trouble render normally, so users have more options than slamming refresh.

If a route has no boundary, errors bubble up. Just put one at the top and chill out about errors in code review, yeah?

```
export default function InvoiceRoute() {
 const invoice = useLoaderData();
 return <Invoice data={invoice} />;
}

```


That's probably enough for now. What are you waiting for?

[Go Play!](/docs)

[GitHub Logo](https://github.com/remix-run)[YouTube logo](https://youtube.com/remix_run)[](https://rmx.as/discord)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

1/19

React 18 Keynote

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=HS6vIYkSNks "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=ytudH8je5ko "Next \(SHIFT+n\)")

0:00 / 33:48•Watch full videoLive

•

•

Scroll for details

#  React 18 Keynote

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

1.9K

Share

Download

Download 

Save

128K views3 years ago

128,024 views • Dec 9, 2021 

Show less 

Andrew Clark, Lauren Tan, Juan Tejada & Ricky Hanlon…...more 

...more 

## 

Key moments

View all

#### [React's APIs are rooted primarily in design principles, not programming React's APIs are rooted primarily in design principles, not programming 2:06 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

#### [React's APIs are rooted primarily in design principles, not programming ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

2:06

#### [When you use React, it feels like you're directly authoring the user experience When you use React, it feels like you're directly authoring the user experience 3:50 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

#### [When you use React, it feels like you're directly authoring the user experience ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

3:50

#### [Specifying the loading state Specifying the loading state 12:27 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

#### [Specifying the loading state ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

12:27

#### [Day 1 improvements Automatic batching Day 1 improvements Automatic batching 18:36 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

#### [Day 1 improvements Automatic batching ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

18:36

#### [Concurrent rendering...? Concurrent rendering...? 19:24 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1164s)

#### [Concurrent rendering...? ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1164s)

19:24

#### [A behind-the-scenes capability in React that powers features like Suspense A behind-the-scenes capability in React that powers features like Suspense 19:40 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1180s)

#### [A behind-the-scenes capability in React that powers features like Suspense ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1180s)

19:40

#### ["Concurrent mode" Abandoned adoption strategy "Concurrent mode" Abandoned adoption strategy 21:14 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1274s)

#### ["Concurrent mode" Abandoned adoption strategy ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1274s)

21:14

#### [Concurrent features New adoption strategy Concurrent features New adoption strategy 21:38 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1298s)

#### [Concurrent features New adoption strategy ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1298s)

21:38

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# React 18 Keynote

128,024 views128K views

Dec 9, 2021

1.9K

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [React's APIs are rooted primarily in design principles, not programming React's APIs are rooted primarily in design principles, not programming 2:06 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

#### [React's APIs are rooted primarily in design principles, not programming ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

2:06

#### [When you use React, it feels like you're directly authoring the user experience When you use React, it feels like you're directly authoring the user experience 3:50 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

#### [When you use React, it feels like you're directly authoring the user experience ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

3:50

#### [Specifying the loading state Specifying the loading state 12:27 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

#### [Specifying the loading state ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

12:27

#### [Day 1 improvements Automatic batching Day 1 improvements Automatic batching 18:36 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

#### [Day 1 improvements Automatic batching ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

18:36

#### [Concurrent rendering...? Concurrent rendering...? 19:24 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1164s)

#### [Concurrent rendering...? ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1164s)

19:24

#### [A behind-the-scenes capability in React that powers features like Suspense A behind-the-scenes capability in React that powers features like Suspense 19:40 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1180s)

#### [A behind-the-scenes capability in React that powers features like Suspense ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1180s)

19:40

#### ["Concurrent mode" Abandoned adoption strategy "Concurrent mode" Abandoned adoption strategy 21:14 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1274s)

#### ["Concurrent mode" Abandoned adoption strategy ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1274s)

21:14

#### [Concurrent features New adoption strategy Concurrent features New adoption strategy 21:38 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1298s)

#### [Concurrent features New adoption strategy ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1298s)

21:38

#### [React 18 Beta React 18 Beta 22:22 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1342s)

#### [React 18 Beta ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1342s)

22:22

#### [React 18 RC React 18 RC 22:38 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1358s)

#### [React 18 RC ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1358s)

22:38

#### [Final round of public testing Final round of public testing 22:47 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1367s)

#### [Final round of public testing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1367s)

22:47

#### [Server Components Server Components 23:37 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1417s)

#### [Server Components ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1417s)

23:37

#### [Concurrent rendering was originally inspired by problems found in React Native Concurrent rendering was originally inspired by problems found in React Native 26:18 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1578s)

#### [Concurrent rendering was originally inspired by problems found in React Native ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1578s)

26:18

#### [Where is React Native today? Where is React Native today? 30:47 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1847s)

#### [Where is React Native today? ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1847s)

30:47

Sync to video time 

Sync to video time

##  Description

React 18 Keynote

1.9KLikes

128,024Views

2021Dec 9

Andrew Clark, Lauren Tan, Juan Tejada & Ricky Hanlon

Show less ...more

Andrew Clark, Lauren Tan, Juan Tejada & Ricky Hanlon…...more 

...more Show less 

## 

Key moments

View all

#### [React's APIs are rooted primarily in design principles, not programming React's APIs are rooted primarily in design principles, not programming 2:06 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

#### [React's APIs are rooted primarily in design principles, not programming ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

2:06

#### [When you use React, it feels like you're directly authoring the user experience When you use React, it feels like you're directly authoring the user experience 3:50 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

#### [When you use React, it feels like you're directly authoring the user experience ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

3:50

#### [Specifying the loading state Specifying the loading state 12:27 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

#### [Specifying the loading state ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

12:27

#### [Day 1 improvements Automatic batching Day 1 improvements Automatic batching 18:36 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

#### [Day 1 improvements Automatic batching ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

18:36

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:React 18 for app developers

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

1 / 191 / 19

Loop playlist 

Shuffle playlist 

[ ▶ [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=ytudH8je5ko)

### [ React 18 for app developers  React Conf React Conf  • • 65K views 3 years ago ](/watch?v=ytudH8je5ko)

[ ](/watch?v=lyEKhv8-3n0)

### [ React Conf Keynote (Day 1)  React Conf React Conf  • • 7.7K views 4 months ago ](/watch?v=lyEKhv8-3n0)

[ ](/watch?v=ByBPyMBTzM0)

### [ Concurrent Rendering in React - Andrew Clark and Brian Vaughn - React Conf 2018  React Conf React Conf  • • 79K views 6 years ago ](/watch?v=ByBPyMBTzM0)

[ ](/watch?v=gfU1iZnjRZM)

### [ Next.js Conf Keynote (Next.js 14)  Vercel Vercel  • • 58K views 1 year ago ](/watch?v=gfU1iZnjRZM)

[ ](/watch?v=NZoRlVi3MjQ)

### [ The Story of Concurrent React  uidotdev uidotdev  • • 161K views 2 years ago ](/watch?v=NZoRlVi3MjQ)

[ ](/watch?v=pj5N-Khihgc)

### [ Streaming Server Rendering with Suspense  React Conf React Conf  • • 48K views 3 years ago ](/watch?v=pj5N-Khihgc)

[ ](/watch?v=R0B2HsSM78s)

### [ React Unpacked: A Roadmap to React 19 | Sam Selikoff  React Conf React Conf  • • 6.3K views 4 months ago ](/watch?v=R0B2HsSM78s)

[ ](/watch?v=TQQPAU21ZUw)

### [ Data Fetching with React Server Components  Meta Open Source Meta Open Source  • • 264K views 3 years ago ](/watch?v=TQQPAU21ZUw)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

2/19

React 18 for app developers

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=FZ0cG47msEk "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=pj5N-Khihgc "Next \(SHIFT+n\)")

0:00 / 19:08•Watch full videoLive

•

•

Scroll for details

#  React 18 for app developers

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

961

Share

Download

Download 

Save

65K views3 years ago

65,767 views • Dec 9, 2021 

Show less 

Shruti Kapoor…...more 

...more 

## 

Key moments

View all

#### [Before React 18: not batched Before React 18: not batched 1:58 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

#### [Before React 18: not batched ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

1:58

#### [Automatic batching in React 18 Automatic batching in React 18 2:16 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

#### [Automatic batching in React 18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

2:16

#### [Server rendering Server rendering 3:18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

#### [Server rendering ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

3:18

#### [Suspense on the server Suspense on the server 3:54 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

#### [Suspense on the server ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

3:54

#### [New APls (concurrent features) New APls (concurrent features) 5:44 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=344s)

#### [New APls (concurrent features) ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=344s)

5:44

#### [How to upgrade to React 18 How to upgrade to React 18 7:24 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=444s)

#### [How to upgrade to React 18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=444s)

7:24

#### [Edge cases to watch out for Edge cases to watch out for 17:42 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=1062s)

#### [Edge cases to watch out for ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=1062s)

17:42

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# React 18 for app developers

65,767 views65K views

Dec 9, 2021

961

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [Before React 18: not batched Before React 18: not batched 1:58 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

#### [Before React 18: not batched ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

1:58

#### [Automatic batching in React 18 Automatic batching in React 18 2:16 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

#### [Automatic batching in React 18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

2:16

#### [Server rendering Server rendering 3:18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

#### [Server rendering ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

3:18

#### [Suspense on the server Suspense on the server 3:54 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

#### [Suspense on the server ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

3:54

#### [New APls (concurrent features) New APls (concurrent features) 5:44 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=344s)

#### [New APls (concurrent features) ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=344s)

5:44

#### [How to upgrade to React 18 How to upgrade to React 18 7:24 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=444s)

#### [How to upgrade to React 18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=444s)

7:24

#### [Edge cases to watch out for Edge cases to watch out for 17:42 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=1062s)

#### [Edge cases to watch out for ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=1062s)

17:42

Sync to video time 

Sync to video time

##  Description

React 18 for app developers

961Likes

65,767Views

2021Dec 9

Shruti Kapoor

Show less ...more

Shruti Kapoor…...more 

...more Show less 

## 

Key moments

View all

#### [Before React 18: not batched Before React 18: not batched 1:58 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

#### [Before React 18: not batched ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

1:58

#### [Automatic batching in React 18 Automatic batching in React 18 2:16 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

#### [Automatic batching in React 18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

2:16

#### [Server rendering Server rendering 3:18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

#### [Server rendering ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

3:18

#### [Suspense on the server Suspense on the server 3:54 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

#### [Suspense on the server ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

3:54

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Streaming Server Rendering with Suspense

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

2 / 192 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ ▶ [ ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=pj5N-Khihgc)

### [ Streaming Server Rendering with Suspense  React Conf React Conf  • • 48K views 3 years ago ](/watch?v=pj5N-Khihgc)

[ ](/watch?v=FZ0cG47msEk)

### [ React 18 Keynote  React Conf React Conf  • • 128K views 3 years ago ](/watch?v=FZ0cG47msEk)

[ ](/watch?v=lhVGdErZuN4)

### [ Re-introducing Relay  React Conf React Conf  • • 22K views 3 years ago ](/watch?v=lhVGdErZuN4)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=lGEMwh32soc)

### [ React without memo  React Conf React Conf  • • 140K views 3 years ago ](/watch?v=lGEMwh32soc)

[ ](/watch?v=oxDfrke8rZg)

### [ React Developer Tooling  React Conf React Conf  • • 19K views 3 years ago ](/watch?v=oxDfrke8rZg)

[ ](/watch?v=lvhPq5chokM)

### [ Forget About Memo | Lauren Tan  React Conf React Conf  • • 3.7K views 4 months ago ](/watch?v=lvhPq5chokM)
Tap to unmute

[Open App](vnd.youtube://m.youtube.com/watch?v=pj5N-Khihgc&feature=mweb_c3_open_app_11268432&itc_campaign=mweb_c3_open_app_11268432&redirect_app_store_ios=1&app=desktop)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

4/19

The first React Working Group

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=pj5N-Khihgc "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=oxDfrke8rZg "Next \(SHIFT+n\)")

0:00 / 14:41•Watch full videoLive

•

•

Scroll for details

#  The first React Working Group

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

84

Share

Download

Download 

Save

12K views3 years ago

12,473 views • Dec 9, 2021 

Show less 

Aakansha Doshi…...more 

...more 

## 

Key moments

View all

#### [Meeting between React & Redux Team Meeting between React & Redux Team 5:13 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

#### [Meeting between React & Redux Team ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

5:13

#### [Internals of Concurrent Scheduling Internals of Concurrent Scheduling 9:53 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

#### [Internals of Concurrent Scheduling ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

9:53

#### [How React keeps browser interactive during hydration? How React keeps browser interactive during hydration? 10:15 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

#### [How React keeps browser interactive during hydration? ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

10:15

#### [Prepare libraries for concurrent support. Prepare libraries for concurrent support. 10:46 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

#### [Prepare libraries for concurrent support. ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

10:46

#### [Beginner friendly Questions Beginner friendly Questions 12:32 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=752s)

#### [Beginner friendly Questions ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=752s)

12:32

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# The first React Working Group

12,473 views12K views

Dec 9, 2021

84

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [Meeting between React & Redux Team Meeting between React & Redux Team 5:13 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

#### [Meeting between React & Redux Team ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

5:13

#### [Internals of Concurrent Scheduling Internals of Concurrent Scheduling 9:53 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

#### [Internals of Concurrent Scheduling ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

9:53

#### [How React keeps browser interactive during hydration? How React keeps browser interactive during hydration? 10:15 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

#### [How React keeps browser interactive during hydration? ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

10:15

#### [Prepare libraries for concurrent support. Prepare libraries for concurrent support. 10:46 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

#### [Prepare libraries for concurrent support. ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

10:46

#### [Beginner friendly Questions Beginner friendly Questions 12:32 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=752s)

#### [Beginner friendly Questions ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=752s)

12:32

Sync to video time 

Sync to video time

##  Description

The first React Working Group

84Likes

12,473Views

2021Dec 9

Aakansha Doshi

Show less ...more

Aakansha Doshi…...more 

...more Show less 

## 

Key moments

View all

#### [Meeting between React & Redux Team Meeting between React & Redux Team 5:13 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

#### [Meeting between React & Redux Team ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

5:13

#### [Internals of Concurrent Scheduling Internals of Concurrent Scheduling 9:53 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

#### [Internals of Concurrent Scheduling ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

9:53

#### [How React keeps browser interactive during hydration? How React keeps browser interactive during hydration? 10:15 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

#### [How React keeps browser interactive during hydration? ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

10:15

#### [Prepare libraries for concurrent support. Prepare libraries for concurrent support. 10:46 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

#### [Prepare libraries for concurrent support. ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

10:46

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:React Developer Tooling

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

4 / 194 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ ▶ [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

25 videos

### [React Conf 2024](/watch?v=p6auCiVoa3c&list=PLNG_1j3cPCaapCRvpsyQ2CrNtnTtLf2jz)

[React Conf](/@ReactConfOfficial) • [Playlist](/@ReactConfOfficial)

[View full playlist](/playlist?list=PLNG_1j3cPCaapCRvpsyQ2CrNtnTtLf2jz)

[ ](/watch?v=cxbVN1F-aag)

### [ Let’s break React’s rules | Charlotte Isambert  React Conf React Conf  • • 2K views 4 months ago ](/watch?v=cxbVN1F-aag)

[ ](/watch?v=pOo7x8OiAec)

### [ And Now You Understand React Server Components | Kent C. Dodds  React Conf React Conf  • • 13K views 4 months ago ](/watch?v=pOo7x8OiAec)

[ ](/watch?v=oxDfrke8rZg)

### [ React Developer Tooling  React Conf React Conf  • • 19K views 3 years ago ](/watch?v=oxDfrke8rZg)

[ ](/watch?v=AJOGzVygGcY)

### [ What's new in React 19 | Lydia Hallie  React Conf React Conf  • • 51K views 4 months ago ](/watch?v=AJOGzVygGcY)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=iCkPaE4nxaw)

### [ React team Q&A  React Conf React Conf  • • 1.2K views 4 months ago ](/watch?v=iCkPaE4nxaw)
Tap to unmute

[Open App](intent://m.youtube.com/watch?v=oxDfrke8rZg&feature=mweb_c3_open_app_11268432&itc_campaign=mweb_c3_open_app_11268432&redirect_app_store_ios=1&app=desktop#Intent;package=com.google.android.youtube;scheme=vnd.youtube;launchFlags=268435456;end)
React without memo

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Up next

LiveUpcoming

CancelPlay Now

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

0:00 / 12:00•Watch full videoLive

•

•

Scroll for details

•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/)

Search 

Search 

[ ](/)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

7/19

React Docs Keynote

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=lGEMwh32soc "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=-7odLW_hG7s "Next \(SHIFT+n\)")

0:00 / 10:06•Watch full videoLive

•

•

Scroll for details

#  React Docs Keynote

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

221

Share

Download

Download 

Save

12K views3 years ago

12,268 views • Dec 9, 2021 

Show less 

Rachel Nabors…...more 

...more 

## 

Key moments

View all

#### [React Docs Keynote React Docs Keynote 0:35 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

#### [React Docs Keynote ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

0:35

#### [Illustrations Illustrations 6:01 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

#### [Illustrations ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

6:01

#### [Diagrams Diagrams 6:13 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

#### [Diagrams ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

6:13

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# React Docs Keynote

12,268 views12K views

Dec 9, 2021

221

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [React Docs Keynote React Docs Keynote 0:35 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

#### [React Docs Keynote ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

0:35

#### [Illustrations Illustrations 6:01 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

#### [Illustrations ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

6:01

#### [Diagrams Diagrams 6:13 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

#### [Diagrams ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

6:13

Sync to video time 

Sync to video time

##  Description

React Docs Keynote

221Likes

12,268Views

2021Dec 9

Rachel Nabors

Show less ...more

Rachel Nabors…...more 

...more Show less 

## 

Key moments

View all

#### [React Docs Keynote React Docs Keynote 0:35 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

#### [React Docs Keynote ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

0:35

#### [Illustrations Illustrations 6:01 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

#### [Illustrations ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

6:01

#### [Diagrams Diagrams 6:13 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

#### [Diagrams ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

6:13

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Things I learnt from the new React docs

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

7 / 197 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ 12:52 12:52 Now playing ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ 12:01 12:01 Now playing ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ ▶ [ 10:07 10:07 Now playing ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ 9:20 9:20 Now playing ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=lyEKhv8-3n0)

### [ React Conf Keynote (Day 1)  React Conf React Conf  • • 7.7K views 4 months ago ](/watch?v=lyEKhv8-3n0)

[ ](/watch?v=pj5N-Khihgc)

### [ Streaming Server Rendering with Suspense  React Conf React Conf  • • 48K views 3 years ago ](/watch?v=pj5N-Khihgc)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=-7odLW_hG7s)

### [ Things I learnt from the new React docs  React Conf React Conf  • • 7.6K views 3 years ago ](/watch?v=-7odLW_hG7s)

[ ](/watch?v=FZ0cG47msEk)

### [ React 18 Keynote  React Conf React Conf  • • 128K views 3 years ago ](/watch?v=FZ0cG47msEk)

[ ](/watch?v=ytudH8je5ko)

### [ React 18 for app developers  React Conf React Conf  • • 65K views 3 years ago ](/watch?v=ytudH8je5ko)

[ ](/watch?v=KMjVTYmWnW0)

### [ Webinar: Learn the basics of Nextflow Tower Cloud (June 2023)  Seqera Seqera  • • 173 views 2 weeks ago ](/watch?v=KMjVTYmWnW0)

[ ](/watch?v=Ul3y1LXxzdU)

### [ Learn React Router v6 In 45 Minutes  Web Dev Simplified Web Dev Simplified  • • 574K views 2 years ago ](/watch?v=Ul3y1LXxzdU)

[ ](/watch?v=HPoC-k7Rxwo)

### [ Goodbye, useEffect: David Khourshid  Real World React Real World React  • • 235K views 2 years ago ](/watch?v=HPoC-k7Rxwo)
[Things I learnt from the new React docs](https://m.youtube.com/watch?v=-7odLW_hG7s)

Search

Share

Copy link

Info

Shopping

Tap to unmute

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.
Tap to unmute

[Open App](vnd.youtube://m.youtube.com/watch?v=5X-WEQflCL0&feature=mweb_c3_open_app_11268432&itc_campaign=mweb_c3_open_app_11268432&redirect_app_store_ios=1&app=desktop)
Tap to unmute

[Open App](intent://m.youtube.com/watch?v=7cPWmID5XAk&feature=mweb_c3_open_app_11268432&itc_campaign=mweb_c3_open_app_11268432&redirect_app_store_ios=1&app=desktop#Intent;package=com.google.android.youtube;scheme=vnd.youtube;launchFlags=268435456;end)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

11/19

Interactive playgrounds with React

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=7cPWmID5XAk "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=lhVGdErZuN4 "Next \(SHIFT+n\)")

0:00 / 9:00•Watch full videoLive

•

•

Scroll for details

#  Interactive playgrounds with React

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

330

Share

Download

Download 

Save

14K views3 years ago

14,492 views • Dec 9, 2021 

Show less 

Delba De Oliveira…...more 

...more 

## 

Key moments

View all

#### [An interactive, learning experience with a tight feedback loop. An interactive, learning experience with a tight feedback loop. 1:37 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

#### [An interactive, learning experience with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

1:37

#### [USER INTERFACE COMPLEX TOPIC USER INTERFACE COMPLEX TOPIC 3:15 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

#### [USER INTERFACE COMPLEX TOPIC ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

3:15

#### [Interactive, learning experiences with a tight feedback loop. Interactive, learning experiences with a tight feedback loop. 3:32 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

#### [Interactive, learning experiences with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

3:32

#### [Static & Dynamic Static & Dynamic 5:47 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

#### [Static & Dynamic ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

5:47

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# Interactive playgrounds with React

14,492 views14K views

Dec 9, 2021

330

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [An interactive, learning experience with a tight feedback loop. An interactive, learning experience with a tight feedback loop. 1:37 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

#### [An interactive, learning experience with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

1:37

#### [USER INTERFACE COMPLEX TOPIC USER INTERFACE COMPLEX TOPIC 3:15 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

#### [USER INTERFACE COMPLEX TOPIC ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

3:15

#### [Interactive, learning experiences with a tight feedback loop. Interactive, learning experiences with a tight feedback loop. 3:32 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

#### [Interactive, learning experiences with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

3:32

#### [Static & Dynamic Static & Dynamic 5:47 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

#### [Static & Dynamic ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

5:47

Sync to video time 

Sync to video time

##  Description

Interactive playgrounds with React

330Likes

14,492Views

2021Dec 9

Delba De Oliveira

Show less ...more

Delba De Oliveira…...more 

...more Show less 

## 

Key moments

View all

#### [An interactive, learning experience with a tight feedback loop. An interactive, learning experience with a tight feedback loop. 1:37 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

#### [An interactive, learning experience with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

1:37

#### [USER INTERFACE COMPLEX TOPIC USER INTERFACE COMPLEX TOPIC 3:15 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

#### [USER INTERFACE COMPLEX TOPIC ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

3:15

#### [Interactive, learning experiences with a tight feedback loop. Interactive, learning experiences with a tight feedback loop. 3:32 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

#### [Interactive, learning experiences with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

3:32

#### [Static & Dynamic Static & Dynamic 5:47 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

#### [Static & Dynamic ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

5:47

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Re-introducing Relay

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

11 / 1911 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ ▶ [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=lhVGdErZuN4)

### [ Re-introducing Relay  React Conf React Conf  • • 22K views 3 years ago ](/watch?v=lhVGdErZuN4)

[ ](/watch?v=DFwLGLmLuFg)

### [ Caching in NextJs ft Delba Oliveira from Vercel  Hamed Bahram Hamed Bahram  • • 20K views 5 months ago ](/watch?v=DFwLGLmLuFg)

[ ](/watch?v=ytudH8je5ko)

### [ React 18 for app developers  React Conf React Conf  • • 65K views 3 years ago ](/watch?v=ytudH8je5ko)

[ ](/watch?v=z1F6Dv5Pw4M)

### [ Perplexity AI: A Game-Changer for Teacher Research  Teacher's Tech Teacher's Tech  • • 4.1K views 7 months ago ](/watch?v=z1F6Dv5Pw4M)

[ ](/watch?v=AJOGzVygGcY)

### [ What's new in React 19 | Lydia Hallie  React Conf React Conf  • • 51K views 4 months ago ](/watch?v=AJOGzVygGcY)

[ ](/watch?v=pOo7x8OiAec)

### [ And Now You Understand React Server Components | Kent C. Dodds  React Conf React Conf  • • 13K views 4 months ago ](/watch?v=pOo7x8OiAec)

[ ](/watch?v=sPM2WiwA1us)

### [ GSoC 2025 Complete Roadmap | Google Summer of Code  Apna College Apna College  • • 335K views 2 weeks ago ](/watch?v=sPM2WiwA1us)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

12/19

Re-introducing Relay

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=zL8cz2W0z34 "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=9L4FFrvwJwY "Next \(SHIFT+n\)")

0:00 / 19:34•Watch full videoLive

•

•

Scroll for details

#  Re-introducing Relay

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

620

Share

Download

Download 

Save

22K views3 years ago

22,710 views • Dec 9, 2021 

Show less 

Robert Balicki…...more 

...more 

## 

Key moments

View all

#### [Implicit dependency between query declaration and subcomponents Implicit dependency between query declaration and subcomponents 4:05 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

#### [Implicit dependency between query declaration and subcomponents ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

4:05

#### [Every component can be reasoned about in isolation Every component can be reasoned about in isolation 6:41 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

#### [Every component can be reasoned about in isolation ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

6:41

#### [Slow-to-calculate fields Slow-to-calculate fields 8:04 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

#### [Slow-to-calculate fields ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

8:04

#### [Components and loading states are separate concerns Components and loading states are separate concerns 10:20 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

#### [Components and loading states are separate concerns ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

10:20

#### [Pre-generated instructions Pre-generated instructions 15:12 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=912s)

#### [Pre-generated instructions ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=912s)

15:12

#### [5x on average 7x at p95 5x on average 7x at p95 17:03 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=1023s)

#### [5x on average 7x at p95 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=1023s)

17:03

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# Re-introducing Relay

22,710 views22K views

Dec 9, 2021

620

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [Implicit dependency between query declaration and subcomponents Implicit dependency between query declaration and subcomponents 4:05 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

#### [Implicit dependency between query declaration and subcomponents ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

4:05

#### [Every component can be reasoned about in isolation Every component can be reasoned about in isolation 6:41 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

#### [Every component can be reasoned about in isolation ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

6:41

#### [Slow-to-calculate fields Slow-to-calculate fields 8:04 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

#### [Slow-to-calculate fields ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

8:04

#### [Components and loading states are separate concerns Components and loading states are separate concerns 10:20 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

#### [Components and loading states are separate concerns ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

10:20

#### [Pre-generated instructions Pre-generated instructions 15:12 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=912s)

#### [Pre-generated instructions ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=912s)

15:12

#### [5x on average 7x at p95 5x on average 7x at p95 17:03 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=1023s)

#### [5x on average 7x at p95 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=1023s)

17:03

Sync to video time 

Sync to video time

##  Description

Re-introducing Relay

620Likes

22,710Views

2021Dec 9

Robert Balicki

Show less ...more

Robert Balicki…...more 

...more Show less 

## 

Key moments

View all

#### [Implicit dependency between query declaration and subcomponents Implicit dependency between query declaration and subcomponents 4:05 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

#### [Implicit dependency between query declaration and subcomponents ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

4:05

#### [Every component can be reasoned about in isolation Every component can be reasoned about in isolation 6:41 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

#### [Every component can be reasoned about in isolation ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

6:41

#### [Slow-to-calculate fields Slow-to-calculate fields 8:04 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

#### [Slow-to-calculate fields ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

8:04

#### [Components and loading states are separate concerns Components and loading states are separate concerns 10:20 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

#### [Components and loading states are separate concerns ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

10:20

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:React Native Desktop

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

12 / 1912 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ 12:52 12:52 Now playing ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ 12:01 12:01 Now playing ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ 10:07 10:07 Now playing ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ 9:20 9:20 Now playing ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ ▶ [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=FZ0cG47msEk)

### [ React 18 Keynote  React Conf React Conf  • • 128K views 3 years ago ](/watch?v=FZ0cG47msEk)

[ ](/watch?v=Tl0S7QkxFE4)

### [ Data Fetching With Suspense In Relay | Joe Savona  React Conf React Conf  • • 30K views 5 years ago ](/watch?v=Tl0S7QkxFE4)

[ ](/watch?v=xnvzz7Z658I)

### [ Deep dive on Relay GraphQL client for React  Hasura Hasura  • • 14K views 4 years ago ](/watch?v=xnvzz7Z658I)

[ ](/watch?v=lyEKhv8-3n0)

### [ React Conf Keynote (Day 1)  React Conf React Conf  • • 7.7K views 4 months ago ](/watch?v=lyEKhv8-3n0)

[ ](/watch?v=ytudH8je5ko)

### [ React 18 for app developers  React Conf React Conf  • • 65K views 3 years ago ](/watch?v=ytudH8je5ko)

[ ](/watch?v=WxPtYJRjLL0)

### [ F8 2019: Building the New Facebook.com with React, GraphQL and Relay  Meta Developers Meta Developers  • • 31K views 5 years ago ](/watch?v=WxPtYJRjLL0)

[ ](/watch?v=9L4FFrvwJwY)

### [ React Native Desktop  React Conf React Conf  • • 19K views 3 years ago ](/watch?v=9L4FFrvwJwY)

[ ](/watch?v=NdWTDZ7dg-8)

### [ Design Representation  Hardware Modeling Using Verilog Hardware Modeling Using Verilog  • • 105K views 7 years ago ](/watch?v=NdWTDZ7dg-8)

[ ](/watch?v=If1Lw4pLLEo)

### [ Spring Framework Tutorial | Full Course  Telusko Telusko  • • 2.2M views 5 years ago ](/watch?v=If1Lw4pLLEo)

[ ](/watch?v=1_dLaSjzOMY)

### [ Write Clean Code with React Suspense | React Error Boundaries Explained  Dave Gray Dave Gray  • • 28K views 1 year ago ](/watch?v=1_dLaSjzOMY)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[Sign in](https://accounts.google.com/ServiceLogin?service=youtube&uilel=3&passive=true&continue=https%3A%2F%2Fwww.youtube.com%2Fsignin%3Faction_handle_signin%3Dtrue%26app%3Ddesktop%26hl%3Den%26next%3Dhttps%253A%252F%252Fwww.youtube.com%252Fwatch%253Fv%253D9L4FFrvwJwY%2526list%253DPLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa%2526index%253D13&hl=en&ec=65620)

[ ](/ "YouTube Home") IN 

13/19

React Native Desktop

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=lhVGdErZuN4 "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=NLj73vrc2I8 "Next \(SHIFT+n\)")

0:00 / 15:32•Watch full videoLive

•

•

Scroll for details

#  React Native Desktop

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

306

Share

Download

Download 

Save

19K views3 years ago

19,398 views • Dec 9, 2021 

Show less 

Eric Rozell & Steven Moyes…...more 

...more 

## 

Key moments

View all

#### [React Native Desktop React Native Desktop 0:36 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

#### [React Native Desktop ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

0:36

#### [Miniview Miniview 3:46 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

#### [Miniview ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

3:46

#### [Participant Reordering Participant Reordering 4:14 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

#### [Participant Reordering ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

4:14

#### [How and Why Is Microsoft Using React Native How and Why Is Microsoft Using React Native 7:50 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

#### [How and Why Is Microsoft Using React Native ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

7:50

#### [Xbox Apps Xbox Apps 8:43 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=523s)

#### [Xbox Apps ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=523s)

8:43

#### [Powerapps Player Powerapps Player 9:21 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=561s)

#### [Powerapps Player ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=561s)

9:21

#### [Demo Demo 10:52 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=652s)

#### [Demo ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=652s)

10:52

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# React Native Desktop

19,398 views19K views

Dec 9, 2021

306

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [React Native Desktop React Native Desktop 0:36 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

#### [React Native Desktop ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

0:36

#### [Miniview Miniview 3:46 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

#### [Miniview ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

3:46

#### [Participant Reordering Participant Reordering 4:14 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

#### [Participant Reordering ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

4:14

#### [How and Why Is Microsoft Using React Native How and Why Is Microsoft Using React Native 7:50 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

#### [How and Why Is Microsoft Using React Native ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

7:50

#### [Xbox Apps Xbox Apps 8:43 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=523s)

#### [Xbox Apps ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=523s)

8:43

#### [Powerapps Player Powerapps Player 9:21 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=561s)

#### [Powerapps Player ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=561s)

9:21

#### [Demo Demo 10:52 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=652s)

#### [Demo ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=652s)

10:52

Sync to video time 

Sync to video time

##  Description

React Native Desktop

306Likes

19,398Views

2021Dec 9

Eric Rozell & Steven Moyes

Show less ...more

Eric Rozell & Steven Moyes…...more 

...more Show less 

## 

Key moments

View all

#### [React Native Desktop React Native Desktop 0:36 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

#### [React Native Desktop ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

0:36

#### [Miniview Miniview 3:46 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

#### [Miniview ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

3:46

#### [Participant Reordering Participant Reordering 4:14 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

#### [Participant Reordering ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

4:14

#### [How and Why Is Microsoft Using React Native How and Why Is Microsoft Using React Native 7:50 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

#### [How and Why Is Microsoft Using React Native ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

7:50

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:On-device Machine Learning for React Native

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

13 / 1913 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ 12:52 12:52 Now playing ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ 12:01 12:01 Now playing ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ 10:07 10:07 Now playing ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ 9:20 9:20 Now playing ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ 10:44 10:44 Now playing ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ 11:09 11:09 Now playing ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ 9:01 9:01 Now playing ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ 19:35 19:35 Now playing ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ ▶ [ 15:33 15:33 Now playing ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ 14:01 14:01 Now playing ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ 19:23 19:23 Now playing ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ 8:32 8:32 Now playing ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ 10:33 10:33 Now playing ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ 10:15 10:15 Now playing ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ 9:38 9:38 Now playing ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

24:40

### [From Gaming to Productivity: how Microsoft is using React Native across a portfolio of experiences](/watch?v=EgpHCLCwebU)

[Callstack Engineers](/@CallstackEngineers)

2.8K views • 1 year ago

17:19

### [ELECTRON: why people HATE it, why devs USE it](/watch?v=G1K0Mb-rLBU)

[The Linux Experiment](/@TheLinuxEXP)

195K views • 2 years ago

22:54

### [What’s next for React Native for Desktop? — Saad Najmi, Steven Moyes | React Universe Conf 2024](/watch?v=1leGdmEse9Y)

[Callstack Engineers](/@CallstackEngineers)

292 views • 2 months ago

19:35

### [Re-introducing Relay](/watch?v=lhVGdErZuN4)

[React Conf](/@ReactConfOfficial)

22K views • 3 years ago

40:20

### [MS Build SK119 React Native: Build cross platform apps that target Windows, Mac, and more!](/watch?v=QMFbrHZnvvw)

[Microsoft 365 Developer](/@Microsoft365Developer)

24K views • 4 years ago

59:26

### [Is your business ready for AI? We can help!](/watch?v=wd4jgaHaZh0)

[The I.T. Company Ltd.](/@thei.t.companyltd.5368)

25 views • 7 days ago

8:15

### [Australia v India 2024-25 | Third Test | Day Five](/watch?v=pGvp5Q-1Yag)

[cricket.com.au](/@cricketcomau)

2.5M views • 4 hours ago

New

18:12

### [Gabriel Donadel – Launching Desktop Apps to Orbit with React Native | App.js Conf 2024](/watch?v=K7yC3JKfWYU)

[Software Mansion](/@SoftwareMansion)

2.7K views • 6 months ago

1:11:48

### [Create a Desktop App With JavaScript & Electron](/watch?v=ML743nrkMHw)

[Traversy Media](/@TraversyMedia)

382K views • 2 years ago
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

14/19

On-device Machine Learning for React Native

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Up next

LiveUpcoming

CancelPlay Now

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=9L4FFrvwJwY "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=oPfSC5bQPR8 "Next \(SHIFT+n\)")

0:00 / 14:00•Watch full videoLive

•

•

Scroll for details

#  On-device Machine Learning for React Native

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

195

Share

Download

Download 

Save

12K views3 years ago

12,132 views • Dec 9, 2021 

Show less 

Roman Rädle…...more 

...more 

## 

Key moments

View all

#### [Image Classification Model Image Classification Model 3:57 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

#### [Image Classification Model ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

3:57

#### [Image Classification Image Classification 4:12 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

#### [Image Classification ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

4:12

#### [Type Safety Type Safety 7:33 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

#### [Type Safety ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

7:33

#### [React Hooks React Hooks 8:54 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

#### [React Hooks ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

8:54

#### [Camera Component Camera Component 11:52 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=712s)

#### [Camera Component ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=712s)

11:52

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# On-device Machine Learning for React Native

12,132 views12K views

Dec 9, 2021

195

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [Image Classification Model Image Classification Model 3:57 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

#### [Image Classification Model ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

3:57

#### [Image Classification Image Classification 4:12 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

#### [Image Classification ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

4:12

#### [Type Safety Type Safety 7:33 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

#### [Type Safety ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

7:33

#### [React Hooks React Hooks 8:54 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

#### [React Hooks ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

8:54

#### [Camera Component Camera Component 11:52 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=712s)

#### [Camera Component ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=712s)

11:52

Sync to video time 

Sync to video time

##  Description

On-device Machine Learning for React Native

195Likes

12,132Views

2021Dec 9

Roman Rädle

Show less ...more

Roman Rädle…...more 

...more Show less 

## 

Key moments

View all

#### [Image Classification Model Image Classification Model 3:57 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

#### [Image Classification Model ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

3:57

#### [Image Classification Image Classification 4:12 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

#### [Image Classification ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

4:12

#### [Type Safety Type Safety 7:33 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

#### [Type Safety ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

7:33

#### [React Hooks React Hooks 8:54 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

#### [React Hooks ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

8:54

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:React 18 for External Store Libraries

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

14 / 1914 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ 12:52 12:52 Now playing ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ 12:01 12:01 Now playing ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ 10:07 10:07 Now playing ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ 9:20 9:20 Now playing ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ 10:44 10:44 Now playing ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ ▶ [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=0-S5a0eXPoc)

### [ React Native Tutorial for Beginners - Build a React Native App  Programming with Mosh Programming with Mosh  • • 3.2M views 4 years ago ](/watch?v=0-S5a0eXPoc)

[ ](/watch?v=oPfSC5bQPR8)

### [ React 18 for External Store Libraries  React Conf React Conf  • • 19K views 3 years ago ](/watch?v=oPfSC5bQPR8)

[ ](/watch?v=2LqrfEzuIMk)

### [ How to Deploy Machine Learning Model using Flask (Iris Dataset) | Python  Hackers Realm Hackers Realm  • • 20K views 2 years ago ](/watch?v=2LqrfEzuIMk)

[ ](/watch?v=Ij5MoUnLQ0E)

### [ ONNX and ONNX Runtime  Microsoft Research Microsoft Research  • • 26K views 5 years ago ](/watch?v=Ij5MoUnLQ0E)

[ ](/watch?v=tFnNBhr0WTw)

### [ Build your own AI Shopping App with React Native and Supabase Vector  Simon Grimm Simon Grimm  • • 7.7K views 1 year ago ](/watch?v=tFnNBhr0WTw)

[ ](/watch?v=lhVGdErZuN4)

### [ Re-introducing Relay  React Conf React Conf  • • 22K views 3 years ago ](/watch?v=lhVGdErZuN4)

[ ](/watch?v=S--SD4QbGps)

### [ Build a Machine Learning App From Scratch with Flask & Docker  Patrick Loeber Patrick Loeber  • • 55K views 2 years ago ](/watch?v=S--SD4QbGps)

[ ](/watch?v=-ovliZG617g)

### [ Redux Toolkit - Complete Tutorial ( with Project ) 🔥🔥  RoadsideCoder RoadsideCoder  • • 23K views 3 months ago ](/watch?v=-ovliZG617g)

[ ](/watch?v=2FeymQoKvrk)

### [ Build and Deploy Your Own ChatGPT AI App in JavaScript | OpenAI, Machine Learning  JavaScript Mastery JavaScript Mastery  • • 861K views 1 year ago ](/watch?v=2FeymQoKvrk)

[ ](/watch?v=pC7mCEHiYQw)

### [ How to deploy your custom tensorflow model to react native  Oh Yicong Oh Yicong  • • 25K views 4 years ago ](/watch?v=pC7mCEHiYQw)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

15/19

React 18 for External Store Libraries

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=NLj73vrc2I8 "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=dcm8fjBfro8 "Next \(SHIFT+n\)")

0:00 / 19:22•Watch full videoLive

•

•

Scroll for details

#  React 18 for External Store Libraries

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

377

Share

Download

Download 

Save

19K views3 years ago

19,815 views • Dec 9, 2021 

Show less 

Daishi Kato…...more 

...more 

## 

Key moments

View all

#### [About the Speaker About the Speaker 0:35 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

#### [About the Speaker ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

0:35

#### [Concurrent Rendering and Libraries Concurrent Rendering and Libraries 2:10 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

#### [Concurrent Rendering and Libraries ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

2:10

#### [Tearing with Concurrent Rendering Tearing with Concurrent Rendering 3:04 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

#### [Tearing with Concurrent Rendering ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

3:04

#### [What are External Stores? What are External Stores? 3:34 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

#### [What are External Stores? ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

3:34

#### [Package: use-sync-external-store Package: use-sync-external-store 6:52 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=412s)

#### [Package: use-sync-external-store ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=412s)

6:52

#### [What Are External Stores Again? What Are External Stores Again? 16:30 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=990s)

#### [What Are External Stores Again? ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=990s)

16:30

#### [Get Ready for React 18 Get Ready for React 18 18:33 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=1113s)

#### [Get Ready for React 18 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=1113s)

18:33

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# React 18 for External Store Libraries

19,815 views19K views

Dec 9, 2021

377

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [About the Speaker About the Speaker 0:35 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

#### [About the Speaker ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

0:35

#### [Concurrent Rendering and Libraries Concurrent Rendering and Libraries 2:10 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

#### [Concurrent Rendering and Libraries ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

2:10

#### [Tearing with Concurrent Rendering Tearing with Concurrent Rendering 3:04 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

#### [Tearing with Concurrent Rendering ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

3:04

#### [What are External Stores? What are External Stores? 3:34 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

#### [What are External Stores? ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

3:34

#### [Package: use-sync-external-store Package: use-sync-external-store 6:52 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=412s)

#### [Package: use-sync-external-store ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=412s)

6:52

#### [What Are External Stores Again? What Are External Stores Again? 16:30 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=990s)

#### [What Are External Stores Again? ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=990s)

16:30

#### [Get Ready for React 18 Get Ready for React 18 18:33 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=1113s)

#### [Get Ready for React 18 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=1113s)

18:33

Sync to video time 

Sync to video time

##  Description

React 18 for External Store Libraries

377Likes

19,815Views

2021Dec 9

Daishi Kato

Show less ...more

Daishi Kato…...more 

...more Show less 

## 

Key moments

View all

#### [About the Speaker About the Speaker 0:35 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

#### [About the Speaker ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

0:35

#### [Concurrent Rendering and Libraries Concurrent Rendering and Libraries 2:10 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

#### [Concurrent Rendering and Libraries ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

2:10

#### [Tearing with Concurrent Rendering Tearing with Concurrent Rendering 3:04 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

#### [Tearing with Concurrent Rendering ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

3:04

#### [What are External Stores? What are External Stores? 3:34 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

#### [What are External Stores? ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

3:34

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Building accessible components with React 18

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

15 / 1915 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ ▶ [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=ytudH8je5ko)

### [ React 18 for app developers  React Conf React Conf  • • 65K views 3 years ago ](/watch?v=ytudH8je5ko)

[ ](/watch?v=FZ0cG47msEk)

### [ React 18 Keynote  React Conf React Conf  • • 128K views 3 years ago ](/watch?v=FZ0cG47msEk)

[ ](/watch?v=pj5N-Khihgc)

### [ Streaming Server Rendering with Suspense  React Conf React Conf  • • 48K views 3 years ago ](/watch?v=pj5N-Khihgc)

[ ](/watch?v=LOH1l-MP_9k)

### [ ALL React Hooks Explained in 12 Minutes  Code Bootcamp Code Bootcamp  • • 169K views 8 months ago ](/watch?v=LOH1l-MP_9k)

[ ](/watch?v=zL8cz2W0z34)

### [ Interactive playgrounds with React  React Conf React Conf  • • 14K views 3 years ago ](/watch?v=zL8cz2W0z34)

[ ](/watch?v=r8Dg0KVnfMA)

### [ Learn React Query In 50 Minutes  Web Dev Simplified Web Dev Simplified  • • 315K views 1 year ago ](/watch?v=r8Dg0KVnfMA)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

16/19

Building accessible components with React 18

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Up next

LiveUpcoming

CancelPlay Now

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=oPfSC5bQPR8 "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=S4a0QlsH0pU "Next \(SHIFT+n\)")

0:00 / 8:31•Watch full videoLive

•

Intro

•

Scroll for details

#  Building accessible components with React 18

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

480

Share

Download

Download 

Save

14K views3 years ago

14,977 views • Dec 9, 2021 

Show less 

Diego Haz…...more 

...more 

## 

Chapters

View all

#### [Intro Intro 0:00 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

#### [Intro ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

0:00

#### [Overview Overview 0:27 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

#### [Overview ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

0:27

#### [Problems Problems 0:56 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

#### [Problems ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

0:56

#### [NVDA NVDA 2:15 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

#### [NVDA ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

2:15

#### [Arcade Arcade 2:43 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=163s)

#### [Arcade ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=163s)

2:43

#### [Combo Box Combo Box 4:20 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=260s)

#### [Combo Box ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=260s)

4:20

#### [Dynamic Component Dynamic Component 5:12 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=312s)

#### [Dynamic Component ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=312s)

5:12

#### [Improvements Improvements 6:21 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=381s)

#### [Improvements ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=381s)

6:21

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# Building accessible components with React 18

14,977 views14K views

Dec 9, 2021

480

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Chapters

These chapters are auto-generated #### [Intro Intro 0:00 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

#### [Intro ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

0:00

#### [Overview Overview 0:27 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

#### [Overview ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

0:27

#### [Problems Problems 0:56 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

#### [Problems ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

0:56

#### [NVDA NVDA 2:15 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

#### [NVDA ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

2:15

#### [Arcade Arcade 2:43 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=163s)

#### [Arcade ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=163s)

2:43

#### [Combo Box Combo Box 4:20 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=260s)

#### [Combo Box ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=260s)

4:20

#### [Dynamic Component Dynamic Component 5:12 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=312s)

#### [Dynamic Component ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=312s)

5:12

#### [Improvements Improvements 6:21 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=381s)

#### [Improvements ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=381s)

6:21

Sync to video time 

Sync to video time

##  Description

Building accessible components with React 18

480Likes

14,977Views

2021Dec 9

Diego Haz

Show less ...more

Diego Haz…...more 

...more Show less 

## 

Chapters

View all

#### [Intro Intro 0:00 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

#### [Intro ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

0:00

#### [Overview Overview 0:27 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

#### [Overview ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

0:27

#### [Problems Problems 0:56 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

#### [Problems ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

0:56

#### [NVDA NVDA 2:15 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

#### [NVDA ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

2:15

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Accessible Japanese Form Components with React

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

16 / 1916 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ ▶ [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=lhVGdErZuN4)

### [ Re-introducing Relay  React Conf React Conf  • • 22K views 3 years ago ](/watch?v=lhVGdErZuN4)

[ ](/watch?v=lGEMwh32soc)

### [ React without memo  React Conf React Conf  • • 140K views 3 years ago ](/watch?v=lGEMwh32soc)

[ ](/watch?v=QuLfCUh-iwI)

### [ 3 React Mistakes, 1 App Killer  Jack Herrington Jack Herrington  • • 116K views 1 year ago ](/watch?v=QuLfCUh-iwI)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=eXRlVpw1SIQ)

### [ Creating High-Quality React Components: Best Practices for Reusability  Josh tried coding Josh tried coding  • • 112K views 1 year ago ](/watch?v=eXRlVpw1SIQ)

[ ](/watch?v=lTPh6NGLAmk)

### [ Why You Should Use React Aria Components...  Jolly Coding Jolly Coding  • • 16K views 6 months ago ](/watch?v=lTPh6NGLAmk)

[ ](/watch?v=lkFeFzhOEoc)

### [ React accessibility essentials for developers  LogRocket LogRocket  • • 4.5K views 2 years ago ](/watch?v=lkFeFzhOEoc)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

17/19

Accessible Japanese Form Components with React

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=dcm8fjBfro8 "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=b3l4WxipFsE "Next \(SHIFT+n\)")

0:00 / 10:32•Watch full videoLive

•

Introduction

•

Scroll for details

#  Accessible Japanese Form Components with React

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

68

Share

Download

Download 

Save

4.4K views3 years ago

4,485 views • Dec 9, 2021 

Show less 

Tafu Nakazaki…...more 

...more 

## 

Chapters

View all

#### [Introduction Introduction 0:00 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

#### [Introduction ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

0:00

#### [Problematic administrative procedures Problematic administrative procedures 0:47 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

#### [Problematic administrative procedures ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

0:47

#### [Challenges in human resource and management Challenges in human resource and management 2:29 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

#### [Challenges in human resource and management ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

2:29

#### [Challenges complexity Challenges complexity 4:27 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

#### [Challenges complexity ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

4:27

#### [Challenges user diversity Challenges user diversity 5:46 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=346s)

#### [Challenges user diversity ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=346s)

5:46

#### [Conclusion Conclusion 10:17 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=617s)

#### [Conclusion ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=617s)

10:17

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# Accessible Japanese Form Components with React

4,485 views4.4K views

Dec 9, 2021

68

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Chapters

These chapters are auto-generated #### [Introduction Introduction 0:00 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

#### [Introduction ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

0:00

#### [Problematic administrative procedures Problematic administrative procedures 0:47 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

#### [Problematic administrative procedures ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

0:47

#### [Challenges in human resource and management Challenges in human resource and management 2:29 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

#### [Challenges in human resource and management ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

2:29

#### [Challenges complexity Challenges complexity 4:27 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

#### [Challenges complexity ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

4:27

#### [Challenges user diversity Challenges user diversity 5:46 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=346s)

#### [Challenges user diversity ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=346s)

5:46

#### [Conclusion Conclusion 10:17 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=617s)

#### [Conclusion ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=617s)

10:17

Sync to video time 

Sync to video time

##  Description

Accessible Japanese Form Components with React

68Likes

4,485Views

2021Dec 9

Tafu Nakazaki

Show less ...more

Tafu Nakazaki…...more 

...more Show less 

## 

Chapters

View all

#### [Introduction Introduction 0:00 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

#### [Introduction ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

0:00

#### [Problematic administrative procedures Problematic administrative procedures 0:47 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

#### [Problematic administrative procedures ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

0:47

#### [Challenges in human resource and management Challenges in human resource and management 2:29 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

#### [Challenges in human resource and management ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

2:29

#### [Challenges complexity Challenges complexity 4:27 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

#### [Challenges complexity ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

4:27

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:UI Tools for artists

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

17 / 1917 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ ▶ [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=lkFeFzhOEoc)

### [ React accessibility essentials for developers  LogRocket LogRocket  • • 4.5K views 2 years ago ](/watch?v=lkFeFzhOEoc)

[ ](/watch?v=lyEKhv8-3n0)

### [ React Conf Keynote (Day 1)  React Conf React Conf  • • 7.7K views 4 months ago ](/watch?v=lyEKhv8-3n0)

[ ](/watch?v=z8xUCzToff8)

### [ Accessibility Fundamentals with Rob Dodson  SFHTML5 SFHTML5  • • 104K views 6 years ago ](/watch?v=z8xUCzToff8)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=b3l4WxipFsE)

### [ UI Tools for artists  React Conf React Conf  • • 5.7K views 3 years ago ](/watch?v=b3l4WxipFsE)

[ ](/watch?v=AJOGzVygGcY)

### [ What's new in React 19 | Lydia Hallie  React Conf React Conf  • • 51K views 4 months ago ](/watch?v=AJOGzVygGcY)

[ ](/watch?v=pGvp5Q-1Yag)

### [ Australia v India 2024-25 | Third Test | Day Five  cricket.com.au cricket.com.au  • • 2.5M views 4 hours ago New ](/watch?v=pGvp5Q-1Yag)

[ ](/watch?v=e2nkq3h1P68)

### [ Learn Accessibility - Full a11y Tutorial  freeCodeCamp.org freeCodeCamp.org  • • 76K views 10 months ago ](/watch?v=e2nkq3h1P68)

[ ](/watch?v=lTPh6NGLAmk)

### [ Why You Should Use React Aria Components...  Jolly Coding Jolly Coding  • • 16K views 6 months ago ](/watch?v=lTPh6NGLAmk)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

18/19

UI Tools for artists

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=S4a0QlsH0pU "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=HS6vIYkSNks "Next \(SHIFT+n\)")

0:00 / 10:14•Watch full videoLive

•

•

Scroll for details

#  UI Tools for artists

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

83

Share

Download

Download 

Save

5.7K views3 years ago

5,718 views • Dec 9, 2021 

Show less 

Lyle Troxell…...more 

...more 

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# UI Tools for artists

5,718 views5.7K views

Dec 9, 2021

83

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Description

UI Tools for artists

83Likes

5,718Views

2021Dec 9

Lyle Troxell

Show less ...more

Lyle Troxell…...more 

...more Show less 

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Hydrogen + React 18

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

18 / 1918 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ 12:52 12:52 Now playing ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ 12:01 12:01 Now playing ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ 10:07 10:07 Now playing ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ 9:20 9:20 Now playing ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ 10:44 10:44 Now playing ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ ▶ [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=lhVGdErZuN4)

### [ Re-introducing Relay  React Conf React Conf  • • 22K views 3 years ago ](/watch?v=lhVGdErZuN4)

[ ](/watch?v=pj5N-Khihgc)

### [ Streaming Server Rendering with Suspense  React Conf React Conf  • • 48K views 3 years ago ](/watch?v=pj5N-Khihgc)

[ ](/watch?v=5X-WEQflCL0)

### [ Learning in the Browser  React Conf React Conf  • • 5.7K views 3 years ago ](/watch?v=5X-WEQflCL0)

[ ](/watch?v=CS2hxS9MdSo)

### [ Manipur: Police Seize Starlink Device Made by Elon Musk’s SpaceX | Vantage with Palki Sharma  Firstpost Firstpost  • • 263K views 18 hours ago New ](/watch?v=CS2hxS9MdSo)

[ ](/watch?v=YLo6g58vUm0)

### [ Welcome to design systems - Lesson 1 : Introduction to design systems  Figma Figma  • • 247K views 1 year ago ](/watch?v=YLo6g58vUm0)

[ ](/watch?v=pGvp5Q-1Yag)

### [ Australia v India 2024-25 | Third Test | Day Five  cricket.com.au cricket.com.au  • • 2.5M views 4 hours ago New ](/watch?v=pGvp5Q-1Yag)

[ ](/watch?v=oJA1CXmVtgE)

### [ Nirmala Sitharaman VS Priyanka Gandhi🔥 : War Of Words Between Them | Lok Sabha | News Buzz  News Buzz News Buzz  • • 288K views 21 hours ago New ](/watch?v=oJA1CXmVtgE)

[ ](/watch?v=n2waUD7hXbM)

### [ ஒரே நாடு ஒரே தேர்தல்.. ``நேற்றே முடிவு தெரிந்துவிட்டது'' - பாஜகவுக்கு காத்திருந்த அதிர்ச்சி  Thanthi TV Thanthi TV  • • 33K views 6 hours ago New ](/watch?v=n2waUD7hXbM)

[ ](/watch?v=Ivwn0zN8y-4)

### [ 3D Art for 2D Artists: How to stop worrying, and begin to play in the 3rd dimension  Cave Darr Cave Darr  • • 331 views 2 weeks ago ](/watch?v=Ivwn0zN8y-4)
Tap to unmute
[Skip to main content](#__docusaurus_skipToContent_fallback)

The New Architecture has arrived - [learn more](/blog/2024/10/23/the-new-architecture-is-here)

[**React Native**](/)

[Development](#)

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



[Contributing](/contributing/overview)[Community](/community/overview)[Showcase](/showcase)[Blog](/blog)[](https://github.com/facebook/react-native)

Search

[Star](https://github.com/facebook/react-native)

# React Native

## Learn once, write anywhere.

[Get Started](/docs/environment-setup)[Learn the Basics](/docs/getting-started)

# Create native apps for Android, iOS, and more using React

### React Native brings the best parts of developing with React to native development. It's a best-in-class JavaScript library for building user interfaces.

index.js

```
function HomeScreen() {  return (   <View>    <Text> Hello World 👋 🌍!</Text>  </View>  ); }
```


**Written in JavaScript, rendered with native code.** React primitives render to native platform UI, meaning your app uses the same native platform APIs other apps do.

# Native development for everyone

### React Native lets you create truly native apps and doesn't compromise your users' experiences. It provides a core set of platform agnostic native components like `View`, `Text`, and `Image` that map directly to the platform's native UI building blocks.

# Get a head start with a framework

### React Native brings the React programming paradigm to platforms like Android and iOS. It doesn’t prescribe how to do routing, or how to access each of the numerous platform APIs. To build a new app with React Native, we recommend a framework like [Expo](https://expo.dev).

#### File-based routing

Create stack, modal, drawer, and tab screens with minimal boilerplate using your filesystem.

#### Use any library, SDK, or native code

Generate native changes or write your own native code. Use over 50 modules to create your app.

#### Developer tools

Get started quickly with Expo Go, then continue with expo-dev-client: a module that adds Expo’s tools to apps that require native changes.

# Watch and learn

### Watch talks by the React team and learn how to get the most out of React Native. Find the latest on .

#### FB 2019: Mobile innovation with React Native

45:29

#### Why React Native?

1:42

# Meta supported. Community driven.

Meta released React Native in 2015 and has been maintaining it ever since.

In 2018, React Native had the [2nd highest](https://octoverse.github.com/2018/projects#repositories) number of contributors for any repository in GitHub. Today, React Native is supported by contributions from individuals and companies around the world including [Callstack](https://callstack.com/), [Expo](https://expo.io/), [Infinite Red](https://infinite.red/), [Microsoft](https://www.microsoft.com/) and [Software Mansion](https://swmansion.com/).

Our community is always shipping exciting new projects and exploring platforms beyond Android and iOS with repos like [React Native Windows](https://github.com/microsoft/react-native-windows#readme), [React Native macOS](https://github.com/microsoft/react-native-macos#readme) and [React Native Web](https://github.com/necolas/react-native-web#readme).

React Native is being used in thousands of apps, but it's likely you've already used it in one of these apps:

  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://blog.coinbase.com/optimizing-react-native-7e7bf7ac3a34)
  * [](https://formidable.com/work/puma-scaling-across-the-globe/)
  * [](https://github.com/wordpress-mobile/gutenberg-mobile)
  * [](https://engineering.tableau.com/react-native-at-tableau-3-years-in-89d43c38354c)
  * [](https://blog.flipkart.tech/the-journey-of-react-native-flipkart-47dcd0c3d1c6)
  * [](https://medium.com/mercari-engineering/why-we-decided-to-rewrite-our-ios-android-apps-from-scratch-in-react-native-9f1737558299)
  * [](https://discord.com/blog/how-discord-achieves-native-ios-performance-with-react-native)
  * [](https://www.techatbloomberg.com/blog/bloomberg-used-react-native-develop-new-consumer-app/)
  * [](https://medium.com/@Pinterest_Engineering/supporting-react-native-at-pinterest-f8c2233f90e6)
  * [](https://www.tesla.com/blog)
  * [](https://medium.com/walmartlabs/react-native-at-walmartlabs-cdd140589560#.ueonqqloc)
  * [](https://www.tencent.com/en-us/business.html)
  * [](https://github.com/mattermost/mattermost-mobile)



and [many more](/showcase).

# Welcome to the React Native community

[Get Started](/docs/environment-setup)

Develop

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



Participate

  * [Showcase](/showcase)
  * [Contributing](/contributing/overview)
  * [Community](/community/overview)
  * [Directory](https://reactnative.directory/)
  * [Stack Overflow](https://stackoverflow.com/questions/tagged/react-native)



Find us

  * [Blog](/blog)
  * [GitHub](https://github.com/facebook/react-native)



Explore More

  * [ReactJS](https://react.dev/)
  * [Privacy Policy](https://opensource.fb.com/legal/privacy/)
  * [Terms of Service](https://opensource.fb.com/legal/terms/)



[](https://opensource.fb.com/)

Copyright © 2024 Meta Platforms, Inc.
[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Fexpo%2Fexpo)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Fexpo%2Fexpo)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=expo%2Fexpo) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ expo ](/expo) / **[expo](/expo/expo) ** Public

  * [ Notifications ](/login?return_to=%2Fexpo%2Fexpo) You must be signed in to change notification settings
  * [ Fork 5.7k ](/login?return_to=%2Fexpo%2Fexpo)
  * [ Star  35.5k ](/login?return_to=%2Fexpo%2Fexpo)




An open-source framework for making universal native apps with React. Expo runs on Android, iOS, and the web. 

[docs.expo.dev](https://docs.expo.dev "https://docs.expo.dev")

### License

[ MIT license ](/expo/expo/blob/main/LICENSE)

[ 35.5k stars ](/expo/expo/stargazers) [ 5.7k forks ](/expo/expo/forks) [ Branches ](/expo/expo/branches) [ Tags ](/expo/expo/tags) [ Activity ](/expo/expo/activity)

[ Star  ](/login?return_to=%2Fexpo%2Fexpo)

[ Notifications ](/login?return_to=%2Fexpo%2Fexpo) You must be signed in to change notification settings

  * [ Code ](/expo/expo)
  * [ Issues 446 ](/expo/expo/issues)
  * [ Pull requests 225 ](/expo/expo/pulls)
  * [ Discussions ](/expo/expo/discussions)
  * [ Actions ](/expo/expo/actions)
  * [ Projects 0 ](/expo/expo/projects)
  * [ Wiki ](/expo/expo/wiki)
  * [ Security ](/expo/expo/security)
  * [ Insights ](/expo/expo/pulse)



Additional navigation options

  * [ Code  ](/expo/expo)
  * [ Issues  ](/expo/expo/issues)
  * [ Pull requests  ](/expo/expo/pulls)
  * [ Discussions  ](/expo/expo/discussions)
  * [ Actions  ](/expo/expo/actions)
  * [ Projects  ](/expo/expo/projects)
  * [ Wiki  ](/expo/expo/wiki)
  * [ Security  ](/expo/expo/security)
  * [ Insights  ](/expo/expo/pulse)



# expo/expo

main

[**618** Branches](/expo/expo/branches)[**0** Tags](/expo/expo/tags)

[](/expo/expo/branches)[](/expo/expo/tags)

Go to file

Code

## Folders and files

Name| Name| Last commit message| Last commit date  
---|---|---|---  
  
## Latest commit

[](/Kudo)[Kudo](/expo/expo/commits?author=Kudo)[[dev-menu][dev-launcher] fix broken local development on android (](/expo/expo/commit/d9b65b28e55d0e223b51ea4164a173696931e4af)[#33714](https://github.com/expo/expo/pull/33714)Dec 18, 2024[d9b65b2](/expo/expo/commit/d9b65b28e55d0e223b51ea4164a173696931e4af) · Dec 18, 2024

## History

[24,776 Commits](/expo/expo/commits/main/)[](/expo/expo/commits/main/)  
[.github](/expo/expo/tree/main/.github ".github")| [.github](/expo/expo/tree/main/.github ".github")  
[.vscode](/expo/expo/tree/main/.vscode ".vscode")| [.vscode](/expo/expo/tree/main/.vscode ".vscode")  
[apps](/expo/expo/tree/main/apps "apps")| [apps](/expo/expo/tree/main/apps "apps")  
[bin](/expo/expo/tree/main/bin "bin")| [bin](/expo/expo/tree/main/bin "bin")  
[docs](/expo/expo/tree/main/docs "docs")| [docs](/expo/expo/tree/main/docs "docs")  
[fastlane](/expo/expo/tree/main/fastlane "fastlane")| [fastlane](/expo/expo/tree/main/fastlane "fastlane")  
[guides](/expo/expo/tree/main/guides "guides")| [guides](/expo/expo/tree/main/guides "guides")  
[packages](/expo/expo/tree/main/packages "packages")| [packages](/expo/expo/tree/main/packages "packages")  
[patches](/expo/expo/tree/main/patches "patches")| [patches](/expo/expo/tree/main/patches "patches")  
[react-native-lab](/expo/expo/tree/main/react-native-lab "react-native-lab")| [react-native-lab](/expo/expo/tree/main/react-native-lab "react-native-lab")  
[scripts](/expo/expo/tree/main/scripts "scripts")| [scripts](/expo/expo/tree/main/scripts "scripts")  
[secrets](/expo/expo/tree/main/secrets "secrets")| [secrets](/expo/expo/tree/main/secrets "secrets")  
[template-files](/expo/expo/tree/main/template-files "template-files")| [template-files](/expo/expo/tree/main/template-files "template-files")  
[templates](/expo/expo/tree/main/templates "templates")| [templates](/expo/expo/tree/main/templates "templates")  
[tools](/expo/expo/tree/main/tools "tools")| [tools](/expo/expo/tree/main/tools "tools")  
[.dockerignore](/expo/expo/blob/main/.dockerignore ".dockerignore")| [.dockerignore](/expo/expo/blob/main/.dockerignore ".dockerignore")  
[.envrc](/expo/expo/blob/main/.envrc ".envrc")| [.envrc](/expo/expo/blob/main/.envrc ".envrc")  
[.eslintignore](/expo/expo/blob/main/.eslintignore ".eslintignore")| [.eslintignore](/expo/expo/blob/main/.eslintignore ".eslintignore")  
[.eslintrc.js](/expo/expo/blob/main/.eslintrc.js ".eslintrc.js")| [.eslintrc.js](/expo/expo/blob/main/.eslintrc.js ".eslintrc.js")  
[.gitattributes](/expo/expo/blob/main/.gitattributes ".gitattributes")| [.gitattributes](/expo/expo/blob/main/.gitattributes ".gitattributes")  
[.gitignore](/expo/expo/blob/main/.gitignore ".gitignore")| [.gitignore](/expo/expo/blob/main/.gitignore ".gitignore")  
[.gitmodules](/expo/expo/blob/main/.gitmodules ".gitmodules")| [.gitmodules](/expo/expo/blob/main/.gitmodules ".gitmodules")  
[.lfsconfig](/expo/expo/blob/main/.lfsconfig ".lfsconfig")| [.lfsconfig](/expo/expo/blob/main/.lfsconfig ".lfsconfig")  
[.prettierignore](/expo/expo/blob/main/.prettierignore ".prettierignore")| [.prettierignore](/expo/expo/blob/main/.prettierignore ".prettierignore")  
[.prettierrc](/expo/expo/blob/main/.prettierrc ".prettierrc")| [.prettierrc](/expo/expo/blob/main/.prettierrc ".prettierrc")  
[.swiftlint.yml](/expo/expo/blob/main/.swiftlint.yml ".swiftlint.yml")| [.swiftlint.yml](/expo/expo/blob/main/.swiftlint.yml ".swiftlint.yml")  
[.watchmanconfig](/expo/expo/blob/main/.watchmanconfig ".watchmanconfig")| [.watchmanconfig](/expo/expo/blob/main/.watchmanconfig ".watchmanconfig")  
[CHANGELOG.md](/expo/expo/blob/main/CHANGELOG.md "CHANGELOG.md")| [CHANGELOG.md](/expo/expo/blob/main/CHANGELOG.md "CHANGELOG.md")  
[CONTRIBUTING.md](/expo/expo/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")| [CONTRIBUTING.md](/expo/expo/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")  
[Gemfile](/expo/expo/blob/main/Gemfile "Gemfile")| [Gemfile](/expo/expo/blob/main/Gemfile "Gemfile")  
[Gemfile.lock](/expo/expo/blob/main/Gemfile.lock "Gemfile.lock")| [Gemfile.lock](/expo/expo/blob/main/Gemfile.lock "Gemfile.lock")  
[LICENSE](/expo/expo/blob/main/LICENSE "LICENSE")| [LICENSE](/expo/expo/blob/main/LICENSE "LICENSE")  
[README.md](/expo/expo/blob/main/README.md "README.md")| [README.md](/expo/expo/blob/main/README.md "README.md")  
[SECURITY.md](/expo/expo/blob/main/SECURITY.md "SECURITY.md")| [SECURITY.md](/expo/expo/blob/main/SECURITY.md "SECURITY.md")  
[SUPPORT.md](/expo/expo/blob/main/SUPPORT.md "SUPPORT.md")| [SUPPORT.md](/expo/expo/blob/main/SUPPORT.md "SUPPORT.md")  
[THIRD-PARTY-LICENSES](/expo/expo/blob/main/THIRD-PARTY-LICENSES "THIRD-PARTY-LICENSES")| [THIRD-PARTY-LICENSES](/expo/expo/blob/main/THIRD-PARTY-LICENSES "THIRD-PARTY-LICENSES")  
[buildAndroidTarballLocally.sh](/expo/expo/blob/main/buildAndroidTarballLocally.sh "buildAndroidTarballLocally.sh")| [buildAndroidTarballLocally.sh](/expo/expo/blob/main/buildAndroidTarballLocally.sh "buildAndroidTarballLocally.sh")  
[changelogVersions.json](/expo/expo/blob/main/changelogVersions.json "changelogVersions.json")| [changelogVersions.json](/expo/expo/blob/main/changelogVersions.json "changelogVersions.json")  
[dev-home-config.json](/expo/expo/blob/main/dev-home-config.json "dev-home-config.json")| [dev-home-config.json](/expo/expo/blob/main/dev-home-config.json "dev-home-config.json")  
[package.json](/expo/expo/blob/main/package.json "package.json")| [package.json](/expo/expo/blob/main/package.json "package.json")  
[tsconfig.json](/expo/expo/blob/main/tsconfig.json "tsconfig.json")| [tsconfig.json](/expo/expo/blob/main/tsconfig.json "tsconfig.json")  
[tsconfig.node.json](/expo/expo/blob/main/tsconfig.node.json "tsconfig.node.json")| [tsconfig.node.json](/expo/expo/blob/main/tsconfig.node.json "tsconfig.node.json")  
[yarn.lock](/expo/expo/blob/main/yarn.lock "yarn.lock")| [yarn.lock](/expo/expo/blob/main/yarn.lock "yarn.lock")  
View all files  
  
## Repository files navigation

  * [README](#)
  * [MIT license](#)
  * [Security](#)



[ ](https://expo.dev/)

# Expo

[](#expo)

[ ](https://www.npmjs.com/package/expo) [ ](https://chat.expo.dev) [ ](https://github.com/expo/expo/blob/main/LICENSE) [ ](http://www.npmtrends.com/expo)

[**Try Expo in the Browser**](https://snack.expo.dev) • [Read the Documentation](https://docs.expo.dev) • [Learn more on our blog](https://expo.dev/blog) • [Request a feature](https://expo.canny.io/feature-requests)

###### Follow us on

[](#follow-us-on)

[ ](https://github.com/expo) [ ](https://bsky.app/profile/expo.dev)

## Introduction

[](#introduction)

Expo is an open-source platform for making universal native apps that run on Android, iOS, and the web. It includes a universal runtime and libraries that let you build native apps by writing React and JavaScript.

This repository includes the Expo SDK, Modules API, Go app, CLI, Router, documentation, and various other supporting tools. [Expo Application Services (EAS)](https://expo.dev/eas) is a platform of hosted services that are deeply integrated with Expo open source tools. EAS helps you build, ship, and iterate on your app as an individual or a team.

Read the [Expo Community Guidelines](https://expo.dev/guidelines) before interacting in the repository. Thank you for helping keep the Expo community open and welcoming!

## Table of contents

[](#table-of-contents)

  * [📚 Documentation](#-documentation)
  * [🗺 Project Layout](#-project-layout)
  * [🏅 Badges](#-badges)
  * [👏 Contributing](#-contributing)
  * [❓ FAQ](#-faq)
  * [💙 The Team](#-the-team)
  * [License](#license)



## 📚 Documentation

[](#-documentation)

Learn about building and deploying universal apps [in our official docs!](https://docs.expo.dev)

  * [Getting Started](https://docs.expo.dev/)
  * [API Reference](https://docs.expo.dev/versions/latest/)
  * [Using Custom Native Modules](https://docs.expo.dev/workflow/customizing/)



## 🗺 Project Layout

[](#-project-layout)

  * `packages`[](/expo/expo/blob/main/packages) All the source code for Expo modules, if you want to edit a library or just see how it works this is where you'll find it.
  * `apps`[](/expo/expo/blob/main/apps) This is where you can find Expo projects which are linked to the development modules. You'll do most of your testing in here.
  * `apps/expo-go`[](/expo/expo/blob/main/apps/expo-go) This is where you can find the source code for Expo Go.
  * `apps/expo-go/ios/Exponent.xcworkspace`[](/expo/expo/blob/main/apps/expo-go/ios) is the Xcode workspace. When developing iOS, always open this instead of `Exponent.xcodeproj` because the workspace also loads the CocoaPods dependencies.
  * `docs`[](/expo/expo/blob/main/docs) The source code for **<https://docs.expo.dev>**
  * `templates`[](/expo/expo/blob/main/templates) The template projects you get when you run `npx create-expo-app`
  * `react-native-lab`[](/expo/expo/blob/main/react-native-lab) This is our fork of `react-native` used to build Expo Go.
  * `guides`[](/expo/expo/blob/main/guides) In-depth tutorials for advanced topics like contributing to the client.
  * `tools`[](/expo/expo/blob/main/tools) contain build and configuration tools.
  * `template-files`[](/expo/expo/blob/main/template-files) contains templates for files that require private keys. They are populated using the keys in `template-files/keys.json`.
  * `template-files/ios/dependencies.json`[](/expo/expo/blob/main/template-files/ios/dependencies.json) specifies the CocoaPods dependencies of the app.



## 🏅 Badges

[](#-badges)

Let everyone know your app can be run instantly in the _Expo Go_ app! 

[](https://expo.dev/client)

[](https://expo.dev/client)

```
[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-000.svg?style=flat-square&logo=EXPO&labelColor=f3f3f3&logoColor=000)](https://expo.dev/client)
[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-4630EB.svg?style=flat-square&logo=EXPO&labelColor=f3f3f3&logoColor=000)](https://expo.dev/client)
```


## 👏 Contributing

[](#-contributing)

If you like Expo and want to help make it better then check out our [contributing guide](/expo/expo/blob/main/CONTRIBUTING.md)! Check out the [CLI package](https://github.com/expo/expo/tree/main/packages/%40expo/cli) to work on the Expo CLI.

## ❓ FAQ

[](#-faq)

If you have questions about Expo and want answers, then check out our [Frequently Asked Questions](https://docs.expo.dev/faq/)!

If you still have questions you can ask them on our [Discord and Forums](https://chat.expo.dev) or X .

## 💙 The Team

[](#-the-team)

Curious about who makes Expo? Here are our [team members](https://expo.dev/about)!

## License

[](#license)

The Expo source code is made available under the [MIT license](/expo/expo/blob/main/LICENSE). Some of the dependencies are licensed differently, with the BSD license, for example.

[](https://user-images.githubusercontent.com/9664363/185428788-d762fd5d-97b3-4f59-8db7-f72405be9677.gif) [ ](https://user-images.githubusercontent.com/9664363/185428788-d762fd5d-97b3-4f59-8db7-f72405be9677.gif) [ ](https://user-images.githubusercontent.com/9664363/185428788-d762fd5d-97b3-4f59-8db7-f72405be9677.gif)

## About

An open-source framework for making universal native apps with React. Expo runs on Android, iOS, and the web. 

[docs.expo.dev](https://docs.expo.dev "https://docs.expo.dev")

### Topics

[ react ](/topics/react "Topic: react") [ javascript ](/topics/javascript "Topic: javascript") [ android ](/topics/android "Topic: android") [ ios ](/topics/ios "Topic: ios") [ mobile ](/topics/mobile "Topic: mobile") [ framework ](/topics/framework "Topic: framework") [ typescript ](/topics/typescript "Topic: typescript") [ react-native ](/topics/react-native "Topic: react-native") [ web ](/topics/web "Topic: web") [ frontend ](/topics/frontend "Topic: frontend") [ native ](/topics/native "Topic: native") [ universal ](/topics/universal "Topic: universal") [ web-framework ](/topics/web-framework "Topic: web-framework") [ native-apps ](/topics/native-apps "Topic: native-apps") [ app-framework ](/topics/app-framework "Topic: app-framework") [ expo ](/topics/expo "Topic: expo")

### Resources

[ Readme ](#readme-ov-file)

### License

[ MIT license ](#MIT-1-ov-file)

### Security policy

[ Security policy ](#security-ov-file)

[ Activity](/expo/expo/activity)

[ Custom properties](/expo/expo/custom-properties)

### Stars

[ **35.5k** stars](/expo/expo/stargazers)

### Watchers

[ **305** watching](/expo/expo/watchers)

### Forks

[ **5.7k** forks](/expo/expo/forks)

[ Report repository ](/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2Fexpo%2Fexpo&report=expo+%28user%29)

##  [Used by 1.1m](/expo/expo/network/dependents)

[ + 1,067,006  ](/expo/expo/network/dependents)

##  [Contributors 1,468](/expo/expo/graphs/contributors)

  * [ ](https://github.com/brentvatne)
  * [ ](https://github.com/tsapeta)
  * [ ](https://github.com/EvanBacon)
  * [ ](https://github.com/lukmccall)
  * [ ](https://github.com/amandeepmittal)
  * [ ](https://github.com/terribleben)
  * [ ](https://github.com/esamelson)
  * [ ](https://github.com/Kudo)
  * [ ](https://github.com/expo-bot)
  * [ ](https://github.com/sjchmiela)
  * [ ](https://github.com/Simek)
  * [ ](https://github.com/ide)
  * [ ](https://github.com/wschurman)
  * [ ](https://github.com/byCedric)



[+ 1,454 contributors](/expo/expo/graphs/contributors)

## Languages

  * [ TypeScript 38.8% ](/expo/expo/search?l=typescript)
  * [ JavaScript 28.1% ](/expo/expo/search?l=javascript)
  * [ Kotlin 12.5% ](/expo/expo/search?l=kotlin)
  * [ Swift 8.2% ](/expo/expo/search?l=swift)
  * [ Objective-C 5.2% ](/expo/expo/search?l=objective-c)
  * [ Java 2.9% ](/expo/expo/search?l=java)
  * Other 4.3%



## Footer

[ ](https://github.com "GitHub") © 2024 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You can’t perform that action at this time. 
[Skip to main content](#__docusaurus_skipToContent_fallback)

The New Architecture has arrived - [learn more](/blog/2024/10/23/the-new-architecture-is-here)

[**React Native**](/)

[Development](#)

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



[Contributing](/contributing/overview)[Community](/community/overview)[Showcase](/showcase)[Blog](/blog)[](https://github.com/facebook/react-native)

Search

[Star](https://github.com/facebook/react-native)

# React Native

## Learn once, write anywhere.

[Get Started](/docs/environment-setup)[Learn the Basics](/docs/getting-started)

# Create native apps for Android, iOS, and more using React

### React Native brings the best parts of developing with React to native development. It's a best-in-class JavaScript library for building user interfaces.

index.js

```
function HomeScreen() {  return (   <View>    <Text> Hello World 👋 🌍!</Text>  </View>  ); }
```


**Written in JavaScript, rendered with native code.** React primitives render to native platform UI, meaning your app uses the same native platform APIs other apps do.

# Native development for everyone

### React Native lets you create truly native apps and doesn't compromise your users' experiences. It provides a core set of platform agnostic native components like `View`, `Text`, and `Image` that map directly to the platform's native UI building blocks.

# Get a head start with a framework

### React Native brings the React programming paradigm to platforms like Android and iOS. It doesn’t prescribe how to do routing, or how to access each of the numerous platform APIs. To build a new app with React Native, we recommend a framework like [Expo](https://expo.dev).

#### File-based routing

Create stack, modal, drawer, and tab screens with minimal boilerplate using your filesystem.

#### Use any library, SDK, or native code

Generate native changes or write your own native code. Use over 50 modules to create your app.

#### Developer tools

Get started quickly with Expo Go, then continue with expo-dev-client: a module that adds Expo’s tools to apps that require native changes.

# Watch and learn

### Watch talks by the React team and learn how to get the most out of React Native. Find the latest on .

#### FB 2019: Mobile innovation with React Native

45:29

#### Why React Native?

1:42

# Meta supported. Community driven.

Meta released React Native in 2015 and has been maintaining it ever since.

In 2018, React Native had the [2nd highest](https://octoverse.github.com/2018/projects#repositories) number of contributors for any repository in GitHub. Today, React Native is supported by contributions from individuals and companies around the world including [Callstack](https://callstack.com/), [Expo](https://expo.io/), [Infinite Red](https://infinite.red/), [Microsoft](https://www.microsoft.com/) and [Software Mansion](https://swmansion.com/).

Our community is always shipping exciting new projects and exploring platforms beyond Android and iOS with repos like [React Native Windows](https://github.com/microsoft/react-native-windows#readme), [React Native macOS](https://github.com/microsoft/react-native-macos#readme) and [React Native Web](https://github.com/necolas/react-native-web#readme).

React Native is being used in thousands of apps, but it's likely you've already used it in one of these apps:

  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://blog.coinbase.com/optimizing-react-native-7e7bf7ac3a34)
  * [](https://formidable.com/work/puma-scaling-across-the-globe/)
  * [](https://github.com/wordpress-mobile/gutenberg-mobile)
  * [](https://engineering.tableau.com/react-native-at-tableau-3-years-in-89d43c38354c)
  * [](https://blog.flipkart.tech/the-journey-of-react-native-flipkart-47dcd0c3d1c6)
  * [](https://medium.com/mercari-engineering/why-we-decided-to-rewrite-our-ios-android-apps-from-scratch-in-react-native-9f1737558299)
  * [](https://discord.com/blog/how-discord-achieves-native-ios-performance-with-react-native)
  * [](https://www.techatbloomberg.com/blog/bloomberg-used-react-native-develop-new-consumer-app/)
  * [](https://medium.com/@Pinterest_Engineering/supporting-react-native-at-pinterest-f8c2233f90e6)
  * [](https://www.tesla.com/blog)
  * [](https://medium.com/walmartlabs/react-native-at-walmartlabs-cdd140589560#.ueonqqloc)
  * [](https://www.tencent.com/en-us/business.html)
  * [](https://github.com/mattermost/mattermost-mobile)



and [many more](/showcase).

# Welcome to the React Native community

[Get Started](/docs/environment-setup)

Develop

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



Participate

  * [Showcase](/showcase)
  * [Contributing](/contributing/overview)
  * [Community](/community/overview)
  * [Directory](https://reactnative.directory/)
  * [Stack Overflow](https://stackoverflow.com/questions/tagged/react-native)



Find us

  * [Blog](/blog)
  * [GitHub](https://github.com/facebook/react-native)



Explore More

  * [ReactJS](https://react.dev/)
  * [Privacy Policy](https://opensource.fb.com/legal/privacy/)
  * [Terms of Service](https://opensource.fb.com/legal/terms/)



[](https://opensource.fb.com/)

Copyright © 2024 Meta Platforms, Inc.
[](/)

Meta Open Source

## Welcome to our community

Empowering diverse communities through open source technology.

[Explore projects](/projects)

### Meta Embraces Open Source

Meta is committed to the notion that open source not only provides great technology for developers, but also brings the best out in people. Meta believes in the following tenets:

#### Collaboration

Open source allows developers from around the world to proactively work together to achieve common goals.

#### Community

Open source provides opportunities for the creation of diverse communities in support of the betterment of everyone.

#### Technology

Open source has produced historic technologies, including operating systems, frameworks and programming languages.

Featured Media

[The Diff Episode 10: Talking Open Source with Paul O'ShannessyDecember 7, 2021](https://www.youtube.com/watch?v=QR84BJt4fw0)

[Explain Like I'm 5: Season 3September 28, 2021](https://youtube.com/playlist?list=PLzIwronG0sE49zLk608yB5GKKT8WbEhnZ)

[See all media](/media)

Popular Projects

[DocumentationDocusaurusSetup a website for your documentation quickly and easily.View Project](https://docusaurus.io)

[FrameworksReactA JavaScript framework for building awesome user interfaces.View Project](https://reactjs.org)

[FrameworksPyTorchA Python-based machine learning framework for dynamic neural networks.View Project](https://pytorch.org)

[See more projects](/projects)

[](https://nasa.github.io/cumulus/docs/cumulus-docs-readme)

[](https://developers.diem.com)

[](https://slack.engineering/hacklang-at-slack-a-better-php/)

[](https://www.opencompute.org/membership/membership-organizational-directory?keyword=AT%26T)

[](https://aws.amazon.com/blogs/aws/announcing-torchserve-an-open-source-model-server-for-pytorch/)

[](https://www.carbondesignsystem.com/developing/frameworks/react/)

Showcase

## Globally trusted

Open source is used by teams of all shapes and sizes to create, iterate, and grow.

[See Showcase](/showcase)

[](https://meta.com)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



Site Map[Projects](/projects)[FAQ](/get-involved#faq)[About](/about)[Get Involved](/get-involved)

Information[Linux](/linux)[Careers](https://metacareers.com)[Bug Bounty Program](https://bugbounty.meta.com)

Connect[GitHub](https://github.com/facebook)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



© 2024 Meta

  * [Code of Conduct](/code-of-conduct)
  * [Privacy Policy](/legal/privacy)
  * [Cookie Policy](/legal/cookie-policy)
  * [Terms of Use](/legal/terms)
  * [Trademark Policy](/legal/trademark)


Don’t miss what’s happening

People on X are the first to know.

[Log in](/login)

[Sign up](/i/flow/signup)

Welcome to x.com!

We are letting you know that we are changing our URL, but your privacy and data protection settings remain the same.

For more details, see our Privacy Policy: 

# [](/)

[Settings](/settings)

## Profile

See new posts
[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact%2Fblob%2Fmain%2FCODE_OF_CONDUCT.md)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact%2Fblob%2Fmain%2FCODE_OF_CONDUCT.md)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Fblob%2Fshow&source=header-repo&source_repo=facebook%2Freact) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ facebook ](/facebook) / **[react](/facebook/react) ** Public

  * [ Notifications ](/login?return_to=%2Ffacebook%2Freact) You must be signed in to change notification settings
  * [ Fork 47.2k ](/login?return_to=%2Ffacebook%2Freact)
  * [ Star  231k ](/login?return_to=%2Ffacebook%2Freact)




  * [ Code ](/facebook/react)
  * [ Issues 764 ](/facebook/react/issues)
  * [ Pull requests 176 ](/facebook/react/pulls)
  * [ Actions ](/facebook/react/actions)
  * [ Projects 0 ](/facebook/react/projects)
  * [ Wiki ](/facebook/react/wiki)
  * [ Security ](/facebook/react/security)
  * [ Insights ](/facebook/react/pulse)



Additional navigation options

  * [ Code  ](/facebook/react)
  * [ Issues  ](/facebook/react/issues)
  * [ Pull requests  ](/facebook/react/pulls)
  * [ Actions  ](/facebook/react/actions)
  * [ Projects  ](/facebook/react/projects)
  * [ Wiki  ](/facebook/react/wiki)
  * [ Security  ](/facebook/react/security)
  * [ Insights  ](/facebook/react/pulse)



## Files

main

  * .codesandbox

  * .github

  * compiler

  * fixtures

  * packages

  * scripts

  * .editorconfig

  * .eslintignore

  * .eslintrc.js

  * .git-blame-ignore-revs

  * .gitattributes

  * .gitignore

  * .mailmap

  * .nvmrc

  * .prettierignore

  * .prettierrc.js

  * .watchmanconfig

  * CHANGELOG-canary.md

  * CHANGELOG.md

  * CODE_OF_CONDUCT.md

  * CONTRIBUTING.md

  * LICENSE

  * README.md

  * ReactVersions.js

  * SECURITY.md

  * babel.config.js

  * dangerfile.js

  * netlify.toml

  * package.json

  * react.code-workspace

  * yarn.lock




## Breadcrumbs

  1. [react](/facebook/react/tree/main)



/

# CODE_OF_CONDUCT.md

Blame

Blame

## Latest commit

[](/zahad-a-s)[zahad-a-s](/facebook/react/commits?author=zahad-a-s)

[revert last grammatical edit (](/facebook/react/commit/7a227276e653b481b73ed9e9178244b53d61f730)[#25067](https://github.com/facebook/react/pull/25067)[)](/facebook/react/commit/7a227276e653b481b73ed9e9178244b53d61f730)

Aug 11, 2022

[7a22727](/facebook/react/commit/7a227276e653b481b73ed9e9178244b53d61f730) · Aug 11, 2022

## History

[History](/facebook/react/commits/main/CODE_OF_CONDUCT.md)

[](/facebook/react/commits/main/CODE_OF_CONDUCT.md)

80 lines (60 loc) · 3.46 KB

## Breadcrumbs

  1. [react](/facebook/react/tree/main)



/

# CODE_OF_CONDUCT.md

Top

## File metadata and controls

  * Preview

  * Code

  * Blame




80 lines (60 loc) · 3.46 KB

[Raw](https://github.com/facebook/react/raw/refs/heads/main/CODE_OF_CONDUCT.md)

# Code of Conduct

[](#code-of-conduct)

## Our Pledge

[](#our-pledge)

In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.

## Our Standards

[](#our-standards)

Examples of behavior that contributes to creating a positive environment include:

  * Using welcoming and inclusive language
  * Being respectful of differing viewpoints and experiences
  * Gracefully accepting constructive criticism
  * Focusing on what is best for the community
  * Showing empathy towards other community members



Examples of unacceptable behavior by participants include:

  * The use of sexualized language or imagery and unwelcome sexual attention or advances
  * Trolling, insulting/derogatory comments, and personal or political attacks
  * Public or private harassment
  * Publishing others' private information, such as a physical or electronic address, without explicit permission
  * Other conduct which could reasonably be considered inappropriate in a professional setting



## Our Responsibilities

[](#our-responsibilities)

Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.

Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.

## Scope

[](#scope)

This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.

This Code of Conduct also applies outside the project spaces when there is a reasonable belief that an individual's behavior may have a negative impact on the project or its community.

## Enforcement

[](#enforcement)

Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at opensource-conduct@fb.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.

Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.

## Attribution

[](#attribution)

This Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org), version 1.4, available at <https://www.contributor-covenant.org/version/1/4/code-of-conduct.html>

For answers to common questions about this code of conduct, see <https://www.contributor-covenant.org/faq>

## Footer

[ ](https://github.com "GitHub") © 2024 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You can’t perform that action at this time. 
[](/)

# Meta Open Source - Privacy Policy

 _Effective April 25, 2023_

This Privacy Policy describes Meta Platforms, Inc. (**"Meta"** , **"we"** , **"us"** or **"our"**) practices for handling your information in connection with this website and our open source-related websites (**"Websites"**) and any content, related documentation, information and services (e.g. apps, tutorials, tools to support the developer workflow, access to resources, etc.) made available to you on this website (collectively, the **"Services"**). This Privacy Policy describes the personal information we process to support our Services.

For clarity, this Privacy Policy only applies to the Websites and does not apply to any:

  1. use of open source code, documentation or specifications made available on GitHub, which are governed by the terms of the applicable open source license;
  2. pull requests, issues and any other interactions or features related to participation in open source projects on GitHub, which are governed by GitHub's terms and conditions; or
  3. use of any other Meta website, service or product, which are governed by the terms and conditions applicable to those offerings.



#### What Kinds of Information Do We Collect?

When you interact with us through our Services, we may collect or receive the following types of information:

**_Information you provide directly to us._** For certain activities, we may collect the following types of information:

  * **_Contact information,_** such as name, email address and contact details; and
  * ** _Other information_** you provide to us, such as when you send us correspondence or otherwise participate on the Services.



**_Information we collect automatically._** Depending on the type of device you use and how you interact with us, we may also collect certain information automatically when you use our Services, such as:

  * **_Device attributes,_** including information such as the operating system, hardware and software versions, battery level, signal strength, available storage space, browser type, app and file names and types, and plugins.
  * **_Device operations,_** including information about operations performed on the Services as well as pages visited.
  * **_Identifiers,_** including information such as unique identifiers, device IDs, and other identifiers, and Family Device IDs associated with the same device or account.
  * **_Network and connections,_** information such as the name of your mobile operator or ISP, language, time zone, mobile phone number, IP address, connection speed, information about other devices that are nearby or on your network, and Wi-Fi hotspots you connect to using our Services.
  * **_Cookie data,_** data from cookies and other similar technologies that are stored on your device, including cookie IDs and settings. Learn more about how we use cookies by reading our [Cookie Policy](/legal/cookie-policy).



**_Information you provide to us through our app (where applicable)._** Some of our Services include the provision of an app. In such cases, we may receive certain video and text content that you choose to provide to us through our app. We may analyze this depending on the context and content in accordance with the purposes described below.

**_Integrations with other services from third parties._** Some of our Services allow you to enable or log in via various online services (collectively, **"Login Services"**). By including these Login Services, we aim to make your online experiences richer and more personalized. When you add a Login Service account to our Services or log in to our Services using such an account, we may collect relevant information necessary to enable our Services to facilitate your login, such as your email address. We may also share your information with that Login Service to facilitate or enhance the delivery of that platform or our Services.

As part of an integration with a Login Service, that Login Service may provide us with access to certain information that you have provided to their platform, and we will use, store, and disclose such information in accordance with this Privacy Policy. However, please remember that the manner in which platforms use, store, and disclose your information is governed by the policies that apply to those platforms. Information collected by Login Services is subject to their own terms and policies, not this one.

**_Social media features._** Our Services may use social media features, such as the Facebook "like" button, the "Tweet" button and other sharing widgets (**"Social Media Features"**). You may be given the option by such Social Media Features to post information about your activities on a website to a profile page of yours that is provided by a third party social media network in order to share with others within your network. Social Media Features are either hosted by the respective social media network or hosted directly on our Websites. To the extent the Social Media Features are hosted by the respective social media network(s) and you click through to these from our Websites, the latter may receive information showing that you have visited our Websites. If you are logged in to your social media account, it is possible that the respective social media network can link your visit to our Websites with your social media profile. Your interactions with Social Media Features are governed by the privacy policies of the companies providing the relevant Social Media Features.

#### Cookies and Similar Technologies

Cookies are small pieces of text used to store information on web browsers. Cookies are used to store and receive identifiers and other information on computers, phones and other devices. We use cookies and similar technologies, for such things as maintaining and monitoring the infrastructure of the Services, ensuring security protections, analyzing how our Services perform and other analytics purposes, and fulfilling other legitimate purposes as further described in this Privacy Policy. We also use analytics cookies to better understand how our Services are being used by tracking how you interact with the Services and where you click.

We use cookies served by Google Analytics to collect limited data directly from end-user browsers to enable us to better understand your use of the Services, including making use of the demographics and interests reports services of Google Analytics. Further information on how Google collects and uses this data, including processing in the United States, can be found at <https://www.google.com/policies/privacy/partners/>. You can opt-out of all Google supported analytics within the Services by going to the following webpage: <https://tools.google.com/dlpage/gaoptout>.

Learn more about how we use cookies by reading our [Cookie Policy](/legal/cookie-policy).

#### How Do We Use Information?

We will use the information described above for the purpose of operating and providing the Websites and our Services. Specifically, we will use the information for the following purposes:

  * **_Provide, personalize and improve our Services._** We use your information to provide the Websites and fulfill your requests for resources, services, and information; analyze content that you provide to us and provide suggestions for what is in such content; analyze the use of the Services and user data to understand, improve and operate the Services; and customize the content you see when you use the Services;
  * **_Communicate with you._** We use your email address to communicate with you about the Services and let you know about our terms and policies. If you subscribe to a newsletter, we will use your email address to send you such newsletter. We also use your information to respond to you when you contact us;
  * **_Promote safety, integrity and security._** We use the information that we have to verify accounts and activity, combat harmful conduct, maintain the integrity of our Services, and promote safety and security on our Websites. For example, we use data that we have to investigate suspicious activity or breaches of the [Terms of Use](/legal/terms);
  * **_For any other purposes_** disclosed to you at the time we collect your information or pursuant to your consent.



#### How We Share Information

There are certain circumstances in which we may share your information with certain third parties without further notice to you, as set forth below:

  * **_Service providers and third-party vendors._** We share your information with third-party vendors and service providers that support the Services, for example cloud hosting providers (to provide data storage and processing services), communications providers (to process new queries and to manage our emails) and analytics providers to perform analysis on the Services. These service providers are limited from using your information for any purpose other than to perform services for us.
  * **_Legal purposes._** We may disclose information for legal purposes, such as to respond to subpoenas, court orders, legal process, law enforcement requests, legal claims or government inquiries, detect fraud, and to protect and defend the rights, interests, safety, and security of Meta, our affiliates, owner, users, or the public.
  * **_Business transfers._** We may share your information in connection with a substantial corporate transaction, such as the sale of a website, a merger, consolidation, asset sale, or in the unlikely event of bankruptcy.
  * **_With your consent._** We may share information for any other purposes disclosed to you at the time we collect the information or pursuant to your consent. If you choose to engage in public activities on the Websites, you should be aware that any information you share there can be read, collected, or used by other users of these areas. You should use caution in disclosing personal information while participating in these areas. We are not responsible for the information you choose to submit in these public areas.



#### Children's Information

Meta does not knowingly collect or store information from children under the age of 13, unless permitted by law. We will delete any information we may have inadvertently received from a child under 13 upon notice. If you have reason to believe that a child under the age of 13 has provided personal information to Meta through our Services please contact us.

#### Third-Party Links

Our Websites may contain links to other sites that we do not own or operate (e.g. GitHub). Except as provided in this Privacy Policy, we do not provide your information to these third parties without your consent. The linked websites have separate and independent privacy statements, notices and terms of use, which we recommend you carefully review. We do not have any control over such websites, and therefore have no liability or responsibility for the linked websites' personal information practices.

#### Data Retention

We retain information relating to the Services until it is no longer necessary to serve the purposes for which it was collected, such as to provide the Services to you or improve the Services. Reasons we may retain some information for longer periods include:

  * A legal request or obligation, including obligations of Meta Companies or to comply with applicable law;
  * A governmental investigation;
  * An investigation of possible violations of our terms or policies;
  * To prevent harm;
  * For safety, security and integrity purposes;
  * To protect ourselves, including our rights, property or products;
  * If it's needed in relation to a legal claim, complaint, litigation or regulatory proceedings.



#### Additional Information for United States Residents

If you are a United States resident, you can learn more about the consumer privacy rights that may be available to you by reviewing the .

#### Additional Information for Individuals in the European Region and the United Kingdom

If you are a user in a territory or country listed below (the "European Region") or the United Kingdom, the following information also applies to you and supplements the information contained above in the Privacy Policy.

Andorra, Austria, Azores, Belgium, Bulgaria, Canary Islands, Channel Islands, Croatia, Czech Republic, Denmark, Estonia, Finland, France, French Guiana, Germany, Greece, Guadeloupe, Hungary, Iceland, Ireland, Isle of Man, Italy, Latvia, Liechtenstein, Lithuania, Luxembourg, Madeira, Malta, Martinique, Mayotte, Monaco, Netherlands, Norway, Poland, Portugal, Republic of Cyprus, Réunion, Romania, San Marino, Saint Barthélemy, Saint-Martin, Slovakia, Slovenia, Spain, Sweden, Switzerland, and Vatican City and the UK sovereign bases in Cyprus (Akrotiri and Dhekelia).

If you live in the European Region, the data controller responsible for your information when you use the Websites is Meta Platforms Ireland Ltd. If you live in the United Kingdom, the data controller responsible for your information when you use the Websites is Meta Platforms, Inc.

**_Our legal basis for processing data._** We collect, use and share data in the ways described above based on the following:

  * **_Contractual necessity._** The majority of the processing of personal data described in this Privacy Policy is justified on the basis that it is necessary for the performance of a contract and specifically, for the purposes of our [Terms of Use](/legal/terms). For example, we rely on this legal basis to create your account, grant you access to our Services and to communicate with you regarding the Services.
  * **_Legitimate interests._** Our processing of personal data as described in this Privacy Policy is justified on the basis that it is necessary for the legitimate interests or the legitimate interests of a third party, where not outweighed by your interests or fundamental rights and freedoms. We rely on this legal basis to further understand who is accessing and using the Services; prevent and address fraud, unauthorized use of the Services, breaches of our terms and policies, or other harmful or illegal activity; protect ourselves (including our rights, property or products), our users or others, including as part of investigations or regulatory enquiries; or to prevent death or imminent bodily harm.
  * **_Compliance with a legal obligation._** We rely on this legal basis for processing data when the law requires it, including, for example, if there is a valid legal request for certain data.



**_Data Transfers._** We transfer personal data both internally within Meta and externally with our partners. Information controlled by Meta Platforms Ireland Ltd. or Meta Platforms, Inc. may be transferred or transmitted to, or stored and processed in, the United States or other countries for the purposes described in this policy. These data transfers are necessary to provide the services set forth in the [Terms of Use](/legal/terms).

Meta Platforms Ireland Ltd. will protect your data when it is transferred outside the European Region by implementing appropriate safeguards to protect your personal data, where required, such as using the European Commission's Standard Contractual Clauses for the transfer of personal data outside the EEA. Meta Platforms, Inc. will protect your data when it is transferred to countries outside of the United Kingdom by implementing appropriate safeguards to protect your personal data, where required, such as using the International Data Transfer Agreement or the International Data Transfer Addendum which have been approved by the UK Parliament.

**_Your Rights_**

Under the GDPR and UK GDPR, you have the right to data portability, right to access, right to rectify, and right to erase your data under certain circumstances. You also have the right to object to and restrict certain processing of your data. In evaluating an objection, we will evaluate several factors, including: reasonable user expectations; the benefits and risks to you and third parties; and other available means to achieve the same purpose that may be less invasive and do not require disproportional effort. Your objection will be upheld and we will cease processing your information, unless continued processing is based on compelling legitimate grounds or is needed for legal reasons.

Please note that to protect your information, we may need to verify your identity before processing your request. In some cases, we may need to collect additional information to verify your identity, such as a government issued ID. To exercise your rights under the GDPR or UK GDPR, you can email opensource@meta.com or contact us by mail at the address provided below.

**_Contact information for individuals in the European Region only_**

The data controller responsible for your information is Meta Platforms Ireland Ltd., which you can contact by writing to:

Meta Platforms Ireland Ltd.ATTN: Privacy OperationsMerrion RoadDublin 4, D04 X2K5Ireland

Contact the Data Protection Officer for Meta Platforms Ireland Ltd. You also have the right to lodge a complaint with Meta Platforms Ireland Ltd.'s lead supervisory authority, the Irish Data Protection Commissioner, or your local supervisory authority.

**_Contact information for individuals in the United Kingdom only_**

If you are in the United Kingdom, the data controller responsible for your information is Meta Platforms, Inc., which you can contact , or by writing to:

Meta Platforms, Inc.ATTN: Privacy Operations1601 Willow RoadMenlo Park, CA 94025

Contact the Data Protection Officer for Meta Platforms, Inc. You also have the right to lodge a complaint with the UK's Information Commissioner's Office.

#### Changes to this Policy

We will notify you before we make material changes to this Policy. If we make non-material changes, we may update or modify this Privacy Policy at any time without prior notice.

We recommend that you review the Privacy Policy each time you visit the Websites to stay informed of our privacy practices. Any changes will be effective when we post the revised policy.

#### Questions

If you have any questions about this Privacy Policy or our practices, please contact us at opensource@meta.com or by mail at:

Meta, Inc.ATTN: Privacy Operations1601 Willow RoadMenlo Park, CA 94025

Table of contents[](#undefined)[](#undefined)[](#undefined)[](#undefined)[What Kinds of Information Do We Collect?](#what-kinds-of-information-do-we-collect)[Cookies and Similar Technologies](#cookies-and-similar-technologies)[How Do We Use Information?](#how-do-we-use-information)[How We Share Information](#how-we-share-information)[Children's Information](#childrens-information)[Third-Party Links](#third-party-links)[Data Retention](#data-retention)[Additional Information for United States Residents](#additional-information-for-united-states-residents)[Additional Information for Individuals in the European Region and the United Kingdom](#additional-information-for-individuals-in-the-european-region-and-the-united-kingdom)[Changes to this Policy](#changes-to-this-policy)[Questions](#questions)

[](https://meta.com)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



Site Map[Projects](/projects)[FAQ](/get-involved#faq)[About](/about)[Get Involved](/get-involved)

Information[Linux](/linux)[Careers](https://metacareers.com)[Bug Bounty Program](https://bugbounty.meta.com)

Connect[GitHub](https://github.com/facebook)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



© 2024 Meta

  * [Code of Conduct](/code-of-conduct)
  * [Privacy Policy](/legal/privacy)
  * [Cookie Policy](/legal/cookie-policy)
  * [Terms of Use](/legal/terms)
  * [Trademark Policy](/legal/trademark)


[](/)

# Meta Open Source - Terms of Use

 _Effective December 1, 2020_

These Terms of Use ("**Terms** ") govern your use of this website hosted and provided by Meta Platforms, Inc. ("**Meta** ", "**us** " or "**we** "), ("**Website** ") and any services offered through the Website ("**Services** ").

These Terms are a legal contract between you and us so it is important that you review them carefully.

For clarity, these Terms only apply to this Website and do not apply to any:

  1. use of open source code, documentation or specifications made available on GitHub, which are governed by the terms of the applicable open source license;
  2. pull requests, issues and any other interactions or features related to participation in open source projects on GitHub, which are governed by GitHub's terms and conditions; or
  3. use of any other Meta website, service or product, which are governed by the terms and conditions applicable to those offerings.



We may change these Terms or modify any features of the Website or the Services at any time. Any such change or modification will be effective immediately upon posting on our Website. You accept these Terms by browsing this Website and/or using the Services, and you accept any changes to the Terms by continuing to use the Website after we post any such changes.

If you do not agree to these Terms, please do not access or use the Website.

If you need to contact us for any reason, please do so at opensource@meta.com

#### 1. What you can do on this Website

We make this Website available to you and others to help everyone better understand our open source projects. In exchange, we need you to make the following commitments:

**(a) Who can use the Website**

We try to make our Website broadly available to everyone, but you cannot use our Website if:

  * You are a minor in your country of residence except if your parents or guardians have agreed to these Terms on your behalf.
  * You are prohibited from accessing the Website under applicable laws.

**(b) What you can share and do on the Website**

You agree not to engage in the conduct described below (or to facilitate or support others in doing so):

  1. You may not use our Website, do or share anything:
     * That violates these Terms (and other terms and policies that apply to your use of the Website);
     * That is unlawful in any country, misleading, discriminatory or fraudulent; and/or
     * That infringes or violates someone else's rights, including their intellectual property rights.
  2. You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of the Services or Website.

**(c) Access to the Website**

The Website is made available free of charge and the Services are available only for informational purposes. We make no representations or warranties of any kind as to the accuracy, currency, or completeness of the information and other materials made available through the Website and are not liable for any decisions you may make in reliance on this content.

#### 2. Links To Third-Party Content

The Website or Services may contain links to third-party content. For example, our user communities may be hosted by third party platforms over which we have no control and for which we have no responsibility. Therefore, please review each of these platforms or websites' terms of use and privacy policies before participating.

We do not control, endorse, sponsor, recommend, or otherwise accept responsibility for any content, terms of use, policies on or use of any third party website.

#### 3. Limits on Liability

We work hard to provide the best Website and Services we can and to specify clear guidelines for everyone who uses them. Our Website and Services, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, that they will function without disruptions, delays, or imperfections or content will be accurate, current and complete. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT IN RELATION TO THE WEBSITE, THE SERVICES AND THEIR CONTENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content). Some jurisdictions do not allow the exclusion or limitation of implied warranties, in which case parts of this disclaimer may not apply to you.

We cannot predict when issues might arise with our Website and Services. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms, the Website or the Services, even if we have been advised of the possibility of such damages. Our aggregate liability arising out of or relating to these Terms, the Website or the Services will not exceed $100.

We do not exclude or limit in any way our liability to you where it would be unlawful to do so therefore depending on the country where you reside some of these exclusions and limitations may not apply to you.

#### 4. Disputes

We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.

For any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms, the Website and/or the Services ("**claim** "), you agree that it will be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County. You also agree to submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.

The preceding provision regarding applicable law and venue does not apply if you are a consumer based in the European Union. If you are a consumer based in the European Union, these Terms will be subject to the laws of your country of residence and you may bring a claim in front of those courts.

#### 5. Privacy

Under data protection legislation, we are required to provide you with certain information about who we are, how we process your personal data and for what purposes and your rights in relation to your personal data and how to exercise them. This information is provided in our [Privacy Policy](/legal/privacy) and it is important that you read that information. Please also review our [Cookie Policy](/legal/cookie-policy), which tells you which cookies we use on the Website and how to manage them.

#### 6. Other important terms

These Terms make up the entire agreement between you and Meta Platforms, Inc. regarding your use of our Services and this Website. They supersede any prior agreements.

If any portion of these Terms is found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.

You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.

You agree that no joint venture, partnership, employment, or agency relationship exists between you and us as a result of these Terms or your access to and use of the Website or Services.

These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.

We reserve all rights not expressly granted to you.

Table of contents[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[1. What you can do on this Website](#what-you-can-do-on-this-website)[2. Links To Third-Party Content](#links-to-third-party-content)[3. Limits on Liability](#limits-on-liability)[4. Disputes](#disputes)[5. Privacy](#privacy)[6. Other important terms](#other-important-terms)

[](https://meta.com)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



Site Map[Projects](/projects)[FAQ](/get-involved#faq)[About](/about)[Get Involved](/get-involved)

Information[Linux](/linux)[Careers](https://metacareers.com)[Bug Bounty Program](https://bugbounty.meta.com)

Connect[GitHub](https://github.com/facebook)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



© 2024 Meta

  * [Code of Conduct](/code-of-conduct)
  * [Privacy Policy](/legal/privacy)
  * [Cookie Policy](/legal/cookie-policy)
  * [Terms of Use](/legal/terms)
  * [Trademark Policy](/legal/trademark)



Don’t miss what’s happening

People on X are the first to know.

[Log in](/login)

[Sign up](/i/flow/signup)

Welcome to x.com!

We are letting you know that we are changing our URL, but your privacy and data protection settings remain the same.

For more details, see our Privacy Policy: 

# [](/)

[Settings](/settings)

[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=facebook%2Freact) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ facebook ](/facebook) / **[react](/facebook/react) ** Public

  * [ Notifications ](/login?return_to=%2Ffacebook%2Freact) You must be signed in to change notification settings
  * [ Fork 47.2k ](/login?return_to=%2Ffacebook%2Freact)
  * [ Star  231k ](/login?return_to=%2Ffacebook%2Freact)




The library for web and native user interfaces. 

[react.dev](https://react.dev "https://react.dev")

### License

[ MIT license ](/facebook/react/blob/main/LICENSE)

[ 231k stars ](/facebook/react/stargazers) [ 47.2k forks ](/facebook/react/forks) [ Branches ](/facebook/react/branches) [ Tags ](/facebook/react/tags) [ Activity ](/facebook/react/activity)

[ Star  ](/login?return_to=%2Ffacebook%2Freact)

[ Notifications ](/login?return_to=%2Ffacebook%2Freact) You must be signed in to change notification settings

  * [ Code ](/facebook/react)
  * [ Issues 764 ](/facebook/react/issues)
  * [ Pull requests 176 ](/facebook/react/pulls)
  * [ Actions ](/facebook/react/actions)
  * [ Projects 0 ](/facebook/react/projects)
  * [ Wiki ](/facebook/react/wiki)
  * [ Security ](/facebook/react/security)
  * [ Insights ](/facebook/react/pulse)



Additional navigation options

  * [ Code  ](/facebook/react)
  * [ Issues  ](/facebook/react/issues)
  * [ Pull requests  ](/facebook/react/pulls)
  * [ Actions  ](/facebook/react/actions)
  * [ Projects  ](/facebook/react/projects)
  * [ Wiki  ](/facebook/react/wiki)
  * [ Security  ](/facebook/react/security)
  * [ Insights  ](/facebook/react/pulse)



# facebook/react

main

[**358** Branches](/facebook/react/branches)[**145** Tags](/facebook/react/tags)

[](/facebook/react/branches)[](/facebook/react/tags)

Go to file

Code

## Folders and files

Name| Name| Last commit message| Last commit date  
---|---|---|---  
  
## Latest commit

[](/sebmarkbage)[sebmarkbage](/facebook/react/commits?author=sebmarkbage)[[Flight] Mark Errored Server Components (](/facebook/react/commit/50f00fd876b0b92b243cd8b54a222f9577446392)[#31879](https://github.com/facebook/react/pull/31879)[)](/facebook/react/commit/50f00fd876b0b92b243cd8b54a222f9577446392)Dec 28, 2024[50f00fd](/facebook/react/commit/50f00fd876b0b92b243cd8b54a222f9577446392) · Dec 28, 2024

## History

[19,815 Commits](/facebook/react/commits/main/)[](/facebook/react/commits/main/)  
[.codesandbox](/facebook/react/tree/main/.codesandbox ".codesandbox")| [.codesandbox](/facebook/react/tree/main/.codesandbox ".codesandbox")| [Codesandbox: upgrade to Node.js 18 (](/facebook/react/commit/88313ffd57a5df2666520c9a528eafdf2914d5f2 "Codesandbox: upgrade to Node.js 18 \(#26330\)
Turns out Codesandbox didn't support `String.prototype.replaceAll` in
#26329.
This updates the config to use Node.js 18 for Codesandbox builds.")[#26330](https://github.com/facebook/react/pull/26330)[)](/facebook/react/commit/88313ffd57a5df2666520c9a528eafdf2914d5f2 "Codesandbox: upgrade to Node.js 18 \(#26330\)
Turns out Codesandbox didn't support `String.prototype.replaceAll` in
#26329.
This updates the config to use Node.js 18 for Codesandbox builds.")| Mar 7, 2023  
[.github](/facebook/react/tree/main/.github ".github")| [.github](/facebook/react/tree/main/.github ".github")| [Update runtime workflow to use HEAD commit (](/facebook/react/commit/9463d51e515544bb3119dd4cec46ce2177cf4c62 "Update runtime workflow to use HEAD commit \(#31850\)
This updates the CI workflow for the runtime build and tests to use the
HEAD commit of the PR branch rather than the Fake News merge commit that
the `@actions/checkout` action bafflingly defaults to.
Testing against the merge commit never made sense to me as a behavior
because as soon as someone updates upstream, it's out of date anyway.
It should just match the exact commit that the developer pushed, and the
once that appears in the GitHub UI.")[#31850](https://github.com/facebook/react/pull/31850)[)](/facebook/react/commit/9463d51e515544bb3119dd4cec46ce2177cf4c62 "Update runtime workflow to use HEAD commit \(#31850\)
This updates the CI workflow for the runtime build and tests to use the
HEAD commit of the PR branch rather than the Fake News merge commit that
the `@actions/checkout` action bafflingly defaults to.
Testing against the merge commit never made sense to me as a behavior
because as soon as someone updates upstream, it's out of date anyway.
It should just match the exact commit that the developer pushed, and the
once that appears in the GitHub UI.")| Dec 19, 2024  
[compiler](/facebook/react/tree/main/compiler "compiler")| [compiler](/facebook/react/tree/main/compiler "compiler")| [[rcr] Relax react peer dep requirement (](/facebook/react/commit/4309bde2b4faa044dc6266142378a330c030e053 "\[rcr\] Relax react peer dep requirement \(#31915\)
There's no real reason to restrict the React peer dep to
non-experimental, so relax it.
---
\[//\]: # \(BEGIN SAPLING FOOTER\)
Stack created with \[Sapling\]\(https://sapling-scm.com\). Best reviewed
with \[ReviewStack\]\(https://reviewstack.dev/facebook/react/pull/31915\).
* #31919
* #31918
* #31917
* #31916
* __->__ #31915
* #31920")[#31915](https://github.com/facebook/react/pull/31915)[)](/facebook/react/commit/4309bde2b4faa044dc6266142378a330c030e053 "\[rcr\] Relax react peer dep requirement \(#31915\)
There's no real reason to restrict the React peer dep to
non-experimental, so relax it.
---
\[//\]: # \(BEGIN SAPLING FOOTER\)
Stack created with \[Sapling\]\(https://sapling-scm.com\). Best reviewed
with \[ReviewStack\]\(https://reviewstack.dev/facebook/react/pull/31915\).
* #31919
* #31918
* #31917
* #31916
* __->__ #31915
* #31920")| Dec 28, 2024  
[fixtures](/facebook/react/tree/main/fixtures "fixtures")| [fixtures](/facebook/react/tree/main/fixtures "fixtures")| [Add Profiler mode to fixtures even if React DevTools is not installed (](/facebook/react/commit/d4ac7689f94f8ed53b779a651d62a2b9af20e6c0 "Add Profiler mode to fixtures even if React DevTools is not installed \(#31877\)
Currently you need to do one of either:
1. Install React DevTools
2. Install React Refresh
3. Add Profiler component
To opt in to component level profiling.
It was a bit confusing that some of the fixtures was doing 2 which made
them work while other was depending on if you had DevTools.
Really React Refresh shouldn't really opt you in I think.")[…](https://github.com/facebook/react/pull/31877)| Dec 28, 2024  
[packages](/facebook/react/tree/main/packages "packages")| [packages](/facebook/react/tree/main/packages "packages")| [[Flight] Mark Errored Server Components (](/facebook/react/commit/50f00fd876b0b92b243cd8b54a222f9577446392 "\[Flight\] Mark Errored Server Components \(#31879\)
This is similar to #31876 but for Server Components.
It marks them as errored and puts the error message in the Summary
properties.
<img width="1511" alt="Screenshot 2024-12-20 at 5 05 35 PM"
src="https://github.com/user-attachments/assets/92f11e42-0e23-41c7-bfd4-09effb25e024"
/>
This only looks at the current chunk for rejections. That means that
there might still be promises deeper that rejected but it's only the
immediate return value of the Server Component that's considered a
rejection of the component itself.")[#31879](https://github.com/facebook/react/pull/31879)[)](/facebook/react/commit/50f00fd876b0b92b243cd8b54a222f9577446392 "\[Flight\] Mark Errored Server Components \(#31879\)
This is similar to #31876 but for Server Components.
It marks them as errored and puts the error message in the Summary
properties.
<img width="1511" alt="Screenshot 2024-12-20 at 5 05 35 PM"
src="https://github.com/user-attachments/assets/92f11e42-0e23-41c7-bfd4-09effb25e024"
/>
This only looks at the current chunk for rejections. That means that
there might still be promises deeper that rejected but it's only the
immediate return value of the Server Component that's considered a
rejection of the component itself.")| Dec 28, 2024  
[scripts](/facebook/react/tree/main/scripts "scripts")| [scripts](/facebook/react/tree/main/scripts "scripts")| [[asserts helpers] react package (](/facebook/react/commit/94867f33be327a52bfffda89a14c85897180e43e "\[asserts helpers\] react package \(#31853\)
Based off https://github.com/facebook/react/pull/31844
Commit to review:
https://github.com/facebook/react/commit/11aa104e3e70c0accc21f785060b812beb145089
Converts the rest of the `react` package.")[#31853](https://github.com/facebook/react/pull/31853)[)](/facebook/react/commit/94867f33be327a52bfffda89a14c85897180e43e "\[asserts helpers\] react package \(#31853\)
Based off https://github.com/facebook/react/pull/31844
Commit to review:
https://github.com/facebook/react/commit/11aa104e3e70c0accc21f785060b812beb145089
Converts the rest of the `react` package.")| Dec 24, 2024  
[.editorconfig](/facebook/react/blob/main/.editorconfig ".editorconfig")| [.editorconfig](/facebook/react/blob/main/.editorconfig ".editorconfig")| [Remove trim_trailing_whitespace from editorconfig (](/facebook/react/commit/33c7bd9ae3b4f998a477fe0ea8ebdf2f2ee8a144 "Remove trim_trailing_whitespace from editorconfig \(#31413\)
This setting breaks `toMatchInlineSnapshot` by removing whitespace in
snapshots.")[#31413](https://github.com/facebook/react/pull/31413)[)](/facebook/react/commit/33c7bd9ae3b4f998a477fe0ea8ebdf2f2ee8a144 "Remove trim_trailing_whitespace from editorconfig \(#31413\)
This setting breaks `toMatchInlineSnapshot` by removing whitespace in
snapshots.")| Nov 5, 2024  
[.eslintignore](/facebook/react/blob/main/.eslintignore ".eslintignore")| [.eslintignore](/facebook/react/blob/main/.eslintignore ".eslintignore")| [Fix ESLint and Prettier configs for React Compiler (](/facebook/react/commit/c93c30f9d4c6339708636c3fbf9189acfe96443f "Fix ESLint and Prettier configs for React Compiler \(#29073\)
Fixes the top-level ESLint and Prettier configs to ignore the compiler.
For now the compiler has its own prettier and linting setup with
different versions/configs.")[#29073](https://github.com/facebook/react/pull/29073)[)](/facebook/react/commit/c93c30f9d4c6339708636c3fbf9189acfe96443f "Fix ESLint and Prettier configs for React Compiler \(#29073\)
Fixes the top-level ESLint and Prettier configs to ignore the compiler.
For now the compiler has its own prettier and linting setup with
different versions/configs.")| May 16, 2024  
[.eslintrc.js](/facebook/react/blob/main/.eslintrc.js ".eslintrc.js")| [.eslintrc.js](/facebook/react/blob/main/.eslintrc.js ".eslintrc.js")| [Implement react-server-dom-parcel (](/facebook/react/commit/ca587425fe21b644bebb336f058f1a0d9763631b "Implement react-server-dom-parcel \(#31725\)
This adds a new `react-server-dom-parcel-package`, which is an RSC
integration for the Parcel bundler. It is mostly copied from the
existing webpack/turbopack integrations, with some changes to utilize
Parcel runtime APIs for loading and executing bundles/modules.
See https://github.com/parcel-bundler/parcel/pull/10043 for the Parcel
side of this, which includes the plugin needed to generate client and
server references. https://github.com/parcel-bundler/rsc-examples also
includes examples of various ways to use RSCs with Parcel.
Differences from other integrations:
* Client and server modules are all part of the same graph, and we use
Parcel's
\[environments\]\(https://parceljs.org/plugin-system/transformer/#the-environment\)
to distinguish them. The server is the Parcel build entry point, and it
imports and renders server components in route handlers. When a `"use
client"` directive is seen, the environment changes and Parcel creates a
new client bundle for the page, combining all client modules together.
CSS from both client and server components are also combined
automatically.
* There is no separate manifest file that needs to be passed around by
the user. A \[Runtime\]\(https://parceljs.org/plugin-system/runtime/\)
plugin injects client and server references as needed into the relevant
bundles, and registers server action ids using `react-server-dom-parcel`
automatically.
* A special `<Resources>` component is also generated by Parcel to
render the `<script>` and `<link rel="stylesheet">` elements needed for
a page, using the relevant info from the bundle graph.
Note: I've already published a 0.0.x version of this package to npm for
testing purposes but happy to add whoever needs access to it as well.
### Questions
* How to test this in the React repo. I'll have integration tests in
Parcel, but setting up all the different mocks and environments to
simulate that here seems challenging. I could try to copy how
Webpack/Turbopack do it but it's a bit different.
* Where to put TypeScript types. Right now I have some ambient types in
my \[example
repo\]\(https://github.com/parcel-bundler/rsc-examples/blob/main/types.d.ts\)
but it would be nice for users not to copy and paste these. Can I
include them in the package or do they need to maintained separately in
definitelytyped? I would really prefer not to have to maintain code in
three different repos ideally.
---------
Co-authored-by: Sebastian Markbage <sebastian@calyptus.eu>")[#31725](https://github.com/facebook/react/pull/31725)[)](/facebook/react/commit/ca587425fe21b644bebb336f058f1a0d9763631b "Implement react-server-dom-parcel \(#31725\)
This adds a new `react-server-dom-parcel-package`, which is an RSC
integration for the Parcel bundler. It is mostly copied from the
existing webpack/turbopack integrations, with some changes to utilize
Parcel runtime APIs for loading and executing bundles/modules.
See https://github.com/parcel-bundler/parcel/pull/10043 for the Parcel
side of this, which includes the plugin needed to generate client and
server references. https://github.com/parcel-bundler/rsc-examples also
includes examples of various ways to use RSCs with Parcel.
Differences from other integrations:
* Client and server modules are all part of the same graph, and we use
Parcel's
\[environments\]\(https://parceljs.org/plugin-system/transformer/#the-environment\)
to distinguish them. The server is the Parcel build entry point, and it
imports and renders server components in route handlers. When a `"use
client"` directive is seen, the environment changes and Parcel creates a
new client bundle for the page, combining all client modules together.
CSS from both client and server components are also combined
automatically.
* There is no separate manifest file that needs to be passed around by
the user. A \[Runtime\]\(https://parceljs.org/plugin-system/runtime/\)
plugin injects client and server references as needed into the relevant
bundles, and registers server action ids using `react-server-dom-parcel`
automatically.
* A special `<Resources>` component is also generated by Parcel to
render the `<script>` and `<link rel="stylesheet">` elements needed for
a page, using the relevant info from the bundle graph.
Note: I've already published a 0.0.x version of this package to npm for
testing purposes but happy to add whoever needs access to it as well.
### Questions
* How to test this in the React repo. I'll have integration tests in
Parcel, but setting up all the different mocks and environments to
simulate that here seems challenging. I could try to copy how
Webpack/Turbopack do it but it's a bit different.
* Where to put TypeScript types. Right now I have some ambient types in
my \[example
repo\]\(https://github.com/parcel-bundler/rsc-examples/blob/main/types.d.ts\)
but it would be nice for users not to copy and paste these. Can I
include them in the package or do they need to maintained separately in
definitelytyped? I would really prefer not to have to maintain code in
three different repos ideally.
---------
Co-authored-by: Sebastian Markbage <sebastian@calyptus.eu>")| Dec 12, 2024  
[.git-blame-ignore-revs](/facebook/react/blob/main/.git-blame-ignore-revs ".git-blame-ignore-revs")| [.git-blame-ignore-revs](/facebook/react/blob/main/.git-blame-ignore-revs ".git-blame-ignore-revs")| [Add run prettier commit to .git-blame-ignore-revs](/facebook/react/commit/d439f279ff0517417e062cae8ebb77a67fe21fa9 "Add run prettier commit to .git-blame-ignore-revs
ghstack-source-id: a10c3b3d6412873023747d6f253f8793fa689b60
Pull Request resolved: https://github.com/facebook/react/pull/30391")| Jul 19, 2024  
[.gitattributes](/facebook/react/blob/main/.gitattributes ".gitattributes")| [.gitattributes](/facebook/react/blob/main/.gitattributes ".gitattributes")| [.gitattributes to ensure LF line endings when we should](/facebook/react/commit/8abca77381fbd31ffc2ff2b4fa12020768b8fc07 ".gitattributes to ensure LF line endings when we should")| Jan 18, 2014  
[.gitignore](/facebook/react/blob/main/.gitignore ".gitignore")| [.gitignore](/facebook/react/blob/main/.gitignore ".gitignore")| [feat[devtools]: add package for fusebox integration (](/facebook/react/commit/96c58466109c2944adb817001fec38088a7c431e "feat\[devtools\]: add package for fusebox integration \(#28553\)
## Summary
Stacked on https://github.com/facebook/react/pull/28552. Review only the
\[last commit at the
top\]\(https://github.com/facebook/react/pull/28553/commits/c69952f1bf6e23252d47e0f7eb98efbbb2cc2c55\).
These changes add new package `react-devtools-fusebox`, which is the
entrypoint for the RDT Frontend, which will be used in Chrome DevTools
panel. The main differences from other frontend shells \(extension,
standalone\) are:
1. This package builds scripts in ESM format, this is required by Chrome
DevTools, see webpack config:
https://github.com/facebook/react/blob/c69952f1bf6e23252d47e0f7eb98efbbb2cc2c55/packages/react-devtools-fusebox/webpack.config.frontend.js#L50-L52
2. The build includes styles in a separate `.css` file, which is
required for Chrome DevTools: styles are loaded lazily once panel is
mounted.")[#28553](https://github.com/facebook/react/pull/28553)[)](/facebook/react/commit/96c58466109c2944adb817001fec38088a7c431e "feat\[devtools\]: add package for fusebox integration \(#28553\)
## Summary
Stacked on https://github.com/facebook/react/pull/28552. Review only the
\[last commit at the
top\]\(https://github.com/facebook/react/pull/28553/commits/c69952f1bf6e23252d47e0f7eb98efbbb2cc2c55\).
These changes add new package `react-devtools-fusebox`, which is the
entrypoint for the RDT Frontend, which will be used in Chrome DevTools
panel. The main differences from other frontend shells \(extension,
standalone\) are:
1. This package builds scripts in ESM format, this is required by Chrome
DevTools, see webpack config:
https://github.com/facebook/react/blob/c69952f1bf6e23252d47e0f7eb98efbbb2cc2c55/packages/react-devtools-fusebox/webpack.config.frontend.js#L50-L52
2. The build includes styles in a separate `.css` file, which is
required for Chrome DevTools: styles are loaded lazily once panel is
mounted.")| Apr 12, 2024  
[.mailmap](/facebook/react/blob/main/.mailmap ".mailmap")| [.mailmap](/facebook/react/blob/main/.mailmap ".mailmap")| [updates mailmap entries (](/facebook/react/commit/ebb2253428315bfa3237df403082b0d2ec2f9c5c "updates mailmap entries \(#19824\)")[#19824](https://github.com/facebook/react/pull/19824)[)](/facebook/react/commit/ebb2253428315bfa3237df403082b0d2ec2f9c5c "updates mailmap entries \(#19824\)")| Sep 12, 2020  
[.nvmrc](/facebook/react/blob/main/.nvmrc ".nvmrc")| [.nvmrc](/facebook/react/blob/main/.nvmrc ".nvmrc")| [[ci] Standardize node version and timezones](/facebook/react/commit/922c7971ba3e52adf46678774bef3022d1aad4e0 "\[ci\] Standardize node version and timezones
Quick change to standardize on a single timezone across all workflows
and to use the same version of node \(18.20.1\).
Also updates .nvmrc
ghstack-source-id: e1d43006ec018acfcd88444feadde1b1d260de9d
Pull Request resolved: https://github.com/facebook/react/pull/30323")| Jul 12, 2024  
[.prettierignore](/facebook/react/blob/main/.prettierignore ".prettierignore")| [.prettierignore](/facebook/react/blob/main/.prettierignore ".prettierignore")| [[prettier] Ignore compiler/target (](/facebook/react/commit/0f1127b552790e6dc0b65650680237ba4c94d977 "\[prettier\] Ignore compiler/target \(#31168\)
Add missing directory to prettierignore.
---
\[//\]: # \(BEGIN SAPLING FOOTER\)
Stack created with \[Sapling\]\(https://sapling-scm.com\). Best reviewed
with \[ReviewStack\]\(https://reviewstack.dev/facebook/react/pull/31168\).
* #31167
* #31166
* #31165
* #31164
* #31148
* __->__ #31168")[#31168](https://github.com/facebook/react/pull/31168)[)](/facebook/react/commit/0f1127b552790e6dc0b65650680237ba4c94d977 "\[prettier\] Ignore compiler/target \(#31168\)
Add missing directory to prettierignore.
---
\[//\]: # \(BEGIN SAPLING FOOTER\)
Stack created with \[Sapling\]\(https://sapling-scm.com\). Best reviewed
with \[ReviewStack\]\(https://reviewstack.dev/facebook/react/pull/31168\).
* #31167
* #31166
* #31165
* #31164
* #31148
* __->__ #31168")| Oct 10, 2024  
[.prettierrc.js](/facebook/react/blob/main/.prettierrc.js ".prettierrc.js")| [.prettierrc.js](/facebook/react/blob/main/.prettierrc.js ".prettierrc.js")| [[BE] switch to hermes parser for prettier (](/facebook/react/commit/70484844bfd47382ad0011e0066ccf25d1a84464 "\[BE\] switch to hermes parser for prettier \(#30421\)
This will allow us to parse new flow syntax since the `flow` parser is
no longer updated.
I had to exclude some files and have them fall back to `flow` parser
since they contain invalid graphql syntax that makes the plugin crash.")[#30421](https://github.com/facebook/react/pull/30421)[)](/facebook/react/commit/70484844bfd47382ad0011e0066ccf25d1a84464 "\[BE\] switch to hermes parser for prettier \(#30421\)
This will allow us to parse new flow syntax since the `flow` parser is
no longer updated.
I had to exclude some files and have them fall back to `flow` parser
since they contain invalid graphql syntax that makes the plugin crash.")| Jul 23, 2024  
[.watchmanconfig](/facebook/react/blob/main/.watchmanconfig ".watchmanconfig")| [.watchmanconfig](/facebook/react/blob/main/.watchmanconfig ".watchmanconfig")| [.watchmanconfig must be valid json (](/facebook/react/commit/29b45596354035754d598d8b23a8233f3d2414f0 ".watchmanconfig must be valid json \(#16118\)
faceworldproblems?")[#16118](https://github.com/facebook/react/pull/16118)[)](/facebook/react/commit/29b45596354035754d598d8b23a8233f3d2414f0 ".watchmanconfig must be valid json \(#16118\)
faceworldproblems?")| Jul 12, 2019  
[CHANGELOG-canary.md](/facebook/react/blob/main/CHANGELOG-canary.md "CHANGELOG-canary.md")| [CHANGELOG-canary.md](/facebook/react/blob/main/CHANGELOG-canary.md "CHANGELOG-canary.md")| [Add useActionState to CHANGELOG-canary.md (](/facebook/react/commit/0a444356748ec1619acfbb60f9b112451c709343 "Add useActionState to CHANGELOG-canary.md \(#28632\)
Co-authored-by: Sébastien Lorber <slorber@users.noreply.github.com>")[#28632](https://github.com/facebook/react/pull/28632)[)](/facebook/react/commit/0a444356748ec1619acfbb60f9b112451c709343 "Add useActionState to CHANGELOG-canary.md \(#28632\)
Co-authored-by: Sébastien Lorber <slorber@users.noreply.github.com>")| Mar 26, 2024  
[CHANGELOG.md](/facebook/react/blob/main/CHANGELOG.md "CHANGELOG.md")| [CHANGELOG.md](/facebook/react/blob/main/CHANGELOG.md "CHANGELOG.md")| [Fix headings in React 19 CHANGELOG (](/facebook/react/commit/7283a213dbbc31029e65005276f12202558558fc "Fix headings in React 19 CHANGELOG \(#31683\)
Co-authored-by: eps1lon <sebastian.silbermann@vercel.com>")[#31683](https://github.com/facebook/react/pull/31683)[)](/facebook/react/commit/7283a213dbbc31029e65005276f12202558558fc "Fix headings in React 19 CHANGELOG \(#31683\)
Co-authored-by: eps1lon <sebastian.silbermann@vercel.com>")| Dec 6, 2024  
[CODE_OF_CONDUCT.md](/facebook/react/blob/main/CODE_OF_CONDUCT.md "CODE_OF_CONDUCT.md")| [CODE_OF_CONDUCT.md](/facebook/react/blob/main/CODE_OF_CONDUCT.md "CODE_OF_CONDUCT.md")| [revert last grammatical edit (](/facebook/react/commit/7a227276e653b481b73ed9e9178244b53d61f730 "revert last grammatical edit \(#25067\)
on line 29, #24798 edited \(others'\) to \(other's\); however, the subject here is plural \(e.g. "others in the community"\), thus \(others'\) is grammatically correct")[#25067](https://github.com/facebook/react/pull/25067)[)](/facebook/react/commit/7a227276e653b481b73ed9e9178244b53d61f730 "revert last grammatical edit \(#25067\)
on line 29, #24798 edited \(others'\) to \(other's\); however, the subject here is plural \(e.g. "others in the community"\), thus \(others'\) is grammatically correct")| Aug 11, 2022  
[CONTRIBUTING.md](/facebook/react/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")| [CONTRIBUTING.md](/facebook/react/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")| [Fix: Updated link in CONTRIBUTING (](/facebook/react/commit/2d80a0cd690bb5650b6c8a6c079a87b5dc42bd15 "Fix: Updated link in CONTRIBUTING \(#25381\)")[#25381](https://github.com/facebook/react/pull/25381)[)](/facebook/react/commit/2d80a0cd690bb5650b6c8a6c079a87b5dc42bd15 "Fix: Updated link in CONTRIBUTING \(#25381\)")| Oct 3, 2022  
[LICENSE](/facebook/react/blob/main/LICENSE "LICENSE")| [LICENSE](/facebook/react/blob/main/LICENSE "LICENSE")| [[Codemod] Update copyright header to Meta (](/facebook/react/commit/9cdf8a99edcfd94d7420835ea663edca04237527 "\[Codemod\] Update copyright header to Meta \(#25315\)
* Facebook -> Meta in copyright
rg --files | xargs sed -i 's#Copyright \(c\) Facebook, Inc. and its affiliates.#Copyright \(c\) Meta Platforms, Inc. and affiliates.#g'
* Manual tweaks")[#25315](https://github.com/facebook/react/pull/25315)[)](/facebook/react/commit/9cdf8a99edcfd94d7420835ea663edca04237527 "\[Codemod\] Update copyright header to Meta \(#25315\)
* Facebook -> Meta in copyright
rg --files | xargs sed -i 's#Copyright \(c\) Facebook, Inc. and its affiliates.#Copyright \(c\) Meta Platforms, Inc. and affiliates.#g'
* Manual tweaks")| Oct 18, 2022  
[README.md](/facebook/react/blob/main/README.md "README.md")| [README.md](/facebook/react/blob/main/README.md "README.md")| [[ez] Remove circleci badge from readme](/facebook/react/commit/4e482f490405c0c601d8712a0625fd17c04978e4 "\[ez\] Remove circleci badge from readme
CircleCI is no longer in use in this repo: a6b5ed01ae98a18507cb92d8e932a8ca321602e6
ghstack-source-id: b6234f11d143d2c65832e17ccf180b255dc23c9d
Pull Request resolved: https://github.com/facebook/react/pull/30502")| Jul 29, 2024  
[ReactVersions.js](/facebook/react/blob/main/ReactVersions.js "ReactVersions.js")| [ReactVersions.js](/facebook/react/blob/main/ReactVersions.js "ReactVersions.js")| [Fix canary version strings (](/facebook/react/commit/e854ce3b1551a4ac97012336c2e2076ab0cc0636 "Fix canary version strings \(#31721\)
We're still publishing RCs and creating canary version strings using the
RC naming convention. Setting the `canaryChannelLabel` back to canary
fixes the version names and tags after the 19 stable release.")[#31721](https://github.com/facebook/react/pull/31721)[)](/facebook/react/commit/e854ce3b1551a4ac97012336c2e2076ab0cc0636 "Fix canary version strings \(#31721\)
We're still publishing RCs and creating canary version strings using the
RC naming convention. Setting the `canaryChannelLabel` back to canary
fixes the version names and tags after the 19 stable release.")| Dec 13, 2024  
[SECURITY.md](/facebook/react/blob/main/SECURITY.md "SECURITY.md")| [SECURITY.md](/facebook/react/blob/main/SECURITY.md "SECURITY.md")| [Create SECURITY.md (](/facebook/react/commit/1b6e269751c28030429503a60590114e252fc86c "Create SECURITY.md \(#15784\)
Adds SECURITY.md as mentioned in #15722.")[#15784](https://github.com/facebook/react/pull/15784)[)](/facebook/react/commit/1b6e269751c28030429503a60590114e252fc86c "Create SECURITY.md \(#15784\)
Adds SECURITY.md as mentioned in #15722.")| Jan 10, 2020  
[babel.config.js](/facebook/react/blob/main/babel.config.js "babel.config.js")| [babel.config.js](/facebook/react/blob/main/babel.config.js "babel.config.js")| [Upgrade tests to use react/jsx-runtime (](/facebook/react/commit/952aa74f8e45ed35ac6bf1de10ad5ed5410deac6 "Upgrade tests to use react/jsx-runtime \(#28252\)
Instead of createElement.
We should have done this when we initially released jsx-runtime but
better late than never. The general principle is that our tests should
be written using the most up-to-date idioms that we recommend for users,
except when explicitly testing an edge case or legacy behavior, like for
backwards compatibility.
Most of the diff is related to tweaking test output and isn't very
interesting.
I did have to workaround an issue related to component stacks. The
component stack logic depends on shared state that lives in the React
module. The problem is that most of our tests reset the React module
state and re-require a fresh instance of React, React DOM, etc. However,
the JSX runtime is not re-required because it's injected by the compiler
as a static import. This means its copy of the shared state is no longer
the same as the one used by React, causing any warning logged by the JSX
runtime to not include a component stack. \(This same issue also breaks
string refs, but since we're removing those soon I'm not so concerned
about that.\) The solution I went with for now is to mock the JSX runtime
with a proxy that re-requires the module on every function invocation. I
don't love this but it will have to do for now. What we should really do
is migrate our tests away from manually resetting the module state and
use import syntax instead.")[#28252](https://github.com/facebook/react/pull/28252)[)](/facebook/react/commit/952aa74f8e45ed35ac6bf1de10ad5ed5410deac6 "Upgrade tests to use react/jsx-runtime \(#28252\)
Instead of createElement.
We should have done this when we initially released jsx-runtime but
better late than never. The general principle is that our tests should
be written using the most up-to-date idioms that we recommend for users,
except when explicitly testing an edge case or legacy behavior, like for
backwards compatibility.
Most of the diff is related to tweaking test output and isn't very
interesting.
I did have to workaround an issue related to component stacks. The
component stack logic depends on shared state that lives in the React
module. The problem is that most of our tests reset the React module
state and re-require a fresh instance of React, React DOM, etc. However,
the JSX runtime is not re-required because it's injected by the compiler
as a static import. This means its copy of the shared state is no longer
the same as the one used by React, causing any warning logged by the JSX
runtime to not include a component stack. \(This same issue also breaks
string refs, but since we're removing those soon I'm not so concerned
about that.\) The solution I went with for now is to mock the JSX runtime
with a proxy that re-requires the module on every function invocation. I
don't love this but it will have to do for now. What we should really do
is migrate our tests away from manually resetting the module state and
use import syntax instead.")| Feb 6, 2024  
[dangerfile.js](/facebook/react/blob/main/dangerfile.js "dangerfile.js")| [dangerfile.js](/facebook/react/blob/main/dangerfile.js "dangerfile.js")| [[ci] Cleanup more references to circleci](/facebook/react/commit/8fe510752f150a34be4409f474ca7de0746b7b18 "\[ci\] Cleanup more references to circleci
ghstack-source-id: 85a5f17b2b9dee35bb747ce2da13bffaed0fa34a
Pull Request resolved: https://github.com/facebook/react/pull/30509")| Jul 30, 2024  
[netlify.toml](/facebook/react/blob/main/netlify.toml "netlify.toml")| [netlify.toml](/facebook/react/blob/main/netlify.toml "netlify.toml")| [[UMD] Remove umd builds (](/facebook/react/commit/da6ba53b10d8240fc251ba14a3e5878604d3dc7d "\[UMD\] Remove umd builds \(#28735\)
In React 19 React will finally stop publishing UMD builds. This is
motivated primarily by the lack of use of UMD format and the added
complexity of maintaining build infra for these releases. Additionally
with ESM becoming more prevalent in browsers and services like esm.sh
which can host React as an ESM module there are other options for doing
script tag based react loading.
This PR removes all the UMD build configs and forks.
There are some fixtures that still have references to UMD builds however
many of them already do not work \(for instance they are using legacy
features like ReactDOM.render\) and rather than block the removal on
these fixtures being brought up to date we'll just move forward and fix
or removes fixtures as necessary in the future.")[#28735](https://github.com/facebook/react/pull/28735)[)](/facebook/react/commit/da6ba53b10d8240fc251ba14a3e5878604d3dc7d "\[UMD\] Remove umd builds \(#28735\)
In React 19 React will finally stop publishing UMD builds. This is
motivated primarily by the lack of use of UMD format and the added
complexity of maintaining build infra for these releases. Additionally
with ESM becoming more prevalent in browsers and services like esm.sh
which can host React as an ESM module there are other options for doing
script tag based react loading.
This PR removes all the UMD build configs and forks.
There are some fixtures that still have references to UMD builds however
many of them already do not work \(for instance they are using legacy
features like ReactDOM.render\) and rather than block the removal on
these fixtures being brought up to date we'll just move forward and fix
or removes fixtures as necessary in the future.")| Apr 17, 2024  
[package.json](/facebook/react/blob/main/package.json "package.json")| [package.json](/facebook/react/blob/main/package.json "package.json")| [Bump rollup from 3.20.0 to 3.29.5 (](/facebook/react/commit/db320ea4d910d360ccb83850ccdbc464a77fc1c5 "Bump rollup from 3.20.0 to 3.29.5 \(#31072\)
Bumps \[rollup\]\(https://github.com/rollup/rollup\) from 3.20.0 to 3.29.5.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a
href="https://github.com/rollup/rollup/releases">rollup's
releases</a>.</em></p>
<blockquote>
<h2>v3.29.4</h2>
<h2>3.29.4</h2>
<p><em>2023-09-28</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix static analysis when an exported function uses callbacks \(<a
href="https://redirect.github.com/rollup/rollup/issues/5158">#5158</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5158">#5158</a>:
Deoptimize all parameters when losing track of a function \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>v3.29.3</h2>
<h2>3.29.3</h2>
<p><em>2023-09-24</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix a bug where code was wrongly tree-shaken after mutating function
parameters \(<a
href="https://redirect.github.com/rollup/rollup/issues/5153">#5153</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5145">#5145</a>:
docs: improve the docs repl appearance in the light mode \(<a
href="https://github.com/TrickyPi"><code>@​TrickyPi</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5148">#5148</a>:
chore\(deps\): update dependency
<code>@​vue/eslint-config-typescript</code> to v12 \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5149">#5149</a>:
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5153">#5153</a>:
Fully deoptimize first level path when deoptimizing nested parameter
paths \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>v3.29.2</h2>
<h2>3.29.2</h2>
<p><em>2023-09-15</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Export <code>TreeshakingPreset</code> type \(<a
href="https://redirect.github.com/rollup/rollup/issues/5131">#5131</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5131">#5131</a>:
fix: exports <code>TreeshakingPreset</code> \(<a
href="https://github.com/moltar"><code>@​moltar</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5134">#5134</a>:
docs: steps to enable symlinks on windows \(<a
href="https://github.com/thebanjomatic"><code>@​thebanjomatic</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5137">#5137</a>:
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
</ul>
<h2>v3.29.1</h2>
<h2>3.29.1</h2>
<p><em>2023-09-10</em></p>
<h3>Bug Fixes</h3>
<!-- raw HTML omitted -->
</blockquote>
<p>... \(truncated\)</p>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href="https://github.com/rollup/rollup/blob/master/CHANGELOG.md">rollup's
changelog</a>.</em></p>
<blockquote>
<h1>rollup changelog</h1>
<h2>4.22.4</h2>
<p><em>2024-09-21</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix a vulnerability in generated code that affects IIFE, UMD and CJS
bundles when run in a browser context \(<a
href="https://redirect.github.com/rollup/rollup/issues/5671">#5671</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5670">#5670</a>:
refactor: Use object.prototype to check for reserved properties \(<a
href="https://github.com/YuHyeonWook"><code>@​YuHyeonWook</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5671">#5671</a>:
Fix DOM Clobbering CVE \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.3</h2>
<p><em>2024-09-21</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Ensure that mutations in modules without side effects are observed
while properly handling transitive dependencies \(<a
href="https://redirect.github.com/rollup/rollup/issues/5669">#5669</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5669">#5669</a>:
Ensure impure dependencies of pure modules are added \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.2</h2>
<p><em>2024-09-20</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Revert fix for side effect free modules until other issues are
investigated \(<a
href="https://redirect.github.com/rollup/rollup/issues/5667">#5667</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5667">#5667</a>:
Partially revert <a
href="https://redirect.github.com/rollup/rollup/issues/5658">#5658</a>
and re-apply <a
href="https://redirect.github.com/rollup/rollup/issues/5644">#5644</a>
\(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.1</h2>
<p><em>2024-09-20</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Revert <a
href="https://redirect.github.com/rollup/rollup/issues/5644">#5644</a>
&quot;stable chunk hashes&quot; while issues are being investigated</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5663">#5663</a>:
chore\(deps\): update dependency inquirer to v11 \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\], <a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<!-- raw HTML omitted -->
</blockquote>
<p>... \(truncated\)</p>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href="https://github.com/rollup/rollup/commit/dfd233d3a9feb18aa69b49b6c1da0248a4f1c6e3"><code>dfd233d</code></a>
3.29.5</li>
<li><a
href="https://github.com/rollup/rollup/commit/2ef77c00ec2635d42697cff2c0567ccc8db34fb4"><code>2ef77c0</code></a>
Fix DOM Clobbering CVE</li>
<li><a
href="https://github.com/rollup/rollup/commit/a6448b99f725d457e35821b73a865b5c4d4c6a61"><code>a6448b9</code></a>
3.29.4</li>
<li><a
href="https://github.com/rollup/rollup/commit/4e92d60fa90cead39481e3703d26e5d812f43bd1"><code>4e92d60</code></a>
Deoptimize all parameters when losing track of a function \(<a
href="https://redirect.github.com/rollup/rollup/issues/5158">#5158</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/801ffd1a9bebe550b6a0ce665bdca1ead06313de"><code>801ffd1</code></a>
3.29.3</li>
<li><a
href="https://github.com/rollup/rollup/commit/353e4628284b1ef4d8a8b47d895881e5ce6546f4"><code>353e462</code></a>
Fully deoptimize first level path when deoptimizing nested parameter
paths \(#...</li>
<li><a
href="https://github.com/rollup/rollup/commit/a1a89e77fbe06a23229486194970f0813593e9df"><code>a1a89e7</code></a>
chore\(deps\): update dependency
<code>@​vue/eslint-config-typescript</code> to v12 \(<a
href="https://redirect.github.com/rollup/rollup/issues/5148">#5148</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/cc14f7070af8c02ac2d477bda043f3203955291d"><code>cc14f70</code></a>
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://redirect.github.com/rollup/rollup/issues/5149">#5149</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/1e8355b2b68811da24e1d96dea32176b403dc377"><code>1e8355b</code></a>
docs: improve the docs repl appearance in the light mode \(<a
href="https://redirect.github.com/rollup/rollup/issues/5145">#5145</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/5950fc8a6bf6c9f8ef1c7ae05bb8c43d5c313212"><code>5950fc8</code></a>
Adapt branches in REPL workflow</li>
<li>Additional commits viewable in <a
href="https://github.com/rollup/rollup/compare/v3.20.0...v3.29.5">compare
view</a></li>
</ul>
</details>
<br />

\[!\[Dependabot compatibility
score\]\(https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=rollup&package-manager=npm_and_yarn&previous-version=3.20.0&new-version=3.29.5\)\]\(https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores\)
Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.
\[//\]: # \(dependabot-automerge-start\)
\[//\]: # \(dependabot-automerge-end\)
---
<details>
<summary>Dependabot commands and options</summary>
<br />
You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version \(unless you reopen
the PR or upgrade to it yourself\)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version \(unless you reopen
the PR or upgrade to it yourself\)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency \(unless you reopen the
PR or upgrade to it yourself\)
You can disable automated security fix PRs for this repo from the
\[Security Alerts
page\]\(https://github.com/facebook/react/network/alerts\).
</details>
Signed-off-by: dependabot\[bot\] <support@github.com>
Co-authored-by: dependabot\[bot\] <49699333+dependabot\[bot\]@users.noreply.github.com>")[#31072](https://github.com/facebook/react/pull/31072)[)](/facebook/react/commit/db320ea4d910d360ccb83850ccdbc464a77fc1c5 "Bump rollup from 3.20.0 to 3.29.5 \(#31072\)
Bumps \[rollup\]\(https://github.com/rollup/rollup\) from 3.20.0 to 3.29.5.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a
href="https://github.com/rollup/rollup/releases">rollup's
releases</a>.</em></p>
<blockquote>
<h2>v3.29.4</h2>
<h2>3.29.4</h2>
<p><em>2023-09-28</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix static analysis when an exported function uses callbacks \(<a
href="https://redirect.github.com/rollup/rollup/issues/5158">#5158</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5158">#5158</a>:
Deoptimize all parameters when losing track of a function \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>v3.29.3</h2>
<h2>3.29.3</h2>
<p><em>2023-09-24</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix a bug where code was wrongly tree-shaken after mutating function
parameters \(<a
href="https://redirect.github.com/rollup/rollup/issues/5153">#5153</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5145">#5145</a>:
docs: improve the docs repl appearance in the light mode \(<a
href="https://github.com/TrickyPi"><code>@​TrickyPi</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5148">#5148</a>:
chore\(deps\): update dependency
<code>@​vue/eslint-config-typescript</code> to v12 \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5149">#5149</a>:
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5153">#5153</a>:
Fully deoptimize first level path when deoptimizing nested parameter
paths \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>v3.29.2</h2>
<h2>3.29.2</h2>
<p><em>2023-09-15</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Export <code>TreeshakingPreset</code> type \(<a
href="https://redirect.github.com/rollup/rollup/issues/5131">#5131</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5131">#5131</a>:
fix: exports <code>TreeshakingPreset</code> \(<a
href="https://github.com/moltar"><code>@​moltar</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5134">#5134</a>:
docs: steps to enable symlinks on windows \(<a
href="https://github.com/thebanjomatic"><code>@​thebanjomatic</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5137">#5137</a>:
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
</ul>
<h2>v3.29.1</h2>
<h2>3.29.1</h2>
<p><em>2023-09-10</em></p>
<h3>Bug Fixes</h3>
<!-- raw HTML omitted -->
</blockquote>
<p>... \(truncated\)</p>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href="https://github.com/rollup/rollup/blob/master/CHANGELOG.md">rollup's
changelog</a>.</em></p>
<blockquote>
<h1>rollup changelog</h1>
<h2>4.22.4</h2>
<p><em>2024-09-21</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix a vulnerability in generated code that affects IIFE, UMD and CJS
bundles when run in a browser context \(<a
href="https://redirect.github.com/rollup/rollup/issues/5671">#5671</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5670">#5670</a>:
refactor: Use object.prototype to check for reserved properties \(<a
href="https://github.com/YuHyeonWook"><code>@​YuHyeonWook</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5671">#5671</a>:
Fix DOM Clobbering CVE \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.3</h2>
<p><em>2024-09-21</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Ensure that mutations in modules without side effects are observed
while properly handling transitive dependencies \(<a
href="https://redirect.github.com/rollup/rollup/issues/5669">#5669</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5669">#5669</a>:
Ensure impure dependencies of pure modules are added \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.2</h2>
<p><em>2024-09-20</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Revert fix for side effect free modules until other issues are
investigated \(<a
href="https://redirect.github.com/rollup/rollup/issues/5667">#5667</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5667">#5667</a>:
Partially revert <a
href="https://redirect.github.com/rollup/rollup/issues/5658">#5658</a>
and re-apply <a
href="https://redirect.github.com/rollup/rollup/issues/5644">#5644</a>
\(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.1</h2>
<p><em>2024-09-20</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Revert <a
href="https://redirect.github.com/rollup/rollup/issues/5644">#5644</a>
&quot;stable chunk hashes&quot; while issues are being investigated</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5663">#5663</a>:
chore\(deps\): update dependency inquirer to v11 \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\], <a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<!-- raw HTML omitted -->
</blockquote>
<p>... \(truncated\)</p>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href="https://github.com/rollup/rollup/commit/dfd233d3a9feb18aa69b49b6c1da0248a4f1c6e3"><code>dfd233d</code></a>
3.29.5</li>
<li><a
href="https://github.com/rollup/rollup/commit/2ef77c00ec2635d42697cff2c0567ccc8db34fb4"><code>2ef77c0</code></a>
Fix DOM Clobbering CVE</li>
<li><a
href="https://github.com/rollup/rollup/commit/a6448b99f725d457e35821b73a865b5c4d4c6a61"><code>a6448b9</code></a>
3.29.4</li>
<li><a
href="https://github.com/rollup/rollup/commit/4e92d60fa90cead39481e3703d26e5d812f43bd1"><code>4e92d60</code></a>
Deoptimize all parameters when losing track of a function \(<a
href="https://redirect.github.com/rollup/rollup/issues/5158">#5158</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/801ffd1a9bebe550b6a0ce665bdca1ead06313de"><code>801ffd1</code></a>
3.29.3</li>
<li><a
href="https://github.com/rollup/rollup/commit/353e4628284b1ef4d8a8b47d895881e5ce6546f4"><code>353e462</code></a>
Fully deoptimize first level path when deoptimizing nested parameter
paths \(#...</li>
<li><a
href="https://github.com/rollup/rollup/commit/a1a89e77fbe06a23229486194970f0813593e9df"><code>a1a89e7</code></a>
chore\(deps\): update dependency
<code>@​vue/eslint-config-typescript</code> to v12 \(<a
href="https://redirect.github.com/rollup/rollup/issues/5148">#5148</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/cc14f7070af8c02ac2d477bda043f3203955291d"><code>cc14f70</code></a>
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://redirect.github.com/rollup/rollup/issues/5149">#5149</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/1e8355b2b68811da24e1d96dea32176b403dc377"><code>1e8355b</code></a>
docs: improve the docs repl appearance in the light mode \(<a
href="https://redirect.github.com/rollup/rollup/issues/5145">#5145</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/5950fc8a6bf6c9f8ef1c7ae05bb8c43d5c313212"><code>5950fc8</code></a>
Adapt branches in REPL workflow</li>
<li>Additional commits viewable in <a
href="https://github.com/rollup/rollup/compare/v3.20.0...v3.29.5">compare
view</a></li>
</ul>
</details>
<br />

\[!\[Dependabot compatibility
score\]\(https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=rollup&package-manager=npm_and_yarn&previous-version=3.20.0&new-version=3.29.5\)\]\(https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores\)
Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.
\[//\]: # \(dependabot-automerge-start\)
\[//\]: # \(dependabot-automerge-end\)
---
<details>
<summary>Dependabot commands and options</summary>
<br />
You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version \(unless you reopen
the PR or upgrade to it yourself\)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version \(unless you reopen
the PR or upgrade to it yourself\)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency \(unless you reopen the
PR or upgrade to it yourself\)
You can disable automated security fix PRs for this repo from the
\[Security Alerts
page\]\(https://github.com/facebook/react/network/alerts\).
</details>
Signed-off-by: dependabot\[bot\] <support@github.com>
Co-authored-by: dependabot\[bot\] <49699333+dependabot\[bot\]@users.noreply.github.com>")| Sep 26, 2024  
[react.code-workspace](/facebook/react/blob/main/react.code-workspace "react.code-workspace")| [react.code-workspace](/facebook/react/blob/main/react.code-workspace "react.code-workspace")| [created a vscode workspace file for the repo (](/facebook/react/commit/dfd30974aba0d7740e084f70a8af1cd4c54bb273 "created a vscode workspace file for the repo \(#29830\)
### Summary
Similarly to what has been done on the `react-native` repo in
https://github.com/facebook/react-native/pull/43851, this PR adds a
`react.code-workspace` workspace file when using VSCode.
This disables the built-in TypeScript Language Service for `.js`, `.ts`,
and `.json` files, recommends extensions, enables `formatOnSave`,
excludes certain files in search, and configures Flow language support.
### Motivation
This is a DevX benefit for **React contributors** using open source VS
Code. Without this, it takes quite a long time to set up the environment
in vscode to work well.
For me the following two points took around an hour each to figure out,
but for others it may take even more \(screenshots can be found below\):
* Search with "files to include" was searching in ignored files
\(compiled/generated\)
* Configure language validation and prettier both in "packages" that use
flow and in the "compiler" folder that uses typescript.
### Recommended extensions
NOTE: The recommended extensions list is currently minimal — happy to
extend this now or in future, but let's aim to keep these conservative
at the moment.
* Flow — language support
* EditorConfig — formatting based on `.editorconfig`, all file types
* Prettier — formatting for JS* files
* ESLint — linter for JS* files
### Why `react.code-workspace`?
`.code-workspace` files have slight extra behaviours over a `.vscode/`
directory:
* Allows user to opt-in or skip.
* Allows double-click launching from file managers.
* Allows base folder \(and any subfolders in future\) to be opened with
local file tree scope \(useful in fbsource!\)
* \(Minor point\) Single config file over multiple files.
https://code.visualstudio.com/docs/editor/workspaces
### Test plan
Against a new un-configured copy of Visual Studio Code Insiders.
**Without workspace config**
❌ .js files raise errors by default \(built-in TypeScript language
service\)
❌ When using the Flow VS Code extension, the wrong version \(global\) of
Flow is used.
<img width="978" alt="Screenshot 2024-06-10 at 16 03 59"
src="https://github.com/facebook/react/assets/5188459/17e19ba4-bac2-48ea-9b35-6b4b6242bcc1">
❌ Searching in excluded files when the "include" field is specified
<img width="502" alt="Screenshot 2024-06-10 at 15 41 24"
src="https://github.com/facebook/react/assets/5188459/00248755-7905-41bc-b303-498ddba82108">
**With workspace config**
✅ Built-in TypeScript Language Service is disabled for .js files, but
still enabled for .ts\[x\] files
!\[Screen Recording 2024-06-13 at 12 21
24\]\(https://github.com/facebook/react/assets/5188459/6048218c-f316-44cd-8771-d2d0e848991d\)
✅ Flow language support is configured correctly against flow version in
package.json
<img width="993" alt="Screenshot 2024-06-10 at 16 03 44"
src="https://github.com/facebook/react/assets/5188459/b54e143c-a013-4e73-8995-3af7b5a03e36">
✅ Does not search in excluded files when the "include" field is
specified
<img width="555" alt="Screenshot 2024-06-10 at 15 39 18"
src="https://github.com/facebook/react/assets/5188459/dd3e5344-84fb-4b5d-8689-4c8bd28168e0">
✅ Workspace config is suggested when folder is opened in VS Code
!\[image\]\(https://github.com/facebook/react/assets/5188459/7434261f-1057-4954-9885-b057a10684ad\)
✅ Dialog is shown on workspace launch with recommended VS Code
extensions
<img width="580" alt="Screenshot 2024-06-10 at 15 40 52"
src="https://github.com/facebook/react/assets/5188459/c6406fb6-92a0-47f1-8497-4ffe899bb6a9">")[#29830](https://github.com/facebook/react/pull/29830)[)](/facebook/react/commit/dfd30974aba0d7740e084f70a8af1cd4c54bb273 "created a vscode workspace file for the repo \(#29830\)
### Summary
Similarly to what has been done on the `react-native` repo in
https://github.com/facebook/react-native/pull/43851, this PR adds a
`react.code-workspace` workspace file when using VSCode.
This disables the built-in TypeScript Language Service for `.js`, `.ts`,
and `.json` files, recommends extensions, enables `formatOnSave`,
excludes certain files in search, and configures Flow language support.
### Motivation
This is a DevX benefit for **React contributors** using open source VS
Code. Without this, it takes quite a long time to set up the environment
in vscode to work well.
For me the following two points took around an hour each to figure out,
but for others it may take even more \(screenshots can be found below\):
* Search with "files to include" was searching in ignored files
\(compiled/generated\)
* Configure language validation and prettier both in "packages" that use
flow and in the "compiler" folder that uses typescript.
### Recommended extensions
NOTE: The recommended extensions list is currently minimal — happy to
extend this now or in future, but let's aim to keep these conservative
at the moment.
* Flow — language support
* EditorConfig — formatting based on `.editorconfig`, all file types
* Prettier — formatting for JS* files
* ESLint — linter for JS* files
### Why `react.code-workspace`?
`.code-workspace` files have slight extra behaviours over a `.vscode/`
directory:
* Allows user to opt-in or skip.
* Allows double-click launching from file managers.
* Allows base folder \(and any subfolders in future\) to be opened with
local file tree scope \(useful in fbsource!\)
* \(Minor point\) Single config file over multiple files.
https://code.visualstudio.com/docs/editor/workspaces
### Test plan
Against a new un-configured copy of Visual Studio Code Insiders.
**Without workspace config**
❌ .js files raise errors by default \(built-in TypeScript language
service\)
❌ When using the Flow VS Code extension, the wrong version \(global\) of
Flow is used.
<img width="978" alt="Screenshot 2024-06-10 at 16 03 59"
src="https://github.com/facebook/react/assets/5188459/17e19ba4-bac2-48ea-9b35-6b4b6242bcc1">
❌ Searching in excluded files when the "include" field is specified
<img width="502" alt="Screenshot 2024-06-10 at 15 41 24"
src="https://github.com/facebook/react/assets/5188459/00248755-7905-41bc-b303-498ddba82108">
**With workspace config**
✅ Built-in TypeScript Language Service is disabled for .js files, but
still enabled for .ts\[x\] files
!\[Screen Recording 2024-06-13 at 12 21
24\]\(https://github.com/facebook/react/assets/5188459/6048218c-f316-44cd-8771-d2d0e848991d\)
✅ Flow language support is configured correctly against flow version in
package.json
<img width="993" alt="Screenshot 2024-06-10 at 16 03 44"
src="https://github.com/facebook/react/assets/5188459/b54e143c-a013-4e73-8995-3af7b5a03e36">
✅ Does not search in excluded files when the "include" field is
specified
<img width="555" alt="Screenshot 2024-06-10 at 15 39 18"
src="https://github.com/facebook/react/assets/5188459/dd3e5344-84fb-4b5d-8689-4c8bd28168e0">
✅ Workspace config is suggested when folder is opened in VS Code
!\[image\]\(https://github.com/facebook/react/assets/5188459/7434261f-1057-4954-9885-b057a10684ad\)
✅ Dialog is shown on workspace launch with recommended VS Code
extensions
<img width="580" alt="Screenshot 2024-06-10 at 15 40 52"
src="https://github.com/facebook/react/assets/5188459/c6406fb6-92a0-47f1-8497-4ffe899bb6a9">")| Jun 13, 2024  
[yarn.lock](/facebook/react/blob/main/yarn.lock "yarn.lock")| [yarn.lock](/facebook/react/blob/main/yarn.lock "yarn.lock")| [Bump next prerelease version numbers (](/facebook/react/commit/c86542b240375f95dfd14af5b8ec39e29881e74d "Bump next prerelease version numbers \(#31676\)
Updates the version numbers in the prerelease \(canary and experimental\)
channels.
---------
Co-authored-by: Jack Pope <jackpope1@gmail.com>")[#31676](https://github.com/facebook/react/pull/31676)[)](/facebook/react/commit/c86542b240375f95dfd14af5b8ec39e29881e74d "Bump next prerelease version numbers \(#31676\)
Updates the version numbers in the prerelease \(canary and experimental\)
channels.
---------
Co-authored-by: Jack Pope <jackpope1@gmail.com>")| Dec 13, 2024  
View all files  
  
## Repository files navigation

  * [README](#)
  * [Code of conduct](#)
  * [MIT license](#)
  * [Security](#)



# [React](https://react.dev/) · [](https://github.com/facebook/react/blob/main/LICENSE) [](https://www.npmjs.com/package/react) [![\(Runtime\) Build and Test](https://github.com/facebook/react/actions/workflows/runtime_build_and_test.yml/badge.svg)](https://github.com/facebook/react/actions/workflows/runtime_build_and_test.yml) [![\(Compiler\) TypeScript](https://github.com/facebook/react/actions/workflows/compiler_typescript.yml/badge.svg?branch=main)](https://github.com/facebook/react/actions/workflows/compiler_typescript.yml) [](https://legacy.reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

[](#react------)

React is a JavaScript library for building user interfaces.

  * **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
  * **Component-Based:** Build encapsulated components that manage their own state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
  * **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using [Node](https://nodejs.org/en) and power mobile apps using [React Native](https://reactnative.dev/).



[Learn how to use React in your project](https://react.dev/learn).

## Installation

[](#installation)

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need** :

  * Use [Quick Start](https://react.dev/learn) to get a taste of React.
  * [Add React to an Existing Project](https://react.dev/learn/add-react-to-an-existing-project) to use as little or as much React as you need.
  * [Create a New React App](https://react.dev/learn/start-a-new-react-project) if you're looking for a powerful JavaScript toolchain.



## Documentation

[](#documentation)

You can find the React documentation [on the website](https://react.dev/).

Check out the [Getting Started](https://react.dev/learn) page for a quick overview.

The documentation is divided into several sections:

  * [Quick Start](https://react.dev/learn)
  * [Tutorial](https://react.dev/learn/tutorial-tic-tac-toe)
  * [Thinking in React](https://react.dev/learn/thinking-in-react)
  * [Installation](https://react.dev/learn/installation)
  * [Describing the UI](https://react.dev/learn/describing-the-ui)
  * [Adding Interactivity](https://react.dev/learn/adding-interactivity)
  * [Managing State](https://react.dev/learn/managing-state)
  * [Advanced Guides](https://react.dev/learn/escape-hatches)
  * [API Reference](https://react.dev/reference/react)
  * [Where to Get Support](https://react.dev/community)
  * [Contributing Guide](https://legacy.reactjs.org/docs/how-to-contribute.html)



You can improve it by sending pull requests to [this repository](https://github.com/reactjs/react.dev).

## Examples

[](#examples)

We have several examples [on the website](https://react.dev/). Here is the first one to get you started:

```
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
 return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```


This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://react.dev/learn#writing-markup-with-jsx). JSX is not required to use React, but it makes code more readable, and writing it feels like writing HTML.

## Contributing

[](#contributing)

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

[](#code-of-conduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://legacy.reactjs.org/docs/how-to-contribute.html)

[](#contributing-guide)

Read our [contributing guide](https://legacy.reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### [Good First Issues](https://github.com/facebook/react/labels/good%20first%20issue)

[](#good-first-issues)

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

[](#license)

React is [MIT licensed](/facebook/react/blob/main/LICENSE).

## About

The library for web and native user interfaces. 

[react.dev](https://react.dev "https://react.dev")

### Topics

[ react ](/topics/react "Topic: react") [ javascript ](/topics/javascript "Topic: javascript") [ library ](/topics/library "Topic: library") [ ui ](/topics/ui "Topic: ui") [ frontend ](/topics/frontend "Topic: frontend") [ declarative ](/topics/declarative "Topic: declarative")

### Resources

[ Readme ](#readme-ov-file)

### License

[ MIT license ](#MIT-1-ov-file)

### Code of conduct

[ Code of conduct ](#coc-ov-file)

### Security policy

[ Security policy ](#security-ov-file)

[ Activity](/facebook/react/activity)

[ Custom properties](/facebook/react/custom-properties)

### Stars

[ **231k** stars](/facebook/react/stargazers)

### Watchers

[ **6.6k** watching](/facebook/react/watchers)

### Forks

[ **47.2k** forks](/facebook/react/forks)

[ Report repository ](/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact&report=facebook+%28user%29)

##  [Releases 103](/facebook/react/releases)

[ 19.0.0 (December 5, 2024) Latest  Dec 5, 2024 ](/facebook/react/releases/tag/v19.0.0)

[+ 102 releases](/facebook/react/releases)

##  [Used by 25.8m](/facebook/react/network/dependents)

[ + 25,798,629  ](/facebook/react/network/dependents)

##  [Contributors 1,676](/facebook/react/graphs/contributors)

  * [ ](https://github.com/zpao)
  * [ ](https://github.com/gaearon)
  * [ ](https://github.com/sebmarkbage)
  * [ ](https://github.com/acdlite)
  * [ ](https://github.com/sophiebits)
  * [ ](https://github.com/josephsavona)
  * [ ](https://github.com/poteto)
  * [ ](https://github.com/jimfb)
  * [ ](https://github.com/trueadm)
  * [ ](https://github.com/bvaughn)
  * [ ](https://github.com/gsathya)
  * [ ](https://github.com/petehunt)
  * [ ](https://github.com/mofeiZ)
  * [ ](https://github.com/kassens)



[+ 1,662 contributors](/facebook/react/graphs/contributors)

## Languages

  * [ JavaScript 63.4% ](/facebook/react/search?l=javascript)
  * [ TypeScript 22.5% ](/facebook/react/search?l=typescript)
  * [ Rust 10.7% ](/facebook/react/search?l=rust)
  * [ HTML 1.4% ](/facebook/react/search?l=html)
  * [ CSS 0.9% ](/facebook/react/search?l=css)
  * [ C++ 0.6% ](/facebook/react/search?l=c%2B%2B)
  * Other 0.5%



## Footer

[ ](https://github.com "GitHub") © 2024 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You can’t perform that action at this time. 
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

# React

The library for web and native user interfaces

[Learn React](/learn)[API Reference](/reference/react)

## Create user interfaces from components

React lets you build user interfaces out of individual pieces called components. Create your own React components like `Thumbnail`, `LikeButton`, and `Video`. Then combine them into entire screens, pages, and apps.

### Video.js

```


function Video({ video }) {

 return (

  <div>

   <Thumbnail video={video} />

   <a href={video.url}>

    <h3>{video.title}</h3>

    <p>{video.description}</p>

   </a>

   <LikeButton video={video} />

  </div>

 );

}


```


My videoVideo description

Whether you work on your own or with thousands of other developers, using React feels the same. It is designed to let you seamlessly combine components written by independent people, teams, and organizations.

## Write components with code and markup

React components are JavaScript functions. Want to show some content conditionally? Use an `if` statement. Displaying a list? Try array `map()`. Learning React is learning programming.

### VideoList.js

```


function VideoList({ videos, emptyHeading }) {

 const count = videos.length;

 let heading = emptyHeading;

 if (count > 0) {

  const noun = count > 1 ? 'Videos' : 'Video';

  heading = count + ' ' + noun;

 }

 return (

  <section>

   <h2>{heading}</h2>

   {videos.map(video =>

    <Video key={video.id} video={video} />

   )}

  </section>

 );

}


```


## 3 Videos

First videoVideo description

Second videoVideo description

Third videoVideo description

This markup syntax is called JSX. It is a JavaScript syntax extension popularized by React. Putting JSX markup close to related rendering logic makes React components easy to create, maintain, and delete.

## Add interactivity wherever you need it

React components receive data and return what should appear on the screen. You can pass them new data in response to an interaction, like when the user types into an input. React will then update the screen to match the new data.

### SearchableVideoList.js

```


import { useState } from 'react';

function SearchableVideoList({ videos }) {

 const [searchText, setSearchText] = useState('');

 const foundVideos = filterVideos(videos, searchText);

 return (

  <>

   <SearchInput

    value={searchText}

    onChange={newText => setSearchText(newText)} />

   <VideoList

    videos={foundVideos}

    emptyHeading={`No matches for “${searchText}”`} />

  </>

 );

}


```


example.com/videos.html

# React Videos

A brief history of React

Search

## 5 Videos

[](https://www.youtube.com/watch?v=8pDqJVdNa44)### [React: The DocumentaryThe origin story of React](https://www.youtube.com/watch?v=8pDqJVdNa44)

[](https://www.youtube.com/watch?v=x7cQ3mrcKaY)### [Rethinking Best PracticesPete Hunt (2013)](https://www.youtube.com/watch?v=x7cQ3mrcKaY)

[](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)### [Introducing React NativeTom Occhino (2015)](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)

[](https://www.youtube.com/watch?v=V-QO-KO90iQ)### [Introducing React HooksSophie Alpert and Dan Abramov (2018)](https://www.youtube.com/watch?v=V-QO-KO90iQ)

[](https://www.youtube.com/watch?v=TQQPAU21ZUw)### [Introducing Server ComponentsDan Abramov and Lauren Tan (2020)](https://www.youtube.com/watch?v=TQQPAU21ZUw)

You don’t have to build your whole page in React. Add React to your existing HTML page, and render interactive React components anywhere on it.

[Add React to your page](/learn/add-react-to-an-existing-project)

## Go full-stack with a framework

React is a library. It lets you put components together, but it doesn’t prescribe how to do routing and data fetching. To build an entire app with React, we recommend a full-stack React framework like [Next.js](https://nextjs.org) or [Remix](https://remix.run).

### confs/[slug].js

```


import { db } from './database.js';

import { Suspense } from 'react';

async function ConferencePage({ slug }) {

 const conf = await db.Confs.find({ slug });

 return (

  <ConferenceLayout conf={conf}>

   <Suspense fallback={<TalksLoading />}>

    <Talks confId={conf.id} />

   </Suspense>

  </ConferenceLayout>

 );

}

async function Talks({ confId }) {

 const talks = await db.Talks.findAll({ confId });

 const videos = talks.map(talk => talk.video);

 return <SearchableVideoList videos={videos} />;

}


```


example.com/confs/react-conf-2021

React Conf 2021React Conf 2019

Search

## 19 Videos

[React Conf](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)### [React 18 KeynoteThe React Team](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)

[React Conf](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)### [React 18 for App DevelopersShruti Kapoor](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)

[React Conf](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)### [Streaming Server Rendering with SuspenseShaundai Person](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)

[React Conf](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)### [The First React Working GroupAakansha Doshi](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)

[React Conf](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)### [React Developer ToolingBrian Vaughn](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)

[React Conf](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)### [React without memoXuan Huang (黄玄)](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)

[React Conf](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)### [React Docs KeynoteRachel Nabors](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)

[React Conf](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)### [Things I Learnt from the New React DocsDebbie O'Brien](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)

[React Conf](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)### [Learning in the BrowserSarah Rainsberger](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)

[React Conf](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)### [The ROI of Designing with ReactLinton Ye](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)

[React Conf](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)### [Interactive Playgrounds with ReactDelba de Oliveira](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)

[React Conf](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)### [Re-introducing RelayRobert Balicki](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)

[React Conf](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)### [React Native DesktopEric Rozell and Steven Moyes](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)

[React Conf](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)### [On-device Machine Learning for React NativeRoman Rädle](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)

[React Conf](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)### [React 18 for External Store LibrariesDaishi Kato](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)

[React Conf](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)### [Building Accessible Components with React 18Diego Haz](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)

[React Conf](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)### [Accessible Japanese Form Components with ReactTafu Nakazaki](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)

[React Conf](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)### [UI Tools for ArtistsLyle Troxell](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)

[React Conf](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)### [Hydrogen + React 18Helen Lin](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)

React is also an architecture. Frameworks that implement it let you fetch data in asynchronous components that run on the server or even during the build. Read data from a file or a database, and pass it down to your interactive components.

[Get started with a framework](/learn/start-a-new-react-project)

## Use the best from every platform

People love web and native apps for different reasons. React lets you build both web apps and native apps using the same skills. It leans upon each platform’s unique strengths to let your interfaces feel just right on every platform.

example.com

#### Stay true to the web

People expect web app pages to load fast. On the server, React lets you start streaming HTML while you’re still fetching data, progressively filling in the remaining content before any JavaScript code loads. On the client, React can use standard web APIs to keep your UI responsive even in the middle of rendering.

9:40 AM

#### Go truly native

People expect native apps to look and feel like their platform. [React Native](https://reactnative.dev) and [Expo](https://github.com/expo/expo) let you build apps in React for Android, iOS, and more. They look and feel native because their UIs _are_ truly native. It’s not a web view—your React components render real Android and iOS views provided by the platform.

With React, you can be a web _and_ a native developer. Your team can ship to many platforms without sacrificing the user experience. Your organization can bridge the platform silos, and form teams that own entire features end-to-end.

[Build for native platforms](https://reactnative.dev/)

## Upgrade when the future is ready

React approaches changes with care. Every React commit is tested on business-critical surfaces with over a billion users. Over 100,000 React components at Meta help validate every migration strategy.

The React team is always researching how to improve React. Some research takes years to pay off. React has a high bar for taking a research idea into production. Only proven approaches become a part of React.

[Read more React news](/blog)

Latest React News

## [React 19December 05, 2024](/blog/2024/12/05/react-19)

## [React Compiler Beta Release and RoadmapOctober 21, 2024](/blog/2024/10/21/react-compiler-beta-release)

## [React Conf 2024 RecapMay 22, 2024](/blog/2024/05/22/react-conf-2024-recap)

## [React 19 RCApril 25, 2024](/blog/2024/04/25/react-19)

[Read more React news](/blog)

## Join a community of millions

You’re not alone. Two million developers from all over the world visit the React docs every month. React is something that people and teams can agree on.

This is why React is more than a library, an architecture, or even an ecosystem. React is a community. It’s a place where you can ask for help, find opportunities, and meet new friends. You will meet both developers and designers, beginners and experts, researchers and artists, teachers and students. Our backgrounds may be very different, but React lets us all create user interfaces together.

## Welcome to the React community

[Get Started](/learn)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

# React

The library for web and native user interfaces

[Learn React](/learn)[API Reference](/reference/react)

## Create user interfaces from components

React lets you build user interfaces out of individual pieces called components. Create your own React components like `Thumbnail`, `LikeButton`, and `Video`. Then combine them into entire screens, pages, and apps.

### Video.js

```


function Video({ video }) {

 return (

  <div>

   <Thumbnail video={video} />

   <a href={video.url}>

    <h3>{video.title}</h3>

    <p>{video.description}</p>

   </a>

   <LikeButton video={video} />

  </div>

 );

}


```


My videoVideo description

Whether you work on your own or with thousands of other developers, using React feels the same. It is designed to let you seamlessly combine components written by independent people, teams, and organizations.

## Write components with code and markup

React components are JavaScript functions. Want to show some content conditionally? Use an `if` statement. Displaying a list? Try array `map()`. Learning React is learning programming.

### VideoList.js

```


function VideoList({ videos, emptyHeading }) {

 const count = videos.length;

 let heading = emptyHeading;

 if (count > 0) {

  const noun = count > 1 ? 'Videos' : 'Video';

  heading = count + ' ' + noun;

 }

 return (

  <section>

   <h2>{heading}</h2>

   {videos.map(video =>

    <Video key={video.id} video={video} />

   )}

  </section>

 );

}


```


## 3 Videos

First videoVideo description

Second videoVideo description

Third videoVideo description

This markup syntax is called JSX. It is a JavaScript syntax extension popularized by React. Putting JSX markup close to related rendering logic makes React components easy to create, maintain, and delete.

## Add interactivity wherever you need it

React components receive data and return what should appear on the screen. You can pass them new data in response to an interaction, like when the user types into an input. React will then update the screen to match the new data.

### SearchableVideoList.js

```


import { useState } from 'react';

function SearchableVideoList({ videos }) {

 const [searchText, setSearchText] = useState('');

 const foundVideos = filterVideos(videos, searchText);

 return (

  <>

   <SearchInput

    value={searchText}

    onChange={newText => setSearchText(newText)} />

   <VideoList

    videos={foundVideos}

    emptyHeading={`No matches for “${searchText}”`} />

  </>

 );

}


```


example.com/videos.html

# React Videos

A brief history of React

Search

## 5 Videos

[](https://www.youtube.com/watch?v=8pDqJVdNa44)### [React: The DocumentaryThe origin story of React](https://www.youtube.com/watch?v=8pDqJVdNa44)

[](https://www.youtube.com/watch?v=x7cQ3mrcKaY)### [Rethinking Best PracticesPete Hunt (2013)](https://www.youtube.com/watch?v=x7cQ3mrcKaY)

[](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)### [Introducing React NativeTom Occhino (2015)](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)

[](https://www.youtube.com/watch?v=V-QO-KO90iQ)### [Introducing React HooksSophie Alpert and Dan Abramov (2018)](https://www.youtube.com/watch?v=V-QO-KO90iQ)

[](https://www.youtube.com/watch?v=TQQPAU21ZUw)### [Introducing Server ComponentsDan Abramov and Lauren Tan (2020)](https://www.youtube.com/watch?v=TQQPAU21ZUw)

You don’t have to build your whole page in React. Add React to your existing HTML page, and render interactive React components anywhere on it.

[Add React to your page](/learn/add-react-to-an-existing-project)

## Go full-stack with a framework

React is a library. It lets you put components together, but it doesn’t prescribe how to do routing and data fetching. To build an entire app with React, we recommend a full-stack React framework like [Next.js](https://nextjs.org) or [Remix](https://remix.run).

### confs/[slug].js

```


import { db } from './database.js';

import { Suspense } from 'react';

async function ConferencePage({ slug }) {

 const conf = await db.Confs.find({ slug });

 return (

  <ConferenceLayout conf={conf}>

   <Suspense fallback={<TalksLoading />}>

    <Talks confId={conf.id} />

   </Suspense>

  </ConferenceLayout>

 );

}

async function Talks({ confId }) {

 const talks = await db.Talks.findAll({ confId });

 const videos = talks.map(talk => talk.video);

 return <SearchableVideoList videos={videos} />;

}


```


example.com/confs/react-conf-2021

React Conf 2021React Conf 2019

Search

## 19 Videos

[React Conf](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)### [React 18 KeynoteThe React Team](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)

[React Conf](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)### [React 18 for App DevelopersShruti Kapoor](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)

[React Conf](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)### [Streaming Server Rendering with SuspenseShaundai Person](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)

[React Conf](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)### [The First React Working GroupAakansha Doshi](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)

[React Conf](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)### [React Developer ToolingBrian Vaughn](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)

[React Conf](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)### [React without memoXuan Huang (黄玄)](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)

[React Conf](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)### [React Docs KeynoteRachel Nabors](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)

[React Conf](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)### [Things I Learnt from the New React DocsDebbie O'Brien](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)

[React Conf](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)### [Learning in the BrowserSarah Rainsberger](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)

[React Conf](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)### [The ROI of Designing with ReactLinton Ye](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)

[React Conf](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)### [Interactive Playgrounds with ReactDelba de Oliveira](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)

[React Conf](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)### [Re-introducing RelayRobert Balicki](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)

[React Conf](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)### [React Native DesktopEric Rozell and Steven Moyes](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)

[React Conf](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)### [On-device Machine Learning for React NativeRoman Rädle](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)

[React Conf](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)### [React 18 for External Store LibrariesDaishi Kato](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)

[React Conf](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)### [Building Accessible Components with React 18Diego Haz](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)

[React Conf](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)### [Accessible Japanese Form Components with ReactTafu Nakazaki](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)

[React Conf](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)### [UI Tools for ArtistsLyle Troxell](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)

[React Conf](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)### [Hydrogen + React 18Helen Lin](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)

React is also an architecture. Frameworks that implement it let you fetch data in asynchronous components that run on the server or even during the build. Read data from a file or a database, and pass it down to your interactive components.

[Get started with a framework](/learn/start-a-new-react-project)

## Use the best from every platform

People love web and native apps for different reasons. React lets you build both web apps and native apps using the same skills. It leans upon each platform’s unique strengths to let your interfaces feel just right on every platform.

example.com

#### Stay true to the web

People expect web app pages to load fast. On the server, React lets you start streaming HTML while you’re still fetching data, progressively filling in the remaining content before any JavaScript code loads. On the client, React can use standard web APIs to keep your UI responsive even in the middle of rendering.

9:40 AM

#### Go truly native

People expect native apps to look and feel like their platform. [React Native](https://reactnative.dev) and [Expo](https://github.com/expo/expo) let you build apps in React for Android, iOS, and more. They look and feel native because their UIs _are_ truly native. It’s not a web view—your React components render real Android and iOS views provided by the platform.

With React, you can be a web _and_ a native developer. Your team can ship to many platforms without sacrificing the user experience. Your organization can bridge the platform silos, and form teams that own entire features end-to-end.

[Build for native platforms](https://reactnative.dev/)

## Upgrade when the future is ready

React approaches changes with care. Every React commit is tested on business-critical surfaces with over a billion users. Over 100,000 React components at Meta help validate every migration strategy.

The React team is always researching how to improve React. Some research takes years to pay off. React has a high bar for taking a research idea into production. Only proven approaches become a part of React.

[Read more React news](/blog)

Latest React News

## [React 19December 05, 2024](/blog/2024/12/05/react-19)

## [React Compiler Beta Release and RoadmapOctober 21, 2024](/blog/2024/10/21/react-compiler-beta-release)

## [React Conf 2024 RecapMay 22, 2024](/blog/2024/05/22/react-conf-2024-recap)

## [React 19 RCApril 25, 2024](/blog/2024/04/25/react-19)

[Read more React news](/blog)

## Join a community of millions

You’re not alone. Two million developers from all over the world visit the React docs every month. React is something that people and teams can agree on.

This is why React is more than a library, an architecture, or even an ecosystem. React is a community. It’s a place where you can ask for help, find opportunities, and meet new friends. You will meet both developers and designers, beginners and experts, researchers and artists, teachers and students. Our backgrounds may be very different, but React lets us all create user interfaces together.

## Welcome to the React community

[Get Started](/learn)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")
  * [Installation ](/learn/installation "Installation")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")
  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")
  * [Managing State ](/learn/managing-state "Managing State")
  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

### REACT API

  * [Hooks ](/reference/react "Hooks")
  * [Components ](/reference/react/components "Components")
  * [APIs ](/reference/react/apis "APIs")
  * [Legacy APIs ](/reference/react/legacy "Legacy APIs")

### REACT DOM API

  * [Components ](/reference/react-dom/components "Components")
  * [APIs ](/reference/react-dom "APIs")
  * [Client APIs ](/reference/react-dom/client "Client APIs")
  * [Server APIs ](/reference/react-dom/server "Server APIs")

### GET INVOLVED

  * [React Community ](/community "React Community")

### STAY INFORMED

  * [React Blog ](/blog "React Blog")



Is this page useful?

[React Docs](/)

# React Versions[](#undefined "Link for this heading")

The React docs at [react.dev](https://react.dev) provide documentation for the latest version of React.

We aim to keep the docs updated within major versions, and do not publish versions for each minor or patch version. When a new major is released, we archive the docs for the previous version as `x.react.dev`. See our [versioning policy](/community/versioning-policy) for more info.

You can find an archive of previous major versions below.

## Latest version: 19.0 [](#latest-version "Link for Latest version: 19.0 ")

  * [react.dev](https://react.dev)



## Previous versions [](#previous-versions "Link for Previous versions ")

  * [18.react.dev](https://18.react.dev)
  * [17.react.dev](https://17.react.dev)
  * [16.react.dev](https://16.react.dev)
  * [15.react.dev](https://15.react.dev)



### Note

#### Legacy Docs [](#legacy-docs "Link for Legacy Docs ")

In 2023, we [launched our new docs](/blog/2023/03/16/introducing-react-dev) for React 18 as [react.dev](https://react.dev). The legacy React 18 docs are available at [legacy.reactjs.org](https://legacy.reactjs.org). Versions 17 and below are hosted on legacy sites.

For versions older than React 15, see [15.react.dev](https://15.react.dev).

## Changelog [](#changelog "Link for Changelog ")

### React 19 [](#react-19 "Link for React 19 ")

**Blog Posts**

  * [React v19](/blog/2024/12/05/react-19)
  * [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide)
  * [React Compiler Beta Release](/blog/2024/10/21/react-compiler-beta-release)



**Talks**

  * [React 19 Keynote](https://www.youtube.com/watch?v=lyEKhv8-3n0)
  * [A Roadmap to React 19](https://www.youtube.com/watch?v=R0B2HsSM78s)
  * [What’s new in React 19](https://www.youtube.com/watch?v=AJOGzVygGcY)
  * [React for Two Computers](https://www.youtube.com/watch?v=ozI4V_29fj4)
  * [React Compiler Deep Dive](https://www.youtube.com/watch?v=uA_PVyZP7AI)
  * [React Compiler Case Studies](https://www.youtube.com/watch?v=lvhPq5chokM)
  * [React 19 Deep Dive: Coordinating HTML](https://www.youtube.com/watch?v=IBBN-s77YSI)



**Releases**

  * [v19.0.0 (December, 2024)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1900-december-5-2024)



### React 18 [](#react-18 "Link for React 18 ")

**Blog Posts**

  * [React v18.0](/blog/2022/03/29/react-v18)
  * [How to Upgrade to React 18](/blog/2022/03/08/react-18-upgrade-guide)
  * [The Plan for React 18](/blog/2021/06/08/the-plan-for-react-18)



**Talks**

  * [React 18 Keynote](https://www.youtube.com/watch?v=FZ0cG47msEk)
  * [React 18 for app developers](https://www.youtube.com/watch?v=ytudH8je5ko)
  * [Streaming Server Rendering with Suspense](https://www.youtube.com/watch?v=pj5N-Khihgc)
  * [React without memo](https://www.youtube.com/watch?v=lGEMwh32soc)
  * [React Docs Keynote](https://www.youtube.com/watch?v=mneDaMYOKP8)
  * [React Developer Tooling](https://www.youtube.com/watch?v=oxDfrke8rZg)
  * [The first React Working Group](https://www.youtube.com/watch?v=qn7gRClrC9U)
  * [React 18 for External Store Libraries](https://www.youtube.com/watch?v=oPfSC5bQPR8)



**Releases**

  * [v18.3.1 (April, 2024)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1831-april-26-2024)
  * [v18.3.0 (April, 2024)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1830-april-25-2024)
  * [v18.2.0 (June, 2022)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1820-june-14-2022)
  * [v18.1.0 (April, 2022)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1810-april-26-2022)
  * [v18.0.0 (March 2022)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1800-march-29-2022)



### React 17 [](#react-17 "Link for React 17 ")

**Blog Posts**

  * [React v17.0](https://legacy.reactjs.org/blog/2020/10/20/react-v17.html)
  * [Introducing the New JSX Transform](https://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html)
  * [React v17.0 Release Candidate: No New Features](https://legacy.reactjs.org/blog/2020/08/10/react-v17-rc.html)



**Releases**

  * [v17.0.2 (March 2021)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1702-march-22-2021)
  * [v17.0.1 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1701-october-22-2020)
  * [v17.0.0 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1700-october-20-2020)



### React 16 [](#react-16 "Link for React 16 ")

**Blog Posts**

  * [React v16.0](https://legacy.reactjs.org/blog/2017/09/26/react-v16.0.html)
  * [DOM Attributes in React 16](https://legacy.reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html)
  * [Error Handling in React 16](https://legacy.reactjs.org/blog/2017/07/26/error-handling-in-react-16.html)
  * [React v16.2.0: Improved Support for Fragments](https://legacy.reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html)
  * [React v16.4.0: Pointer Events](https://legacy.reactjs.org/blog/2018/05/23/react-v-16-4.html)
  * [React v16.4.2: Server-side vulnerability fix](https://legacy.reactjs.org/blog/2018/08/01/react-v-16-4-2.html)
  * [React v16.6.0: lazy, memo and contextType](https://legacy.reactjs.org/blog/2018/10/23/react-v-16-6.html)
  * [React v16.7: No, This Is Not the One With Hooks](https://legacy.reactjs.org/blog/2018/12/19/react-v-16-7.html)
  * [React v16.8: The One With Hooks](https://legacy.reactjs.org/blog/2019/02/06/react-v16.8.0.html)
  * [React v16.9.0 and the Roadmap Update](https://legacy.reactjs.org/blog/2019/08/08/react-v16.9.0.html)
  * [React v16.13.0](https://legacy.reactjs.org/blog/2020/02/26/react-v16.13.0.html)



**Releases**

  * [v16.14.0 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16140-october-14-2020)
  * [v16.13.1 (March 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16131-march-19-2020)
  * [v16.13.0 (February 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16130-february-26-2020)
  * [v16.12.0 (November 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16120-november-14-2019)
  * [v16.11.0 (October 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16110-october-22-2019)
  * [v16.10.2 (October 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16102-october-3-2019)
  * [v16.10.1 (September 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16101-september-28-2019)
  * [v16.10.0 (September 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16100-september-27-2019)
  * [v16.9.0 (August 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1690-august-8-2019)
  * [v16.8.6 (March 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1686-march-27-2019)
  * [v16.8.5 (March 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1685-march-22-2019)
  * [v16.8.4 (March 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1684-march-5-2019)
  * [v16.8.3 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1683-february-21-2019)
  * [v16.8.2 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1682-february-14-2019)
  * [v16.8.1 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1681-february-6-2019)
  * [v16.8.0 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1680-february-6-2019)
  * [v16.7.0 (December 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1670-december-19-2018)
  * [v16.6.3 (November 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1663-november-12-2018)
  * [v16.6.2 (November 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1662-november-12-2018)
  * [v16.6.1 (November 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1661-november-6-2018)
  * [v16.6.0 (October 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1660-october-23-2018)
  * [v16.5.2 (September 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1652-september-18-2018)
  * [v16.5.1 (September 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1651-september-13-2018)
  * [v16.5.0 (September 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1650-september-5-2018)
  * [v16.4.2 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1642-august-1-2018)
  * [v16.4.1 (June 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1641-june-13-2018)
  * [v16.4.0 (May 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1640-may-23-2018)
  * [v16.3.3 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1633-august-1-2018)
  * [v16.3.2 (April 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1632-april-16-2018)
  * [v16.3.1 (April 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1631-april-3-2018)
  * [v16.3.0 (March 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1630-march-29-2018)
  * [v16.2.1 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1621-august-1-2018)
  * [v16.2.0 (November 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1620-november-28-2017)
  * [v16.1.2 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1612-august-1-2018)
  * [v16.1.1 (November 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1611-november-13-2017)
  * [v16.1.0 (November 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1610-november-9-2017)
  * [v16.0.1 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1601-august-1-2018)
  * [v16.0 (September 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1600-september-26-2017)



### React 15 [](#react-15 "Link for React 15 ")

**Blog Posts**

  * [React v15.0](https://legacy.reactjs.org/blog/2016/04/07/react-v15.html)
  * [React v15.0 Release Candidate 2](https://legacy.reactjs.org/blog/2016/03/16/react-v15-rc2.html)
  * [React v15.0 Release Candidate](https://legacy.reactjs.org/blog/2016/03/07/react-v15-rc1.html)
  * [New Versioning Scheme](https://legacy.reactjs.org/blog/2016/02/19/new-versioning-scheme.html)
  * [Discontinuing IE 8 Support in React DOM](https://legacy.reactjs.org/blog/2016/01/12/discontinuing-ie8-support.html)
  * [Introducing React’s Error Code System](https://legacy.reactjs.org/blog/2016/07/11/introducing-reacts-error-code-system.html)
  * [React v15.0.1](https://legacy.reactjs.org/blog/2016/04/08/react-v15.0.1.html)
  * [React v15.4.0](https://legacy.reactjs.org/blog/2016/11/16/react-v15.4.0.html)
  * [React v15.5.0](https://legacy.reactjs.org/blog/2017/04/07/react-v15.5.0.html)
  * [React v15.6.0](https://legacy.reactjs.org/blog/2017/06/13/react-v15.6.0.html)
  * [React v15.6.2](https://legacy.reactjs.org/blog/2017/09/25/react-v15.6.2.html)



**Releases**

  * [v15.7.0 (October 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1570-october-14-2020)
  * [v15.6.2 (September 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1562-september-25-2017)
  * [v15.6.1 (June 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1561-june-14-2017)
  * [v15.6.0 (June 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1560-june-13-2017)
  * [v15.5.4 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1554-april-11-2017)
  * [v15.5.3 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1553-april-7-2017)
  * [v15.5.2 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1552-april-7-2017)
  * [v15.5.1 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1551-april-7-2017)
  * [v15.5.0 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1550-april-7-2017)
  * [v15.4.2 (January 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1542-january-6-2017)
  * [v15.4.1 (November 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1541-november-22-2016)
  * [v15.4.0 (November 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1540-november-16-2016)
  * [v15.3.2 (September 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1532-september-19-2016)
  * [v15.3.1 (August 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1531-august-19-2016)
  * [v15.3.0 (July 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1530-july-29-2016)
  * [v15.2.1 (July 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1521-july-8-2016)
  * [v15.2.0 (July 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1520-july-1-2016)
  * [v15.1.0 (May 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1510-may-20-2016)
  * [v15.0.2 (April 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1502-april-29-2016)
  * [v15.0.1 (April 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1501-april-8-2016)
  * [v15.0.0 (April 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1500-april-7-2016)



### React 0.14 [](#react-14 "Link for React 0.14 ")

**Blog Posts**

  * [React v0.14](https://legacy.reactjs.org/blog/2015/10/07/react-v0.14.html)
  * [React v0.14 Release Candidate](https://legacy.reactjs.org/blog/2015/09/10/react-v0.14-rc1.html)
  * [React v0.14 Beta 1](https://legacy.reactjs.org/blog/2015/07/03/react-v0.14-beta-1.html)
  * [New React Developer Tools](https://legacy.reactjs.org/blog/2015/09/02/new-react-developer-tools.html)
  * [New React Devtools Beta](https://legacy.reactjs.org/blog/2015/08/03/new-react-devtools-beta.html)
  * [React v0.14.1](https://legacy.reactjs.org/blog/2015/10/28/react-v0.14.1.html)
  * [React v0.14.2](https://legacy.reactjs.org/blog/2015/11/02/react-v0.14.2.html)
  * [React v0.14.3](https://legacy.reactjs.org/blog/2015/11/18/react-v0.14.3.html)
  * [React v0.14.4](https://legacy.reactjs.org/blog/2015/12/29/react-v0.14.4.html)
  * [React v0.14.8](https://legacy.reactjs.org/blog/2016/03/29/react-v0.14.8.html)



**Releases**

  * [v0.14.10 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#01410-october-14-2020)
  * [v0.14.8 (March 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0148-march-29-2016)
  * [v0.14.7 (January 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0147-january-28-2016)
  * [v0.14.6 (January 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0146-january-6-2016)
  * [v0.14.5 (December 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0145-december-29-2015)
  * [v0.14.4 (December 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0144-december-29-2015)
  * [v0.14.3 (November 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0143-november-18-2015)
  * [v0.14.2 (November 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0142-november-2-2015)
  * [v0.14.1 (October 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0141-october-28-2015)
  * [v0.14.0 (October 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0140-october-7-2015)



### React 0.13 [](#react-13 "Link for React 0.13 ")

**Blog Posts**

  * [React Native v0.4](https://legacy.reactjs.org/blog/2015/04/17/react-native-v0.4.html)
  * [React v0.13](https://legacy.reactjs.org/blog/2015/03/10/react-v0.13.html)
  * [React v0.13 RC2](https://legacy.reactjs.org/blog/2015/03/03/react-v0.13-rc2.html)
  * [React v0.13 RC](https://legacy.reactjs.org/blog/2015/02/24/react-v0.13-rc1.html)
  * [React v0.13.0 Beta 1](https://legacy.reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html)
  * [Streamlining React Elements](https://legacy.reactjs.org/blog/2015/02/24/streamlining-react-elements.html)
  * [Introducing Relay and GraphQL](https://legacy.reactjs.org/blog/2015/02/20/introducing-relay-and-graphql.html)
  * [Introducing React Native](https://legacy.reactjs.org/blog/2015/03/26/introducing-react-native.html)
  * [React v0.13.1](https://legacy.reactjs.org/blog/2015/03/16/react-v0.13.1.html)
  * [React v0.13.2](https://legacy.reactjs.org/blog/2015/04/18/react-v0.13.2.html)
  * [React v0.13.3](https://legacy.reactjs.org/blog/2015/05/08/react-v0.13.3.html)



**Releases**

  * [v0.13.3 (May 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0133-may-8-2015)
  * [v0.13.2 (April 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0132-april-18-2015)
  * [v0.13.1 (March 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0131-march-16-2015)
  * [v0.13.0 (March 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0130-march-10-2015)



### React 0.12 [](#react-12 "Link for React 0.12 ")

**Blog Posts**

  * [React v0.12](https://legacy.reactjs.org/blog/2014/10/28/react-v0.12.html)
  * [React v0.12 RC](https://legacy.reactjs.org/blog/2014/10/16/react-v0.12-rc1.html)
  * [Introducing React Elements](https://legacy.reactjs.org/blog/2014/10/14/introducing-react-elements.html)
  * [React v0.12.2](https://legacy.reactjs.org/blog/2014/12/18/react-v0.12.2.html)



**Releases**

  * [v0.12.2 (December 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0122-december-18-2014)
  * [v0.12.1 (November 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0121-november-18-2014)
  * [v0.12.0 (October 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0120-october-28-2014)



### React 0.11 [](#react-11 "Link for React 0.11 ")

**Blog Posts**

  * [React v0.11](https://legacy.reactjs.org/blog/2014/07/17/react-v0.11.html)
  * [React v0.11 RC](https://legacy.reactjs.org/blog/2014/07/13/react-v0.11-rc1.html)
  * [One Year of Open-Source React](https://legacy.reactjs.org/blog/2014/05/29/one-year-of-open-source-react.html)
  * [The Road to 1.0](https://legacy.reactjs.org/blog/2014/03/28/the-road-to-1.0.html)
  * [React v0.11.1](https://legacy.reactjs.org/blog/2014/07/25/react-v0.11.1.html)
  * [React v0.11.2](https://legacy.reactjs.org/blog/2014/09/16/react-v0.11.2.html)
  * [Introducing the JSX Specificaion](https://legacy.reactjs.org/blog/2014/09/03/introducing-the-jsx-specification.html)



**Releases**

  * [v0.11.2 (September 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0112-september-16-2014)
  * [v0.11.1 (July 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0111-july-24-2014)
  * [v0.11.0 (July 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0110-july-17-2014)



### React 0.10 and below [](#react-10-and-below "Link for React 0.10 and below ")

**Blog Posts**

  * [React v0.10](https://legacy.reactjs.org/blog/2014/03/21/react-v0.10.html)
  * [React v0.10 RC](https://legacy.reactjs.org/blog/2014/03/19/react-v0.10-rc1.html)
  * [React v0.9](https://legacy.reactjs.org/blog/2014/02/20/react-v0.9.html)
  * [React v0.9 RC](https://legacy.reactjs.org/blog/2014/02/16/react-v0.9-rc1.html)
  * [React Chrome Developer Tools](https://legacy.reactjs.org/blog/2014/01/02/react-chrome-developer-tools.html)
  * [React v0.8](https://legacy.reactjs.org/blog/2013/12/19/react-v0.8.0.html)
  * [React v0.5.2, v0.4.2](https://legacy.reactjs.org/blog/2013/12/18/react-v0.5.2-v0.4.2.html)
  * [React v0.5.1](https://legacy.reactjs.org/blog/2013/10/29/react-v0-5-1.html)
  * [React v0.5](https://legacy.reactjs.org/blog/2013/10/16/react-v0.5.0.html)
  * [React v0.4.1](https://legacy.reactjs.org/blog/2013/07/26/react-v0-4-1.html)
  * [React v0.4.0](https://legacy.reactjs.org/blog/2013/07/17/react-v0-4-0.html)
  * [New in React v0.4: Prop Validation and Default Values](https://legacy.reactjs.org/blog/2013/07/11/react-v0-4-prop-validation-and-default-values.html)
  * [New in React v0.4: Autobind by Default](https://legacy.reactjs.org/blog/2013/07/02/react-v0-4-autobind-by-default.html)
  * [React v0.3.3](https://legacy.reactjs.org/blog/2013/07/02/react-v0-4-autobind-by-default.html)



**Releases**

  * [v0.10.0 (March 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0100-march-21-2014)
  * [v0.9.0 (February 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#090-february-20-2014)
  * [v0.8.0 (December 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#080-december-19-2013)
  * [v0.5.2 (December 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#052-042-december-18-2013)
  * [v0.5.1 (October 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#051-october-29-2013)
  * [v0.5.0 (October 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#050-october-16-2013)
  * [v0.4.1 (July 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#041-july-26-2013)
  * [v0.4.0 (July 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#040-july-17-2013)
  * [v0.3.3 (June 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#033-june-20-2013)
  * [v0.3.2 (May 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#032-may-31-2013)
  * [v0.3.1 (May 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#031-may-30-2013)
  * [v0.3.0 (May 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#031-may-30-2013)



### Initial Commit [](#initial-commit "Link for Initial Commit ")

React was open-sourced on May 29, 2013. The initial commit is: `75897c`[: Initial public release](https://github.com/facebook/react/commit/75897c2dcd1dd3a6ca46284dd37e13d22b4b16b4)

See the first blog post: [Why did we build React?](https://legacy.reactjs.org/blog/2013/06/05/why-react.html)

React was open sourced at Facebook Seattle in 2013:

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Latest version: 19.0 ](#latest-version)
  * [Previous versions ](#previous-versions)
  * [Changelog ](#changelog)
  * [React 19 ](#react-19)
  * [React 18 ](#react-18)
  * [React 17 ](#react-17)
  * [React 16 ](#react-16)
  * [React 15 ](#react-15)
  * [React 0.14 ](#react-14)
  * [React 0.13 ](#react-13)
  * [React 0.12 ](#react-12)
  * [React 0.11 ](#react-11)
  * [React 0.10 and below ](#react-10-and-below)
  * [Initial Commit ](#initial-commit)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Quick Start[](#undefined "Link for this heading")

Welcome to the React documentation! This page will give you an introduction to 80% of the React concepts that you will use on a daily basis.

### You will learn

  * How to create and nest components
  * How to add markup and styles
  * How to display data
  * How to render conditions and lists
  * How to respond to events and update the screen
  * How to share data between components



## Creating and nesting components [](#components "Link for Creating and nesting components ")

React apps are made out of _components_. A component is a piece of the UI (user interface) that has its own logic and appearance. A component can be as small as a button, or as large as an entire page.

React components are JavaScript functions that return markup:

```


function MyButton() {

 return (

  <button>I'm a button</button>

 );

}


```


Now that you’ve declared `MyButton`, you can nest it into another component:

```


export default function MyApp() {

 return (

  <div>

   <h1>Welcome to my app</h1>

   <MyButton />

  </div>

 );

}


```


Notice that `<MyButton />` starts with a capital letter. That’s how you know it’s a React component. React component names must always start with a capital letter, while HTML tags must be lowercase.

Have a look at the result:

App.js

App.js

Download ResetFork

99

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

function MyButton() {

return (

<button>

I'm a button

</button>

);

}

export default function MyApp() {

return (

<div>

<h1>Welcome to my app</h1>

<MyButton />

</div>

);

}

[Open on CodeSandboxOpen Sandbox](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

Show more

The `export default` keywords specify the main component in the file. If you’re not familiar with some piece of JavaScript syntax, [MDN](https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export) and [javascript.info](https://javascript.info/import-export) have great references.

## Writing markup with JSX [](#writing-markup-with-jsx "Link for Writing markup with JSX ")

The markup syntax you’ve seen above is called _JSX_. It is optional, but most React projects use JSX for its convenience. All of the [tools we recommend for local development](/learn/installation) support JSX out of the box.

JSX is stricter than HTML. You have to close tags like `<br />`. Your component also can’t return multiple JSX tags. You have to wrap them into a shared parent, like a `<div>...</div>` or an empty `<>...</>` wrapper:

```


function AboutPage() {

 return (

  <>

   <h1>About</h1>

   <p>Hello there.<br />How do you do?</p>

  </>

 );

}


```


If you have a lot of HTML to port to JSX, you can use an [online converter.](https://transform.tools/html-to-jsx)

## Adding styles [](#adding-styles "Link for Adding styles ")

In React, you specify a CSS class with `className`. It works the same way as the HTML `class`[](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class) attribute:

```


<img className="avatar" />


```


Then you write the CSS rules for it in a separate CSS file:

```


/* In your CSS */

.avatar {

 border-radius: 50%;

}


```


React does not prescribe how you add CSS files. In the simplest case, you’ll add a `<link>`[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link) tag to your HTML. If you use a build tool or a framework, consult its documentation to learn how to add a CSS file to your project.

## Displaying data [](#displaying-data "Link for Displaying data ")

JSX lets you put markup into JavaScript. Curly braces let you “escape back” into JavaScript so that you can embed some variable from your code and display it to the user. For example, this will display `user.name`:

```


return (

 <h1>

  {user.name}

 </h1>

);


```


You can also “escape into JavaScript” from JSX attributes, but you have to use curly braces _instead of_ quotes. For example, `className="avatar"` passes the `"avatar"` string as the CSS class, but `src={user.imageUrl}` reads the JavaScript `user.imageUrl` variable value, and then passes that value as the `src` attribute:

```


return (

 <img

  className="avatar"

  src={user.imageUrl}

 />

);


```


You can put more complex expressions inside the JSX curly braces too, for example, [string concatenation](https://javascript.info/operators#string-concatenation-with-binary):

App.js

App.js

Download ResetFork

```
const user = {
 name: 'Hedy Lamarr',
 imageUrl: 'https://i.imgur.com/yXOvdOSs.jpg',
 imageSize: 90,
};
export default function Profile() {
 return (
  <>
   <h1>{user.name}</h1>
   <img
    className="avatar"
    src={user.imageUrl}
    alt={'Photo of ' + user.name}
    style={{
     width: user.imageSize,
     height: user.imageSize
    }}
   />
  </>
 );
}

```


Show more

In the above example, `style={{}}` is not a special syntax, but a regular `{}` object inside the `style={ }` JSX curly braces. You can use the `style` attribute when your styles depend on JavaScript variables.

## Conditional rendering [](#conditional-rendering "Link for Conditional rendering ")

In React, there is no special syntax for writing conditions. Instead, you’ll use the same techniques as you use when writing regular JavaScript code. For example, you can use an `if`[](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) statement to conditionally include JSX:

```


let content;

if (isLoggedIn) {

 content = <AdminPanel />;

} else {

 content = <LoginForm />;

}

return (

 <div>

  {content}

 </div>

);


```


If you prefer more compact code, you can use the [conditional `?` operator.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator) Unlike `if`, it works inside JSX:

```


<div>

 {isLoggedIn ? (

  <AdminPanel />

 ) : (

  <LoginForm />

 )}

</div>


```


When you don’t need the `else` branch, you can also use a shorter [logical `&&` syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#short-circuit_evaluation):

```


<div>

 {isLoggedIn && <AdminPanel />}

</div>


```


All of these approaches also work for conditionally specifying attributes. If you’re unfamiliar with some of this JavaScript syntax, you can start by always using `if...else`.

## Rendering lists [](#rendering-lists "Link for Rendering lists ")

You will rely on JavaScript features like `for`[ loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) and the [array `map()` function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) to render lists of components.

For example, let’s say you have an array of products:

```


const products = [

 { title: 'Cabbage', id: 1 },

 { title: 'Garlic', id: 2 },

 { title: 'Apple', id: 3 },

];


```


Inside your component, use the `map()` function to transform an array of products into an array of `<li>` items:

```


const listItems = products.map(product =>

 <li key={product.id}>

  {product.title}

 </li>

);

return (

 <ul>{listItems}</ul>

);


```


Notice how `<li>` has a `key` attribute. For each item in a list, you should pass a string or a number that uniquely identifies that item among its siblings. Usually, a key should be coming from your data, such as a database ID. React uses your keys to know what happened if you later insert, delete, or reorder the items.

App.js

App.js

Download ResetFork

```
const products = [
 { title: 'Cabbage', isFruit: false, id: 1 },
 { title: 'Garlic', isFruit: false, id: 2 },
 { title: 'Apple', isFruit: true, id: 3 },
];
export default function ShoppingList() {
 const listItems = products.map(product =>
  <li
   key={product.id}
   style={{
    color: product.isFruit ? 'magenta' : 'darkgreen'
   }}
  >
   {product.title}
  </li>
 );
 return (
  <ul>{listItems}</ul>
 );
}

```


Show more

## Responding to events [](#responding-to-events "Link for Responding to events ")

You can respond to events by declaring _event handler_ functions inside your components:

```


function MyButton() {

 function handleClick() {

  alert('You clicked me!');

 }

 return (

  <button onClick={handleClick}>

   Click me

  </button>

 );

}


```


Notice how `onClick={handleClick}` has no parentheses at the end! Do not _call_ the event handler function: you only need to _pass it down_. React will call your event handler when the user clicks the button.

## Updating the screen [](#updating-the-screen "Link for Updating the screen ")

Often, you’ll want your component to “remember” some information and display it. For example, maybe you want to count the number of times a button is clicked. To do this, add _state_ to your component.

First, import `useState`[](/reference/react/useState) from React:

```


import { useState } from 'react';


```


Now you can declare a _state variable_ inside your component:

```


function MyButton() {

 const [count, setCount] = useState(0);

 // ...


```


You’ll get two things from `useState`: the current state (`count`), and the function that lets you update it (`setCount`). You can give them any names, but the convention is to write `[something, setSomething]`.

The first time the button is displayed, `count` will be `0` because you passed `0` to `useState()`. When you want to change state, call `setCount()` and pass the new value to it. Clicking this button will increment the counter:

```


function MyButton() {

 const [count, setCount] = useState(0);

 function handleClick() {

  setCount(count + 1);

 }

 return (

  <button onClick={handleClick}>

   Clicked {count} times

  </button>

 );

}


```


React will call your component function again. This time, `count` will be `1`. Then it will be `2`. And so on.

If you render the same component multiple times, each will get its own state. Click each button separately:

App.js

App.js

Download ResetFork

```
import { useState } from 'react';
export default function MyApp() {
 return (
  <div>
   <h1>Counters that update separately</h1>
   <MyButton />
   <MyButton />
  </div>
 );
}
function MyButton() {
 const [count, setCount] = useState(0);
 function handleClick() {
  setCount(count + 1);
 }
 return (
  <button onClick={handleClick}>
   Clicked {count} times
  </button>
 );
}

```


Show more

Notice how each button “remembers” its own `count` state and doesn’t affect other buttons.

## Using Hooks [](#using-hooks "Link for Using Hooks ")

Functions starting with `use` are called _Hooks_. `useState` is a built-in Hook provided by React. You can find other built-in Hooks in the [API reference.](/reference/react) You can also write your own Hooks by combining the existing ones.

Hooks are more restrictive than other functions. You can only call Hooks _at the top_ of your components (or other Hooks). If you want to use `useState` in a condition or a loop, extract a new component and put it there.

## Sharing data between components [](#sharing-data-between-components "Link for Sharing data between components ")

In the previous example, each `MyButton` had its own independent `count`, and when each button was clicked, only the `count` for the button clicked changed:

Initially, each `MyButton`’s `count` state is `0`

The first `MyButton` updates its `count` to `1`

However, often you’ll need components to _share data and always update together_.

To make both `MyButton` components display the same `count` and update together, you need to move the state from the individual buttons “upwards” to the closest component containing all of them.

In this example, it is `MyApp`:

Initially, `MyApp`’s `count` state is `0` and is passed down to both children

On click, `MyApp` updates its `count` state to `1` and passes it down to both children

Now when you click either button, the `count` in `MyApp` will change, which will change both of the counts in `MyButton`. Here’s how you can express this in code.

First, _move the state up_ from `MyButton` into `MyApp`:

```


export default function MyApp() {

 const [count, setCount] = useState(0);

 function handleClick() {

  setCount(count + 1);

 }

 return (

  <div>

   <h1>Counters that update separately</h1>

   <MyButton />

   <MyButton />

  </div>

 );

}

function MyButton() {

 // ... we're moving code from here ...

}


```


Then, _pass the state down_ from `MyApp` to each `MyButton`, together with the shared click handler. You can pass information to `MyButton` using the JSX curly braces, just like you previously did with built-in tags like `<img>`:

```


export default function MyApp() {

 const [count, setCount] = useState(0);

 function handleClick() {

  setCount(count + 1);

 }

 return (

  <div>

   <h1>Counters that update together</h1>

   <MyButton count={count} onClick={handleClick} />

   <MyButton count={count} onClick={handleClick} />

  </div>

 );

}


```


The information you pass down like this is called _props_. Now the `MyApp` component contains the `count` state and the `handleClick` event handler, and _passes both of them down as props_ to each of the buttons.

Finally, change `MyButton` to _read_ the props you have passed from its parent component:

```


function MyButton({ count, onClick }) {

 return (

  <button onClick={onClick}>

   Clicked {count} times

  </button>

 );

}


```


When you click the button, the `onClick` handler fires. Each button’s `onClick` prop was set to the `handleClick` function inside `MyApp`, so the code inside of it runs. That code calls `setCount(count + 1)`, incrementing the `count` state variable. The new `count` value is passed as a prop to each button, so they all show the new value. This is called “lifting state up”. By moving state up, you’ve shared it between components.

App.js

App.js

Download ResetFork

```
import { useState } from 'react';
export default function MyApp() {
 const [count, setCount] = useState(0);
 function handleClick() {
  setCount(count + 1);
 }
 return (
  <div>
   <h1>Counters that update together</h1>
   <MyButton count={count} onClick={handleClick} />
   <MyButton count={count} onClick={handleClick} />
  </div>
 );
}
function MyButton({ count, onClick }) {
 return (
  <button onClick={onClick}>
   Clicked {count} times
  </button>
 );
}

```


Show more

## Next Steps [](#next-steps "Link for Next Steps ")

By now, you know the basics of how to write React code!

Check out the [Tutorial](/learn/tutorial-tic-tac-toe) to put them into practice and build your first mini-app with React.

[NextTutorial: Tic-Tac-Toe](/learn/tutorial-tic-tac-toe)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Creating and nesting components ](#components)
  * [Writing markup with JSX ](#writing-markup-with-jsx)
  * [Adding styles ](#adding-styles)
  * [Displaying data ](#displaying-data)
  * [Conditional rendering ](#conditional-rendering)
  * [Rendering lists ](#rendering-lists)
  * [Responding to events ](#responding-to-events)
  * [Updating the screen ](#updating-the-screen)
  * [Using Hooks ](#using-hooks)
  * [Sharing data between components ](#sharing-data-between-components)
  * [Next Steps ](#next-steps)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### react@19

  * [Overview ](/reference/react "Overview")
  * [Hooks ](/reference/react/hooks "Hooks")

    * [useActionState ](/reference/react/useActionState "useActionState")
    * [useCallback ](/reference/react/useCallback "useCallback")
    * [useContext ](/reference/react/useContext "useContext")
    * [useDebugValue ](/reference/react/useDebugValue "useDebugValue")
    * [useDeferredValue ](/reference/react/useDeferredValue "useDeferredValue")
    * [useEffect ](/reference/react/useEffect "useEffect")
    * [useId ](/reference/react/useId "useId")
    * [useImperativeHandle ](/reference/react/useImperativeHandle "useImperativeHandle")
    * [useInsertionEffect ](/reference/react/useInsertionEffect "useInsertionEffect")
    * [useLayoutEffect ](/reference/react/useLayoutEffect "useLayoutEffect")
    * [useMemo ](/reference/react/useMemo "useMemo")
    * [useOptimistic ](/reference/react/useOptimistic "useOptimistic")
    * [useReducer ](/reference/react/useReducer "useReducer")
    * [useRef ](/reference/react/useRef "useRef")
    * [useState ](/reference/react/useState "useState")
    * [useSyncExternalStore ](/reference/react/useSyncExternalStore "useSyncExternalStore")
    * [useTransition ](/reference/react/useTransition "useTransition")

  * [Components ](/reference/react/components "Components")

    * [<Fragment> (<>) ](/reference/react/Fragment "<Fragment> \(<>\)")
    * [<Profiler> ](/reference/react/Profiler "<Profiler>")
    * [<StrictMode> ](/reference/react/StrictMode "<StrictMode>")
    * [<Suspense> ](/reference/react/Suspense "<Suspense>")

  * [APIs ](/reference/react/apis "APIs")

    * [act ](/reference/react/act "act")
    * [cache ](/reference/react/cache "cache")
    * [createContext ](/reference/react/createContext "createContext")
    * [lazy ](/reference/react/lazy "lazy")
    * [memo ](/reference/react/memo "memo")
    * [startTransition ](/reference/react/startTransition "startTransition")
    * [use ](/reference/react/use "use")
    * [experimental_taintObjectReference  - This feature is available in the latest Canary](/reference/react/experimental_taintObjectReference "experimental_taintObjectReference")
    * [experimental_taintUniqueValue  - This feature is available in the latest Canary](/reference/react/experimental_taintUniqueValue "experimental_taintUniqueValue")

### react-dom@19

  * [Hooks ](/reference/react-dom/hooks "Hooks")

    * [useFormStatus ](/reference/react-dom/hooks/useFormStatus "useFormStatus")

  * [Components ](/reference/react-dom/components "Components")

    * [Common (e.g. <div>) ](/reference/react-dom/components/common "Common \(e.g. <div>\)")
    * [<form> ](/reference/react-dom/components/form "<form>")
    * [<input> ](/reference/react-dom/components/input "<input>")
    * [<option> ](/reference/react-dom/components/option "<option>")
    * [<progress> ](/reference/react-dom/components/progress "<progress>")
    * [<select> ](/reference/react-dom/components/select "<select>")
    * [<textarea> ](/reference/react-dom/components/textarea "<textarea>")
    * [<link> ](/reference/react-dom/components/link "<link>")
    * [<meta> ](/reference/react-dom/components/meta "<meta>")
    * [<script> ](/reference/react-dom/components/script "<script>")
    * [<style> ](/reference/react-dom/components/style "<style>")
    * [<title> ](/reference/react-dom/components/title "<title>")

  * [APIs ](/reference/react-dom "APIs")

    * [createPortal ](/reference/react-dom/createPortal "createPortal")
    * [flushSync ](/reference/react-dom/flushSync "flushSync")
    * [preconnect ](/reference/react-dom/preconnect "preconnect")
    * [prefetchDNS ](/reference/react-dom/prefetchDNS "prefetchDNS")
    * [preinit ](/reference/react-dom/preinit "preinit")
    * [preinitModule ](/reference/react-dom/preinitModule "preinitModule")
    * [preload ](/reference/react-dom/preload "preload")
    * [preloadModule ](/reference/react-dom/preloadModule "preloadModule")

  * [Client APIs ](/reference/react-dom/client "Client APIs")

    * [createRoot ](/reference/react-dom/client/createRoot "createRoot")
    * [hydrateRoot ](/reference/react-dom/client/hydrateRoot "hydrateRoot")

  * [Server APIs ](/reference/react-dom/server "Server APIs")

    * [renderToPipeableStream ](/reference/react-dom/server/renderToPipeableStream "renderToPipeableStream")
    * [renderToReadableStream ](/reference/react-dom/server/renderToReadableStream "renderToReadableStream")
    * [renderToStaticMarkup ](/reference/react-dom/server/renderToStaticMarkup "renderToStaticMarkup")
    * [renderToString ](/reference/react-dom/server/renderToString "renderToString")

  * [Static APIs ](/reference/react-dom/static "Static APIs")

    * [prerender ](/reference/react-dom/static/prerender "prerender")
    * [prerenderToNodeStream ](/reference/react-dom/static/prerenderToNodeStream "prerenderToNodeStream")

### Rules of React

  * [Overview ](/reference/rules "Overview")

    * [Components and Hooks must be pure ](/reference/rules/components-and-hooks-must-be-pure "Components and Hooks must be pure")
    * [React calls Components and Hooks ](/reference/rules/react-calls-components-and-hooks "React calls Components and Hooks")
    * [Rules of Hooks ](/reference/rules/rules-of-hooks "Rules of Hooks")

### React Server Components

  * [Server Components ](/reference/rsc/server-components "Server Components")
  * [Server Functions ](/reference/rsc/server-functions "Server Functions")
  * [Directives ](/reference/rsc/directives "Directives")

    * ['use client' ](/reference/rsc/use-client "'use client'")
    * ['use server' ](/reference/rsc/use-server "'use server'")

### Legacy APIs

  * [Legacy React APIs ](/reference/react/legacy "Legacy React APIs")

    * [Children ](/reference/react/Children "Children")
    * [cloneElement ](/reference/react/cloneElement "cloneElement")
    * [Component ](/reference/react/Component "Component")
    * [createElement ](/reference/react/createElement "createElement")
    * [createRef ](/reference/react/createRef "createRef")
    * [forwardRef ](/reference/react/forwardRef "forwardRef")
    * [isValidElement ](/reference/react/isValidElement "isValidElement")
    * [PureComponent ](/reference/react/PureComponent "PureComponent")




Is this page useful?

[API Reference](/reference/react)

# React Reference Overview[](#undefined "Link for this heading")

This section provides detailed reference documentation for working with React. For an introduction to React, please visit the [Learn](/learn) section.

The React reference documentation is broken down into functional subsections:

## React [](#react "Link for React ")

Programmatic React features:

  * [Hooks](/reference/react/hooks) - Use different React features from your components.
  * [Components](/reference/react/components) - Built-in components that you can use in your JSX.
  * [APIs](/reference/react/apis) - APIs that are useful for defining components.
  * [Directives](/reference/rsc/directives) - Provide instructions to bundlers compatible with React Server Components.



## React DOM [](#react-dom "Link for React DOM ")

React-dom contains features that are only supported for web applications (which run in the browser DOM environment). This section is broken into the following:

  * [Hooks](/reference/react-dom/hooks) - Hooks for web applications which run in the browser DOM environment.
  * [Components](/reference/react-dom/components) - React supports all of the browser built-in HTML and SVG components.
  * [APIs](/reference/react-dom) - The `react-dom` package contains methods supported only in web applications.
  * [Client APIs](/reference/react-dom/client) - The `react-dom/client` APIs let you render React components on the client (in the browser).
  * [Server APIs](/reference/react-dom/server) - The `react-dom/server` APIs let you render React components to HTML on the server.



## Rules of React [](#rules-of-react "Link for Rules of React ")

React has idioms — or rules — for how to express patterns in a way that is easy to understand and yields high-quality applications:

  * [Components and Hooks must be pure](/reference/rules/components-and-hooks-must-be-pure) – Purity makes your code easier to understand, debug, and allows React to automatically optimize your components and hooks correctly.
  * [React calls Components and Hooks](/reference/rules/react-calls-components-and-hooks) – React is responsible for rendering components and hooks when necessary to optimize the user experience.
  * [Rules of Hooks](/reference/rules/rules-of-hooks) – Hooks are defined using JavaScript functions, but they represent a special type of reusable UI logic with restrictions on where they can be called.



## Legacy APIs [](#legacy-apis "Link for Legacy APIs ")

  * [Legacy APIs](/reference/react/legacy) - Exported from the `react` package, but not recommended for use in newly written code.



[NextHooks](/reference/react/hooks)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [React ](#react)
  * [React DOM ](#react-dom)
  * [Rules of React ](#rules-of-react)
  * [Legacy APIs ](#legacy-apis)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# React Community[](#undefined "Link for this heading")

React has a community of millions of developers. On this page we’ve listed some React-related communities that you can be a part of; see the other pages in this section for additional online and in-person learning materials.

## Code of Conduct [](#code-of-conduct "Link for Code of Conduct ")

Before participating in React’s communities, [please read our Code of Conduct.](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md) We have adopted the [Contributor Covenant](https://www.contributor-covenant.org/) and we expect that all community members adhere to the guidelines within.

## Stack Overflow [](#stack-overflow "Link for Stack Overflow ")

Stack Overflow is a popular forum to ask code-level questions or if you’re stuck with a specific error. Read through the [existing questions](https://stackoverflow.com/questions/tagged/reactjs) tagged with **reactjs** or [ask your own](https://stackoverflow.com/questions/ask?tags=reactjs)!

## Popular Discussion Forums [](#popular-discussion-forums "Link for Popular Discussion Forums ")

There are many online forums which are a great place for discussion about best practices and application architecture as well as the future of React. If you have an answerable code-level question, Stack Overflow is usually a better fit.

Each community consists of many thousands of React users.

  * [DEV’s React community](https://dev.to/t/react)
  * [Hashnode’s React community](https://hashnode.com/n/reactjs)
  * [Reactiflux online chat](https://discord.gg/reactiflux)



## News [](#news "Link for News ")

For the latest news about React, and the [official React blog](/blog) on this website.

[NextReact Conferences](/community/conferences)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Code of Conduct ](#code-of-conduct)
  * [Stack Overflow ](#stack-overflow)
  * [Popular Discussion Forums ](#popular-discussion-forums)
  * [News ](#news)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React Blog[](#undefined "Link for this heading")

This blog is the official source for the updates from the React team. Anything important, including release notes or deprecation notices, will be posted here first. You can also follow the account on Twitter, but you won’t miss anything essential if you only read this blog.

## [React v19 December 5, 2024In the React 19 Upgrade Guide, we shared step-by-step instructions for upgrading your app to React 19. In this post, we’ll give an overview of the new features in React 19, and how you can adopt them …Read more](/blog/2024/12/05/react-19)## [React Compiler Beta ReleaseOctober 21, 2024We announced an experimental release of React Compiler at React Conf 2024. We’ve made a lot of progress since then, and in this post we want to share what’s next for React Compiler …Read more](/blog/2024/10/21/react-compiler-beta-release)## [React Conf 2024 RecapMay 22, 2024Last week we hosted React Conf 2024, a two-day conference in Henderson, Nevada where 700+ attendees gathered in-person to discuss the latest in UI engineering. This was our first in-person conference since 2019, and we were thrilled to be able to bring the community together again …Read more](/blog/2024/05/22/react-conf-2024-recap)## [React 19 Upgrade GuideApril 25, 2024The improvements added to React 19 require some breaking changes, but we’ve worked to make the upgrade as smooth as possible, and we don’t expect the changes to impact most apps. In this post, we will guide you through the steps for upgrading libraries to React 19 …Read more](/blog/2024/04/25/react-19-upgrade-guide)## [React Labs: What We've Been Working On – February 2024February 15, 2024In React Labs posts, we write about projects in active research and development. Since our last update, we’ve made significant progress on React Compiler, new features, and React 19, and we’d like to share what we learned.Read more](/blog/2024/02/15/react-labs-what-we-have-been-working-on-february-2024)## [React Canaries: Incremental Feature Rollout Outside MetaMay 3, 2023Traditionally, new React features used to only be available at Meta first, and land in the open source releases later. We’d like to offer the React community an option to adopt individual new features as soon as their design is close to final—similar to how Meta uses React internally. We are introducing a new officially supported Canary release channel. It lets curated setups like frameworks decouple adoption of individual React features from the React release schedule.Read more](/blog/2023/05/03/react-canaries)## [React Labs: What We've Been Working On – March 2023March 22, 2023In React Labs posts, we write about projects in active research and development. Since our last update, we’ve made significant progress on React Server Components, Asset Loading, Optimizing Compiler, Offscreen Rendering, and Transition Tracing, and we’d like to share what we learned.Read more](/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023)## [Introducing react.devMarch 16, 2023Today we are thrilled to launch react.dev, the new home for React and its documentation. In this post, we would like to give you a tour of the new site.Read more](/blog/2023/03/16/introducing-react-dev)## [React Labs: What We've Been Working On – June 2022June 15, 2022React 18 was years in the making, and with it brought valuable lessons for the React team. Its release was the result of many years of research and exploring many paths. Some of those paths were successful; many more were dead-ends that led to new insights. One lesson we’ve learned is that it’s frustrating for the community to wait for new features without having insight into these paths that we’re exploring…Read more](/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022)## [React v18.0March 29, 2022React 18 is now available on npm! In our last post, we shared step-by-step instructions for upgrading your app to React 18. In this post, we’ll give an overview of what’s new in React 18, and what it means for the future…Read more](/blog/2022/03/29/react-v18)## [How to Upgrade to React 18March 8, 2022As we shared in the release post, React 18 introduces features powered by our new concurrent renderer, with a gradual adoption strategy for existing applications. In this post, we will guide you through the steps for upgrading to React 18…Read more](/blog/2022/03/08/react-18-upgrade-guide)## [React Conf 2021 RecapDecember 17, 2021Last week we hosted our 6th React Conf. In previous years, we’ve used the React Conf stage to deliver industry changing announcements such as React Native and React Hooks. This year, we shared our multi-platform vision for React, starting with the release of React 18 and gradual adoption of concurrent features…Read more](/blog/2021/12/17/react-conf-2021-recap)## [The Plan for React 18June 8, 2021The React team is excited to share a few updates:

  * We’ve started work on the React 18 release, which will be our next major version.
  * We’ve created a Working Group to prepare the community for gradual adoption of new features in React 18.
  * We’ve published a React 18 Alpha so that library authors can try it and provide feedback…

Read more](/blog/2021/06/08/the-plan-for-react-18)## [Introducing Zero-Bundle-Size React Server ComponentsDecember 21, 20202020 has been a long year. As it comes to an end we wanted to share a special Holiday Update on our research into zero-bundle-size React Server Components. To introduce React Server Components, we have prepared a talk and a demo. If you want, you can check them out during the holidays, or later when work picks back up in the new year…Read more](/blog/2020/12/21/data-fetching-with-react-server-components)

### All release notes [](#all-release-notes "Link for All release notes ")

Not every React release deserves its own blog post, but you can find a detailed changelog for every release in the `CHANGELOG.md`[](https://github.com/facebook/react/blob/main/CHANGELOG.md) file in the React repository, as well as on the [Releases](https://github.com/facebook/react/releases) page.

### Older posts [](#older-posts "Link for Older posts ")

See the [older posts.](https://reactjs.org/blog/all.html)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Translations[](#undefined "Link for this heading")

React docs are translated by the global community into many languages all over the world.

## Source site [](#main-site "Link for Source site ")

All translations are provided from the canonical source docs:

  * [English](https://react.dev/) — [Contribute](https://github.com/reactjs/react.dev/)



## Full translations [](#full-translations "Link for Full translations ")

  * [French (Français)](https://fr.react.dev/) — [Contribute](https://github.com/reactjs/fr.react.dev)
  * [Japanese (日本語)](https://ja.react.dev/) — [Contribute](https://github.com/reactjs/ja.react.dev)
  * [Korean (한국어)](https://ko.react.dev/) — [Contribute](https://github.com/reactjs/ko.react.dev)
  * [Simplified Chinese (简体中文)](https://zh-hans.react.dev/) — [Contribute](https://github.com/reactjs/zh-hans.react.dev)
  * [Spanish (Español)](https://es.react.dev/) — [Contribute](https://github.com/reactjs/es.react.dev)
  * [Turkish (Türkçe)](https://tr.react.dev/) — [Contribute](https://github.com/reactjs/tr.react.dev)



## In-progress translations [](#in-progress-translations "Link for In-progress translations ")

For the progress of each translation, see: [Is React Translated Yet?](https://translations.react.dev/)

  * [Arabic (العربية)](https://ar.react.dev/) — [Contribute](https://github.com/reactjs/ar.react.dev)
  * [Azerbaijani (Azərbaycanca)](https://az.react.dev/) — [Contribute](https://github.com/reactjs/az.react.dev)
  * [Belarusian (Беларуская)](https://be.react.dev/) — [Contribute](https://github.com/reactjs/be.react.dev)
  * [Bengali (বাংলা)](https://bn.react.dev/) — [Contribute](https://github.com/reactjs/bn.react.dev)
  * [Czech (Čeština)](https://cs.react.dev/) — [Contribute](https://github.com/reactjs/cs.react.dev)
  * [Finnish (Suomi)](https://fi.react.dev/) — [Contribute](https://github.com/reactjs/fi.react.dev)
  * [German (Deutsch)](https://de.react.dev/) — [Contribute](https://github.com/reactjs/de.react.dev)
  * [Gujarati (ગુજરાતી)](https://gu.react.dev/) — [Contribute](https://github.com/reactjs/gu.react.dev)
  * [Hebrew (עברית)](https://he.react.dev/) — [Contribute](https://github.com/reactjs/he.react.dev)
  * [Hindi (हिन्दी)](https://hi.react.dev/) — [Contribute](https://github.com/reactjs/hi.react.dev)
  * [Hungarian (magyar)](https://hu.react.dev/) — [Contribute](https://github.com/reactjs/hu.react.dev)
  * [Icelandic (Íslenska)](https://is.react.dev/) — [Contribute](https://github.com/reactjs/is.react.dev)
  * [Indonesian (Bahasa Indonesia)](https://id.react.dev/) — [Contribute](https://github.com/reactjs/id.react.dev)
  * [Italian (Italiano)](https://it.react.dev/) — [Contribute](https://github.com/reactjs/it.react.dev)
  * [Kazakh (Қазақша)](https://kk.react.dev/) — [Contribute](https://github.com/reactjs/kk.react.dev)
  * [Lao (ພາສາລາວ)](https://lo.react.dev/) — [Contribute](https://github.com/reactjs/lo.react.dev)
  * [Macedonian (Македонски)](https://mk.react.dev/) — [Contribute](https://github.com/reactjs/mk.react.dev)
  * [Malayalam (മലയാളം)](https://ml.react.dev/) — [Contribute](https://github.com/reactjs/ml.react.dev)
  * [Mongolian (Монгол хэл)](https://mn.react.dev/) — [Contribute](https://github.com/reactjs/mn.react.dev)
  * [Persian (فارسی)](https://fa.react.dev/) — [Contribute](https://github.com/reactjs/fa.react.dev)
  * [Polish (Polski)](https://pl.react.dev/) — [Contribute](https://github.com/reactjs/pl.react.dev)
  * [Portuguese (Brazil) (Português do Brasil)](https://pt-br.react.dev/) — [Contribute](https://github.com/reactjs/pt-br.react.dev)
  * [Russian (Русский)](https://ru.react.dev/) — [Contribute](https://github.com/reactjs/ru.react.dev)
  * [Serbian (Srpski)](https://sr.react.dev/) — [Contribute](https://github.com/reactjs/sr.react.dev)
  * [Sinhala (සිංහල)](https://si.react.dev/) — [Contribute](https://github.com/reactjs/si.react.dev)
  * [Swahili (Kiswahili)](https://sw.react.dev/) — [Contribute](https://github.com/reactjs/sw.react.dev)
  * [Tamil (தமிழ்)](https://ta.react.dev/) — [Contribute](https://github.com/reactjs/ta.react.dev)
  * [Telugu (తెలుగు)](https://te.react.dev/) — [Contribute](https://github.com/reactjs/te.react.dev)
  * [Traditional Chinese (繁體中文)](https://zh-hant.react.dev/) — [Contribute](https://github.com/reactjs/zh-hant.react.dev)
  * [Ukrainian (Українська)](https://uk.react.dev/) — [Contribute](https://github.com/reactjs/uk.react.dev)
  * [Urdu (اردو)](https://ur.react.dev/) — [Contribute](https://github.com/reactjs/ur.react.dev)
  * [Vietnamese (Tiếng Việt)](https://vi.react.dev/) — [Contribute](https://github.com/reactjs/vi.react.dev)



## How to contribute [](#how-to-contribute "Link for How to contribute ")

You can contribute to the translation efforts!

The community conducts the translation work for the React docs on each language-specific fork of react.dev. Typical translation work involves directly translating a Markdown file and creating a pull request. Click the “contribute” link above to the GitHub repository for your language, and follow the instructions there to help with the translation effort.

If you want to start a new translation for your language, visit: [translations.react.dev](https://github.com/reactjs/translations.react.dev)

[PreviousDocs Contributors](/community/docs-contributors)[NextAcknowledgements](/community/acknowledgements)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Source site ](#main-site)
  * [Full translations ](#full-translations)
  * [In-progress translations ](#in-progress-translations)
  * [How to contribute ](#how-to-contribute)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

[Installation](/learn/installation)

# Add React to an Existing Project[](#undefined "Link for this heading")

If you want to add some interactivity to your existing project, you don’t have to rewrite it in React. Add React to your existing stack, and render interactive React components anywhere.

### Note

**You need to install[Node.js](https://nodejs.org/en/) for local development.** Although you can [try React](/learn/installation#try-react) online or with a simple HTML page, realistically most JavaScript tooling you’ll want to use for development requires Node.js.

## Using React for an entire subroute of your existing website [](#using-react-for-an-entire-subroute-of-your-existing-website "Link for Using React for an entire subroute of your existing website ")

Let’s say you have an existing web app at `example.com` built with another server technology (like Rails), and you want to implement all routes starting with `example.com/some-app/` fully with React.

Here’s how we recommend to set it up:

  1. **Build the React part of your app** using one of the [React-based frameworks](/learn/start-a-new-react-project).
  2. **Specify`/some-app` as the _base path_** in your framework’s configuration (here’s how: [Next.js](https://nextjs.org/docs/api-reference/next.config.js/basepath), [Gatsby](https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/path-prefix/)).
  3. **Configure your server or a proxy** so that all requests under `/some-app/` are handled by your React app.



This ensures the React part of your app can [benefit from the best practices](/learn/start-a-new-react-project#can-i-use-react-without-a-framework) baked into those frameworks.

Many React-based frameworks are full-stack and let your React app take advantage of the server. However, you can use the same approach even if you can’t or don’t want to run JavaScript on the server. In that case, serve the HTML/CSS/JS export (`next export`[ output](https://nextjs.org/docs/advanced-features/static-html-export) for Next.js, default for Gatsby) at `/some-app/` instead.

## Using React for a part of your existing page [](#using-react-for-a-part-of-your-existing-page "Link for Using React for a part of your existing page ")

Let’s say you have an existing page built with another technology (either a server one like Rails, or a client one like Backbone), and you want to render interactive React components somewhere on that page. That’s a common way to integrate React—in fact, it’s how most React usage looked at Meta for many years!

You can do this in two steps:

  1. **Set up a JavaScript environment** that lets you use the [JSX syntax](/learn/writing-markup-with-jsx), split your code into modules with the `import`[](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) / `export`[](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) syntax, and use packages (for example, React) from the [npm](https://www.npmjs.com/) package registry.
  2. **Render your React components** where you want to see them on the page.



The exact approach depends on your existing page setup, so let’s walk through some details.

### Step 1: Set up a modular JavaScript environment [](#step-1-set-up-a-modular-javascript-environment "Link for Step 1: Set up a modular JavaScript environment ")

A modular JavaScript environment lets you write your React components in individual files, as opposed to writing all of your code in a single file. It also lets you use all the wonderful packages published by other developers on the [npm](https://www.npmjs.com/) registry—including React itself! How you do this depends on your existing setup:

  * **If your app is already split into files that use`import` statements,** try to use the setup you already have. Check whether writing `<div />` in your JS code causes a syntax error. If it causes a syntax error, you might need to [transform your JavaScript code with Babel](https://babeljs.io/setup), and enable the [Babel React preset](https://babeljs.io/docs/babel-preset-react) to use JSX.

  * **If your app doesn’t have an existing setup for compiling JavaScript modules,** set it up with [Vite](https://vitejs.dev/). The Vite community maintains [many integrations with backend frameworks](https://github.com/vitejs/awesome-vite#integrations-with-backends), including Rails, Django, and Laravel. If your backend framework is not listed, [follow this guide](https://vitejs.dev/guide/backend-integration.html) to manually integrate Vite builds with your backend.




To check whether your setup works, run this command in your project folder:

Terminal

Copy

npm install react react-dom

Then add these lines of code at the top of your main JavaScript file (it might be called `index.js` or `main.js`):

index.js

index.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { createRoot } from 'react-dom/client';
// Clear the existing HTML content
document.body.innerHTML = '<div id="app"></div>';
// Render your React component instead
const root = createRoot(document.getElementById('app'));
root.render(<h1>Hello, world</h1>);

```


If the entire content of your page was replaced by a “Hello, world!”, everything worked! Keep reading.

### Note

Integrating a modular JavaScript environment into an existing project for the first time can feel intimidating, but it’s worth it! If you get stuck, try our [community resources](/community) or the [Vite Chat](https://chat.vitejs.dev/).

### Step 2: Render React components anywhere on the page [](#step-2-render-react-components-anywhere-on-the-page "Link for Step 2: Render React components anywhere on the page ")

In the previous step, you put this code at the top of your main file:

```


import { createRoot } from 'react-dom/client';

// Clear the existing HTML content

document.body.innerHTML = '<div id="app"></div>';

// Render your React component instead

const root = createRoot(document.getElementById('app'));

root.render(<h1>Hello, world</h1>);


```


Of course, you don’t actually want to clear the existing HTML content!

Delete this code.

Instead, you probably want to render your React components in specific places in your HTML. Open your HTML page (or the server templates that generate it) and add a unique `id`[](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id) attribute to any tag, for example:

```


<!-- ... somewhere in your html ... -->

<nav id="navigation"></nav>

<!-- ... more html ... -->


```


This lets you find that HTML element with `document.getElementById`[](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById) and pass it to `createRoot`[](/reference/react-dom/client/createRoot) so that you can render your own React component inside:

index.jsindex.html

index.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { createRoot } from 'react-dom/client';
function NavigationBar() {
 // TODO: Actually implement a navigation bar
 return <h1>Hello from React!</h1>;
}
const domNode = document.getElementById('navigation');
const root = createRoot(domNode);
root.render(<NavigationBar />);

```


Notice how the original HTML content from `index.html` is preserved, but your own `NavigationBar` React component now appears inside the `<nav id="navigation">` from your HTML. Read the `createRoot`[ usage documentation](/reference/react-dom/client/createRoot#rendering-a-page-partially-built-with-react) to learn more about rendering React components inside an existing HTML page.

When you adopt React in an existing project, it’s common to start with small interactive components (like buttons), and then gradually keep “moving upwards” until eventually your entire page is built with React. If you ever reach that point, we recommend migrating to [a React framework](/learn/start-a-new-react-project) right after to get the most out of React.

## Using React Native in an existing native mobile app [](#using-react-native-in-an-existing-native-mobile-app "Link for Using React Native in an existing native mobile app ")

[React Native](https://reactnative.dev/) can also be integrated into existing native apps incrementally. If you have an existing native app for Android (Java or Kotlin) or iOS (Objective-C or Swift), [follow this guide](https://reactnative.dev/docs/integration-with-existing-apps) to add a React Native screen to it.

[PreviousStart a New React Project](/learn/start-a-new-react-project)[NextEditor Setup](/learn/editor-setup)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Using React for an entire subroute of your existing website ](#using-react-for-an-entire-subroute-of-your-existing-website)
  * [Using React for a part of your existing page ](#using-react-for-a-part-of-your-existing-page)
  * [Step 1: Set up a modular JavaScript environment ](#step-1-set-up-a-modular-javascript-environment)
  * [Step 2: Render React components anywhere on the page ](#step-2-render-react-components-anywhere-on-the-page)
  * [Using React Native in an existing native mobile app ](#using-react-native-in-an-existing-native-mobile-app)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

[Installation](/learn/installation)

# Start a New React Project[](#undefined "Link for this heading")

If you want to build a new app or a new website fully with React, we recommend picking one of the React-powered frameworks popular in the community.

You can use React without a framework, however we’ve found that most apps and sites eventually build solutions to common problems such as code-splitting, routing, data fetching, and generating HTML. These problems are common to all UI libraries, not just React.

By starting with a framework, you can get started with React quickly, and avoid essentially building your own framework later.

##### Deep Dive

#### Can I use React without a framework? [](#can-i-use-react-without-a-framework "Link for Can I use React without a framework? ")

Show Details

You can definitely use React without a framework—that’s how you’d [use React for a part of your page.](/learn/add-react-to-an-existing-project#using-react-for-a-part-of-your-existing-page) **However, if you’re building a new app or a site fully with React, we recommend using a framework.**

Here’s why.

Even if you don’t need routing or data fetching at first, you’ll likely want to add some libraries for them. As your JavaScript bundle grows with every new feature, you might have to figure out how to split code for every route individually. As your data fetching needs get more complex, you are likely to encounter server-client network waterfalls that make your app feel very slow. As your audience includes more users with poor network conditions and low-end devices, you might need to generate HTML from your components to display content early—either on the server, or during the build time. Changing your setup to run some of your code on the server or during the build can be very tricky.

**These problems are not React-specific. This is why Svelte has SvelteKit, Vue has Nuxt, and so on.** To solve these problems on your own, you’ll need to integrate your bundler with your router and with your data fetching library. It’s not hard to get an initial setup working, but there are a lot of subtleties involved in making an app that loads quickly even as it grows over time. You’ll want to send down the minimal amount of app code but do so in a single client–server roundtrip, in parallel with any data required for the page. You’ll likely want the page to be interactive before your JavaScript code even runs, to support progressive enhancement. You may want to generate a folder of fully static HTML files for your marketing pages that can be hosted anywhere and still work with JavaScript disabled. Building these capabilities yourself takes real work.

**React frameworks on this page solve problems like these by default, with no extra work from your side.** They let you start very lean and then scale your app with your needs. Each React framework has a community, so finding answers to questions and upgrading tooling is easier. Frameworks also give structure to your code, helping you and others retain context and skills between different projects. Conversely, with a custom setup it’s easier to get stuck on unsupported dependency versions, and you’ll essentially end up creating your own framework—albeit one with no community or upgrade path (and if it’s anything like the ones we’ve made in the past, more haphazardly designed).

If your app has unusual constraints not served well by these frameworks, or you prefer to solve these problems yourself, you can roll your own custom setup with React. Grab `react` and `react-dom` from npm, set up your custom build process with a bundler like [Vite](https://vitejs.dev/) or [Parcel](https://parceljs.org/), and add other tools as you need them for routing, static generation or server-side rendering, and more.

## Production-grade React frameworks [](#production-grade-react-frameworks "Link for Production-grade React frameworks ")

These frameworks support all the features you need to deploy and scale your app in production and are working towards supporting our [full-stack architecture vision](#which-features-make-up-the-react-teams-full-stack-architecture-vision). All of the frameworks we recommend are open source with active communities for support, and can be deployed to your own server or a hosting provider. If you’re a framework author interested in being included on this list, [please let us know](https://github.com/reactjs/react.dev/issues/new?assignees=&labels=type%3A+framework&projects=&template=3-framework.yml&title=%5BFramework%5D%3A+).

### Next.js [](#nextjs-pages-router "Link for Next.js ")

**[Next.js’ Pages Router](https://nextjs.org/) is a full-stack React framework.** It’s versatile and lets you create React apps of any size—from a mostly static blog to a complex dynamic application. To create a new Next.js project, run in your terminal:

Terminal

Copy

npx create-next-app@latest

If you’re new to Next.js, check out the [learn Next.js course.](https://nextjs.org/learn)

Next.js is maintained by [Vercel](https://vercel.com/). You can [deploy a Next.js app](https://nextjs.org/docs/app/building-your-application/deploying) to any Node.js or serverless hosting, or to your own server. Next.js also supports a [static export](https://nextjs.org/docs/pages/building-your-application/deploying/static-exports) which doesn’t require a server.

### Remix [](#remix "Link for Remix ")

**[Remix](https://remix.run/) is a full-stack React framework with nested routing.** It lets you break your app into nested parts that can load data in parallel and refresh in response to the user actions. To create a new Remix project, run:

Terminal

Copy

npx create-remix

If you’re new to Remix, check out the Remix [blog tutorial](https://remix.run/docs/en/main/tutorials/blog) (short) and [app tutorial](https://remix.run/docs/en/main/tutorials/jokes) (long).

Remix is maintained by [Shopify](https://www.shopify.com/). When you create a Remix project, you need to [pick your deployment target](https://remix.run/docs/en/main/guides/deployment). You can deploy a Remix app to any Node.js or serverless hosting by using or writing an [adapter](https://remix.run/docs/en/main/other-api/adapter).

### Gatsby [](#gatsby "Link for Gatsby ")

**[Gatsby](https://www.gatsbyjs.com/) is a React framework for fast CMS-backed websites.** Its rich plugin ecosystem and its GraphQL data layer simplify integrating content, APIs, and services into one website. To create a new Gatsby project, run:

Terminal

Copy

npx create-gatsby

If you’re new to Gatsby, check out the [Gatsby tutorial.](https://www.gatsbyjs.com/docs/tutorial/)

Gatsby is maintained by [Netlify](https://www.netlify.com/). You can [deploy a fully static Gatsby site](https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting) to any static hosting. If you opt into using server-only features, make sure your hosting provider supports them for Gatsby.

### Expo (for native apps) [](#expo "Link for Expo \(for native apps\) ")

**[Expo](https://expo.dev/) is a React framework that lets you create universal Android, iOS, and web apps with truly native UIs.** It provides an SDK for [React Native](https://reactnative.dev/) that makes the native parts easier to use. To create a new Expo project, run:

Terminal

Copy

npx create-expo-app

If you’re new to Expo, check out the [Expo tutorial](https://docs.expo.dev/tutorial/introduction/).

Expo is maintained by [Expo (the company)](https://expo.dev/about). Building apps with Expo is free, and you can submit them to the Google and Apple app stores without restrictions. Expo additionally provides opt-in paid cloud services.

## Bleeding-edge React frameworks [](#bleeding-edge-react-frameworks "Link for Bleeding-edge React frameworks ")

As we’ve explored how to continue improving React, we realized that integrating React more closely with frameworks (specifically, with routing, bundling, and server technologies) is our biggest opportunity to help React users build better apps. The Next.js team has agreed to collaborate with us in researching, developing, integrating, and testing framework-agnostic bleeding-edge React features like [React Server Components.](/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023#react-server-components)

These features are getting closer to being production-ready every day, and we’ve been in talks with other bundler and framework developers about integrating them. Our hope is that in a year or two, all frameworks listed on this page will have full support for these features. (If you’re a framework author interested in partnering with us to experiment with these features, please let us know!)

### Next.js (App Router) [](#nextjs-app-router "Link for Next.js \(App Router\) ")

**[Next.js’s App Router](https://nextjs.org/docs) is a redesign of the Next.js APIs aiming to fulfill the React team’s full-stack architecture vision.** It lets you fetch data in asynchronous components that run on the server or even during the build.

Next.js is maintained by [Vercel](https://vercel.com/). You can [deploy a Next.js app](https://nextjs.org/docs/app/building-your-application/deploying) to any Node.js or serverless hosting, or to your own server. Next.js also supports [static export](https://nextjs.org/docs/app/building-your-application/deploying/static-exports) which doesn’t require a server.

##### Deep Dive

#### Which features make up the React team’s full-stack architecture vision? [](#which-features-make-up-the-react-teams-full-stack-architecture-vision "Link for Which features make up the React team’s full-stack architecture vision? ")

Show Details

Next.js’s App Router bundler fully implements the official [React Server Components specification](https://github.com/reactjs/rfcs/blob/main/text/0188-server-components.md). This lets you mix build-time, server-only, and interactive components in a single React tree.

For example, you can write a server-only React component as an `async` function that reads from a database or from a file. Then you can pass data down from it to your interactive components:

```


// This component runs *only* on the server (or during the build).

async function Talks({ confId }) {

 // 1. You're on the server, so you can talk to your data layer. API endpoint not required.

 const talks = await db.Talks.findAll({ confId });

 // 2. Add any amount of rendering logic. It won't make your JavaScript bundle larger.

 const videos = talks.map(talk => talk.video);

 // 3. Pass the data down to the components that will run in the browser.

 return <SearchableVideoList videos={videos} />;

}


```


Next.js’s App Router also integrates [data fetching with Suspense](/blog/2022/03/29/react-v18#suspense-in-data-frameworks). This lets you specify a loading state (like a skeleton placeholder) for different parts of your user interface directly in your React tree:

```


<Suspense fallback={<TalksLoading />}>

 <Talks confId={conf.id} />

</Suspense>


```


Server Components and Suspense are React features rather than Next.js features. However, adopting them at the framework level requires buy-in and non-trivial implementation work. At the moment, the Next.js App Router is the most complete implementation. The React team is working with bundler developers to make these features easier to implement in the next generation of frameworks.

[PreviousInstallation](/learn/installation)[NextAdd React to an Existing Project](/learn/add-react-to-an-existing-project)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Production-grade React frameworks ](#production-grade-react-frameworks)
  * [Next.js ](#nextjs-pages-router)
  * [Remix ](#remix)
  * [Gatsby ](#gatsby)
  * [Expo (for native apps) ](#expo)
  * [Bleeding-edge React frameworks ](#bleeding-edge-react-frameworks)
  * [Next.js (App Router) ](#nextjs-app-router)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React v19[](#undefined "Link for this heading")

December 05, 2024 by [The React Team](/community/team)

### Note

### React 19 is now stable! [](#react-19-is-now-stable "Link for React 19 is now stable! ")

Additions since this post was originally shared with the React 19 RC in April:

  * **Pre-warming for suspended trees** : see [Improvements to Suspense](/blog/2024/04/25/react-19-upgrade-guide#improvements-to-suspense).
  * **React DOM static APIs** : see [New React DOM Static APIs](#new-react-dom-static-apis).



_The date for this post has been updated to reflect the stable release date._

React v19 is now available on npm!

In our [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide), we shared step-by-step instructions for upgrading your app to React 19. In this post, we’ll give an overview of the new features in React 19, and how you can adopt them.

  * [What’s new in React 19](#whats-new-in-react-19)
  * [Improvements in React 19](#improvements-in-react-19)
  * [How to upgrade](#how-to-upgrade)



For a list of breaking changes, see the [Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide).

## What’s new in React 19 [](#whats-new-in-react-19 "Link for What’s new in React 19 ")

### Actions [](#actions "Link for Actions ")

A common use case in React apps is to perform a data mutation and then update state in response. For example, when a user submits a form to change their name, you will make an API request, and then handle the response. In the past, you would need to handle pending states, errors, optimistic updates, and sequential requests manually.

For example, you could handle the pending and error state in `useState`:

```


// Before Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, setIsPending] = useState(false);

 const handleSubmit = async () => {

  setIsPending(true);

  const error = await updateName(name);

  setIsPending(false);

  if (error) {

   setError(error);

   return;

  } 

  redirect("/path");

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


In React 19, we’re adding support for using async functions in transitions to handle pending states, errors, forms, and optimistic updates automatically.

For example, you can use `useTransition` to handle the pending state for you:

```


// Using pending state from Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, startTransition] = useTransition();

 const handleSubmit = () => {

  startTransition(async () => {

   const error = await updateName(name);

   if (error) {

    setError(error);

    return;

   } 

   redirect("/path");

  })

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


The async transition will immediately set the `isPending` state to true, make the async request(s), and switch `isPending` to false after any transitions. This allows you to keep the current UI responsive and interactive while the data is changing.

### Note

#### By convention, functions that use async transitions are called “Actions”. [](#by-convention-functions-that-use-async-transitions-are-called-actions "Link for By convention, functions that use async transitions are called “Actions”. ")

Actions automatically manage submitting data for you:

  * **Pending state** : Actions provide a pending state that starts at the beginning of a request and automatically resets when the final state update is committed.
  * **Optimistic updates** : Actions support the new `useOptimistic`[](#new-hook-optimistic-updates) hook so you can show users instant feedback while the requests are submitting.
  * **Error handling** : Actions provide error handling so you can display Error Boundaries when a request fails, and revert optimistic updates to their original value automatically.
  * **Forms** : `<form>` elements now support passing functions to the `action` and `formAction` props. Passing functions to the `action` props use Actions by default and reset the form automatically after submission.



Building on top of Actions, React 19 introduces `useOptimistic`[](#new-hook-optimistic-updates) to manage optimistic updates, and a new hook `React.useActionState`[](#new-hook-useactionstate) to handle common cases for Actions. In `react-dom` we’re adding `<form>`[ Actions](#form-actions) to manage forms automatically and `useFormStatus`[](#new-hook-useformstatus) to support the common cases for Actions in forms.

In React 19, the above example can be simplified to:

```


// Using <form> Actions and useActionState

function ChangeName({ name, setName }) {

 const [error, submitAction, isPending] = useActionState(

  async (previousState, formData) => {

   const error = await updateName(formData.get("name"));

   if (error) {

    return error;

   }

   redirect("/path");

   return null;

  },

  null,

 );

 return (

  <form action={submitAction}>

   <input type="text" name="name" />

   <button type="submit" disabled={isPending}>Update</button>

   {error && <p>{error}</p>}

  </form>

 );

}


```


In the next section, we’ll break down each of the new Action features in React 19.

### New hook: `useActionState` [](#new-hook-useactionstate "Link for this heading")

To make the common cases easier for Actions, we’ve added a new hook called `useActionState`:

```


const [error, submitAction, isPending] = useActionState(

 async (previousState, newName) => {

  const error = await updateName(newName);

  if (error) {

   // You can return any result of the action.

   // Here, we return only the error.

   return error;

  }

  // handle success

  return null;

 },

 null,

);


```


`useActionState` accepts a function (the “Action”), and returns a wrapped Action to call. This works because Actions compose. When the wrapped Action is called, `useActionState` will return the last result of the Action as `data`, and the pending state of the Action as `pending`.

### Note

`React.useActionState` was previously called `ReactDOM.useFormState` in the Canary releases, but we’ve renamed it and deprecated `useFormState`.

See [#28491](https://github.com/facebook/react/pull/28491) for more info.

For more information, see the docs for `useActionState`[](/reference/react/useActionState).

### React DOM: `<form>` Actions [](#form-actions "Link for this heading")

Actions are also integrated with React 19’s new `<form>` features for `react-dom`. We’ve added support for passing functions as the `action` and `formAction` props of `<form>`, `<input>`, and `<button>` elements to automatically submit forms with Actions:

```


<form action={actionFunction}>


```


When a `<form>` Action succeeds, React will automatically reset the form for uncontrolled components. If you need to reset the `<form>` manually, you can call the new `requestFormReset` React DOM API.

For more information, see the `react-dom` docs for `<form>`[](/reference/react-dom/components/form), `<input>`[](/reference/react-dom/components/input), and `<button>`.

### React DOM: New hook: `useFormStatus` [](#new-hook-useformstatus "Link for this heading")

In design systems, it’s common to write design components that need access to information about the `<form>` they’re in, without drilling props down to the component. This can be done via Context, but to make the common case easier, we’ve added a new hook `useFormStatus`:

```


import {useFormStatus} from 'react-dom';

function DesignButton() {

 const {pending} = useFormStatus();

 return <button type="submit" disabled={pending} />

}


```


`useFormStatus` reads the status of the parent `<form>` as if the form was a Context provider.

For more information, see the `react-dom` docs for `useFormStatus`[](/reference/react-dom/hooks/useFormStatus).

### New hook: `useOptimistic` [](#new-hook-optimistic-updates "Link for this heading")

Another common UI pattern when performing a data mutation is to show the final state optimistically while the async request is underway. In React 19, we’re adding a new hook called `useOptimistic` to make this easier:

```


function ChangeName({currentName, onUpdateName}) {

 const [optimisticName, setOptimisticName] = useOptimistic(currentName);

 const submitAction = async formData => {

  const newName = formData.get("name");

  setOptimisticName(newName);

  const updatedName = await updateName(newName);

  onUpdateName(updatedName);

 };

 return (

  <form action={submitAction}>

   <p>Your name is: {optimisticName}</p>

   <p>

    <label>Change Name:</label>

    <input

     type="text"

     name="name"

     disabled={currentName !== optimisticName}

    />

   </p>

  </form>

 );

}


```


The `useOptimistic` hook will immediately render the `optimisticName` while the `updateName` request is in progress. When the update finishes or errors, React will automatically switch back to the `currentName` value.

For more information, see the docs for `useOptimistic`[](/reference/react/useOptimistic).

### New API: `use` [](#new-feature-use "Link for this heading")

In React 19 we’re introducing a new API to read resources in render: `use`.

For example, you can read a promise with `use`, and React will Suspend until the promise resolves:

```


import {use} from 'react';

function Comments({commentsPromise}) {

 // `use` will suspend until the promise resolves.

 const comments = use(commentsPromise);

 return comments.map(comment => <p key={comment.id}>{comment}</p>);

}

function Page({commentsPromise}) {

 // When `use` suspends in Comments,

 // this Suspense boundary will be shown.

 return (

  <Suspense fallback={<div>Loading...</div>}>

   <Comments commentsPromise={commentsPromise} />

  </Suspense>

 )

}


```


### Note

#### `use` does not support promises created in render. [](#use-does-not-support-promises-created-in-render "Link for this heading")

If you try to pass a promise created in render to `use`, React will warn:

Console

A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework.

To fix, you need to pass a promise from a suspense powered library or framework that supports caching for promises. In the future we plan to ship features to make it easier to cache promises in render.

You can also read context with `use`, allowing you to read Context conditionally such as after early returns:

```


import {use} from 'react';

import ThemeContext from './ThemeContext'

function Heading({children}) {

 if (children == null) {

  return null;

 }

 // This would not work with useContext

 // because of the early return.

 const theme = use(ThemeContext);

 return (

  <h1 style={{color: theme.color}}>

   {children}

  </h1>

 );

}


```


The `use` API can only be called in render, similar to hooks. Unlike hooks, `use` can be called conditionally. In the future we plan to support more ways to consume resources in render with `use`.

For more information, see the docs for `use`[](/reference/react/use).

## New React DOM Static APIs [](#new-react-dom-static-apis "Link for New React DOM Static APIs ")

We’ve added two new APIs to `react-dom/static` for static site generation:

  * `prerender`[](/reference/react-dom/static/prerender)
  * `prerenderToNodeStream`[](/reference/react-dom/static/prerenderToNodeStream)



These new APIs improve on `renderToString` by waiting for data to load for static HTML generation. They are designed to work with streaming environments like Node.js Streams and Web Streams. For example, in a Web Stream environment, you can prerender a React tree to static HTML with `prerender`:

```


import { prerender } from 'react-dom/static';

async function handler(request) {

 const {prelude} = await prerender(<App />, {

  bootstrapScripts: ['/main.js']

 });

 return new Response(prelude, {

  headers: { 'content-type': 'text/html' },

 });

}


```


Prerender APIs will wait for all data to load before returning the static HTML stream. Streams can be converted to strings, or sent with a streaming response. They do not support streaming content as it loads, which is supported by the existing [React DOM server rendering APIs](/reference/react-dom/server).

For more information, see [React DOM Static APIs](/reference/react-dom/static).

## React Server Components [](#react-server-components "Link for React Server Components ")

### Server Components [](#server-components "Link for Server Components ")

Server Components are a new option that allows rendering components ahead of time, before bundling, in an environment separate from your client application or SSR server. This separate environment is the “server” in React Server Components. Server Components can run once at build time on your CI server, or they can be run for each request using a web server.

React 19 includes all of the React Server Components features included from the Canary channel. This means libraries that ship with Server Components can now target React 19 as a peer dependency with a `react-server` [export condition](https://github.com/reactjs/rfcs/blob/main/text/0227-server-module-conventions.md#react-server-conditional-exports) for use in frameworks that support the [Full-stack React Architecture](/learn/start-a-new-react-project#which-features-make-up-the-react-teams-full-stack-architecture-vision).

### Note

#### How do I build support for Server Components? [](#how-do-i-build-support-for-server-components "Link for How do I build support for Server Components? ")

While React Server Components in React 19 are stable and will not break between minor versions, the underlying APIs used to implement a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x.

To support React Server Components as a bundler or framework, we recommend pinning to a specific React version, or using the Canary release. We will continue working with bundlers and frameworks to stabilize the APIs used to implement React Server Components in the future.

For more, see the docs for [React Server Components](/reference/rsc/server-components).

### Server Actions [](#server-actions "Link for Server Actions ")

Server Actions allow Client Components to call async functions executed on the server.

When a Server Action is defined with the `"use server"` directive, your framework will automatically create a reference to the server function, and pass that reference to the Client Component. When that function is called on the client, React will send a request to the server to execute the function, and return the result.

### Note

#### There is no directive for Server Components. [](#there-is-no-directive-for-server-components "Link for There is no directive for Server Components. ")

A common misunderstanding is that Server Components are denoted by `"use server"`, but there is no directive for Server Components. The `"use server"` directive is used for Server Actions.

For more info, see the docs for [Directives](/reference/rsc/directives).

Server Actions can be created in Server Components and passed as props to Client Components, or they can be imported and used in Client Components.

For more, see the docs for [React Server Actions](/reference/rsc/server-actions).

## Improvements in React 19 [](#improvements-in-react-19 "Link for Improvements in React 19 ")

### `ref` as a prop [](#ref-as-a-prop "Link for this heading")

Starting in React 19, you can now access `ref` as a prop for function components:

```


function MyInput({placeholder, ref}) {

 return <input placeholder={placeholder} ref={ref} />

}

//...

<MyInput ref={ref} />


```


New function components will no longer need `forwardRef`, and we will be publishing a codemod to automatically update your components to use the new `ref` prop. In future versions we will deprecate and remove `forwardRef`.

### Note

`refs` passed to classes are not passed as props since they reference the component instance.

### Diffs for hydration errors [](#diffs-for-hydration-errors "Link for Diffs for hydration errors ")

We also improved error reporting for hydration errors in `react-dom`. For example, instead of logging multiple errors in DEV without any information about the mismatch:

Console

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Uncaught Error: Text content does not match server-rendered HTML. at checkForUnmatchedText …

We now log a single message with a diff of the mismatch:

Console

Uncaught Error: Hydration failed because the server rendered HTML didn’t match the client. As a result this tree will be regenerated on the client. This can happen if an SSR-ed Client Component used: - A server/client branch `if (typeof window !== 'undefined')`. - Variable input such as `Date.now()` or `Math.random()` which changes each time it’s called. - Date formatting in a user’s locale which doesn’t match the server. - External changing data without sending a snapshot of it along with the HTML. - Invalid HTML tag nesting. It can also happen if the client has a browser extension installed which messes with the HTML before React loaded. <https://react.dev/link/hydration-mismatch> <App> <span> + Client - Server at throwOnHydrationMismatch …

### `<Context>` as a provider [](#context-as-a-provider "Link for this heading")

In React 19, you can render `<Context>` as a provider instead of `<Context.Provider>`:

```


const ThemeContext = createContext('');

function App({children}) {

 return (

  <ThemeContext value="dark">

   {children}

  </ThemeContext>

 ); 

}


```


New Context providers can use `<Context>` and we will be publishing a codemod to convert existing providers. In future versions we will deprecate `<Context.Provider>`.

### Cleanup functions for refs [](#cleanup-functions-for-refs "Link for Cleanup functions for refs ")

We now support returning a cleanup function from `ref` callbacks:

```


<input

 ref={(ref) => {

  // ref created

  // NEW: return a cleanup function to reset

  // the ref when element is removed from DOM.

  return () => {

   // ref cleanup

  };

 }}

/>


```


When the component unmounts, React will call the cleanup function returned from the `ref` callback. This works for DOM refs, refs to class components, and `useImperativeHandle`.

### Note

Previously, React would call `ref` functions with `null` when unmounting the component. If your `ref` returns a cleanup function, React will now skip this step.

In future versions, we will deprecate calling refs with `null` when unmounting components.

Due to the introduction of ref cleanup functions, returning anything else from a `ref` callback will now be rejected by TypeScript. The fix is usually to stop using implicit returns, for example:

```


- <div ref={current => (instance = current)} />

+ <div ref={current => {instance = current}} />


```


The original code returned the instance of the `HTMLDivElement` and TypeScript wouldn’t know if this was _supposed_ to be a cleanup function or if you didn’t want to return a cleanup function.

You can codemod this pattern with `no-implicit-ref-callback-return`[](https://github.com/eps1lon/types-react-codemod/#no-implicit-ref-callback-return).

### `useDeferredValue` initial value [](#use-deferred-value-initial-value "Link for this heading")

We’ve added an `initialValue` option to `useDeferredValue`:

```


function Search({deferredValue}) {

 // On initial render the value is ''.

 // Then a re-render is scheduled with the deferredValue.

 const value = useDeferredValue(deferredValue, '');

 return (

  <Results query={value} />

 );

}


```


When initialValue is provided, `useDeferredValue` will return it as `value` for the initial render of the component, and schedules a re-render in the background with the deferredValue returned.

For more, see `useDeferredValue`[](/reference/react/useDeferredValue).

### Support for Document Metadata [](#support-for-metadata-tags "Link for Support for Document Metadata ")

In HTML, document metadata tags like `<title>`, `<link>`, and `<meta>` are reserved for placement in the `<head>` section of the document. In React, the component that decides what metadata is appropriate for the app may be very far from the place where you render the `<head>` or React does not render the `<head>` at all. In the past, these elements would need to be inserted manually in an effect, or by libraries like `react-helmet`[](https://github.com/nfl/react-helmet), and required careful handling when server rendering a React application.

In React 19, we’re adding support for rendering document metadata tags in components natively:

```


function BlogPost({post}) {

 return (

  <article>

   <h1>{post.title}</h1>

   <title>{post.title}</title>

   <meta name="author" content="Josh" />

   <link rel="author" href="https://twitter.com/joshcstory/" />

   <meta name="keywords" content={post.keywords} />

   <p>

    Eee equals em-see-squared...

   </p>

  </article>

 );

}


```


When React renders this component, it will see the `<title>` `<link>` and `<meta>` tags, and automatically hoist them to the `<head>` section of document. By supporting these metadata tags natively, we’re able to ensure they work with client-only apps, streaming SSR, and Server Components.

### Note

#### You may still want a Metadata library [](#you-may-still-want-a-metadata-library "Link for You may still want a Metadata library ")

For simple use cases, rendering Document Metadata as tags may be suitable, but libraries can offer more powerful features like overriding generic metadata with specific metadata based on the current route. These features make it easier for frameworks and libraries like `react-helmet`[](https://github.com/nfl/react-helmet) to support metadata tags, rather than replace them.

For more info, see the docs for `<title>`[](/reference/react-dom/components/title), `<link>`[](/reference/react-dom/components/link), and `<meta>`[](/reference/react-dom/components/meta).

### Support for stylesheets [](#support-for-stylesheets "Link for Support for stylesheets ")

Stylesheets, both externally linked (`<link rel="stylesheet" href="...">`) and inline (`<style>...</style>`), require careful positioning in the DOM due to style precedence rules. Building a stylesheet capability that allows for composability within components is hard, so users often end up either loading all of their styles far from the components that may depend on them, or they use a style library which encapsulates this complexity.

In React 19, we’re addressing this complexity and providing even deeper integration into Concurrent Rendering on the Client and Streaming Rendering on the Server with built in support for stylesheets. If you tell React the `precedence` of your stylesheet it will manage the insertion order of the stylesheet in the DOM and ensure that the stylesheet (if external) is loaded before revealing content that depends on those style rules.

```


function ComponentOne() {

 return (

  <Suspense fallback="loading...">

   <link rel="stylesheet" href="foo" precedence="default" />

   <link rel="stylesheet" href="bar" precedence="high" />

   <article class="foo-class bar-class">

    {...}

   </article>

  </Suspense>

 )

}

function ComponentTwo() {

 return (

  <div>

   <p>{...}</p>

   <link rel="stylesheet" href="baz" precedence="default" /> <-- will be inserted between foo & bar

  </div>

 )

}


```


During Server Side Rendering React will include the stylesheet in the `<head>`, which ensures that the browser will not paint until it has loaded. If the stylesheet is discovered late after we’ve already started streaming, React will ensure that the stylesheet is inserted into the `<head>` on the client before revealing the content of a Suspense boundary that depends on that stylesheet.

During Client Side Rendering React will wait for newly rendered stylesheets to load before committing the render. If you render this component from multiple places within your application React will only include the stylesheet once in the document:

```


function App() {

 return <>

  <ComponentOne />

  ...

  <ComponentOne /> // won't lead to a duplicate stylesheet link in the DOM

 </>

}


```


For users accustomed to loading stylesheets manually this is an opportunity to locate those stylesheets alongside the components that depend on them allowing for better local reasoning and an easier time ensuring you only load the stylesheets that you actually depend on.

Style libraries and style integrations with bundlers can also adopt this new capability so even if you don’t directly render your own stylesheets, you can still benefit as your tools are upgraded to use this feature.

For more details, read the docs for `<link>`[](/reference/react-dom/components/link) and `<style>`[](/reference/react-dom/components/style).

### Support for async scripts [](#support-for-async-scripts "Link for Support for async scripts ")

In HTML normal scripts (`<script src="...">`) and deferred scripts (`<script defer="" src="...">`) load in document order which makes rendering these kinds of scripts deep within your component tree challenging. Async scripts (`<script async="" src="...">`) however will load in arbitrary order.

In React 19 we’ve included better support for async scripts by allowing you to render them anywhere in your component tree, inside the components that actually depend on the script, without having to manage relocating and deduplicating script instances.

```


function MyComponent() {

 return (

  <div>

   <script async={true} src="..." />

   Hello World

  </div>

 )

}

function App() {

 <html>

  <body>

   <MyComponent>

   ...

   <MyComponent> // won't lead to duplicate script in the DOM

  </body>

 </html>

}


```


In all rendering environments, async scripts will be deduplicated so that React will only load and execute the script once even if it is rendered by multiple different components.

In Server Side Rendering, async scripts will be included in the `<head>` and prioritized behind more critical resources that block paint such as stylesheets, fonts, and image preloads.

For more details, read the docs for `<script>`[](/reference/react-dom/components/script).

### Support for preloading resources [](#support-for-preloading-resources "Link for Support for preloading resources ")

During initial document load and on client side updates, telling the Browser about resources that it will likely need to load as early as possible can have a dramatic effect on page performance.

React 19 includes a number of new APIs for loading and preloading Browser resources to make it as easy as possible to build great experiences that aren’t held back by inefficient resource loading.

```


import { prefetchDNS, preconnect, preload, preinit } from 'react-dom'

function MyComponent() {

 preinit('https://.../path/to/some/script.js', {as: 'script' }) // loads and executes this script eagerly

 preload('https://.../path/to/font.woff', { as: 'font' }) // preloads this font

 preload('https://.../path/to/stylesheet.css', { as: 'style' }) // preloads this stylesheet

 prefetchDNS('https://...') // when you may not actually request anything from this host

 preconnect('https://...') // when you will request something but aren't sure what

}


```


```


<!-- the above would result in the following DOM/HTML -->

<html>

 <head>

  <!-- links/scripts are prioritized by their utility to early loading, not call order -->

  <link rel="prefetch-dns" href="https://...">

  <link rel="preconnect" href="https://...">

  <link rel="preload" as="font" href="https://.../path/to/font.woff">

  <link rel="preload" as="style" href="https://.../path/to/stylesheet.css">

  <script async="" src="https://.../path/to/some/script.js"></script>

 </head>

 <body>

  ...

 </body>

</html>


```


These APIs can be used to optimize initial page loads by moving discovery of additional resources like fonts out of stylesheet loading. They can also make client updates faster by prefetching a list of resources used by an anticipated navigation and then eagerly preloading those resources on click or even on hover.

For more details see [Resource Preloading APIs](/reference/react-dom#resource-preloading-apis).

### Compatibility with third-party scripts and extensions [](#compatibility-with-third-party-scripts-and-extensions "Link for Compatibility with third-party scripts and extensions ")

We’ve improved hydration to account for third-party scripts and browser extensions.

When hydrating, if an element that renders on the client doesn’t match the element found in the HTML from the server, React will force a client re-render to fix up the content. Previously, if an element was inserted by third-party scripts or browser extensions, it would trigger a mismatch error and client render.

In React 19, unexpected tags in the `<head>` and `<body>` will be skipped over, avoiding the mismatch errors. If React needs to re-render the entire document due to an unrelated hydration mismatch, it will leave in place stylesheets inserted by third-party scripts and browser extensions.

### Better error reporting [](#error-handling "Link for Better error reporting ")

We improved error handling in React 19 to remove duplication and provide options for handling caught and uncaught errors. For example, when there’s an error in render caught by an Error Boundary, previously React would throw the error twice (once for the original error, then again after failing to automatically recover), and then call `console.error` with info about where the error occurred.

This resulted in three errors for every caught error:

Console

Uncaught Error: hit at Throws at renderWithHooks …

Uncaught Error: hit <-- Duplicate at Throws at renderWithHooks …

The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary.

In React 19, we log a single error with all the error information included:

Console

Error: hit at Throws at renderWithHooks … The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary. at ErrorBoundary at App

Additionally, we’ve added two new root options to complement `onRecoverableError`:

  * `onCaughtError`: called when React catches an error in an Error Boundary.
  * `onUncaughtError`: called when an error is thrown and not caught by an Error Boundary.
  * `onRecoverableError`: called when an error is thrown and automatically recovered.



For more info and examples, see the docs for `createRoot`[](/reference/react-dom/client/createRoot) and `hydrateRoot`[](/reference/react-dom/client/hydrateRoot).

### Support for Custom Elements [](#support-for-custom-elements "Link for Support for Custom Elements ")

React 19 adds full support for custom elements and passes all tests on [Custom Elements Everywhere](https://custom-elements-everywhere.com/).

In past versions, using Custom Elements in React has been difficult because React treated unrecognized props as attributes rather than properties. In React 19, we’ve added support for properties that works on the client and during SSR with the following strategy:

  * **Server Side Rendering** : props passed to a custom element will render as attributes if their type is a primitive value like `string`, `number`, or the value is `true`. Props with non-primitive types like `object`, `symbol`, `function`, or value `false` will be omitted.
  * **Client Side Rendering** : props that match a property on the Custom Element instance will be assigned as properties, otherwise they will be assigned as attributes.



Thanks to [Joey Arhar](https://github.com/josepharhar) for driving the design and implementation of Custom Element support in React.

#### How to upgrade [](#how-to-upgrade "Link for How to upgrade ")

See the [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide) for step-by-step instructions and a full list of breaking and notable changes.

_Note: this post was originally published 04/25/2024 and has been updated to 12/05/2024 with the stable release._

[ PreviousBlog](/blog)[NextReact Compiler Beta Release and Roadmap](/blog/2024/10/21/react-compiler-beta-release)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React Compiler Beta Release[](#undefined "Link for this heading")

October 21, 2024 by .

The React team is excited to share new updates:

  1. We’re publishing React Compiler Beta today, so that early adopters and library maintainers can try it and provide feedback.
  2. We’re officially supporting React Compiler for apps on React 17+, through an optional `react-compiler-runtime` package.
  3. We’re opening up public membership of the [React Compiler Working Group](https://github.com/reactwg/react-compiler) to prepare the community for gradual adoption of the compiler.



At [React Conf 2024](/blog/2024/05/22/react-conf-2024-recap), we announced the experimental release of React Compiler, a build-time tool that optimizes your React app through automatic memoization. [You can find an introduction to React Compiler here](/learn/react-compiler).

Since the first release, we’ve fixed numerous bugs reported by the React community, received several high quality bug fixes and contributions[1](#user-content-fn-1) to the compiler, made the compiler more resilient to the broad diversity of JavaScript patterns, and have continued to roll out the compiler more widely at Meta.

In this post, we want to share what’s next for React Compiler.

## Try React Compiler Beta today [](#try-react-compiler-beta-today "Link for Try React Compiler Beta today ")

At [React India 2024](https://www.youtube.com/watch?v=qd5yk2gxbtg), we shared an update on React Compiler. Today, we are excited to announce a new Beta release of React Compiler and ESLint plugin. New betas are published to npm using the `@beta` tag.

To install React Compiler Beta:

Terminal

Copy

npm install -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta

Or, if you’re using Yarn:

Terminal

Copy

yarn add -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta

You can watch talk at React India here:

## We recommend everyone use the React Compiler linter today [](#we-recommend-everyone-use-the-react-compiler-linter-today "Link for We recommend everyone use the React Compiler linter today ")

React Compiler’s ESLint plugin helps developers proactively identify and correct [Rules of React](/reference/rules) violations. **We strongly recommend everyone use the linter today**. The linter does not require that you have the compiler installed, so you can use it independently, even if you are not ready to try out the compiler.

To install the linter only:

Terminal

Copy

npm install -D eslint-plugin-react-compiler@beta

Or, if you’re using Yarn:

Terminal

Copy

yarn add -D eslint-plugin-react-compiler@beta

After installation you can enable the linter by [adding it to your ESLint config](/learn/react-compiler#installing-eslint-plugin-react-compiler). Using the linter helps identify Rules of React breakages, making it easier to adopt the compiler when it’s fully released.

## Backwards Compatibility [](#backwards-compatibility "Link for Backwards Compatibility ")

React Compiler produces code that depends on runtime APIs added in React 19, but we’ve since added support for the compiler to also work with React 17 and 18. If you are not on React 19 yet, in the Beta release you can now try out React Compiler by specifying a minimum `target` in your compiler config, and adding `react-compiler-runtime` as a dependency. [You can find docs on this here](/learn/react-compiler#using-react-compiler-with-react-17-or-18).

## Using React Compiler in libraries [](#using-react-compiler-in-libraries "Link for Using React Compiler in libraries ")

Our initial release was focused on identifying major issues with using the compiler in applications. We’ve gotten great feedback and have substantially improved the compiler since then. We’re now ready for broad feedback from the community, and for library authors to try out the compiler to improve performance and the developer experience of maintaining your library.

React Compiler can also be used to compile libraries. Because React Compiler needs to run on the original source code prior to any code transformations, it is not possible for an application’s build pipeline to compile the libraries they use. Hence, our recommendation is for library maintainers to independently compile and test their libraries with the compiler, and ship compiled code to npm.

Because your code is pre-compiled, users of your library will not need to have the compiler enabled in order to benefit from the automatic memoization applied to your library. If your library targets apps not yet on React 19, specify a minimum `target` and add `react-compiler-runtime` as a direct dependency. The runtime package will use the correct implementation of APIs depending on the application’s version, and polyfill the missing APIs if necessary.

[You can find more docs on this here.](/learn/react-compiler#using-the-compiler-on-libraries)

## Opening up React Compiler Working Group to everyone [](#opening-up-react-compiler-working-group-to-everyone "Link for Opening up React Compiler Working Group to everyone ")

We previously announced the invite-only [React Compiler Working Group](https://github.com/reactwg/react-compiler) at React Conf to provide feedback, ask questions, and collaborate on the compiler’s experimental release.

From today, together with the Beta release of React Compiler, we are opening up Working Group membership to everyone. The goal of the React Compiler Working Group is to prepare the ecosystem for a smooth, gradual adoption of React Compiler by existing applications and libraries. Please continue to file bug reports in the [React repo](https://github.com/facebook/react), but please leave feedback, ask questions, or share ideas in the [Working Group discussion forum](https://github.com/reactwg/react-compiler/discussions).

The core team will also use the discussions repo to share our research findings. As the Stable Release gets closer, any important information will also be posted on this forum.

## React Compiler at Meta [](#react-compiler-at-meta "Link for React Compiler at Meta ")

At [React Conf](/blog/2024/05/22/react-conf-2024-recap), we shared that our rollout of the compiler on Quest Store and Instagram were successful. Since then, we’ve deployed React Compiler across several more major web apps at Meta, including and [Threads](https://www.threads.net). That means if you’ve used any of these apps recently, you may have had your experience powered by the compiler. We were able to onboard these apps onto the compiler with few code changes required, in a monorepo with more than 100,000 React components.

We’ve seen notable performance improvements across all of these apps. As we’ve rolled out, we’re continuing to see results on the order of [the wins we shared previously at ReactConf](https://youtu.be/lyEKhv8-3n0?t=3223). These apps have already been heavily hand tuned and optimized by Meta engineers and React experts over the years, so even improvements on the order of a few percent are a huge win for us.

We also expected developer productivity wins from React Compiler. To measure this, we collaborated with our data science partners at Meta[2](#user-content-fn-2) to conduct a thorough statistical analysis of the impact of manual memoization on productivity. Before rolling out the compiler at Meta, we discovered that only about 8% of React pull requests used manual memoization and that these pull requests took 31-46% longer to author[3](#user-content-fn-3). This confirmed our intuition that manual memoization introduces cognitive overhead, and we anticipate that React Compiler will lead to more efficient code authoring and review. Notably, React Compiler also ensures that _all_ code is memoized by default, not just the (in our case) 8% where developers explicitly apply memoization.

## Roadmap to Stable [](#roadmap-to-stable "Link for Roadmap to Stable ")

_This is not a final roadmap, and is subject to change._

We intend to ship a Release Candidate of the compiler in the near future following the Beta release, when the majority of apps and libraries that follow the Rules of React have been proven to work well with the compiler. After a period of final feedback from the community, we plan on a Stable Release for the compiler. The Stable Release will mark the beginning of a new foundation for React, and all apps and libraries will be strongly recommended to use the compiler and ESLint plugin.

  * ✅ Experimental: Released at React Conf 2024, primarily for feedback from early adopters.
  * ✅ Public Beta: Available today, for feedback from the wider community.
  * 🚧 Release Candidate (RC): React Compiler works for the majority of rule-following apps and libraries without issue.
  * 🚧 General Availability: After final feedback period from the community.



These releases also include the compiler’s ESLint plugin, which surfaces diagnostics statically analyzed by the compiler. We plan to combine the existing eslint-plugin-react-hooks plugin with the compiler’s ESLint plugin, so only one plugin needs to be installed.

Post-Stable, we plan to add more compiler optimizations and improvements. This includes both continual improvements to automatic memoization, and new optimizations altogether, with minimal to no change of product code. Upgrading to each new release of the compiler is aimed to be straightforward, and each upgrade will continue to improve performance and add better handling of diverse JavaScript and React patterns.

Throughout this process, we also plan to prototype an IDE extension for React. It is still very early in research, so we expect to be able to share more of our findings with you in a future React Labs blog post.

Thanks to , , , [Alex Taylor](https://github.com/alexmckenley), , and for reviewing and editing this post.

## Footnotes[](#footnote-label "Link for Footnotes")

  1. Thanks [@nikeee](https://github.com/facebook/react/pulls?q=is%3Apr+author%3Anikeee), [@henryqdineen](https://github.com/facebook/react/pulls?q=is%3Apr+author%3Ahenryqdineen), [@TrickyPi](https://github.com/facebook/react/pulls?q=is%3Apr+author%3ATrickyPi), and several others for their contributions to the compiler. [↩](#user-content-fnref-1)

  2. Thanks for leading this study on React Compiler at Meta, and for reviewing this post. [↩](#user-content-fnref-2)

  3. After controlling on author tenure, diff length/complexity, and other potential confounding factors. [↩](#user-content-fnref-3)




[PreviousReact 19](/blog/2024/12/05/react-19)[NextReact Conf 2024 Recap](/blog/2024/05/22/react-conf-2024-recap)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React Conf 2024 Recap[](#undefined "Link for this heading")

May 22, 2024 by .

Last week we hosted React Conf 2024, a two-day conference in Henderson, Nevada where 700+ attendees gathered in-person to discuss the latest in UI engineering. This was our first in-person conference since 2019, and we were thrilled to be able to bring the community together again.

At React Conf 2024, we announced the [React 19 RC](/blog/2024/12/05/react-19), the [React Native New Architecture Beta](https://github.com/reactwg/react-native-new-architecture/discussions/189), and an experimental release of the [React Compiler](/learn/react-compiler). The community also took the stage to announce [React Router v7](https://remix.run/blog/merging-remix-and-react-router), [Universal Server Components](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=20765s) in Expo Router, React Server Components in [RedwoodJS](https://redwoodjs.com/blog/rsc-now-in-redwoodjs), and much more.

The entire [day 1](https://www.youtube.com/watch?v=T8TZQ6k4SLE) and [day 2](https://www.youtube.com/watch?v=0ckOUBiuxVY) streams are available online. In this post, we’ll summarize the talks and announcements from the event.

## Day 1 [](#day-1 "Link for Day 1 ")

_[Watch the full day 1 stream here.](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=973s)_

To kick off day 1, Meta CTO [Andrew “Boz” Bosworth](https://www.threads.net/@boztank) shared a welcome message followed by an introduction by , who manages the React Org at Meta, and our MC .

In the day 1 keynote, shared our goals and vision for React to make it easy for anyone to build great user experiences. followed with a State of React, where she shared that React was downloaded over 1 billion times in 2023, and that 37% of new developers learn to program with React. Finally, she highlighted the work of the React community to make React, React.

For more, check out these talks from the community later in the conference:

  * [Vanilla React](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=5542s) by 
  * [React Rhythm & Blues](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=12728s) by 
  * [RedwoodJS, now with React Server Components](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=26815s) by 
  * [Introducing Universal React Server Components in Expo Router](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=20765s) by 



Next in the keynote, and shared new features coming in React 19, and announced the React 19 RC which is ready for testing in production. Check out all the features in the [React 19 release post](/blog/2024/12/05/react-19), and see these talks for deep dives on the new features:

  * [What’s new in React 19](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=8880s) by 
  * [React Unpacked: A Roadmap to React 19](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=10112s) by 
  * [React 19 Deep Dive: Coordinating HTML](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=24916s) by 
  * [Enhancing Forms with React Server Components](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=25280s) by 
  * [React for Two Computers](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=18825s) by 
  * [And Now You Understand React Server Components](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=11256s) by 



Finally, we ended the keynote with , , and announcing that the React Compiler is now [Open Source](https://github.com/facebook/react/pull/29061), and sharing an experimental version of the React Compiler to try out.

For more information on using the Compiler and how it works, check out [the docs](/learn/react-compiler) and these talks:

  * [Forget About Memo](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=12020s) by 
  * [React Compiler Deep Dive](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=9313s) by and 



Watch the full day 1 keynote here:

## Day 2 [](#day-2 "Link for Day 2 ")

_[Watch the full day 2 stream here.](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=1720s)_

To kick off day 2, shared a welcome message, followed by a Thank You from and an introduction by our Chief Vibes Officer .

In the day 2 keynote, shared the State of React Native, including 78 million downloads in 2023. He also highlighted apps using React Native including 2000+ screens used inside of Meta; the product details page in Facebook Marketplace, which is visited more than 2 billion times per day; and part of the Microsoft Windows Start Menu and some features in almost every Microsoft Office product across mobile and desktop.

Nicola also highlighted all the work the community does to support React Native including libraries, frameworks, and multiple platforms. For more, check out these talks from the community:

  * [Extending React Native beyond Mobile and Desktop Apps](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=5798s) by and 
  * [Spatial computing with React](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=22525s) by 



continued the day 2 keynote by announcing that the React Native New Architecture is now in Beta and ready for apps to adopt in production. He shared new features and improvements in the new architecture, and shared the roadmap for the future of React Native. For more check out:

  * [Cross Platform React](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=26569s) by [Olga Zinoveva](https://github.com/SlyCaptainFlint) and 



Next in the keynote, Nicola announced that we are now recommending starting with a framework like Expo for all new apps created with React Native. With the change, he also announced a new React Native homepage and new Getting Started docs. You can view the new Getting Started guide in the [React Native docs](https://reactnative.dev/docs/next/environment-setup).

Finally, to end the keynote, shared the latest features and improvements in Expo, and how to get started developing with React Native using Expo.

Watch the full day 2 keynote here:

## Q&A [](#q-and-a "Link for Q&A ")

The React and React Native teams also ended each day with a Q&A session:

  * [React Q&A](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=27518s) hosted by 
  * [React Native Q&A](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=27935s) hosted by 



## And more… [](#and-more "Link for And more… ")

We also heard talks on accessibility, error reporting, css, and more:

  * [Demystifying accessibility in React apps](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=20655s) by 
  * [Pigment CSS, CSS in the server component age](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=21696s) by 
  * [Real-time React Server Components](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=24070s) by 
  * [Let’s break React Rules](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=25862s) by 
  * [Solve 100% of your errors](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=19881s) by [Ryan Albrecht](https://github.com/ryan953)



## Thank you [](#thank-you "Link for Thank you ")

Thank you to all the staff, speakers, and participants who made React Conf 2024 possible. There are too many to list, but we want to thank a few in particular.

Thank you to , the team at [Callstack](https://www.callstack.com/), and our React Team Developer Advocate for helping to plan the entire event; and to [Sunny Leggett](https://zeroslopeevents.com/about) and everyone from [Zero Slope](https://zeroslopeevents.com) for helping to organize the event.

Thank you for being our MC and Chief Vibes Officer; and to and for hosting the Q&A sessions.

Thank you and for welcoming us each day and providing direction on structure and content; and to for joining us with a special message during the after-party.

Thank you [Ricky Hanlon](https://www.youtube.com/watch?v=FxTZL2U-uKg&t=1263s) for providing detailed feedback on talks, working on slide designs, and generally filling in the gaps to sweat the details.

Thank you [Callstack](https://www.callstack.com/) for building the conference website; and to and the [Expo](https://expo.dev/) team for building the conference mobile app.

Thank you to all the sponsors who made the event possible: [Remix](https://remix.run/), [Amazon](https://developer.amazon.com/apps-and-games?cmp=US_2024_05_3P_React-Conf-2024&ch=prtnr&chlast=prtnr&pub=ref&publast=ref&type=org&typelast=org), [MUI](https://mui.com/), [Sentry](https://sentry.io/for/react/?utm_source=sponsored-conf&utm_medium=sponsored-event&utm_campaign=frontend-fy25q2-evergreen&utm_content=logo-reactconf2024-learnmore), [Abbott](https://www.jobs.abbott/software), [Expo](https://expo.dev/), [RedwoodJS](https://redwoodjs.com/), and [Vercel](https://vercel.com).

Thank you to the AV Team for the visuals, stage, and sound; and to the Westin Hotel for hosting us.

Thank you to all the speakers who shared their knowledge and experiences with the community.

Finally, thank you to everyone who attended in person and online to show what makes React, React. React is more than a library, it is a community, and it was inspiring to see everyone come together to share and learn together.

See you next time!

[PreviousReact Compiler Beta Release and Roadmap](/blog/2024/10/21/react-compiler-beta-release)[NextReact 19 RC](/blog/2024/04/25/react-19)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React v19[](#undefined "Link for this heading")

December 05, 2024 by [The React Team](/community/team)

### Note

### React 19 is now stable! [](#react-19-is-now-stable "Link for React 19 is now stable! ")

Additions since this post was originally shared with the React 19 RC in April:

  * **Pre-warming for suspended trees** : see [Improvements to Suspense](/blog/2024/04/25/react-19-upgrade-guide#improvements-to-suspense).
  * **React DOM static APIs** : see [New React DOM Static APIs](#new-react-dom-static-apis).



_The date for this post has been updated to reflect the stable release date._

React v19 is now available on npm!

In our [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide), we shared step-by-step instructions for upgrading your app to React 19. In this post, we’ll give an overview of the new features in React 19, and how you can adopt them.

  * [What’s new in React 19](#whats-new-in-react-19)
  * [Improvements in React 19](#improvements-in-react-19)
  * [How to upgrade](#how-to-upgrade)



For a list of breaking changes, see the [Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide).

## What’s new in React 19 [](#whats-new-in-react-19 "Link for What’s new in React 19 ")

### Actions [](#actions "Link for Actions ")

A common use case in React apps is to perform a data mutation and then update state in response. For example, when a user submits a form to change their name, you will make an API request, and then handle the response. In the past, you would need to handle pending states, errors, optimistic updates, and sequential requests manually.

For example, you could handle the pending and error state in `useState`:

```


// Before Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, setIsPending] = useState(false);

 const handleSubmit = async () => {

  setIsPending(true);

  const error = await updateName(name);

  setIsPending(false);

  if (error) {

   setError(error);

   return;

  } 

  redirect("/path");

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


In React 19, we’re adding support for using async functions in transitions to handle pending states, errors, forms, and optimistic updates automatically.

For example, you can use `useTransition` to handle the pending state for you:

```


// Using pending state from Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, startTransition] = useTransition();

 const handleSubmit = () => {

  startTransition(async () => {

   const error = await updateName(name);

   if (error) {

    setError(error);

    return;

   } 

   redirect("/path");

  })

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


The async transition will immediately set the `isPending` state to true, make the async request(s), and switch `isPending` to false after any transitions. This allows you to keep the current UI responsive and interactive while the data is changing.

### Note

#### By convention, functions that use async transitions are called “Actions”. [](#by-convention-functions-that-use-async-transitions-are-called-actions "Link for By convention, functions that use async transitions are called “Actions”. ")

Actions automatically manage submitting data for you:

  * **Pending state** : Actions provide a pending state that starts at the beginning of a request and automatically resets when the final state update is committed.
  * **Optimistic updates** : Actions support the new `useOptimistic`[](#new-hook-optimistic-updates) hook so you can show users instant feedback while the requests are submitting.
  * **Error handling** : Actions provide error handling so you can display Error Boundaries when a request fails, and revert optimistic updates to their original value automatically.
  * **Forms** : `<form>` elements now support passing functions to the `action` and `formAction` props. Passing functions to the `action` props use Actions by default and reset the form automatically after submission.



Building on top of Actions, React 19 introduces `useOptimistic`[](#new-hook-optimistic-updates) to manage optimistic updates, and a new hook `React.useActionState`[](#new-hook-useactionstate) to handle common cases for Actions. In `react-dom` we’re adding `<form>`[ Actions](#form-actions) to manage forms automatically and `useFormStatus`[](#new-hook-useformstatus) to support the common cases for Actions in forms.

In React 19, the above example can be simplified to:

```


// Using <form> Actions and useActionState

function ChangeName({ name, setName }) {

 const [error, submitAction, isPending] = useActionState(

  async (previousState, formData) => {

   const error = await updateName(formData.get("name"));

   if (error) {

    return error;

   }

   redirect("/path");

   return null;

  },

  null,

 );

 return (

  <form action={submitAction}>

   <input type="text" name="name" />

   <button type="submit" disabled={isPending}>Update</button>

   {error && <p>{error}</p>}

  </form>

 );

}


```


In the next section, we’ll break down each of the new Action features in React 19.

### New hook: `useActionState` [](#new-hook-useactionstate "Link for this heading")

To make the common cases easier for Actions, we’ve added a new hook called `useActionState`:

```


const [error, submitAction, isPending] = useActionState(

 async (previousState, newName) => {

  const error = await updateName(newName);

  if (error) {

   // You can return any result of the action.

   // Here, we return only the error.

   return error;

  }

  // handle success

  return null;

 },

 null,

);


```


`useActionState` accepts a function (the “Action”), and returns a wrapped Action to call. This works because Actions compose. When the wrapped Action is called, `useActionState` will return the last result of the Action as `data`, and the pending state of the Action as `pending`.

### Note

`React.useActionState` was previously called `ReactDOM.useFormState` in the Canary releases, but we’ve renamed it and deprecated `useFormState`.

See [#28491](https://github.com/facebook/react/pull/28491) for more info.

For more information, see the docs for `useActionState`[](/reference/react/useActionState).

### React DOM: `<form>` Actions [](#form-actions "Link for this heading")

Actions are also integrated with React 19’s new `<form>` features for `react-dom`. We’ve added support for passing functions as the `action` and `formAction` props of `<form>`, `<input>`, and `<button>` elements to automatically submit forms with Actions:

```


<form action={actionFunction}>


```


When a `<form>` Action succeeds, React will automatically reset the form for uncontrolled components. If you need to reset the `<form>` manually, you can call the new `requestFormReset` React DOM API.

For more information, see the `react-dom` docs for `<form>`[](/reference/react-dom/components/form), `<input>`[](/reference/react-dom/components/input), and `<button>`.

### React DOM: New hook: `useFormStatus` [](#new-hook-useformstatus "Link for this heading")

In design systems, it’s common to write design components that need access to information about the `<form>` they’re in, without drilling props down to the component. This can be done via Context, but to make the common case easier, we’ve added a new hook `useFormStatus`:

```


import {useFormStatus} from 'react-dom';

function DesignButton() {

 const {pending} = useFormStatus();

 return <button type="submit" disabled={pending} />

}


```


`useFormStatus` reads the status of the parent `<form>` as if the form was a Context provider.

For more information, see the `react-dom` docs for `useFormStatus`[](/reference/react-dom/hooks/useFormStatus).

### New hook: `useOptimistic` [](#new-hook-optimistic-updates "Link for this heading")

Another common UI pattern when performing a data mutation is to show the final state optimistically while the async request is underway. In React 19, we’re adding a new hook called `useOptimistic` to make this easier:

```


function ChangeName({currentName, onUpdateName}) {

 const [optimisticName, setOptimisticName] = useOptimistic(currentName);

 const submitAction = async formData => {

  const newName = formData.get("name");

  setOptimisticName(newName);

  const updatedName = await updateName(newName);

  onUpdateName(updatedName);

 };

 return (

  <form action={submitAction}>

   <p>Your name is: {optimisticName}</p>

   <p>

    <label>Change Name:</label>

    <input

     type="text"

     name="name"

     disabled={currentName !== optimisticName}

    />

   </p>

  </form>

 );

}


```


The `useOptimistic` hook will immediately render the `optimisticName` while the `updateName` request is in progress. When the update finishes or errors, React will automatically switch back to the `currentName` value.

For more information, see the docs for `useOptimistic`[](/reference/react/useOptimistic).

### New API: `use` [](#new-feature-use "Link for this heading")

In React 19 we’re introducing a new API to read resources in render: `use`.

For example, you can read a promise with `use`, and React will Suspend until the promise resolves:

```


import {use} from 'react';

function Comments({commentsPromise}) {

 // `use` will suspend until the promise resolves.

 const comments = use(commentsPromise);

 return comments.map(comment => <p key={comment.id}>{comment}</p>);

}

function Page({commentsPromise}) {

 // When `use` suspends in Comments,

 // this Suspense boundary will be shown.

 return (

  <Suspense fallback={<div>Loading...</div>}>

   <Comments commentsPromise={commentsPromise} />

  </Suspense>

 )

}


```


### Note

#### `use` does not support promises created in render. [](#use-does-not-support-promises-created-in-render "Link for this heading")

If you try to pass a promise created in render to `use`, React will warn:

Console

A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework.

To fix, you need to pass a promise from a suspense powered library or framework that supports caching for promises. In the future we plan to ship features to make it easier to cache promises in render.

You can also read context with `use`, allowing you to read Context conditionally such as after early returns:

```


import {use} from 'react';

import ThemeContext from './ThemeContext'

function Heading({children}) {

 if (children == null) {

  return null;

 }

 // This would not work with useContext

 // because of the early return.

 const theme = use(ThemeContext);

 return (

  <h1 style={{color: theme.color}}>

   {children}

  </h1>

 );

}


```


The `use` API can only be called in render, similar to hooks. Unlike hooks, `use` can be called conditionally. In the future we plan to support more ways to consume resources in render with `use`.

For more information, see the docs for `use`[](/reference/react/use).

## New React DOM Static APIs [](#new-react-dom-static-apis "Link for New React DOM Static APIs ")

We’ve added two new APIs to `react-dom/static` for static site generation:

  * `prerender`[](/reference/react-dom/static/prerender)
  * `prerenderToNodeStream`[](/reference/react-dom/static/prerenderToNodeStream)



These new APIs improve on `renderToString` by waiting for data to load for static HTML generation. They are designed to work with streaming environments like Node.js Streams and Web Streams. For example, in a Web Stream environment, you can prerender a React tree to static HTML with `prerender`:

```


import { prerender } from 'react-dom/static';

async function handler(request) {

 const {prelude} = await prerender(<App />, {

  bootstrapScripts: ['/main.js']

 });

 return new Response(prelude, {

  headers: { 'content-type': 'text/html' },

 });

}


```


Prerender APIs will wait for all data to load before returning the static HTML stream. Streams can be converted to strings, or sent with a streaming response. They do not support streaming content as it loads, which is supported by the existing [React DOM server rendering APIs](/reference/react-dom/server).

For more information, see [React DOM Static APIs](/reference/react-dom/static).

## React Server Components [](#react-server-components "Link for React Server Components ")

### Server Components [](#server-components "Link for Server Components ")

Server Components are a new option that allows rendering components ahead of time, before bundling, in an environment separate from your client application or SSR server. This separate environment is the “server” in React Server Components. Server Components can run once at build time on your CI server, or they can be run for each request using a web server.

React 19 includes all of the React Server Components features included from the Canary channel. This means libraries that ship with Server Components can now target React 19 as a peer dependency with a `react-server` [export condition](https://github.com/reactjs/rfcs/blob/main/text/0227-server-module-conventions.md#react-server-conditional-exports) for use in frameworks that support the [Full-stack React Architecture](/learn/start-a-new-react-project#which-features-make-up-the-react-teams-full-stack-architecture-vision).

### Note

#### How do I build support for Server Components? [](#how-do-i-build-support-for-server-components "Link for How do I build support for Server Components? ")

While React Server Components in React 19 are stable and will not break between minor versions, the underlying APIs used to implement a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x.

To support React Server Components as a bundler or framework, we recommend pinning to a specific React version, or using the Canary release. We will continue working with bundlers and frameworks to stabilize the APIs used to implement React Server Components in the future.

For more, see the docs for [React Server Components](/reference/rsc/server-components).

### Server Actions [](#server-actions "Link for Server Actions ")

Server Actions allow Client Components to call async functions executed on the server.

When a Server Action is defined with the `"use server"` directive, your framework will automatically create a reference to the server function, and pass that reference to the Client Component. When that function is called on the client, React will send a request to the server to execute the function, and return the result.

### Note

#### There is no directive for Server Components. [](#there-is-no-directive-for-server-components "Link for There is no directive for Server Components. ")

A common misunderstanding is that Server Components are denoted by `"use server"`, but there is no directive for Server Components. The `"use server"` directive is used for Server Actions.

For more info, see the docs for [Directives](/reference/rsc/directives).

Server Actions can be created in Server Components and passed as props to Client Components, or they can be imported and used in Client Components.

For more, see the docs for [React Server Actions](/reference/rsc/server-actions).

## Improvements in React 19 [](#improvements-in-react-19 "Link for Improvements in React 19 ")

### `ref` as a prop [](#ref-as-a-prop "Link for this heading")

Starting in React 19, you can now access `ref` as a prop for function components:

```


function MyInput({placeholder, ref}) {

 return <input placeholder={placeholder} ref={ref} />

}

//...

<MyInput ref={ref} />


```


New function components will no longer need `forwardRef`, and we will be publishing a codemod to automatically update your components to use the new `ref` prop. In future versions we will deprecate and remove `forwardRef`.

### Note

`refs` passed to classes are not passed as props since they reference the component instance.

### Diffs for hydration errors [](#diffs-for-hydration-errors "Link for Diffs for hydration errors ")

We also improved error reporting for hydration errors in `react-dom`. For example, instead of logging multiple errors in DEV without any information about the mismatch:

Console

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Uncaught Error: Text content does not match server-rendered HTML. at checkForUnmatchedText …

We now log a single message with a diff of the mismatch:

Console

Uncaught Error: Hydration failed because the server rendered HTML didn’t match the client. As a result this tree will be regenerated on the client. This can happen if an SSR-ed Client Component used: - A server/client branch `if (typeof window !== 'undefined')`. - Variable input such as `Date.now()` or `Math.random()` which changes each time it’s called. - Date formatting in a user’s locale which doesn’t match the server. - External changing data without sending a snapshot of it along with the HTML. - Invalid HTML tag nesting. It can also happen if the client has a browser extension installed which messes with the HTML before React loaded. <https://react.dev/link/hydration-mismatch> <App> <span> + Client - Server at throwOnHydrationMismatch …

### `<Context>` as a provider [](#context-as-a-provider "Link for this heading")

In React 19, you can render `<Context>` as a provider instead of `<Context.Provider>`:

```


const ThemeContext = createContext('');

function App({children}) {

 return (

  <ThemeContext value="dark">

   {children}

  </ThemeContext>

 ); 

}


```


New Context providers can use `<Context>` and we will be publishing a codemod to convert existing providers. In future versions we will deprecate `<Context.Provider>`.

### Cleanup functions for refs [](#cleanup-functions-for-refs "Link for Cleanup functions for refs ")

We now support returning a cleanup function from `ref` callbacks:

```


<input

 ref={(ref) => {

  // ref created

  // NEW: return a cleanup function to reset

  // the ref when element is removed from DOM.

  return () => {

   // ref cleanup

  };

 }}

/>


```


When the component unmounts, React will call the cleanup function returned from the `ref` callback. This works for DOM refs, refs to class components, and `useImperativeHandle`.

### Note

Previously, React would call `ref` functions with `null` when unmounting the component. If your `ref` returns a cleanup function, React will now skip this step.

In future versions, we will deprecate calling refs with `null` when unmounting components.

Due to the introduction of ref cleanup functions, returning anything else from a `ref` callback will now be rejected by TypeScript. The fix is usually to stop using implicit returns, for example:

```


- <div ref={current => (instance = current)} />

+ <div ref={current => {instance = current}} />


```


The original code returned the instance of the `HTMLDivElement` and TypeScript wouldn’t know if this was _supposed_ to be a cleanup function or if you didn’t want to return a cleanup function.

You can codemod this pattern with `no-implicit-ref-callback-return`[](https://github.com/eps1lon/types-react-codemod/#no-implicit-ref-callback-return).

### `useDeferredValue` initial value [](#use-deferred-value-initial-value "Link for this heading")

We’ve added an `initialValue` option to `useDeferredValue`:

```


function Search({deferredValue}) {

 // On initial render the value is ''.

 // Then a re-render is scheduled with the deferredValue.

 const value = useDeferredValue(deferredValue, '');

 return (

  <Results query={value} />

 );

}


```


When initialValue is provided, `useDeferredValue` will return it as `value` for the initial render of the component, and schedules a re-render in the background with the deferredValue returned.

For more, see `useDeferredValue`[](/reference/react/useDeferredValue).

### Support for Document Metadata [](#support-for-metadata-tags "Link for Support for Document Metadata ")

In HTML, document metadata tags like `<title>`, `<link>`, and `<meta>` are reserved for placement in the `<head>` section of the document. In React, the component that decides what metadata is appropriate for the app may be very far from the place where you render the `<head>` or React does not render the `<head>` at all. In the past, these elements would need to be inserted manually in an effect, or by libraries like `react-helmet`[](https://github.com/nfl/react-helmet), and required careful handling when server rendering a React application.

In React 19, we’re adding support for rendering document metadata tags in components natively:

```


function BlogPost({post}) {

 return (

  <article>

   <h1>{post.title}</h1>

   <title>{post.title}</title>

   <meta name="author" content="Josh" />

   <link rel="author" href="https://twitter.com/joshcstory/" />

   <meta name="keywords" content={post.keywords} />

   <p>

    Eee equals em-see-squared...

   </p>

  </article>

 );

}


```


When React renders this component, it will see the `<title>` `<link>` and `<meta>` tags, and automatically hoist them to the `<head>` section of document. By supporting these metadata tags natively, we’re able to ensure they work with client-only apps, streaming SSR, and Server Components.

### Note

#### You may still want a Metadata library [](#you-may-still-want-a-metadata-library "Link for You may still want a Metadata library ")

For simple use cases, rendering Document Metadata as tags may be suitable, but libraries can offer more powerful features like overriding generic metadata with specific metadata based on the current route. These features make it easier for frameworks and libraries like `react-helmet`[](https://github.com/nfl/react-helmet) to support metadata tags, rather than replace them.

For more info, see the docs for `<title>`[](/reference/react-dom/components/title), `<link>`[](/reference/react-dom/components/link), and `<meta>`[](/reference/react-dom/components/meta).

### Support for stylesheets [](#support-for-stylesheets "Link for Support for stylesheets ")

Stylesheets, both externally linked (`<link rel="stylesheet" href="...">`) and inline (`<style>...</style>`), require careful positioning in the DOM due to style precedence rules. Building a stylesheet capability that allows for composability within components is hard, so users often end up either loading all of their styles far from the components that may depend on them, or they use a style library which encapsulates this complexity.

In React 19, we’re addressing this complexity and providing even deeper integration into Concurrent Rendering on the Client and Streaming Rendering on the Server with built in support for stylesheets. If you tell React the `precedence` of your stylesheet it will manage the insertion order of the stylesheet in the DOM and ensure that the stylesheet (if external) is loaded before revealing content that depends on those style rules.

```


function ComponentOne() {

 return (

  <Suspense fallback="loading...">

   <link rel="stylesheet" href="foo" precedence="default" />

   <link rel="stylesheet" href="bar" precedence="high" />

   <article class="foo-class bar-class">

    {...}

   </article>

  </Suspense>

 )

}

function ComponentTwo() {

 return (

  <div>

   <p>{...}</p>

   <link rel="stylesheet" href="baz" precedence="default" /> <-- will be inserted between foo & bar

  </div>

 )

}


```


During Server Side Rendering React will include the stylesheet in the `<head>`, which ensures that the browser will not paint until it has loaded. If the stylesheet is discovered late after we’ve already started streaming, React will ensure that the stylesheet is inserted into the `<head>` on the client before revealing the content of a Suspense boundary that depends on that stylesheet.

During Client Side Rendering React will wait for newly rendered stylesheets to load before committing the render. If you render this component from multiple places within your application React will only include the stylesheet once in the document:

```


function App() {

 return <>

  <ComponentOne />

  ...

  <ComponentOne /> // won't lead to a duplicate stylesheet link in the DOM

 </>

}


```


For users accustomed to loading stylesheets manually this is an opportunity to locate those stylesheets alongside the components that depend on them allowing for better local reasoning and an easier time ensuring you only load the stylesheets that you actually depend on.

Style libraries and style integrations with bundlers can also adopt this new capability so even if you don’t directly render your own stylesheets, you can still benefit as your tools are upgraded to use this feature.

For more details, read the docs for `<link>`[](/reference/react-dom/components/link) and `<style>`[](/reference/react-dom/components/style).

### Support for async scripts [](#support-for-async-scripts "Link for Support for async scripts ")

In HTML normal scripts (`<script src="...">`) and deferred scripts (`<script defer="" src="...">`) load in document order which makes rendering these kinds of scripts deep within your component tree challenging. Async scripts (`<script async="" src="...">`) however will load in arbitrary order.

In React 19 we’ve included better support for async scripts by allowing you to render them anywhere in your component tree, inside the components that actually depend on the script, without having to manage relocating and deduplicating script instances.

```


function MyComponent() {

 return (

  <div>

   <script async={true} src="..." />

   Hello World

  </div>

 )

}

function App() {

 <html>

  <body>

   <MyComponent>

   ...

   <MyComponent> // won't lead to duplicate script in the DOM

  </body>

 </html>

}


```


In all rendering environments, async scripts will be deduplicated so that React will only load and execute the script once even if it is rendered by multiple different components.

In Server Side Rendering, async scripts will be included in the `<head>` and prioritized behind more critical resources that block paint such as stylesheets, fonts, and image preloads.

For more details, read the docs for `<script>`[](/reference/react-dom/components/script).

### Support for preloading resources [](#support-for-preloading-resources "Link for Support for preloading resources ")

During initial document load and on client side updates, telling the Browser about resources that it will likely need to load as early as possible can have a dramatic effect on page performance.

React 19 includes a number of new APIs for loading and preloading Browser resources to make it as easy as possible to build great experiences that aren’t held back by inefficient resource loading.

```


import { prefetchDNS, preconnect, preload, preinit } from 'react-dom'

function MyComponent() {

 preinit('https://.../path/to/some/script.js', {as: 'script' }) // loads and executes this script eagerly

 preload('https://.../path/to/font.woff', { as: 'font' }) // preloads this font

 preload('https://.../path/to/stylesheet.css', { as: 'style' }) // preloads this stylesheet

 prefetchDNS('https://...') // when you may not actually request anything from this host

 preconnect('https://...') // when you will request something but aren't sure what

}


```


```


<!-- the above would result in the following DOM/HTML -->

<html>

 <head>

  <!-- links/scripts are prioritized by their utility to early loading, not call order -->

  <link rel="prefetch-dns" href="https://...">

  <link rel="preconnect" href="https://...">

  <link rel="preload" as="font" href="https://.../path/to/font.woff">

  <link rel="preload" as="style" href="https://.../path/to/stylesheet.css">

  <script async="" src="https://.../path/to/some/script.js"></script>

 </head>

 <body>

  ...

 </body>

</html>


```


These APIs can be used to optimize initial page loads by moving discovery of additional resources like fonts out of stylesheet loading. They can also make client updates faster by prefetching a list of resources used by an anticipated navigation and then eagerly preloading those resources on click or even on hover.

For more details see [Resource Preloading APIs](/reference/react-dom#resource-preloading-apis).

### Compatibility with third-party scripts and extensions [](#compatibility-with-third-party-scripts-and-extensions "Link for Compatibility with third-party scripts and extensions ")

We’ve improved hydration to account for third-party scripts and browser extensions.

When hydrating, if an element that renders on the client doesn’t match the element found in the HTML from the server, React will force a client re-render to fix up the content. Previously, if an element was inserted by third-party scripts or browser extensions, it would trigger a mismatch error and client render.

In React 19, unexpected tags in the `<head>` and `<body>` will be skipped over, avoiding the mismatch errors. If React needs to re-render the entire document due to an unrelated hydration mismatch, it will leave in place stylesheets inserted by third-party scripts and browser extensions.

### Better error reporting [](#error-handling "Link for Better error reporting ")

We improved error handling in React 19 to remove duplication and provide options for handling caught and uncaught errors. For example, when there’s an error in render caught by an Error Boundary, previously React would throw the error twice (once for the original error, then again after failing to automatically recover), and then call `console.error` with info about where the error occurred.

This resulted in three errors for every caught error:

Console

Uncaught Error: hit at Throws at renderWithHooks …

Uncaught Error: hit <-- Duplicate at Throws at renderWithHooks …

The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary.

In React 19, we log a single error with all the error information included:

Console

Error: hit at Throws at renderWithHooks … The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary. at ErrorBoundary at App

Additionally, we’ve added two new root options to complement `onRecoverableError`:

  * `onCaughtError`: called when React catches an error in an Error Boundary.
  * `onUncaughtError`: called when an error is thrown and not caught by an Error Boundary.
  * `onRecoverableError`: called when an error is thrown and automatically recovered.



For more info and examples, see the docs for `createRoot`[](/reference/react-dom/client/createRoot) and `hydrateRoot`[](/reference/react-dom/client/hydrateRoot).

### Support for Custom Elements [](#support-for-custom-elements "Link for Support for Custom Elements ")

React 19 adds full support for custom elements and passes all tests on [Custom Elements Everywhere](https://custom-elements-everywhere.com/).

In past versions, using Custom Elements in React has been difficult because React treated unrecognized props as attributes rather than properties. In React 19, we’ve added support for properties that works on the client and during SSR with the following strategy:

  * **Server Side Rendering** : props passed to a custom element will render as attributes if their type is a primitive value like `string`, `number`, or the value is `true`. Props with non-primitive types like `object`, `symbol`, `function`, or value `false` will be omitted.
  * **Client Side Rendering** : props that match a property on the Custom Element instance will be assigned as properties, otherwise they will be assigned as attributes.



Thanks to [Joey Arhar](https://github.com/josepharhar) for driving the design and implementation of Custom Element support in React.

#### How to upgrade [](#how-to-upgrade "Link for How to upgrade ")

See the [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide) for step-by-step instructions and a full list of breaking and notable changes.

_Note: this post was originally published 04/25/2024 and has been updated to 12/05/2024 with the stable release._

[ PreviousBlog](/blog)[NextReact Compiler Beta Release and Roadmap](/blog/2024/10/21/react-compiler-beta-release)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Installation[](#undefined "Link for this heading")

React has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.

### In this chapter

  * [How to start a new React project](/learn/start-a-new-react-project)
  * [How to add React to an existing project](/learn/add-react-to-an-existing-project)
  * [How to set up your editor](/learn/editor-setup)
  * [How to install React Developer Tools](/learn/react-developer-tools)



## Try React [](#try-react "Link for Try React ")

You don’t need to install anything to play with React. Try editing this sandbox!

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

9

1

2

3

4

5

6

7

8

function Greeting({ name }) {

return <h1>Hello, {name}</h1>;

}

export default function App() {

return <Greeting name="world" />

}

You can edit it directly or open it in a new tab by pressing the “Fork” button in the upper right corner.

Most pages in the React documentation contain sandboxes like this. Outside of the React documentation, there are many online sandboxes that support React: for example, [CodeSandbox](https://codesandbox.io/s/new), [StackBlitz](https://stackblitz.com/fork/react), or [CodePen.](https://codepen.io/pen?template=QWYVwWN)

### Try React locally [](#try-react-locally "Link for Try React locally ")

To try React locally on your computer, [download this HTML page.](https://gist.githubusercontent.com/gaearon/0275b1e1518599bbeafcde4722e79ed1/raw/db72dcbf3384ee1708c4a07d3be79860db04bff0/example.html) Open it in your editor and in your browser!

## Start a new React project [](#start-a-new-react-project "Link for Start a new React project ")

If you want to build an app or a website fully with React, [start a new React project.](/learn/start-a-new-react-project)

## Add React to an existing project [](#add-react-to-an-existing-project "Link for Add React to an existing project ")

If want to try using React in your existing app or a website, [add React to an existing project.](/learn/add-react-to-an-existing-project)

## Next steps [](#next-steps "Link for Next steps ")

Head to the [Quick Start](/learn) guide for a tour of the most important React concepts you will encounter every day.

[PreviousThinking in React](/learn/thinking-in-react)[NextStart a New React Project](/learn/start-a-new-react-project)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Try React ](#try-react)
  * [Try React locally ](#try-react-locally)
  * [Start a new React project ](#start-a-new-react-project)
  * [Add React to an existing project ](#add-react-to-an-existing-project)
  * [Next steps ](#next-steps)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Describing the UI[](#undefined "Link for this heading")

React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable _components._ From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.

### In this chapter

  * [How to write your first React component](/learn/your-first-component)
  * [When and how to create multi-component files](/learn/importing-and-exporting-components)
  * [How to add markup to JavaScript with JSX](/learn/writing-markup-with-jsx)
  * [How to use curly braces with JSX to access JavaScript functionality from your components](/learn/javascript-in-jsx-with-curly-braces)
  * [How to configure components with props](/learn/passing-props-to-a-component)
  * [How to conditionally render components](/learn/conditional-rendering)
  * [How to render multiple components at a time](/learn/rendering-lists)
  * [How to avoid confusing bugs by keeping components pure](/learn/keeping-components-pure)
  * [Why understanding your UI as trees is useful](/learn/understanding-your-ui-as-a-tree)



## Your first component [](#your-first-component "Link for Your first component ")

React applications are built from isolated pieces of UI called _components_. A React component is a JavaScript function that you can sprinkle with markup. Components can be as small as a button, or as large as an entire page. Here is a `Gallery` component rendering three `Profile` components:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

99

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

function Profile() {

return (

<img

src="https://i.imgur.com/MK3eW3As.jpg"

alt="Katherine Johnson"

/>

);

}

export default function Gallery() {

return (

<section>

<h1>Amazing scientists</h1>

<Profile />

<Profile />

<Profile />

</section>

);

}

Show more

## Ready to learn this topic?

Read **[Your First Component](/learn/your-first-component)** to learn how to declare and use React components.

[Read More](/learn/your-first-component)

## Importing and exporting components [](#importing-and-exporting-components "Link for Importing and exporting components ")

You can declare many components in one file, but large files can get difficult to navigate. To solve this, you can _export_ a component into its own file, and then _import_ that component from another file:

Gallery.jsProfile.js

Gallery.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import Profile from './Profile.js';
export default function Gallery() {
 return (
  <section>
   <h1>Amazing scientists</h1>
   <Profile />
   <Profile />
   <Profile />
  </section>
 );
}

```


## Ready to learn this topic?

Read **[Importing and Exporting Components](/learn/importing-and-exporting-components)** to learn how to split components into their own files.

[Read More](/learn/importing-and-exporting-components)

## Writing markup with JSX [](#writing-markup-with-jsx "Link for Writing markup with JSX ")

Each React component is a JavaScript function that may contain some markup that React renders into the browser. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information.

If we paste existing HTML markup into a React component, it won’t always work:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
export default function TodoList() {
 return (
  // This doesn't quite work!
  <h1>Hedy Lamarr's Todos</h1>
  <img
   src="https://i.imgur.com/yXOvdOSs.jpg"
   alt="Hedy Lamarr"
   class="photo"
  >
  <ul>
   <li>Invent new traffic lights
   <li>Rehearse a movie scene
   <li>Improve spectrum technology
  </ul>

```


Show more

If you have existing HTML like this, you can fix it using a [converter](https://transform.tools/html-to-jsx):

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
export default function TodoList() {
 return (
  <>
   <h1>Hedy Lamarr's Todos</h1>
   <img
    src="https://i.imgur.com/yXOvdOSs.jpg"
    alt="Hedy Lamarr"
    className="photo"
   />
   <ul>
    <li>Invent new traffic lights</li>
    <li>Rehearse a movie scene</li>
    <li>Improve spectrum technology</li>
   </ul>
  </>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Writing Markup with JSX](/learn/writing-markup-with-jsx)** to learn how to write valid JSX.

[Read More](/learn/writing-markup-with-jsx)

## JavaScript in JSX with curly braces [](#javascript-in-jsx-with-curly-braces "Link for JavaScript in JSX with curly braces ")

JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to “open a window” to JavaScript:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
const person = {
 name: 'Gregorio Y. Zara',
 theme: {
  backgroundColor: 'black',
  color: 'pink'
 }
};
export default function TodoList() {
 return (
  <div style={person.theme}>
   <h1>{person.name}'s Todos</h1>
   <img
    className="avatar"
    src="https://i.imgur.com/7vQD0fPs.jpg"
    alt="Gregorio Y. Zara"
   />
   <ul>
    <li>Improve the videophone</li>
    <li>Prepare aeronautics lectures</li>
    <li>Work on the alcohol-fuelled engine</li>
   </ul>
  </div>
 );
}

```


Show more

## Ready to learn this topic?

Read **[JavaScript in JSX with Curly Braces](/learn/javascript-in-jsx-with-curly-braces)** to learn how to access JavaScript data from JSX.

[Read More](/learn/javascript-in-jsx-with-curly-braces)

## Passing props to a component [](#passing-props-to-a-component "Link for Passing props to a component ")

React components use _props_ to communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, functions, and even JSX!

App.jsutils.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { getImageUrl } from './utils.js'
export default function Profile() {
 return (
  <Card>
   <Avatar
    size={100}
    person={{
     name: 'Katsuko Saruhashi',
     imageId: 'YfeOqp2'
    }}
   />
  </Card>
 );
}
function Avatar({ person, size }) {
 return (
  <img
   className="avatar"
   src={getImageUrl(person)}
   alt={person.name}
   width={size}
   height={size}
  />
 );
}
function Card({ children }) {
 return (
  <div className="card">
   {children}
  </div>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Passing Props to a Component](/learn/passing-props-to-a-component)** to learn how to pass and read props.

[Read More](/learn/passing-props-to-a-component)

## Conditional rendering [](#conditional-rendering "Link for Conditional rendering ")

Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like `if` statements, `&&`, and `? :` operators.

In this example, the JavaScript `&&` operator is used to conditionally render a checkmark:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
function Item({ name, isPacked }) {
 return (
  <li className="item">
   {name} {isPacked && '✅'}
  </li>
 );
}
export default function PackingList() {
 return (
  <section>
   <h1>Sally Ride's Packing List</h1>
   <ul>
    <Item
     isPacked={true}
     name="Space suit"
    />
    <Item
     isPacked={true}
     name="Helmet with a golden leaf"
    />
    <Item
     isPacked={false}
     name="Photo of Tam"
    />
   </ul>
  </section>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Conditional Rendering](/learn/conditional-rendering)** to learn the different ways to render content conditionally.

[Read More](/learn/conditional-rendering)

## Rendering lists [](#rendering-lists "Link for Rendering lists ")

You will often want to display multiple similar components from a collection of data. You can use JavaScript’s `filter()` and `map()` with React to filter and transform your array of data into an array of components.

For each array item, you will need to specify a `key`. Usually, you will want to use an ID from the database as a `key`. Keys let React keep track of each item’s place in the list even if the list changes.

App.jsdata.jsutils.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { people } from './data.js';
import { getImageUrl } from './utils.js';
export default function List() {
 const listItems = people.map(person =>
  <li key={person.id}>
   <img
    src={getImageUrl(person)}
    alt={person.name}
   />
   <p>
    <b>{person.name}:</b>
    {' ' + person.profession + ' '}
    known for {person.accomplishment}
   </p>
  </li>
 );
 return (
  <article>
   <h1>Scientists</h1>
   <ul>{listItems}</ul>
  </article>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Rendering Lists](/learn/rendering-lists)** to learn how to render a list of components, and how to choose a key.

[Read More](/learn/rendering-lists)

## Keeping components pure [](#keeping-components-pure "Link for Keeping components pure ")

Some JavaScript functions are _pure._ A pure function:

  * **Minds its own business.** It does not change any objects or variables that existed before it was called.
  * **Same inputs, same output.** Given the same inputs, a pure function should always return the same result.



By strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. Here is an example of an impure component:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
let guest = 0;
function Cup() {
 // Bad: changing a preexisting variable!
 guest = guest + 1;
 return <h2>Tea cup for guest #{guest}</h2>;
}
export default function TeaSet() {
 return (
  <>
   <Cup />
   <Cup />
   <Cup />
  </>
 );
}

```


Show more

You can make this component pure by passing a prop instead of modifying a preexisting variable:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
function Cup({ guest }) {
 return <h2>Tea cup for guest #{guest}</h2>;
}
export default function TeaSet() {
 return (
  <>
   <Cup guest={1} />
   <Cup guest={2} />
   <Cup guest={3} />
  </>
 );
}

```


## Ready to learn this topic?

Read **[Keeping Components Pure](/learn/keeping-components-pure)** to learn how to write components as pure, predictable functions.

[Read More](/learn/keeping-components-pure)

## Your UI as a tree [](#your-ui-as-a-tree "Link for Your UI as a tree ")

React uses trees to model the relationships between components and modules.

A React render tree is a representation of the parent and child relationship between components.

An example React render tree.

Components near the top of the tree, near the root component, are considered top-level components. Components with no child components are leaf components. This categorization of components is useful for understanding data flow and rendering performance.

Modelling the relationship between JavaScript modules is another useful way to understand your app. We refer to it as a module dependency tree.

An example module dependency tree.

A dependency tree is often used by build tools to bundle all the relevant JavaScript code for the client to download and render. A large bundle size regresses user experience for React apps. Understanding the module dependency tree is helpful to debug such issues.

## Ready to learn this topic?

Read **[Your UI as a Tree](/learn/understanding-your-ui-as-a-tree)** to learn how to create a render and module dependency trees for a React app and how they’re useful mental models for improving user experience and performance.

[Read More](/learn/understanding-your-ui-as-a-tree)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Your First Component](/learn/your-first-component) to start reading this chapter page by page!

Or, if you’re already familiar with these topics, why not read about [Adding Interactivity](/learn/adding-interactivity)?

[NextYour First Component](/learn/your-first-component)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Your first component ](#your-first-component)
  * [Importing and exporting components ](#importing-and-exporting-components)
  * [Writing markup with JSX ](#writing-markup-with-jsx)
  * [JavaScript in JSX with curly braces ](#javascript-in-jsx-with-curly-braces)
  * [Passing props to a component ](#passing-props-to-a-component)
  * [Conditional rendering ](#conditional-rendering)
  * [Rendering lists ](#rendering-lists)
  * [Keeping components pure ](#keeping-components-pure)
  * [Your UI as a tree ](#your-ui-as-a-tree)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Adding Interactivity[](#undefined "Link for this heading")

Some things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is called _state._ You can add state to any component, and update it as needed. In this chapter, you’ll learn how to write components that handle interactions, update their state, and display different output over time.

### In this chapter

  * [How to handle user-initiated events](/learn/responding-to-events)
  * [How to make components “remember” information with state](/learn/state-a-components-memory)
  * [How React updates the UI in two phases](/learn/render-and-commit)
  * [Why state doesn’t update right after you change it](/learn/state-as-a-snapshot)
  * [How to queue multiple state updates](/learn/queueing-a-series-of-state-updates)
  * [How to update an object in state](/learn/updating-objects-in-state)
  * [How to update an array in state](/learn/updating-arrays-in-state)



## Responding to events [](#responding-to-events "Link for Responding to events ")

React lets you add _event handlers_ to your JSX. Event handlers are your own functions that will be triggered in response to user interactions like clicking, hovering, focusing on form inputs, and so on.

Built-in components like `<button>` only support built-in browser events like `onClick`. However, you can also create your own components, and give their event handler props any application-specific names that you like.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
export default function App() {
 return (
  <Toolbar
   onPlayMovie={() => alert('Playing!')}
   onUploadImage={() => alert('Uploading!')}
  />
 );
}
function Toolbar({ onPlayMovie, onUploadImage }) {
 return (
  <div>
   <Button onClick={onPlayMovie}>
    Play Movie
   </Button>
   <Button onClick={onUploadImage}>
    Upload Image
   </Button>
  </div>
 );
}
function Button({ onClick, children }) {
 return (
  <button onClick={onClick}>
   {children}
  </button>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Responding to Events](/learn/responding-to-events)** to learn how to add event handlers.

[Read More](/learn/responding-to-events)

## State: a component’s memory [](#state-a-components-memory "Link for State: a component’s memory ")

Components often need to change what’s on the screen as a result of an interaction. Typing into the form should update the input field, clicking “next” on an image carousel should change which image is displayed, clicking “buy” puts a product in the shopping cart. Components need to “remember” things: the current input value, the current image, the shopping cart. In React, this kind of component-specific memory is called _state._

You can add state to a component with a `useState`[](/reference/react/useState) Hook. _Hooks_ are special functions that let your components use React features (state is one of those features). The `useState` Hook lets you declare a state variable. It takes the initial state and returns a pair of values: the current state, and a state setter function that lets you update it.

```


const [index, setIndex] = useState(0);

const [showMore, setShowMore] = useState(false);


```


Here is how an image gallery uses and updates state on click:

App.jsdata.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
import { sculptureList } from './data.js';
export default function Gallery() {
 const [index, setIndex] = useState(0);
 const [showMore, setShowMore] = useState(false);
 const hasNext = index < sculptureList.length - 1;
 function handleNextClick() {
  if (hasNext) {
   setIndex(index + 1);
  } else {
   setIndex(0);
  }
 }
 function handleMoreClick() {
  setShowMore(!showMore);
 }
 let sculpture = sculptureList[index];
 return (
  <>
   <button onClick={handleNextClick}>
    Next
   </button>
   <h2>
    <i>{sculpture.name} </i>
    by {sculpture.artist}
   </h2>
   <h3>
    ({index + 1} of {sculptureList.length})
   </h3>
   <button onClick={handleMoreClick}>
    {showMore ? 'Hide' : 'Show'} details
   </button>
   {showMore && <p>{sculpture.description}</p>}
   <img
    src={sculpture.url}
    alt={sculpture.alt}
   />
  </>
 );
}

```


Show more

## Ready to learn this topic?

Read **[State: A Component’s Memory](/learn/state-a-components-memory)** to learn how to remember a value and update it on interaction.

[Read More](/learn/state-a-components-memory)

## Render and commit [](#render-and-commit "Link for Render and commit ")

Before your components are displayed on the screen, they must be rendered by React. Understanding the steps in this process will help you think about how your code executes and explain its behavior.

Imagine that your components are cooks in the kitchen, assembling tasty dishes from ingredients. In this scenario, React is the waiter who puts in requests from customers and brings them their orders. This process of requesting and serving UI has three steps:

  1. **Triggering** a render (delivering the diner’s order to the kitchen)
  2. **Rendering** the component (preparing the order in the kitchen)
  3. **Committing** to the DOM (placing the order on the table)



  1. Trigger
  2. Render
  3. Commit



Illustrated by [Rachel Lee Nabors](https://nearestnabors.com/)

## Ready to learn this topic?

Read **[Render and Commit](/learn/render-and-commit)** to learn the lifecycle of a UI update.

[Read More](/learn/render-and-commit)

## State as a snapshot [](#state-as-a-snapshot "Link for State as a snapshot ")

Unlike regular JavaScript variables, React state behaves more like a snapshot. Setting it does not change the state variable you already have, but instead triggers a re-render. This can be surprising at first!

```


console.log(count); // 0

setCount(count + 1); // Request a re-render with 1

console.log(count); // Still 0!


```


This behavior helps you avoid subtle bugs. Here is a little chat app. Try to guess what happens if you press “Send” first and _then_ change the recipient to Bob. Whose name will appear in the `alert` five seconds later?

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [to, setTo] = useState('Alice');
 const [message, setMessage] = useState('Hello');
 function handleSubmit(e) {
  e.preventDefault();
  setTimeout(() => {
   alert(`You said ${message} to ${to}`);
  }, 5000);
 }
 return (
  <form onSubmit={handleSubmit}>
   <label>
    To:{' '}
    <select
     value={to}
     onChange={e => setTo(e.target.value)}>
     <option value="Alice">Alice</option>
     <option value="Bob">Bob</option>
    </select>
   </label>
   <textarea
    placeholder="Message"
    value={message}
    onChange={e => setMessage(e.target.value)}
   />
   <button type="submit">Send</button>
  </form>
 );
}

```


Show more

## Ready to learn this topic?

Read **[State as a Snapshot](/learn/state-as-a-snapshot)** to learn why state appears “fixed” and unchanging inside the event handlers.

[Read More](/learn/state-as-a-snapshot)

## Queueing a series of state updates [](#queueing-a-series-of-state-updates "Link for Queueing a series of state updates ")

This component is buggy: clicking “+3” increments the score only once.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Counter() {
 const [score, setScore] = useState(0);
 function increment() {
  setScore(score + 1);
 }
 return (
  <>
   <button onClick={() => increment()}>+1</button>
   <button onClick={() => {
    increment();
    increment();
    increment();
   }}>+3</button>
   <h1>Score: {score}</h1>
  </>
 )
}

```


Show more

[State as a Snapshot](/learn/state-as-a-snapshot) explains why this is happening. Setting state requests a new re-render, but does not change it in the already running code. So `score` continues to be `0` right after you call `setScore(score + 1)`.

```


console.log(score); // 0

setScore(score + 1); // setScore(0 + 1);

console.log(score); // 0

setScore(score + 1); // setScore(0 + 1);

console.log(score); // 0

setScore(score + 1); // setScore(0 + 1);

console.log(score); // 0


```


You can fix this by passing an _updater function_ when setting state. Notice how replacing `setScore(score + 1)` with `setScore(s => s + 1)` fixes the “+3” button. This lets you queue multiple state updates.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Counter() {
 const [score, setScore] = useState(0);
 function increment() {
  setScore(s => s + 1);
 }
 return (
  <>
   <button onClick={() => increment()}>+1</button>
   <button onClick={() => {
    increment();
    increment();
    increment();
   }}>+3</button>
   <h1>Score: {score}</h1>
  </>
 )
}

```


Show more

## Ready to learn this topic?

Read **[Queueing a Series of State Updates](/learn/queueing-a-series-of-state-updates)** to learn how to queue a sequence of state updates.

[Read More](/learn/queueing-a-series-of-state-updates)

## Updating objects in state [](#updating-objects-in-state "Link for Updating objects in state ")

State can hold any kind of JavaScript value, including objects. But you shouldn’t change objects and arrays that you hold in the React state directly. Instead, when you want to update an object and array, you need to create a new one (or make a copy of an existing one), and then update the state to use that copy.

Usually, you will use the `...` spread syntax to copy objects and arrays that you want to change. For example, updating a nested object could look like this:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [person, setPerson] = useState({
  name: 'Niki de Saint Phalle',
  artwork: {
   title: 'Blue Nana',
   city: 'Hamburg',
   image: 'https://i.imgur.com/Sd1AgUOm.jpg',
  }
 });
 function handleNameChange(e) {
  setPerson({
   ...person,
   name: e.target.value
  });
 }
 function handleTitleChange(e) {
  setPerson({
   ...person,
   artwork: {
    ...person.artwork,
    title: e.target.value
   }
  });
 }
 function handleCityChange(e) {
  setPerson({
   ...person,
   artwork: {
    ...person.artwork,
    city: e.target.value
   }
  });
 }
 function handleImageChange(e) {
  setPerson({
   ...person,
   artwork: {
    ...person.artwork,
    image: e.target.value
   }
  });
 }
 return (
  <>
   <label>
    Name:
    <input
     value={person.name}
     onChange={handleNameChange}
    />
   </label>
   <label>
    Title:
    <input
     value={person.artwork.title}
     onChange={handleTitleChange}
    />
   </label>
   <label>
    City:
    <input
     value={person.artwork.city}
     onChange={handleCityChange}
    />
   </label>
   <label>
    Image:
    <input
     value={person.artwork.image}
     onChange={handleImageChange}
    />
   </label>
   <p>
    <i>{person.artwork.title}</i>
    {' by '}
    {person.name}
    <br />
    (located in {person.artwork.city})
   </p>
   <img
    src={person.artwork.image}
    alt={person.artwork.title}
   />
  </>
 );
}

```


Show more

If copying objects in code gets tedious, you can use a library like [Immer](https://github.com/immerjs/use-immer) to reduce repetitive code:

package.jsonApp.js

package.json

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
{
 "dependencies": {
  "immer": "1.7.3",
  "react": "latest",
  "react-dom": "latest",
  "react-scripts": "latest",
  "use-immer": "0.5.1"
 },
 "scripts": {
  "start": "react-scripts start",
  "build": "react-scripts build",
  "test": "react-scripts test --env=jsdom",
  "eject": "react-scripts eject"
 },
 "devDependencies": {}
}
```


## Ready to learn this topic?

Read **[Updating Objects in State](/learn/updating-objects-in-state)** to learn how to update objects correctly.

[Read More](/learn/updating-objects-in-state)

## Updating arrays in state [](#updating-arrays-in-state "Link for Updating arrays in state ")

Arrays are another type of mutable JavaScript objects you can store in state and should treat as read-only. Just like with objects, when you want to update an array stored in state, you need to create a new one (or make a copy of an existing one), and then set state to use the new array:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
const initialList = [
 { id: 0, title: 'Big Bellies', seen: false },
 { id: 1, title: 'Lunar Landscape', seen: false },
 { id: 2, title: 'Terracotta Army', seen: true },
];
export default function BucketList() {
 const [list, setList] = useState(
  initialList
 );
 function handleToggle(artworkId, nextSeen) {
  setList(list.map(artwork => {
   if (artwork.id === artworkId) {
    return { ...artwork, seen: nextSeen };
   } else {
    return artwork;
   }
  }));
 }
 return (
  <>
   <h1>Art Bucket List</h1>
   <h2>My list of art to see:</h2>
   <ItemList
    artworks={list}
    onToggle={handleToggle} />
  </>
 );
}
function ItemList({ artworks, onToggle }) {
 return (
  <ul>
   {artworks.map(artwork => (
    <li key={artwork.id}>
     <label>
      <input
       type="checkbox"
       checked={artwork.seen}
       onChange={e => {
        onToggle(
         artwork.id,
         e.target.checked
        );
       }}
      />
      {artwork.title}
     </label>
    </li>
   ))}
  </ul>
 );
}

```


Show more

If copying arrays in code gets tedious, you can use a library like [Immer](https://github.com/immerjs/use-immer) to reduce repetitive code:

package.jsonApp.js

package.json

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
{
 "dependencies": {
  "immer": "1.7.3",
  "react": "latest",
  "react-dom": "latest",
  "react-scripts": "latest",
  "use-immer": "0.5.1"
 },
 "scripts": {
  "start": "react-scripts start",
  "build": "react-scripts build",
  "test": "react-scripts test --env=jsdom",
  "eject": "react-scripts eject"
 },
 "devDependencies": {}
}
```


## Ready to learn this topic?

Read **[Updating Arrays in State](/learn/updating-arrays-in-state)** to learn how to update arrays correctly.

[Read More](/learn/updating-arrays-in-state)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Responding to Events](/learn/responding-to-events) to start reading this chapter page by page!

Or, if you’re already familiar with these topics, why not read about [Managing State](/learn/managing-state)?

[PreviousYour UI as a Tree](/learn/understanding-your-ui-as-a-tree)[NextResponding to Events](/learn/responding-to-events)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Responding to events ](#responding-to-events)
  * [State: a component’s memory ](#state-a-components-memory)
  * [Render and commit ](#render-and-commit)
  * [State as a snapshot ](#state-as-a-snapshot)
  * [Queueing a series of state updates ](#queueing-a-series-of-state-updates)
  * [Updating objects in state ](#updating-objects-in-state)
  * [Updating arrays in state ](#updating-arrays-in-state)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Managing State[](#undefined "Link for this heading")

Intermediate

As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you’ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.

### In this chapter

  * [How to think about UI changes as state changes](/learn/reacting-to-input-with-state)
  * [How to structure state well](/learn/choosing-the-state-structure)
  * [How to “lift state up” to share it between components](/learn/sharing-state-between-components)
  * [How to control whether the state gets preserved or reset](/learn/preserving-and-resetting-state)
  * [How to consolidate complex state logic in a function](/learn/extracting-state-logic-into-a-reducer)
  * [How to pass information without “prop drilling”](/learn/passing-data-deeply-with-context)
  * [How to scale state management as your app grows](/learn/scaling-up-with-reducer-and-context)



## Reacting to input with state [](#reacting-to-input-with-state "Link for Reacting to input with state ")

With React, you won’t modify the UI from code directly. For example, you won’t write commands like “disable the button”, “enable the button”, “show the success message”, etc. Instead, you will describe the UI you want to see for the different visual states of your component (“initial state”, “typing state”, “success state”), and then trigger the state changes in response to user input. This is similar to how designers think about UI.

Here is a quiz form built using React. Note how it uses the `status` state variable to determine whether to enable or disable the submit button, and whether to show the success message instead.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [answer, setAnswer] = useState('');
 const [error, setError] = useState(null);
 const [status, setStatus] = useState('typing');
 if (status === 'success') {
  return <h1>That's right!</h1>
 }
 async function handleSubmit(e) {
  e.preventDefault();
  setStatus('submitting');
  try {
   await submitForm(answer);
   setStatus('success');
  } catch (err) {
   setStatus('typing');
   setError(err);
  }
 }
 function handleTextareaChange(e) {
  setAnswer(e.target.value);
 }
 return (
  <>
   <h2>City quiz</h2>
   <p>
    In which city is there a billboard that turns air into drinkable water?
   </p>
   <form onSubmit={handleSubmit}>
    <textarea
     value={answer}
     onChange={handleTextareaChange}
     disabled={status === 'submitting'}
    />
    <br />
    <button disabled={
     answer.length === 0 ||
     status === 'submitting'
    }>
     Submit
    </button>
    {error !== null &&
     <p className="Error">
      {error.message}
     </p>
    }
   </form>
  </>
 );
}
function submitForm(answer) {
 // Pretend it's hitting the network.
 return new Promise((resolve, reject) => {
  setTimeout(() => {
   let shouldError = answer.toLowerCase() !== 'lima'
   if (shouldError) {
    reject(new Error('Good guess but a wrong answer. Try again!'));
   } else {
    resolve();
   }
  }, 1500);
 });
}

```


Show more

## Ready to learn this topic?

Read **[Reacting to Input with State](/learn/reacting-to-input-with-state)** to learn how to approach interactions with a state-driven mindset.

[Read More](/learn/reacting-to-input-with-state)

## Choosing the state structure [](#choosing-the-state-structure "Link for Choosing the state structure ")

Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. The most important principle is that state shouldn’t contain redundant or duplicated information. If there’s unnecessary state, it’s easy to forget to update it, and introduce bugs!

For example, this form has a **redundant** `fullName` state variable:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [firstName, setFirstName] = useState('');
 const [lastName, setLastName] = useState('');
 const [fullName, setFullName] = useState('');
 function handleFirstNameChange(e) {
  setFirstName(e.target.value);
  setFullName(e.target.value + ' ' + lastName);
 }
 function handleLastNameChange(e) {
  setLastName(e.target.value);
  setFullName(firstName + ' ' + e.target.value);
 }
 return (
  <>
   <h2>Let’s check you in</h2>
   <label>
    First name:{' '}
    <input
     value={firstName}
     onChange={handleFirstNameChange}
    />
   </label>
   <label>
    Last name:{' '}
    <input
     value={lastName}
     onChange={handleLastNameChange}
    />
   </label>
   <p>
    Your ticket will be issued to: <b>{fullName}</b>
   </p>
  </>
 );
}

```


Show more

You can remove it and simplify the code by calculating `fullName` while the component is rendering:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [firstName, setFirstName] = useState('');
 const [lastName, setLastName] = useState('');
 const fullName = firstName + ' ' + lastName;
 function handleFirstNameChange(e) {
  setFirstName(e.target.value);
 }
 function handleLastNameChange(e) {
  setLastName(e.target.value);
 }
 return (
  <>
   <h2>Let’s check you in</h2>
   <label>
    First name:{' '}
    <input
     value={firstName}
     onChange={handleFirstNameChange}
    />
   </label>
   <label>
    Last name:{' '}
    <input
     value={lastName}
     onChange={handleLastNameChange}
    />
   </label>
   <p>
    Your ticket will be issued to: <b>{fullName}</b>
   </p>
  </>
 );
}

```


Show more

This might seem like a small change, but many bugs in React apps are fixed this way.

## Ready to learn this topic?

Read **[Choosing the State Structure](/learn/choosing-the-state-structure)** to learn how to design the state shape to avoid bugs.

[Read More](/learn/choosing-the-state-structure)

## Sharing state between components [](#sharing-state-between-components "Link for Sharing state between components ")

Sometimes, you want the state of two components to always change together. To do it, remove state from both of them, move it to their closest common parent, and then pass it down to them via props. This is known as “lifting state up”, and it’s one of the most common things you will do writing React code.

In this example, only one panel should be active at a time. To achieve this, instead of keeping the active state inside each individual panel, the parent component holds the state and specifies the props for its children.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Accordion() {
 const [activeIndex, setActiveIndex] = useState(0);
 return (
  <>
   <h2>Almaty, Kazakhstan</h2>
   <Panel
    title="About"
    isActive={activeIndex === 0}
    onShow={() => setActiveIndex(0)}
   >
    With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.
   </Panel>
   <Panel
    title="Etymology"
    isActive={activeIndex === 1}
    onShow={() => setActiveIndex(1)}
   >
    The name comes from <span lang="kk-KZ">алма</span>, the Kazakh word for "apple" and is often translated as "full of apples". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang="la">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.
   </Panel>
  </>
 );
}
function Panel({
 title,
 children,
 isActive,
 onShow
}) {
 return (
  <section className="panel">
   <h3>{title}</h3>
   {isActive ? (
    <p>{children}</p>
   ) : (
    <button onClick={onShow}>
     Show
    </button>
   )}
  </section>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Sharing State Between Components](/learn/sharing-state-between-components)** to learn how to lift state up and keep components in sync.

[Read More](/learn/sharing-state-between-components)

## Preserving and resetting state [](#preserving-and-resetting-state "Link for Preserving and resetting state ")

When you re-render a component, React needs to decide which parts of the tree to keep (and update), and which parts to discard or re-create from scratch. In most cases, React’s automatic behavior works well enough. By default, React preserves the parts of the tree that “match up” with the previously rendered component tree.

However, sometimes this is not what you want. In this chat app, typing a message and then switching the recipient does not reset the input. This can make the user accidentally send a message to the wrong person:

App.jsContactList.jsChat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
import Chat from './Chat.js';
import ContactList from './ContactList.js';
export default function Messenger() {
 const [to, setTo] = useState(contacts[0]);
 return (
  <div>
   <ContactList
    contacts={contacts}
    selectedContact={to}
    onSelect={contact => setTo(contact)}
   />
   <Chat contact={to} />
  </div>
 )
}
const contacts = [
 { name: 'Taylor', email: 'taylor@mail.com' },
 { name: 'Alice', email: 'alice@mail.com' },
 { name: 'Bob', email: 'bob@mail.com' }
];

```


Show more

React lets you override the default behavior, and _force_ a component to reset its state by passing it a different `key`, like `<Chat key={email} />`. This tells React that if the recipient is different, it should be considered a _different_ `Chat` component that needs to be re-created from scratch with the new data (and UI like inputs). Now switching between the recipients resets the input field—even though you render the same component.

App.jsContactList.jsChat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
import Chat from './Chat.js';
import ContactList from './ContactList.js';
export default function Messenger() {
 const [to, setTo] = useState(contacts[0]);
 return (
  <div>
   <ContactList
    contacts={contacts}
    selectedContact={to}
    onSelect={contact => setTo(contact)}
   />
   <Chat key={to.email} contact={to} />
  </div>
 )
}
const contacts = [
 { name: 'Taylor', email: 'taylor@mail.com' },
 { name: 'Alice', email: 'alice@mail.com' },
 { name: 'Bob', email: 'bob@mail.com' }
];

```


Show more

## Ready to learn this topic?

Read **[Preserving and Resetting State](/learn/preserving-and-resetting-state)** to learn the lifetime of state and how to control it.

[Read More](/learn/preserving-and-resetting-state)

## Extracting state logic into a reducer [](#extracting-state-logic-into-a-reducer "Link for Extracting state logic into a reducer ")

Components with many state updates spread across many event handlers can get overwhelming. For these cases, you can consolidate all the state update logic outside your component in a single function, called “reducer”. Your event handlers become concise because they only specify the user “actions”. At the bottom of the file, the reducer function specifies how the state should update in response to each action!

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useReducer } from 'react';
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';
export default function TaskApp() {
 const [tasks, dispatch] = useReducer(
  tasksReducer,
  initialTasks
 );
 function handleAddTask(text) {
  dispatch({
   type: 'added',
   id: nextId++,
   text: text,
  });
 }
 function handleChangeTask(task) {
  dispatch({
   type: 'changed',
   task: task
  });
 }
 function handleDeleteTask(taskId) {
  dispatch({
   type: 'deleted',
   id: taskId
  });
 }
 return (
  <>
   <h1>Prague itinerary</h1>
   <AddTask
    onAddTask={handleAddTask}
   />
   <TaskList
    tasks={tasks}
    onChangeTask={handleChangeTask}
    onDeleteTask={handleDeleteTask}
   />
  </>
 );
}
function tasksReducer(tasks, action) {
 switch (action.type) {
  case 'added': {
   return [...tasks, {
    id: action.id,
    text: action.text,
    done: false
   }];
  }
  case 'changed': {
   return tasks.map(t => {
    if (t.id === action.task.id) {
     return action.task;
    } else {
     return t;
    }
   });
  }
  case 'deleted': {
   return tasks.filter(t => t.id !== action.id);
  }
  default: {
   throw Error('Unknown action: ' + action.type);
  }
 }
}
let nextId = 3;
const initialTasks = [
 { id: 0, text: 'Visit Kafka Museum', done: true },
 { id: 1, text: 'Watch a puppet show', done: false },
 { id: 2, text: 'Lennon Wall pic', done: false }
];

```


Show more

## Ready to learn this topic?

Read **[Extracting State Logic into a Reducer](/learn/extracting-state-logic-into-a-reducer)** to learn how to consolidate logic in the reducer function.

[Read More](/learn/extracting-state-logic-into-a-reducer)

## Passing data deeply with context [](#passing-data-deeply-with-context "Link for Passing data deeply with context ")

Usually, you will pass information from a parent component to a child component via props. But passing props can become inconvenient if you need to pass some prop through many components, or if many components need the same information. Context lets the parent component make some information available to any component in the tree below it—no matter how deep it is—without passing it explicitly through props.

Here, the `Heading` component determines its heading level by “asking” the closest `Section` for its level. Each `Section` tracks its own level by asking the parent `Section` and adding one to it. Every `Section` provides information to all components below it without passing props—it does that through context.

App.jsSection.jsHeading.jsLevelContext.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import Heading from './Heading.js';
import Section from './Section.js';
export default function Page() {
 return (
  <Section>
   <Heading>Title</Heading>
   <Section>
    <Heading>Heading</Heading>
    <Heading>Heading</Heading>
    <Heading>Heading</Heading>
    <Section>
     <Heading>Sub-heading</Heading>
     <Heading>Sub-heading</Heading>
     <Heading>Sub-heading</Heading>
     <Section>
      <Heading>Sub-sub-heading</Heading>
      <Heading>Sub-sub-heading</Heading>
      <Heading>Sub-sub-heading</Heading>
     </Section>
    </Section>
   </Section>
  </Section>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Passing Data Deeply with Context](/learn/passing-data-deeply-with-context)** to learn about using context as an alternative to passing props.

[Read More](/learn/passing-data-deeply-with-context)

## Scaling up with reducer and context [](#scaling-up-with-reducer-and-context "Link for Scaling up with reducer and context ")

Reducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.

With this approach, a parent component with complex state manages it with a reducer. Other components anywhere deep in the tree can read its state via context. They can also dispatch actions to update that state.

App.jsTasksContext.jsAddTask.jsTaskList.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';
import { TasksProvider } from './TasksContext.js';
export default function TaskApp() {
 return (
  <TasksProvider>
   <h1>Day off in Kyoto</h1>
   <AddTask />
   <TaskList />
  </TasksProvider>
 );
}

```


## Ready to learn this topic?

Read **[Scaling Up with Reducer and Context](/learn/scaling-up-with-reducer-and-context)** to learn how state management scales in a growing app.

[Read More](/learn/scaling-up-with-reducer-and-context)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Reacting to Input with State](/learn/reacting-to-input-with-state) to start reading this chapter page by page!

Or, if you’re already familiar with these topics, why not read about [Escape Hatches](/learn/escape-hatches)?

[PreviousUpdating Arrays in State](/learn/updating-arrays-in-state)[NextReacting to Input with State](/learn/reacting-to-input-with-state)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Reacting to input with state ](#reacting-to-input-with-state)
  * [Choosing the state structure ](#choosing-the-state-structure)
  * [Sharing state between components ](#sharing-state-between-components)
  * [Preserving and resetting state ](#preserving-and-resetting-state)
  * [Extracting state logic into a reducer ](#extracting-state-logic-into-a-reducer)
  * [Passing data deeply with context ](#passing-data-deeply-with-context)
  * [Scaling up with reducer and context ](#scaling-up-with-reducer-and-context)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Escape Hatches[](#undefined "Link for this heading")

Advanced

Some of your components may need to control and synchronize with systems outside of React. For example, you might need to focus an input using the browser API, play and pause a video player implemented without React, or connect and listen to messages from a remote server. In this chapter, you’ll learn the escape hatches that let you “step outside” React and connect to external systems. Most of your application logic and data flow should not rely on these features.

### In this chapter

  * [How to “remember” information without re-rendering](/learn/referencing-values-with-refs)
  * [How to access DOM elements managed by React](/learn/manipulating-the-dom-with-refs)
  * [How to synchronize components with external systems](/learn/synchronizing-with-effects)
  * [How to remove unnecessary Effects from your components](/learn/you-might-not-need-an-effect)
  * [How an Effect’s lifecycle is different from a component’s](/learn/lifecycle-of-reactive-effects)
  * [How to prevent some values from re-triggering Effects](/learn/separating-events-from-effects)
  * [How to make your Effect re-run less often](/learn/removing-effect-dependencies)
  * [How to share logic between components](/learn/reusing-logic-with-custom-hooks)



## Referencing values with refs [](#referencing-values-with-refs "Link for Referencing values with refs ")

When you want a component to “remember” some information, but you don’t want that information to [trigger new renders](/learn/render-and-commit), you can use a _ref_ :

```


const ref = useRef(0);


```


Like state, refs are retained by React between re-renders. However, setting state re-renders a component. Changing a ref does not! You can access the current value of that ref through the `ref.current` property.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useRef } from 'react';
export default function Counter() {
 let ref = useRef(0);
 function handleClick() {
  ref.current = ref.current + 1;
  alert('You clicked ' + ref.current + ' times!');
 }
 return (
  <button onClick={handleClick}>
   Click me!
  </button>
 );
}

```


Show more

A ref is like a secret pocket of your component that React doesn’t track. For example, you can use refs to store [timeout IDs](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#return_value), [DOM elements](https://developer.mozilla.org/en-US/docs/Web/API/Element), and other objects that don’t impact the component’s rendering output.

## Ready to learn this topic?

Read **[Referencing Values with Refs](/learn/referencing-values-with-refs)** to learn how to use refs to remember information.

[Read More](/learn/referencing-values-with-refs)

## Manipulating the DOM with refs [](#manipulating-the-dom-with-refs "Link for Manipulating the DOM with refs ")

React automatically updates the DOM to match your render output, so your components won’t often need to manipulate it. However, sometimes you might need access to the DOM elements managed by React—for example, to focus a node, scroll to it, or measure its size and position. There is no built-in way to do those things in React, so you will need a ref to the DOM node. For example, clicking the button will focus the input using a ref:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useRef } from 'react';
export default function Form() {
 const inputRef = useRef(null);
 function handleClick() {
  inputRef.current.focus();
 }
 return (
  <>
   <input ref={inputRef} />
   <button onClick={handleClick}>
    Focus the input
   </button>
  </>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Manipulating the DOM with Refs](/learn/manipulating-the-dom-with-refs)** to learn how to access DOM elements managed by React.

[Read More](/learn/manipulating-the-dom-with-refs)

## Synchronizing with Effects [](#synchronizing-with-effects "Link for Synchronizing with Effects ")

Some components need to synchronize with external systems. For example, you might want to control a non-React component based on the React state, set up a server connection, or send an analytics log when a component appears on the screen. Unlike event handlers, which let you handle particular events, _Effects_ let you run some code after rendering. Use them to synchronize your component with a system outside of React.

Press Play/Pause a few times and see how the video player stays synchronized to the `isPlaying` prop value:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useRef, useEffect } from 'react';
function VideoPlayer({ src, isPlaying }) {
 const ref = useRef(null);
 useEffect(() => {
  if (isPlaying) {
   ref.current.play();
  } else {
   ref.current.pause();
  }
 }, [isPlaying]);
 return <video ref={ref} src={src} loop playsInline />;
}
export default function App() {
 const [isPlaying, setIsPlaying] = useState(false);
 return (
  <>
   <button onClick={() => setIsPlaying(!isPlaying)}>
    {isPlaying ? 'Pause' : 'Play'}
   </button>
   <VideoPlayer
    isPlaying={isPlaying}
    src="https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4"
   />
  </>
 );
}

```


Show more

Many Effects also “clean up” after themselves. For example, an Effect that sets up a connection to a chat server should return a _cleanup function_ that tells React how to disconnect your component from that server:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
export default function ChatRoom() {
 useEffect(() => {
  const connection = createConnection();
  connection.connect();
  return () => connection.disconnect();
 }, []);
 return <h1>Welcome to the chat!</h1>;
}

```


In development, React will immediately run and clean up your Effect one extra time. This is why you see `"✅ Connecting..."` printed twice. This ensures that you don’t forget to implement the cleanup function.

## Ready to learn this topic?

Read **[Synchronizing with Effects](/learn/synchronizing-with-effects)** to learn how to synchronize components with external systems.

[Read More](/learn/synchronizing-with-effects)

## You Might Not Need An Effect [](#you-might-not-need-an-effect "Link for You Might Not Need An Effect ")

Effects are an escape hatch from the React paradigm. They let you “step outside” of React and synchronize your components with some external system. If there is no external system involved (for example, if you want to update a component’s state when some props or state change), you shouldn’t need an Effect. Removing unnecessary Effects will make your code easier to follow, faster to run, and less error-prone.

There are two common cases in which you don’t need Effects:

  * **You don’t need Effects to transform data for rendering.**
  * **You don’t need Effects to handle user events.**



For example, you don’t need an Effect to adjust some state based on other state:

```


function Form() {

 const [firstName, setFirstName] = useState('Taylor');

 const [lastName, setLastName] = useState('Swift');

 // 🔴 Avoid: redundant state and unnecessary Effect

 const [fullName, setFullName] = useState('');

 useEffect(() => {

  setFullName(firstName + ' ' + lastName);

 }, [firstName, lastName]);

 // ...

}


```


Instead, calculate as much as you can while rendering:

```


function Form() {

 const [firstName, setFirstName] = useState('Taylor');

 const [lastName, setLastName] = useState('Swift');

 // ✅ Good: calculated during rendering

 const fullName = firstName + ' ' + lastName;

 // ...

}


```


However, you _do_ need Effects to synchronize with external systems.

## Ready to learn this topic?

Read **[You Might Not Need an Effect](/learn/you-might-not-need-an-effect)** to learn how to remove unnecessary Effects.

[Read More](/learn/you-might-not-need-an-effect)

## Lifecycle of reactive effects [](#lifecycle-of-reactive-effects "Link for Lifecycle of reactive effects ")

Effects have a different lifecycle from components. Components may mount, update, or unmount. An Effect can only do two things: to start synchronizing something, and later to stop synchronizing it. This cycle can happen multiple times if your Effect depends on props and state that change over time.

This Effect depends on the value of the `roomId` prop. Props are _reactive values,_ which means they can change on a re-render. Notice that the Effect _re-synchronizes_ (and re-connects to the server) if `roomId` changes:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId }) {
 useEffect(() => {
  const connection = createConnection(serverUrl, roomId);
  connection.connect();
  return () => connection.disconnect();
 }, [roomId]);
 return <h1>Welcome to the {roomId} room!</h1>;
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <hr />
   <ChatRoom roomId={roomId} />
  </>
 );
}

```


Show more

React provides a linter rule to check that you’ve specified your Effect’s dependencies correctly. If you forget to specify `roomId` in the list of dependencies in the above example, the linter will find that bug automatically.

## Ready to learn this topic?

Read **[Lifecycle of Reactive Events](/learn/lifecycle-of-reactive-effects)** to learn how an Effect’s lifecycle is different from a component’s.

[Read More](/learn/lifecycle-of-reactive-effects)

## Separating events from Effects [](#separating-events-from-effects "Link for Separating events from Effects ")

### Under Construction

This section describes an **experimental API that has not yet been released** in a stable version of React.

Event handlers only re-run when you perform the same interaction again. Unlike event handlers, Effects re-synchronize if any of the values they read, like props or state, are different than during last render. Sometimes, you want a mix of both behaviors: an Effect that re-runs in response to some values but not others.

All code inside Effects is _reactive._ It will run again if some reactive value it reads has changed due to a re-render. For example, this Effect will re-connect to the chat if either `roomId` or `theme` have changed:

App.jschat.jsnotifications.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection, sendMessage } from './chat.js';
import { showNotification } from './notifications.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId, theme }) {
 useEffect(() => {
  const connection = createConnection(serverUrl, roomId);
  connection.on('connected', () => {
   showNotification('Connected!', theme);
  });
  connection.connect();
  return () => connection.disconnect();
 }, [roomId, theme]);
 return <h1>Welcome to the {roomId} room!</h1>
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 const [isDark, setIsDark] = useState(false);
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <label>
    <input
     type="checkbox"
     checked={isDark}
     onChange={e => setIsDark(e.target.checked)}
    />
    Use dark theme
   </label>
   <hr />
   <ChatRoom
    roomId={roomId}
    theme={isDark ? 'dark' : 'light'} 
   />
  </>
 );
}

```


Show more

This is not ideal. You want to re-connect to the chat only if the `roomId` has changed. Switching the `theme` shouldn’t re-connect to the chat! Move the code reading `theme` out of your Effect into an _Effect Event_ :

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { experimental_useEffectEvent as useEffectEvent } from 'react';
import { createConnection, sendMessage } from './chat.js';
import { showNotification } from './notifications.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId, theme }) {
 const onConnected = useEffectEvent(() => {
  showNotification('Connected!', theme);
 });
 useEffect(() => {
  const connection = createConnection(serverUrl, roomId);
  connection.on('connected', () => {
   onConnected();
  });
  connection.connect();
  return () => connection.disconnect();
 }, [roomId]);
 return <h1>Welcome to the {roomId} room!</h1>
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 const [isDark, setIsDark] = useState(false);
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <label>
    <input
     type="checkbox"
     checked={isDark}
     onChange={e => setIsDark(e.target.checked)}
    />
    Use dark theme
   </label>
   <hr />
   <ChatRoom
    roomId={roomId}
    theme={isDark ? 'dark' : 'light'} 
   />
  </>
 );
}

```


Show more

Code inside Effect Events isn’t reactive, so changing the `theme` no longer makes your Effect re-connect.

## Ready to learn this topic?

Read **[Separating Events from Effects](/learn/separating-events-from-effects)** to learn how to prevent some values from re-triggering Effects.

[Read More](/learn/separating-events-from-effects)

## Removing Effect dependencies [](#removing-effect-dependencies "Link for Removing Effect dependencies ")

When you write an Effect, the linter will verify that you’ve included every reactive value (like props and state) that the Effect reads in the list of your Effect’s dependencies. This ensures that your Effect remains synchronized with the latest props and state of your component. Unnecessary dependencies may cause your Effect to run too often, or even create an infinite loop. The way you remove them depends on the case.

For example, this Effect depends on the `options` object which gets re-created every time you edit the input:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId }) {
 const [message, setMessage] = useState('');
 const options = {
  serverUrl: serverUrl,
  roomId: roomId
 };
 useEffect(() => {
  const connection = createConnection(options);
  connection.connect();
  return () => connection.disconnect();
 }, [options]);
 return (
  <>
   <h1>Welcome to the {roomId} room!</h1>
   <input value={message} onChange={e => setMessage(e.target.value)} />
  </>
 );
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <hr />
   <ChatRoom roomId={roomId} />
  </>
 );
}

```


Show more

You don’t want the chat to re-connect every time you start typing a message in that chat. To fix this problem, move creation of the `options` object inside the Effect so that the Effect only depends on the `roomId` string:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId }) {
 const [message, setMessage] = useState('');
 useEffect(() => {
  const options = {
   serverUrl: serverUrl,
   roomId: roomId
  };
  const connection = createConnection(options);
  connection.connect();
  return () => connection.disconnect();
 }, [roomId]);
 return (
  <>
   <h1>Welcome to the {roomId} room!</h1>
   <input value={message} onChange={e => setMessage(e.target.value)} />
  </>
 );
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <hr />
   <ChatRoom roomId={roomId} />
  </>
 );
}

```


Show more

Notice that you didn’t start by editing the dependency list to remove the `options` dependency. That would be wrong. Instead, you changed the surrounding code so that the dependency became _unnecessary._ Think of the dependency list as a list of all the reactive values used by your Effect’s code. You don’t intentionally choose what to put on that list. The list describes your code. To change the dependency list, change the code.

## Ready to learn this topic?

Read **[Removing Effect Dependencies](/learn/removing-effect-dependencies)** to learn how to make your Effect re-run less often.

[Read More](/learn/removing-effect-dependencies)

## Reusing logic with custom Hooks [](#reusing-logic-with-custom-hooks "Link for Reusing logic with custom Hooks ")

React comes with built-in Hooks like `useState`, `useContext`, and `useEffect`. Sometimes, you’ll wish that there was a Hook for some more specific purpose: for example, to fetch data, to keep track of whether the user is online, or to connect to a chat room. To do this, you can create your own Hooks for your application’s needs.

In this example, the `usePointerPosition` custom Hook tracks the cursor position, while `useDelayedValue` custom Hook returns a value that’s “lagging behind” the value you passed by a certain number of milliseconds. Move the cursor over the sandbox preview area to see a moving trail of dots following the cursor:

App.jsusePointerPosition.jsuseDelayedValue.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { usePointerPosition } from './usePointerPosition.js';
import { useDelayedValue } from './useDelayedValue.js';
export default function Canvas() {
 const pos1 = usePointerPosition();
 const pos2 = useDelayedValue(pos1, 100);
 const pos3 = useDelayedValue(pos2, 200);
 const pos4 = useDelayedValue(pos3, 100);
 const pos5 = useDelayedValue(pos4, 50);
 return (
  <>
   <Dot position={pos1} opacity={1} />
   <Dot position={pos2} opacity={0.8} />
   <Dot position={pos3} opacity={0.6} />
   <Dot position={pos4} opacity={0.4} />
   <Dot position={pos5} opacity={0.2} />
  </>
 );
}
function Dot({ position, opacity }) {
 return (
  <div style={{
   position: 'absolute',
   backgroundColor: 'pink',
   borderRadius: '50%',
   opacity,
   transform: `translate(${position.x}px, ${position.y}px)`,
   pointerEvents: 'none',
   left: -20,
   top: -20,
   width: 40,
   height: 40,
  }} />
 );
}

```


Show more

You can create custom Hooks, compose them together, pass data between them, and reuse them between components. As your app grows, you will write fewer Effects by hand because you’ll be able to reuse custom Hooks you already wrote. There are also many excellent custom Hooks maintained by the React community.

## Ready to learn this topic?

Read **[Reusing Logic with Custom Hooks](/learn/reusing-logic-with-custom-hooks)** to learn how to share logic between components.

[Read More](/learn/reusing-logic-with-custom-hooks)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Referencing Values with Refs](/learn/referencing-values-with-refs) to start reading this chapter page by page!

[PreviousScaling Up with Reducer and Context](/learn/scaling-up-with-reducer-and-context)[NextReferencing Values with Refs](/learn/referencing-values-with-refs)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Referencing values with refs ](#referencing-values-with-refs)
  * [Manipulating the DOM with refs ](#manipulating-the-dom-with-refs)
  * [Synchronizing with Effects ](#synchronizing-with-effects)
  * [You Might Not Need An Effect ](#you-might-not-need-an-effect)
  * [Lifecycle of reactive effects ](#lifecycle-of-reactive-effects)
  * [Separating events from Effects ](#separating-events-from-effects)
  * [Removing Effect dependencies ](#removing-effect-dependencies)
  * [Reusing logic with custom Hooks ](#reusing-logic-with-custom-hooks)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### react@19

  * [Overview ](/reference/react "Overview")
  * [Hooks ](/reference/react/hooks "Hooks")

    * [useActionState ](/reference/react/useActionState "useActionState")
    * [useCallback ](/reference/react/useCallback "useCallback")
    * [useContext ](/reference/react/useContext "useContext")
    * [useDebugValue ](/reference/react/useDebugValue "useDebugValue")
    * [useDeferredValue ](/reference/react/useDeferredValue "useDeferredValue")
    * [useEffect ](/reference/react/useEffect "useEffect")
    * [useId ](/reference/react/useId "useId")
    * [useImperativeHandle ](/reference/react/useImperativeHandle "useImperativeHandle")
    * [useInsertionEffect ](/reference/react/useInsertionEffect "useInsertionEffect")
    * [useLayoutEffect ](/reference/react/useLayoutEffect "useLayoutEffect")
    * [useMemo ](/reference/react/useMemo "useMemo")
    * [useOptimistic ](/reference/react/useOptimistic "useOptimistic")
    * [useReducer ](/reference/react/useReducer "useReducer")
    * [useRef ](/reference/react/useRef "useRef")
    * [useState ](/reference/react/useState "useState")
    * [useSyncExternalStore ](/reference/react/useSyncExternalStore "useSyncExternalStore")
    * [useTransition ](/reference/react/useTransition "useTransition")

  * [Components ](/reference/react/components "Components")

    * [<Fragment> (<>) ](/reference/react/Fragment "<Fragment> \(<>\)")
    * [<Profiler> ](/reference/react/Profiler "<Profiler>")
    * [<StrictMode> ](/reference/react/StrictMode "<StrictMode>")
    * [<Suspense> ](/reference/react/Suspense "<Suspense>")

  * [APIs ](/reference/react/apis "APIs")

    * [act ](/reference/react/act "act")
    * [cache ](/reference/react/cache "cache")
    * [createContext ](/reference/react/createContext "createContext")
    * [lazy ](/reference/react/lazy "lazy")
    * [memo ](/reference/react/memo "memo")
    * [startTransition ](/reference/react/startTransition "startTransition")
    * [use ](/reference/react/use "use")
    * [experimental_taintObjectReference  - This feature is available in the latest Canary](/reference/react/experimental_taintObjectReference "experimental_taintObjectReference")
    * [experimental_taintUniqueValue  - This feature is available in the latest Canary](/reference/react/experimental_taintUniqueValue "experimental_taintUniqueValue")

### react-dom@19

  * [Hooks ](/reference/react-dom/hooks "Hooks")

    * [useFormStatus ](/reference/react-dom/hooks/useFormStatus "useFormStatus")

  * [Components ](/reference/react-dom/components "Components")

    * [Common (e.g. <div>) ](/reference/react-dom/components/common "Common \(e.g. <div>\)")
    * [<form> ](/reference/react-dom/components/form "<form>")
    * [<input> ](/reference/react-dom/components/input "<input>")
    * [<option> ](/reference/react-dom/components/option "<option>")
    * [<progress> ](/reference/react-dom/components/progress "<progress>")
    * [<select> ](/reference/react-dom/components/select "<select>")
    * [<textarea> ](/reference/react-dom/components/textarea "<textarea>")
    * [<link> ](/reference/react-dom/components/link "<link>")
    * [<meta> ](/reference/react-dom/components/meta "<meta>")
    * [<script> ](/reference/react-dom/components/script "<script>")
    * [<style> ](/reference/react-dom/components/style "<style>")
    * [<title> ](/reference/react-dom/components/title "<title>")

  * [APIs ](/reference/react-dom "APIs")

    * [createPortal ](/reference/react-dom/createPortal "createPortal")
    * [flushSync ](/reference/react-dom/flushSync "flushSync")
    * [preconnect ](/reference/react-dom/preconnect "preconnect")
    * [prefetchDNS ](/reference/react-dom/prefetchDNS "prefetchDNS")
    * [preinit ](/reference/react-dom/preinit "preinit")
    * [preinitModule ](/reference/react-dom/preinitModule "preinitModule")
    * [preload ](/reference/react-dom/preload "preload")
    * [preloadModule ](/reference/react-dom/preloadModule "preloadModule")

  * [Client APIs ](/reference/react-dom/client "Client APIs")

    * [createRoot ](/reference/react-dom/client/createRoot "createRoot")
    * [hydrateRoot ](/reference/react-dom/client/hydrateRoot "hydrateRoot")

  * [Server APIs ](/reference/react-dom/server "Server APIs")

    * [renderToPipeableStream ](/reference/react-dom/server/renderToPipeableStream "renderToPipeableStream")
    * [renderToReadableStream ](/reference/react-dom/server/renderToReadableStream "renderToReadableStream")
    * [renderToStaticMarkup ](/reference/react-dom/server/renderToStaticMarkup "renderToStaticMarkup")
    * [renderToString ](/reference/react-dom/server/renderToString "renderToString")

  * [Static APIs ](/reference/react-dom/static "Static APIs")

    * [prerender ](/reference/react-dom/static/prerender "prerender")
    * [prerenderToNodeStream ](/reference/react-dom/static/prerenderToNodeStream "prerenderToNodeStream")

### Rules of React

  * [Overview ](/reference/rules "Overview")

    * [Components and Hooks must be pure ](/reference/rules/components-and-hooks-must-be-pure "Components and Hooks must be pure")
    * [React calls Components and Hooks ](/reference/rules/react-calls-components-and-hooks "React calls Components and Hooks")
    * [Rules of Hooks ](/reference/rules/rules-of-hooks "Rules of Hooks")

### React Server Components

  * [Server Components ](/reference/rsc/server-components "Server Components")
  * [Server Functions ](/reference/rsc/server-functions "Server Functions")
  * [Directives ](/reference/rsc/directives "Directives")

    * ['use client' ](/reference/rsc/use-client "'use client'")
    * ['use server' ](/reference/rsc/use-server "'use server'")

### Legacy APIs

  * [Legacy React APIs ](/reference/react/legacy "Legacy React APIs")

    * [Children ](/reference/react/Children "Children")
    * [cloneElement ](/reference/react/cloneElement "cloneElement")
    * [Component ](/reference/react/Component "Component")
    * [createElement ](/reference/react/createElement "createElement")
    * [createRef ](/reference/react/createRef "createRef")
    * [forwardRef ](/reference/react/forwardRef "forwardRef")
    * [isValidElement ](/reference/react/isValidElement "isValidElement")
    * [PureComponent ](/reference/react/PureComponent "PureComponent")




Is this page useful?

[API Reference](/reference/react)

# React DOM APIs[](#undefined "Link for this heading")

The `react-dom` package contains methods that are only supported for the web applications (which run in the browser DOM environment). They are not supported for React Native.

## APIs [](#apis "Link for APIs ")

These APIs can be imported from your components. They are rarely used:

  * `createPortal`[](/reference/react-dom/createPortal) lets you render child components in a different part of the DOM tree.
  * `flushSync`[](/reference/react-dom/flushSync) lets you force React to flush a state update and update the DOM synchronously.



## Resource Preloading APIs [](#resource-preloading-apis "Link for Resource Preloading APIs ")

These APIs can be used to make apps faster by pre-loading resources such as scripts, stylesheets, and fonts as soon as you know you need them, for example before navigating to another page where the resources will be used.

[React-based frameworks](/learn/start-a-new-react-project) frequently handle resource loading for you, so you might not have to call these APIs yourself. Consult your framework’s documentation for details.

  * `prefetchDNS`[](/reference/react-dom/prefetchDNS) lets you prefetch the IP address of a DNS domain name that you expect to connect to.
  * `preconnect`[](/reference/react-dom/preconnect) lets you connect to a server you expect to request resources from, even if you don’t know what resources you’ll need yet.
  * `preload`[](/reference/react-dom/preload) lets you fetch a stylesheet, font, image, or external script that you expect to use.
  * `preloadModule`[](/reference/react-dom/preloadModule) lets you fetch an ESM module that you expect to use.
  * `preinit`[](/reference/react-dom/preinit) lets you fetch and evaluate an external script or fetch and insert a stylesheet.
  * `preinitModule`[](/reference/react-dom/preinitModule) lets you fetch and evaluate an ESM module.



## Entry points [](#entry-points "Link for Entry points ")

The `react-dom` package provides two additional entry points:

  * `react-dom/client`[](/reference/react-dom/client) contains APIs to render React components on the client (in the browser).
  * `react-dom/server`[](/reference/react-dom/server) contains APIs to render React components on the server.



## Removed APIs [](#removed-apis "Link for Removed APIs ")

These APIs were removed in React 19:

  * `findDOMNode`[](https://18.react.dev/reference/react-dom/findDOMNode): see [alternatives](https://18.react.dev/reference/react-dom/findDOMNode#alternatives).
  * `hydrate`[](https://18.react.dev/reference/react-dom/hydrate): use `hydrateRoot`[](/reference/react-dom/client/hydrateRoot) instead.
  * `render`[](https://18.react.dev/reference/react-dom/render): use `createRoot`[](/reference/react-dom/client/createRoot) instead.
  * `unmountComponentAtNode`[](/reference/react-dom/unmountComponentAtNode): use `root.unmount()`[](/reference/react-dom/client/createRoot#root-unmount) instead.
  * `renderToNodeStream`[](https://18.react.dev/reference/react-dom/server/renderToNodeStream): use `react-dom/server`[](/reference/react-dom/server) APIs instead.
  * `renderToStaticNodeStream`[](https://18.react.dev/reference/react-dom/server/renderToStaticNodeStream): use `react-dom/server`[](/reference/react-dom/server) APIs instead.



[Previous<title>](/reference/react-dom/components/title)[NextcreatePortal](/reference/react-dom/createPortal)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [APIs ](#apis)
  * [Resource Preloading APIs ](#resource-preloading-apis)
  * [Entry points ](#entry-points)
  * [Removed APIs ](#removed-apis)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Meet the Team[](#undefined "Link for this heading")

React development is led by a dedicated team working full time at Meta. It also receives contributions from people all over the world.

## React Core [](#react-core "Link for React Core ")

The React Core team members work full time on the core component APIs, the engine that powers React DOM and React Native, React DevTools, and the React documentation website.

Current members of the React team are listed in alphabetical order below.

### Andrew Clark[](#andrew-clark "Link for Andrew Clark")

Engineer at Vercel

Andrew got started with web development by making sites with WordPress, and eventually tricked himself into doing JavaScript. His favorite pastime is karaoke. Andrew is either a Disney villain or a Disney princess, depending on the day.

[acdlite](https://threads.net/acdlite)

[ acdlite](https://github.com/acdlite)

### Dan Abramov[](#dan-abramov "Link for Dan Abramov")

Independent Engineer

Dan got into programming after he accidentally discovered Visual Basic inside Microsoft PowerPoint. He has found his true calling in turning [Sebastian](#sebastian-markb%C3%A5ge)’s tweets into long-form blog posts. Dan occasionally wins at Fortnite by hiding in a bush until the game ends.

[danabra.mov](https://bsky.app/profile/danabra.mov)

[ gaearon](https://github.com/gaearon)

### Eli White[](#eli-white "Link for Eli White")

Engineering Manager at Meta

Eli got into programming after he got suspended from middle school for hacking. He has been working on React and React Native since 2017. He enjoys eating treats, especially ice cream and apple pie. You can find Eli trying quirky activities like parkour, indoor skydiving, and aerial silks.

[elicwhite](https://threads.net/elicwhite)

[ TheSavior](https://github.com/TheSavior)

### Jack Pope[](#jack-pope "Link for Jack Pope")

Engineer at Meta

Shortly after being introduced to AutoHotkey, Jack had written scripts to automate everything he could think of. When reaching limitations there, he dove headfirst into web app development and hasn’t looked back. Most recently, Jack worked on the web platform at Instagram before moving to React. His favorite programming language is JSX.

[ jackpope](https://github.com/jackpope)

[ jackpope.me](https://jackpope.me)

### Jason Bonta[](#jason-bonta "Link for Jason Bonta")

Engineering Manager at Meta

Jason abandoned embedded C for a career in front-end engineering and never looked back. Armed with esoteric CSS knowledge and a passion for beautiful UI, Jason joined Facebook in 2010, where he now feels privileged to have seen JavaScript development come of age. Though he may not understand how `for...of` loops work, he loves getting to work with brilliant people on projects that enable amazing UX.

[someextent](https://threads.net/someextent)

### Joe Savona[](#joe-savona "Link for Joe Savona")

Engineer at Meta

Joe was planning to major in math and philosophy but got into computer science after writing physics simulations in Matlab. Prior to React, he worked on Relay, RSocket.js, and the Skip programming language. While he’s not building some sort of reactive system he enjoys running, studying Japanese, and spending time with his family.

[joesavona](https://threads.net/joesavona)

[ josephsavona](https://github.com/josephsavona)

### Josh Story[](#josh-story "Link for Josh Story")

Engineer at Vercel

Josh majored in Mathematics and discovered programming while in college. His first professional developer job was to program insurance rate calculations in Microsoft Excel, the paragon of Reactive Programming which must be why he now works on React. In between that time Josh has been an IC, Manager, and Executive at a few startups. outside of work he likes to push his limits with cooking.

[storyhb.com](https://bsky.app/profile/storyhb.com)

[ gnoff](https://github.com/gnoff)

### Lauren Tan[](#lauren-tan "Link for Lauren Tan")

Engineer at Meta

Lauren’s programming career peaked when she first discovered the `<marquee>` tag. She’s been chasing that high ever since. She studied Finance instead of CS in college, so she learned to code using Excel. Lauren enjoys dropping cheeky memes in chat, playing video games with her partner, learning Korean, and petting her dog Zelda.

[potetotes](https://threads.net/potetotes)

[no.lol](https://bsky.app/profile/no.lol)

[ poteto](https://github.com/poteto)

### Luna Wei[](#luna-wei "Link for Luna Wei")

Engineer at Meta

Luna first learnt the fundamentals of python at the age of 6 from her father. Since then, she has been unstoppable. Luna aspires to be a gen z, and the road to success is paved with environmental advocacy, urban gardening and lots of quality time with her Voo-Doo’d (as pictured).

[lunaleaps](https://threads.net/lunaleaps)

[ lunaleaps](https://github.com/lunaleaps)

### Matt Carroll[](#matt-carroll "Link for Matt Carroll")

Developer Advocate at Meta

Matt stumbled into coding, and since then, has become enamored with creating things in communities that can’t be created alone. Prior to React, he worked on YouTube, the Google Assistant, Fuchsia, and Google Cloud AI and Evernote. When he’s not trying to make better developer tools he enjoys the mountains, jazz, and spending time with his family.

[mattcarrollcode](https://threads.net/mattcarrollcode)

[ mattcarrollcode](https://github.com/mattcarrollcode)

### Mofei Zhang[](#mofei-zhang "Link for Mofei Zhang")

Engineer at Meta

Mofei started programming when she realized it can help her cheat in video games. She focused on operating systems in undergrad / grad school, but now finds herself happily tinkering on React. Outside of work, she enjoys debugging bouldering problems and planning her next backpacking trip(s).

[z_mofei](https://threads.net/z_mofei)

[ mofeiZ](https://github.com/mofeiZ)

### Noah Lemen[](#noah-lemen "Link for Noah Lemen")

Engineer at Meta

Noah’s interest in UI programming sparked during his education in music technology at NYU. At Meta, he’s worked on internal tools, browsers, web performance, and is currently focused on React. Outside of work, Noah can be found tinkering with synthesizers or spending time with his cat.

[noahlemen](https://threads.net/noahlemen)

[ noahlemen](https://github.com/noahlemen)

[ noahle.men](https://noahle.men)

### Rick Hanlon[](#rick-hanlon "Link for Rick Hanlon")

Engineer at Meta

Ricky majored in theoretical math and somehow found himself on the React Native team for a couple years before joining the React team. When he’s not programming you can find him snowboarding, biking, climbing, golfing, or closing GitHub issues that do not match the issue template.

[rickhanlonii](https://threads.net/rickhanlonii)

[ricky.fm](https://bsky.app/profile/ricky.fm)

[ rickhanlonii](https://github.com/rickhanlonii)

### Ruslan Lesiutin[](#ruslan-lesiutin "Link for Ruslan Lesiutin")

Engineer at Meta

Ruslan’s introduction to UI programming started when he was a kid by manually editing HTML templates for his custom gaming forums. Somehow, he ended up majoring in Computer Science. He enjoys music, games, and memes. Mostly memes.

[lesiutin](https://threads.net/lesiutin)

[ hoxyq](https://github.com/hoxyq)

### Sathya Gunasekaran [](#sathya-gunasekaran "Link for Sathya Gunasekaran ")

Engineer at Meta

Sathya hated the Dragon Book in school but somehow ended up working on compilers all his career. When he’s not compiling React components, he’s either drinking coffee or eating yet another Dosa.

[gsathya.03](https://threads.net/gsathya.03)

[ gsathya](https://github.com/gsathya)

### Sebastian Markbåge[](#sebastian-markbåge "Link for Sebastian Markbåge")

Engineer at Vercel

Sebastian majored in psychology. He’s usually quiet. Even when he says something, it often doesn’t make sense to the rest of us until a few months later. The correct way to pronounce his surname is “mark-boa-geh” but he settled for “mark-beige” out of pragmatism — and that’s how he approaches React.

[sebmarkbage](https://threads.net/sebmarkbage)

[ sebmarkbage](https://github.com/sebmarkbage)

### Sebastian Silbermann[](#sebastian-silbermann "Link for Sebastian Silbermann")

Engineer at Vercel

Sebastian learned programming to make the browser games he played during class more enjoyable. Eventually this lead to contributing to as much open source code as possible. Outside of coding he’s busy making sure people don’t confuse him with the other Sebastians and Zilberman of the React community.

[sebsilbermann](https://threads.net/sebsilbermann)

[ eps1lon](https://github.com/eps1lon)

### Seth Webster[](#seth-webster "Link for Seth Webster")

Engineering Manager at Meta

Seth started programming as a kid growing up in Tucson, AZ. After school, he was bitten by the music bug and was a touring musician for about 10 years before returning to _work_ , starting with Intuit. In his spare time, he loves [taking pictures](https://www.sethwebster.com) and flying for animal rescues in the northeastern United States.

[sethwebster](https://threads.net/sethwebster)

[ sethwebster](https://github.com/sethwebster)

[ sethwebster.com](https://sethwebster.com)

### Sophie Alpert[](#sophie-alpert "Link for Sophie Alpert")

Independent Engineer

Four days after React was released, Sophie rewrote the entirety of her then-current project to use it, which she now realizes was perhaps a bit reckless. After she became the project’s #1 committer, she wondered why she wasn’t getting paid by Facebook like everyone else was and joined the team officially to lead React through its adolescent years. Though she quit that job years ago, somehow she’s still in the team’s group chats and “providing value”.

[sophiebits](https://threads.net/sophiebits)

[ sophiebits](https://github.com/sophiebits)

[ sophiebits.com](https://sophiebits.com)

### Tianyu Yao[](#tianyu-yao "Link for Tianyu Yao")

Engineer at Meta

Tianyu’s interest in computers started as a kid because he loves video games. So he majored in computer science and still plays childish games like League of Legends. When he is not in front of a computer, he enjoys playing with his two kittens, hiking and kayaking.

[ tyao1](https://github.com/tyao1)

### Yuzhi Zheng[](#yuzhi-zheng "Link for Yuzhi Zheng")

Engineering Manager at Meta

Yuzhi studied Computer Science in school. She liked the instant gratification of seeing code come to life without having to physically be in a laboratory. Now she’s a manager in the React org. Before management, she used to work on the Relay data fetching framework. In her spare time, Yuzhi enjoys optimizing her life via gardening and home improvement projects.

[yuzhiz](https://threads.net/yuzhiz)

[ yuzhi](https://github.com/yuzhi)

## Past contributors [](#past-contributors "Link for Past contributors ")

You can find the past team members and other people who significantly contributed to React over the years on the [acknowledgements](/community/acknowledgements) page.

[PreviousReact Videos](/community/videos)[NextDocs Contributors](/community/docs-contributors)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [React Core ](#react-core)
  * [Andrew Clark](#andrew-clark)
  * [Dan Abramov](#dan-abramov)
  * [Eli White](#eli-white)
  * [Jack Pope](#jack-pope)
  * [Jason Bonta](#jason-bonta)
  * [Joe Savona](#joe-savona)
  * [Josh Story](#josh-story)
  * [Lauren Tan](#lauren-tan)
  * [Luna Wei](#luna-wei)
  * [Matt Carroll](#matt-carroll)
  * [Mofei Zhang](#mofei-zhang)
  * [Noah Lemen](#noah-lemen)
  * [Rick Hanlon](#rick-hanlon)
  * [Ruslan Lesiutin](#ruslan-lesiutin)
  * [Sathya Gunasekaran ](#sathya-gunasekaran)
  * [Sebastian Markbåge](#sebastian-markbåge)
  * [Sebastian Silbermann](#sebastian-silbermann)
  * [Seth Webster](#seth-webster)
  * [Sophie Alpert](#sophie-alpert)
  * [Tianyu Yao](#tianyu-yao)
  * [Yuzhi Zheng](#yuzhi-zheng)
  * [Past contributors ](#past-contributors)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Docs Contributors[](#undefined "Link for this heading")

React documentation is written and maintained by the [React team](/community/team) and [external contributors.](https://github.com/reactjs/react.dev/graphs/contributors) On this page, we’d like to thank a few people who’ve made significant contributions to this site.

## Content [](#content "Link for Content ")

  * : editing, writing, illustrating
  * : writing, curriculum design
  * : example code
  * : writing
  * : writing
  * : writing
  * : writing
  * : writing
  * : editing, writing
  * : reviews, advice
  * : feedback



## Design [](#design "Link for Design ")

  * : site design
  * [Razvan Gradinar](https://dribbble.com/GradinarRazvan): sandbox design
  * [Maggie Appleton](https://maggieappleton.com/): diagram system
  * : color-coded explanations



## Development [](#development "Link for Development ")

  * : site development
  * [ThisDotLabs](https://www.thisdot.co/) (, ): site development
  * [CodeSandbox](https://codesandbox.io/) (, , , ): sandbox integration
  * : site development
  * : site development
  * [Harish Kumar](https://www.strek.in/): development and maintenance
  * : sandbox improvements



We’d also like to thank countless alpha testers and community members who gave us feedback along the way.

[PreviousMeet the Team](/community/team)[NextTranslations](/community/translations)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Content ](#content)
  * [Design ](#design)
  * [Development ](#development)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Acknowledgements[](#undefined "Link for this heading")

React was originally created by [Jordan Walke.](https://github.com/jordwalke) Today, React has a [dedicated full-time team working on it](/community/team), as well as over a thousand [open source contributors.](https://github.com/facebook/react/graphs/contributors)

## Past contributors [](#past-contributors "Link for Past contributors ")

We’d like to recognize a few people who have made significant contributions to React and its documentation in the past and have helped maintain them over the years:

  * [Almero Steyn](https://github.com/AlmeroSteyn)
  * [Andreas Svensson](https://github.com/syranide)
  * [Alex Krolick](https://github.com/alexkrolick)
  * [Alexey Pyltsyn](https://github.com/lex111)
  * [Andrey Lunyov](https://github.com/alunyov)
  * [Brandon Dail](https://github.com/aweary)
  * [Brian Vaughn](https://github.com/bvaughn)
  * [Caleb Meredith](https://github.com/calebmer)
  * [Chang Yan](https://github.com/cyan33)
  * [Cheng Lou](https://github.com/chenglou)
  * [Christoph Nakazawa](https://github.com/cpojer)
  * [Christopher Chedeau](https://github.com/vjeux)
  * [Clement Hoang](https://github.com/clemmy)
  * [Dave McCabe](https://github.com/davidmccabe)
  * [Dominic Gannaway](https://github.com/trueadm)
  * [Flarnie Marchan](https://github.com/flarnie)
  * [Jason Quense](https://github.com/jquense)
  * [Jesse Beach](https://github.com/jessebeach)
  * [Jessica Franco](https://github.com/Jessidhia)
  * [Jim Sproch](https://github.com/jimfb)
  * [Josh Duck](https://github.com/joshduck)
  * [Joe Critchley](https://github.com/joecritch)
  * [Jeff Morrison](https://github.com/jeffmo)
  * [Luna Ruan](https://github.com/lunaruan)
  * [Kathryn Middleton](https://github.com/kmiddleton14)
  * [Keyan Zhang](https://github.com/keyz)
  * [Marco Salazar](https://github.com/salazarm)
  * [Mengdi Chen](https://github.com/mondaychen)
  * [Nat Alison](https://github.com/tesseralis)
  * [Nathan Hunzaker](https://github.com/nhunzaker)
  * [Nicolas Gallagher](https://github.com/necolas)
  * [Paul O’Shannessy](https://github.com/zpao)
  * [Pete Hunt](https://github.com/petehunt)
  * [Philipp Spiess](https://github.com/philipp-spiess)
  * [Rachel Nabors](https://github.com/rachelnabors)
  * [Robert Zhang](https://github.com/robertzhidealx)
  * [Samuel Susla](https://github.com/sammy-SC)
  * [Sander Spies](https://github.com/sanderspies)
  * [Sasha Aickin](https://github.com/aickin)
  * [Sean Keegan](https://github.com/seanryankeegan)
  * [Sophia Shoemaker](https://github.com/mrscobbler)
  * [Sunil Pai](https://github.com/threepointone)
  * [Tim Yung](https://github.com/yungsters)
  * [Xuan Huang](https://github.com/huxpro)



This list is not exhaustive.

We’d like to give special thanks to [Tom Occhino](https://github.com/tomocchino) and [Adam Wolff](https://github.com/wolffiex) for their guidance and support over the years. We are also thankful to all the volunteers who [translated React into other languages.](https://translations.react.dev/)

## Additional Thanks [](#additional-thanks "Link for Additional Thanks ")

Additionally, we’re grateful to:

  * [Jeff Barczewski](https://github.com/jeffbski) for allowing us to use the `react` package name on npm
  * [Christopher Aue](https://christopheraue.net/) for letting us use the reactjs.com domain name and the username on Twitter
  * [ProjectMoon](https://github.com/ProjectMoon) for letting us use the [flux](https://www.npmjs.com/package/flux) package name on npm
  * Shane Anderson for allowing us to use the [react](https://github.com/react) org on GitHub



[PreviousTranslations](/community/translations)[NextVersioning Policy](/community/versioning-policy)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Past contributors ](#past-contributors)
  * [Additional Thanks ](#additional-thanks)


[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact%2Freleases)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact%2Freleases)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Freleases%2Findex&source=header-repo&source_repo=facebook%2Freact) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ facebook ](/facebook) / **[react](/facebook/react) ** Public

  * [ Notifications ](/login?return_to=%2Ffacebook%2Freact) You must be signed in to change notification settings
  * [ Fork 47.2k ](/login?return_to=%2Ffacebook%2Freact)
  * [ Star  231k ](/login?return_to=%2Ffacebook%2Freact)




  * [ Code ](/facebook/react)
  * [ Issues 758 ](/facebook/react/issues)
  * [ Pull requests 168 ](/facebook/react/pulls)
  * [ Actions ](/facebook/react/actions)
  * [ Projects 0 ](/facebook/react/projects)
  * [ Wiki ](/facebook/react/wiki)
  * [ Security ](/facebook/react/security)
  * [ Insights ](/facebook/react/pulse)



Additional navigation options

  * [ Code  ](/facebook/react)
  * [ Issues  ](/facebook/react/issues)
  * [ Pull requests  ](/facebook/react/pulls)
  * [ Actions  ](/facebook/react/actions)
  * [ Projects  ](/facebook/react/projects)
  * [ Wiki  ](/facebook/react/wiki)
  * [ Security  ](/facebook/react/security)
  * [ Insights  ](/facebook/react/pulse)



# Releases: facebook/react

[Releases](/facebook/react/releases) [Tags](/facebook/react/tags)

Releases · facebook/react

## 19.0.0 (December 5, 2024)

05 Dec 21:05 

[jackpope](/jackpope)

[ v19.0.0  ](/facebook/react/tree/v19.0.0)

[ `7aa5dda`](/facebook/react/commit/7aa5dda3b3e4c2baa905a59b922ae7ec14734b24)

This commit was created on GitHub.com and signed with GitHub’s **verified signature**. 

GPG key ID: B5690EEEBB952194 [Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v19.0.0)

Loading

[View all tags](/facebook/react/tags)

[19.0.0 (December 5, 2024)](/facebook/react/releases/tag/v19.0.0) [Latest](/facebook/react/releases/latest)

[Latest](/facebook/react/releases/latest)

Below is a list of all new features, APIs, deprecations, and breaking changes. Read [React 19 release post](https://react.dev/blog/2024/04/25/react-19) and [React 19 upgrade guide](https://react.dev/blog/2024/04/25/react-19-upgrade-guide) for more information.

> Note: To help make the upgrade to React 19 easier, we’ve published a react@18.3 release that is identical to 18.2 but adds warnings for deprecated APIs and other changes that are needed for React 19. We recommend upgrading to React 18.3.1 first to help identify any issues before upgrading to React 19.

## New Features

### React

  * Actions: `startTransition` can now accept async functions. Functions passed to `startTransition` are called “Actions”. A given Transition can include one or more Actions which update state in the background and update the UI with one commit. In addition to updating state, Actions can now perform side effects including async requests, and the Action will wait for the work to finish before finishing the Transition. This feature allows Transitions to include side effects like `fetch()` in the pending state, and provides support for error handling, and optimistic updates.
  * `useActionState`: is a new hook to order Actions inside of a Transition with access to the state of the action, and the pending state. It accepts a reducer that can call Actions, and the initial state used for first render. It also accepts an optional string that is used if the action is passed to a form `action` prop to support progressive enhancement in forms.
  * `useOptimistic`: is a new hook to update state while a Transition is in progress. It returns the state, and a set function that can be called inside a transition to “optimistically” update the state to expected final value immediately while the Transition completes in the background. When the transition finishes, the state is updated to the new value.
  * `use`: is a new API that allows reading resources in render. In React 19, `use` accepts a promise or Context. If provided a promise, `use` will suspend until a value is resolved. `use` can only be used in render but can be called conditionally.
  * `ref` as a prop: Refs can now be used as props, removing the need for `forwardRef`.
  * **Suspense sibling pre-warming** : When a component suspends, React will immediately commit the fallback of the nearest Suspense boundary, without waiting for the entire sibling tree to render. After the fallback commits, React will schedule another render for the suspended siblings to “pre-warm” lazy requests.



### React DOM Client

  * `<form> action` prop: Form Actions allow you to manage forms automatically and integrate with `useFormStatus`. When a `<form> action` succeeds, React will automatically reset the form for uncontrolled components. The form can be reset manually with the new `requestFormReset` API.
  * `<button> and <input> formAction` prop: Actions can be passed to the `formAction` prop to configure form submission behavior. This allows using different Actions depending on the input.
  * `useFormStatus`: is a new hook that provides the status of the parent `<form> action`, as if the form was a Context provider. The hook returns the values: `pending`, `data`, `method`, and `action`.
  * Support for Document Metadata: We’ve added support for rendering document metadata tags in components natively. React will automatically hoist them into the `<head>` section of the document.
  * Support for Stylesheets: React 19 will ensure stylesheets are inserted into the `<head>` on the client before revealing the content of a Suspense boundary that depends on that stylesheet.
  * Support for async scripts: Async scripts can be rendered anywhere in the component tree and React will handle ordering and deduplication.
  * Support for preloading resources: React 19 ships with `preinit`, `preload`, `prefetchDNS`, and `preconnect` APIs to optimize initial page loads by moving discovery of additional resources like fonts out of stylesheet loading. They can also be used to prefetch resources used by an anticipated navigation.



### React DOM Server

  * Added `prerender` and `prerenderToNodeStream` APIs for static site generation. They are designed to work with streaming environments like Node.js Streams and Web Streams. Unlike `renderToString`, they wait for data to load for HTML generation.



### React Server Components

  * RSC features such as directives, server components, and server functions are now stable. This means libraries that ship with Server Components can now target React 19 as a peer dependency with a react-server export condition for use in frameworks that support the Full-stack React Architecture. The underlying APIs used to implement a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x. See [docs](https://19.react.dev/reference/rsc/server-components) for how to support React Server Components.



## Deprecations

  * Deprecated: `element.ref` access: React 19 supports ref as a prop, so we’re deprecating `element.ref` in favor of `element.props.ref`. Accessing will result in a warning.
  * `react-test-renderer`: In React 19, react-test-renderer logs a deprecation warning and has switched to concurrent rendering for web usage. We recommend migrating your tests to @testinglibrary.com/docs/react-testing-library/intro/) or @testingesting-library.com/docs/react-native-testing-library/intro)



## Breaking Changes

React 19 brings in a number of breaking changes, including the removals of long-deprecated APIs. We recommend first upgrading to `18.3.1`, where we've added additional deprecation warnings. Check out the [upgrade guide](https://19.react.dev/blog/2024/04/25/react-19-upgrade-guide) for more details and guidance on codemodding.

### React

  * New JSX Transform is now required: We introduced [a new JSX transform](https://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html) in 2020 to improve bundle size and use JSX without importing React. In React 19, we’re adding additional improvements like using ref as a prop and JSX speed improvements that require the new transform.
  * Errors in render are not re-thrown: Errors that are not caught by an Error Boundary are now reported to window.reportError. Errors that are caught by an Error Boundary are reported to console.error. We’ve introduced `onUncaughtError` and `onCaughtError` methods to `createRoot` and `hydrateRoot` to customize this error handling.
  * Removed: `propTypes`: Using `propTypes` will now be silently ignored. If required, we recommend migrating to TypeScript or another type-checking solution.
  * Removed: `defaultProps` for functions: ES6 default parameters can be used in place. Class components continue to support `defaultProps` since there is no ES6 alternative.
  * Removed: `contextTypes` and `getChildContext`: Legacy Context for class components has been removed in favor of the `contextType` API.
  * Removed: string refs: Any usage of string refs need to be migrated to ref callbacks.
  * Removed: Module pattern factories: A rarely used pattern that can be migrated to regular functions.
  * Removed: `React.createFactory`: Now that JSX is broadly supported, all `createFactory` usage can be migrated to JSX components.
  * Removed: `react-test-renderer/shallow`: This has been a re-export of [react-shallow-renderer](https://github.com/enzymejs/react-shallow-renderer) since React 18. If needed, you can continue to use the third-party package directly. We recommend using @testinglibrary.com/docs/react-testing-library/intro/) or @testingesting-library.com/docs/react-native-testing-library/intro) instead.



### React DOM

  * Removed: `react-dom/test-utils`: We’ve moved `act` from `react-dom/test-utils` to react. All other utilities have been removed.
  * Removed: `ReactDOM`.`render`, `ReactDOM`.`hydrate`: These have been removed in favor of the concurrent equivalents: `ReactDOM`.`createRoot` and `ReactDOM.hydrateRoot`.
  * Removed: `unmountComponentAtNode`: Removed in favor of `root.unmount()`.
  * Removed: `ReactDOM`.`findDOMNode`: You can replace `ReactDOM`.`findDOMNode` with DOM Refs.



## Notable Changes

### React

  * `<Context>` as a provider: You can now render `<Context>` as a provider instead of `<Context.Provider>`.
  * Cleanup functions for refs: When the component unmounts, React will call the cleanup function returned from the ref callback.
  * `useDeferredValue` initial value argument: When provided, `useDeferredValue` will return the initial value for the initial render of a component, then schedule a re-render in the background with the `deferredValue` returned.
  * Support for Custom Elements: React 19 now passes all tests on [Custom Elements Everywhere](https://custom-elements-everywhere.com/).
  * StrictMode changes: `useMemo` and `useCallback` will now reuse the memoized results from the first render, during the second render. Additionally, StrictMode will now double-invoke ref callback functions on initial mount.
  * UMD builds removed: To load React 19 with a script tag, we recommend using an ESM-based CDN such as [esm.sh](http://esm.sh).



### React DOM

  * Diffs for hydration errors: In the case of a mismatch, React 19 logs a single error with a diff of the mismatched content.
  * Compatibility with third-party scripts and extensions: React will now force a client re-render to fix up any mismatched content caused by elements inserted by third-party JS.



## TypeScript Changes

The most common changes can be codemodded with `npx types-react-codemod@latest preset-19 ./path-to-your-react-ts-files`.

  * Removed deprecated TypeScript types: 
    * `ReactChild` (replacement: `React.ReactElement | number | string)`
    * `ReactFragment` (replacement: `Iterable<React.ReactNode>`)
    * `ReactNodeArray` (replacement: `ReadonlyArray<React.ReactNode>`)
    * `ReactText` (replacement:...



[Read more](/facebook/react/releases/tag/v19.0.0)

### Contributors

  * [ ](https://github.com/sophiebits)
  * [ ](https://github.com/kassens)
  * [ ](https://github.com/devongovett)
  * [ ](https://github.com/bvaughn)
  * [ ](https://github.com/sebmarkbage)
  * [ ](https://github.com/styfle)
  * [ ](https://github.com/danieltott)
  * [ ](https://github.com/unstubbable)
  * [ ](https://github.com/jupapios)
  * [ ](https://github.com/gaearon)
  * [ ](https://github.com/markerikson)
  * [ ](https://github.com/sokra)
  * [ ](https://github.com/JonnyBurger)
  * [ ](https://github.com/sammy-SC)
  * [ ](https://github.com/pandaiolo)
  * [ ](https://github.com/HenriqueLimas)
  * [ ](https://github.com/rickhanlonii)
  * [ ](https://github.com/gnoff)
  * [ ](https://github.com/colinhacks)
  * [ ](https://github.com/acdlite)
  * [ ](https://github.com/phryneas)
  * [ ](https://github.com/KarimP)
  * [ ](https://github.com/hansottowirtz)
  * [ ](https://github.com/tyao1)
  * [ ](https://github.com/timneutkens)
  * [ ](https://github.com/liuyenwei)
  * [ ](https://github.com/josepharhar)
  * [ ](https://github.com/jackpope)
  * [ ](https://github.com/feedthejim)
  * [ ](https://github.com/eps1lon)
  * [ ](https://github.com/lubieowoce)
  * [ ](https://github.com/himself65)
  * [ ](https://github.com/jellevoost)
  * [ ](https://github.com/sweetliquid)
  * [ ](https://github.com/ling1726)
  * [ ](https://github.com/mofeiZ)
  * [ ](https://github.com/yujunjung)
  * [ ](https://github.com/SouSingh)



sophiebits, kassens, and 36 other contributors 

Assets 2

Loading

👍 285 hhrrr, lbeckman314, matheuspergoli, raix, jonz94, Foshati, nikischin, 4ndrs, zach-betz-hln, diego-aquino, and 275 more reacted with thumbs up emoji 😄 45 Dmitriy-Frostoff, M21H, dBianchii, li-jia-nan, chemistwang, yisen91, haegeon-kim, th2205, ChiaJune, Entropy-10, and 35 more reacted with laugh emoji 🎉 216 cherniavskii, webbertakken, reichhartd, lbeckman314, camiloan, ArtKullashi, matheuspergoli, raix, jonz94, esvyridov, and 206 more reacted with hooray emoji ❤️ 95 4ndrs, dwalker93, diego-aquino, breadadams, kachkaev, tgmarinho, dylanjmcdonald, hongbo-miao, zweimach, HamoBoker, and 85 more reacted with heart emoji 🚀 123 marcosbotene, lbeckman314, ArtKullashi, fawzii0x3, matheuspergoli, raix, skyfrk, jonz94, MatthewHerbst, Foshati, and 113 more reacted with rocket emoji 👀 40 Dmitriy-Frostoff, M21H, avindra, dBianchii, yisen91, huongdevvn, staaky, haegeon-kim, Kin-Xemer, coder-hxl, and 30 more reacted with eyes emoji

All reactions

  * 👍 285 reactions
  * 😄 45 reactions
  * 🎉 216 reactions
  * ❤️ 95 reactions
  * 🚀 123 reactions
  * 👀 40 reactions



464 people reacted

## eslint-plugin-react-hooks@5.0.0 (Oct 11, 2024)

11 Oct 13:32 

[eps1lon](/eps1lon)

[ eslint-plugin-react-hooks@5.0.0  ](/facebook/react/tree/eslint-plugin-react-hooks%405.0.0)

[ `0911120`](/facebook/react/commit/09111202d617477b63507b41e8b6c3101b4afd87)

This commit was created on GitHub.com and signed with GitHub’s **verified signature**. 

GPG key ID: B5690EEEBB952194 [Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...eslint-plugin-react-hooks%405.0.0)

Loading

[View all tags](/facebook/react/tags)

[eslint-plugin-react-hooks@5.0.0 (Oct 11, 2024)](/facebook/react/releases/tag/eslint-plugin-react-hooks%405.0.0)

This release only contains `eslint-plugin-react-hooks`. Notably, new violations and support for ESLint v9 were added.

## `eslint-plugin-react-hooks`

  * **New Violations:** Component names now need to start with an uppercase letter instead of a non-lowercase letter. This means `_Button` or `_component` are no longer valid. ([@kassens](https://github.com/kassens)) in [#25162](https://github.com/facebook/react/pull/25162) For example, in 

```
function _Component() {
 useState()
 ^^^^^^^^ A React Hook "useState" is called in function "_Component" which is neither a Component nor a custom React Hook function.
}
```


`_Component` should be renamed to `Component`.


  * Add support for ESLint v9. ([@eps1lon](https://github.com/eps1lon) in [#28773](https://github.com/facebook/react/pull/28773))
  * Consider dispatch from `useActionState` stable. ([@eps1lon](https://github.com/eps1lon) in [#29665](https://github.com/facebook/react/pull/29665))
  * Accept `as` expression in callback. ([@StyleShit](https://github.com/StyleShit) in [#28202](https://github.com/facebook/react/pull/28202))
  * Accept `as` expressions in deps array. ([@StyleShit](https://github.com/StyleShit) in [#28189](https://github.com/facebook/react/pull/28189))
  * Treat `React.use()` the same as `use()`. ([@kassens](https://github.com/kassens) in [#27769](https://github.com/facebook/react/pull/27769))
  * Move `use()` lint to non-experimental. ([@kassens](https://github.com/kassens) in [#27768](https://github.com/facebook/react/pull/27768))
  * Support Flow `as` expressions. ([@cpojer](https://github.com/cpojer) in [#27590](https://github.com/facebook/react/pull/27590))
  * Allow `useEffect(fn, undefined)`. ([@kassens](https://github.com/kassens) in [#27525](https://github.com/facebook/react/pull/27525))
  * Disallow hooks in async functions. ([@acdlite](https://github.com/acdlite) in [#27045](https://github.com/facebook/react/pull/27045))
  * Rename experimental `useEvent` to `useEffectEvent`. ([@sebmarkbage](https://github.com/sebmarkbage) in [#25881](https://github.com/facebook/react/pull/25881))
  * Lint for presence of `useEvent` functions in dependency lists. ([@poteto](https://github.com/poteto) in [#25512](https://github.com/facebook/react/pull/25512))
  * Check `useEvent` references instead. ([@poteto](https://github.com/poteto) in [#25319](https://github.com/facebook/react/pull/25319))
  * Update `RulesOfHooks` with `useEvent` rules. ([@poteto](https://github.com/poteto) in [#25285](https://github.com/facebook/react/pull/25285))



Assets 2

Loading

👍 177 mkosir, Amoz19, nilsingwersen, gunters63, kevinpainchaud, fiskryeziu, aryaemami59, re-taro, Shakeskeyboarde, m3thom, and 167 more reacted with thumbs up emoji 😄 3 aalmanasir, GeorgeDzvengwe, and ScriptKnight-Master reacted with laugh emoji 🎉 74 mkosir, Amoz19, QuantumChemist, kevinpainchaud, daniellmiranda, aryaemami59, re-taro, Shakeskeyboarde, alinnert, haodaking, and 64 more reacted with hooray emoji ❤️ 60 mkosir, QuantumChemist, kevinpainchaud, aryaemami59, re-taro, Shakeskeyboarde, slk333, 4ndrs, ShobhitShah1, DavidGDA, and 50 more reacted with heart emoji 🚀 50 mkosir, Amoz19, QuantumChemist, LeunensMichiel, kevinpainchaud, aryaemami59, re-taro, monkey0722, Shakeskeyboarde, rodamaral, and 40 more reacted with rocket emoji 👀 20 Dmitriy-Frostoff, MidlajYH, rodrigomoyano11, Denisskas, lucipas, JamBalaya56562, fadrian06, warmachine028, zdu-strong, Talaxy009, and 10 more reacted with eyes emoji

All reactions

  * 👍 177 reactions
  * 😄 3 reactions
  * 🎉 74 reactions
  * ❤️ 60 reactions
  * 🚀 50 reactions
  * 👀 20 reactions



247 people reacted

## 18.3.1 (April 26, 2024)

26 Apr 19:53 

[rickhanlonii](/rickhanlonii)

[ v18.3.1  ](/facebook/react/tree/v18.3.1)

[ `f1338f8`](/facebook/react/commit/f1338f8080abd1386454a10bbf93d67bfe37ce85)

This commit was signed with the committer’s **verified signature**. 

[ ](/acdlite) [acdlite](/acdlite) Andrew Clark 

SSH Key Fingerprint: kMgJy+7AI/mxxpuyx1Qgc7NZY55dREBRubChEAYfi7I [Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v18.3.1)

Loading

[View all tags](/facebook/react/tags)

[18.3.1 (April 26, 2024)](/facebook/react/releases/tag/v18.3.1)

  * Export `act` from `react` [f1338f](https://github.com/facebook/react/commit/f1338f8080abd1386454a10bbf93d67bfe37ce85)



Assets 2

Loading

👍 293 franz-bendezu, rockyzhang24, IVLIU, jhosep98, golamrabbiazad, manyeyes, undesicimo, doooss, einer20, IntelligentSynthesis, and 283 more reacted with thumbs up emoji 😄 84 jafar-jabr, 1zilc, sergiocarneiro, lin72h, MuhamedAyoub, pwbriggs, undesicimo, silkyland, Marukome0743, MeherabSamir, and 74 more reacted with laugh emoji 🎉 79 hendriknielaender, advanceddev, marcio-grecio, Rel1cx, dbstratta, poteto, ZachLegros, clemstoquart, mkosir, ykzts, and 69 more reacted with hooray emoji ❤️ 96 4ndrs, batosai, marcio-grecio, dbstratta, hrasoa, poteto, mkosir, 1zilc, lin72h, xxrjun, and 86 more reacted with heart emoji 🚀 88 hendriknielaender, KirianCaumes, sampain, xxrjun, marcio-grecio, dbstratta, poteto, esau-morais, mkosir, lin72h, and 78 more reacted with rocket emoji 👀 14 mtayyebdeveloper, CapitanArdeshir, subham007-coder, codewithnathan97, jaimin-bariya, youne-elma, Rucellmai61, trungle33, Quanzhitong, Sudharsan0727, and 4 more reacted with eyes emoji

All reactions

  * 👍 293 reactions
  * 😄 84 reactions
  * 🎉 79 reactions
  * ❤️ 96 reactions
  * 🚀 88 reactions
  * 👀 14 reactions



441 people reacted

## 18.3.0 (April 25, 2024)

26 Apr 19:48 

[rickhanlonii](/rickhanlonii)

[ v18.3.0  ](/facebook/react/tree/v18.3.0)

[ `8a015b6`](/facebook/react/commit/8a015b68cc060079878e426610e64e86fb328f8d)

This commit was signed with the committer’s **verified signature**. 

[ ](/acdlite) [acdlite](/acdlite) Andrew Clark 

SSH Key Fingerprint: kMgJy+7AI/mxxpuyx1Qgc7NZY55dREBRubChEAYfi7I [Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v18.3.0)

Loading

[View all tags](/facebook/react/tags)

[18.3.0 (April 25, 2024)](/facebook/react/releases/tag/v18.3.0)

This release is identical to 18.2 but adds warnings for deprecated APIs and other changes that are needed for React 19.

Read the [React 19 Upgrade Guide](https://react.dev/blog/2024/04/25/react-19-upgrade-guide) for more info.

### React

  * Allow writing to `this.refs` to support string ref codemod [909071](https://github.com/facebook/react/commit/9090712fd3ca4e1099e1f92e67933c2cb4f32552)
  * Warn for deprecated `findDOMNode` outside StrictMode [c3b283](https://github.com/facebook/react/commit/c3b283964108b0e8dbcf1f9eb2e7e67815e39dfb)
  * Warn for deprecated `test-utils` methods [d4ea75](https://github.com/facebook/react/commit/d4ea75dc4258095593b6ac764289f42bddeb835c)
  * Warn for deprecated Legacy Context outside StrictMode [415ee0](https://github.com/facebook/react/commit/415ee0e6ea0fe3e288e65868df2e3241143d5f7f)
  * Warn for deprecated string refs outside StrictMode [#25383](https://github.com/facebook/react/pull/25383)
  * Warn for deprecated `defaultProps` for function components [#25699](https://github.com/facebook/react/pull/25699)
  * Warn when spreading `key` [#25697](https://github.com/facebook/react/pull/25697)
  * Warn when using `act` from `test-utils` [d4ea75](https://github.com/facebook/react/commit/d4ea75dc4258095593b6ac764289f42bddeb835c)



### React DOM

  * Warn for deprecated `unmountComponentAtNode` [8a015b](https://github.com/facebook/react/commit/8a015b68cc060079878e426610e64e86fb328f8d)
  * Warn for deprecated `renderToStaticNodeStream` [#28874](https://github.com/facebook/react/pull/28874)



Assets 2

Loading

👍 115 ChrisWiles, eifr, poteto, clemstoquart, zdu-strong, lin72h, golamrabbiazad, makoto14, ParasSolanki, ramunecroft, and 105 more reacted with thumbs up emoji 😄 24 vozaldi, fadrian06, vikiboss, 1weiho, MidlajYH, lnhrdt, zudydy, gmerwan, oy-itstedpark, w00khyung, and 14 more reacted with laugh emoji 🎉 39 ChrisWiles, Arechii, poteto, ykzts, zdu-strong, lin72h, golamrabbiazad, pwbriggs, syahrizaldev, fadrian06, and 29 more reacted with hooray emoji ❤️ 48 4ndrs, ChrisWiles, poteto, controversial, Bikossor, rendrom, zdu-strong, lin72h, AhmedBaset, golamrabbiazad, and 38 more reacted with heart emoji 🚀 61 mzaien, llegomark, KirianCaumes, dbstratta, Abhiek187, 87xie, 4ndrs, ChrisWiles, rivajunior, poteto, and 51 more reacted with rocket emoji 👀 4 ixsamar, thisisengineer, kronos456, and MagdyKishk reacted with eyes emoji

All reactions

  * 👍 115 reactions
  * 😄 24 reactions
  * 🎉 39 reactions
  * ❤️ 48 reactions
  * 🚀 61 reactions
  * 👀 4 reactions



179 people reacted

## 18.2.0 (June 14, 2022)

14 Jun 19:54 

[gnoff](/gnoff)

[ v18.2.0  ](/facebook/react/tree/v18.2.0)

[ `9e3b772`](/facebook/react/commit/9e3b772b8cabbd8cadc7522ebe3dde3279e79d9e)

This commit was created on GitHub.com and signed with GitHub’s **verified signature**. The key has expired. 

GPG key ID: 4AEE18F83AFDEB23

Expired

[Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v18.2.0)

Loading

[View all tags](/facebook/react/tags)

[18.2.0 (June 14, 2022)](/facebook/react/releases/tag/v18.2.0)

### React DOM

  * Provide a component stack as a second argument to `onRecoverableError`. ([@gnoff](https://github.com/gnoff) in [#24591](https://github.com/facebook/react/pull/24591))
  * Fix hydrating into `document` causing a blank page on mismatch. ([@gnoff](https://github.com/gnoff) in [#24523](https://github.com/facebook/react/pull/24523))
  * Fix false positive hydration errors with Suspense. ([@gnoff](https://github.com/gnoff) in [#24480](https://github.com/facebook/react/pull/24480) and [@acdlite](https://github.com/acdlite) in [#24532](https://github.com/facebook/react/pull/24532))
  * Fix ignored `setState` in Safari when adding an iframe. ([@gaearon](https://github.com/gaearon) in [#24459](https://github.com/facebook/react/pull/24459))



### React DOM Server

  * Pass information about server errors to the client. ([@salazarm](https://github.com/salazarm) and [@gnoff](https://github.com/gnoff) in [#24551](https://github.com/facebook/react/pull/24551) and [#24591](https://github.com/facebook/react/pull/24591))
  * Allow to provide a reason when aborting the HTML stream. ([@gnoff](https://github.com/gnoff) in [#24680](https://github.com/facebook/react/pull/24680))
  * Eliminate extraneous text separators in the HTML where possible. ([@gnoff](https://github.com/gnoff) in [#24630](https://github.com/facebook/react/pull/24630))
  * Disallow complex children inside `<title>` elements to match the browser constraints. ([@gnoff](https://github.com/gnoff) in [#24679](https://github.com/facebook/react/pull/24679))
  * Fix buffering in some worker environments by explicitly setting `highWaterMark` to `0`. ([@jplhomer](https://github.com/jplhomer) in [#24641](https://github.com/facebook/react/pull/24641))



### Server Components (Experimental)

  * Add support for `useId()` inside Server Components. ([@gnoff](https://github.com/gnoff)) in [#24172](https://github.com/facebook/react/pull/24172)



Assets 2

Loading

👍 498 apostolos, morellodev, marcotterra, chanan, dillingham, dcsaszar, davbrito, salvoravida, Resetnak, unrealapex, and 488 more reacted with thumbs up emoji 😄 71 wajeshubham, Huinno-YoonJaeYoon, leonardssh, anaslaham, mhndev, gregarega1993, Ahmedgkanria, lin72h, huynhdev24, Zinoujoker, and 61 more reacted with laugh emoji 🎉 120 mkosir, kazuhitonakayama, rvitaliy, ivanov-v, fatihcandev, aramnazaryan, OmerWow, outbackStack, xiel, tronikelis, and 110 more reacted with hooray emoji ❤️ 178 LakhderAmine99, pavinthan, RazvanRauta, morellodev, jplhomer, blittle, Berrones-Edwin, salvoravida, unrealapex, electron-space, and 168 more reacted with heart emoji 🚀 148 svengreb, unigazer, morellodev, blittle, kachkaev, jakejarvis, brneor, lmachens, salvoravida, unrealapex, and 138 more reacted with rocket emoji 👀 76 MrDanOak, adiezdev, outbackStack, tronikelis, MertHaddad, rivailruiz, andreLDias, EarlGeorge, jamieshark, libeyondea, and 66 more reacted with eyes emoji

All reactions

  * 👍 498 reactions
  * 😄 71 reactions
  * 🎉 120 reactions
  * ❤️ 178 reactions
  * 🚀 148 reactions
  * 👀 76 reactions



696 people reacted

## 18.1.0 (April 26, 2022)

26 Apr 21:15 

[acdlite](/acdlite)

[ v18.1.0  ](/facebook/react/tree/v18.1.0)

[ `22edb9f`](/facebook/react/commit/22edb9f777d27369fd2c1fad378f74e237b6dfd3)

This commit was created on GitHub.com and signed with GitHub’s **verified signature**. The key has expired. 

GPG key ID: 4AEE18F83AFDEB23

Expired

[Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v18.1.0)

Loading

[View all tags](/facebook/react/tags)

[18.1.0 (April 26, 2022)](/facebook/react/releases/tag/v18.1.0)

### React DOM

  * Fix the false positive warning about `react-dom/client` when using UMD bundle. ([@alireza-molaee](https://github.com/alireza-molaee) in [#24274](https://github.com/facebook/react/pull/24274))
  * Fix `suppressHydrationWarning` to work in production too. ([@gaearon](https://github.com/gaearon) in [#24271](https://github.com/facebook/react/pull/24271))
  * Fix `componentWillUnmount` firing twice inside of Suspense. ([@acdlite](https://github.com/acdlite) in [#24308](https://github.com/facebook/react/pull/24308))
  * Fix some transition updates being ignored. ([@acdlite](https://github.com/acdlite) in [#24353](https://github.com/facebook/react/pull/24353))
  * Fix `useDeferredValue` causing an infinite loop when passed an unmemoized value. ([@acdlite](https://github.com/acdlite) in [#24247](https://github.com/facebook/react/pull/24247))
  * Fix throttling of revealing Suspense fallbacks. ([@sunderls](https://github.com/sunderls) in [#24253](https://github.com/facebook/react/pull/24253))
  * Fix an inconsistency in whether the props object is the same between renders. ([@Andarist](https://github.com/Andarist) and [@acdlite](https://github.com/acdlite) in [#24421](https://github.com/facebook/react/pull/24421))
  * Fix a missing warning about a `setState` loop in `useEffect`. ([@gaearon](https://github.com/gaearon) in [#24298](https://github.com/facebook/react/pull/24298))
  * Fix a spurious hydration error. ([@gnoff](https://github.com/gnoff) in [#24404](https://github.com/facebook/react/pull/24404))
  * Warn when calling `setState` in `useInsertionEffect`. ([@gaearon](https://github.com/gaearon) in [#24295](https://github.com/facebook/react/pull/24295))
  * Ensure the reason for hydration errors is always displayed. ([@gaearon](https://github.com/gaearon) in [#24276](https://github.com/facebook/react/pull/24276))



### React DOM Server

  * Fix escaping for the `bootstrapScriptContent` contents. ([@gnoff](https://github.com/gnoff) in [#24385](https://github.com/facebook/react/pull/24385))
  * Significantly improve performance of `renderToPipeableStream`. ([@gnoff](https://github.com/gnoff) in [#24291](https://github.com/facebook/react/pull/24291))



### ESLint Plugin: React Hooks

  * Fix false positive errors with a large number of branches. ([@scyron6](https://github.com/scyron6) in [#24287](https://github.com/facebook/react/pull/24287))
  * Don't consider a known dependency stable when the variable is reassigned. ([@afzalsayed96](https://github.com/afzalsayed96) in [#24343](https://github.com/facebook/react/pull/24343))



### Use Subscription

  * Replace the implementation with the `use-sync-external-store` shim. ([@gaearon](https://github.com/gaearon) in [#24289](https://github.com/facebook/react/pull/24289))



Assets 2

Loading

👍 250 natewu, yusufneeson, rockchalkwushock, liu-yihong, NetLancer, jkoon90, devrsi0n, songjianet, gaby, donguks, and 240 more reacted with thumbs up emoji 😄 53 dimaMachina, hundehausen, nathan3boss, sajadevo, naji0329, alexander-grube, yairdyule, HillLiu, thevuong, zhuangya, and 43 more reacted with laugh emoji 🎉 98 dimaMachina, whoisjordangarcia, hundehausen, akamfoad, ecreeth, nathan3boss, sajadevo, naji0329, alexander-grube, import-brain, and 88 more reacted with hooray emoji ❤️ 72 eideard-hm, thevuong, lucasgdb, phobal, imjordanxd, beetcb, NoMoreViolence, raix, kasipavankumar, mkosir, and 62 more reacted with heart emoji 🚀 84 dimaMachina, hundehausen, svengreb, nathan3boss, sajadevo, naji0329, alexander-grube, import-brain, duzitug, TIMMLOPK, and 74 more reacted with rocket emoji 👀 46 ahsouza, thepmsquare, 3lang3, rodamaral, world56, charlie043, NoMoreViolence, U-C-S, tobyleye, oliverloops, and 36 more reacted with eyes emoji

All reactions

  * 👍 250 reactions
  * 😄 53 reactions
  * 🎉 98 reactions
  * ❤️ 72 reactions
  * 🚀 84 reactions
  * 👀 46 reactions



371 people reacted

## 18.0.0 (March 29, 2022)

29 Mar 17:22 

[acdlite](/acdlite)

[ v18.0.0  ](/facebook/react/tree/v18.0.0)

[ `34aa5cf`](/facebook/react/commit/34aa5cfe0d9b6ec4667e02bf46ab34d83dfb2d6d)

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v18.0.0)

Loading

[View all tags](/facebook/react/tags)

[18.0.0 (March 29, 2022)](/facebook/react/releases/tag/v18.0.0)

Below is a list of all new features, APIs, deprecations, and breaking changes. Read [React 18 release post](https://reactjs.org/blog/2022/03/29/react-v18.html) and [React 18 upgrade guide](https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html) for more information.

### New Features

### React

  * `useId` is a new hook for generating unique IDs on both the client and server, while avoiding hydration mismatches. It is primarily useful for component libraries integrating with accessibility APIs that require unique IDs. This solves an issue that already exists in React 17 and below, but it’s even more important in React 18 because of how the new streaming server renderer delivers HTML out-of-order.
  * `startTransition` and `useTransition` let you mark some state updates as not urgent. Other state updates are considered urgent by default. React will allow urgent state updates (for example, updating a text input) to interrupt non-urgent state updates (for example, rendering a list of search results).
  * `useDeferredValue` lets you defer re-rendering a non-urgent part of the tree. It is similar to debouncing, but has a few advantages compared to it. There is no fixed time delay, so React will attempt the deferred render right after the first render is reflected on the screen. The deferred render is interruptible and doesn't block user input.
  * `useSyncExternalStore` is a new hook that allows external stores to support concurrent reads by forcing updates to the store to be synchronous. It removes the need for `useEffect` when implementing subscriptions to external data sources, and is recommended for any library that integrates with state external to React.
  * `useInsertionEffect` is a new hook that allows CSS-in-JS libraries to address performance issues of injecting styles in render. Unless you’ve already built a CSS-in-JS library we don’t expect you to ever use this. This hook will run after the DOM is mutated, but before layout effects read the new layout. This solves an issue that already exists in React 17 and below, but is even more important in React 18 because React yields to the browser during concurrent rendering, giving it a chance to recalculate layout.



### React DOM Client

These new APIs are now exported from `react-dom/client`:

  * `createRoot`: New method to create a root to `render` or `unmount`. Use it instead of `ReactDOM.render`. New features in React 18 don't work without it.
  * `hydrateRoot`: New method to hydrate a server rendered application. Use it instead of `ReactDOM.hydrate` in conjunction with the new React DOM Server APIs. New features in React 18 don't work without it.



Both `createRoot` and `hydrateRoot` accept a new option called `onRecoverableError` in case you want to be notified when React recovers from errors during rendering or hydration for logging. By default, React will use `reportError`[](https://developer.mozilla.org/en-US/docs/Web/API/reportError), or `console.error` in the older browsers.

### React DOM Server

These new APIs are now exported from `react-dom/server` and have full support for streaming Suspense on the server:

  * `renderToPipeableStream`: for streaming in Node environments.
  * `renderToReadableStream`: for modern edge runtime environments, such as Deno and Cloudflare workers.



The existing `renderToString` method keeps working but is discouraged.

## Deprecations

  * `react-dom`: `ReactDOM.render` has been deprecated. Using it will warn and run your app in React 17 mode.
  * `react-dom`: `ReactDOM.hydrate` has been deprecated. Using it will warn and run your app in React 17 mode.
  * `react-dom`: `ReactDOM.unmountComponentAtNode` has been deprecated.
  * `react-dom`: `ReactDOM.renderSubtreeIntoContainer` has been deprecated.
  * `react-dom/server`: `ReactDOMServer.renderToNodeStream` has been deprecated.



## Breaking Changes

### React

  * **Automatic batching:** This release introduces a performance improvement that changes to the way React batches updates to do more batching automatically. See [Automatic batching for fewer renders in React 18](https://github.com/reactwg/react-18/discussions/21) for more info. In the rare case that you need to opt out, wrap the state update in `flushSync`.
  * **Stricter Strict Mode** : In the future, React will provide a feature that lets components preserve state between unmounts. To prepare for it, React 18 introduces a new development-only check to Strict Mode. React will automatically unmount and remount every component, whenever a component mounts for the first time, restoring the previous state on the second mount. If this breaks your app, consider removing Strict Mode until you can fix the components to be resilient to remounting with existing state.
  * **Consistent useEffect timing** : React now always synchronously flushes effect functions if the update was triggered during a discrete user input event such as a click or a keydown event. Previously, the behavior wasn't always predictable or consistent.
  * **Stricter hydration errors** : Hydration mismatches due to missing or extra text content are now treated like errors instead of warnings. React will no longer attempt to "patch up" individual nodes by inserting or deleting a node on the client in an attempt to match the server markup, and will revert to client rendering up to the closest `<Suspense>` boundary in the tree. This ensures the hydrated tree is consistent and avoids potential privacy and security holes that can be caused by hydration mismatches.
  * **Suspense trees are always consistent:** If a component suspends before it's fully added to the tree, React will not add it to the tree in an incomplete state or fire its effects. Instead, React will throw away the new tree completely, wait for the asynchronous operation to finish, and then retry rendering again from scratch. React will render the retry attempt concurrently, and without blocking the browser.
  * **Layout Effects with Suspense** : When a tree re-suspends and reverts to a fallback, React will now clean up layout effects, and then re-create them when the content inside the boundary is shown again. This fixes an issue which prevented component libraries from correctly measuring layout when used with Suspense.
  * **New JS Environment Requirements** : React now depends on modern browsers features including `Promise`, `Symbol`, and `Object.assign`. If you support older browsers and devices such as Internet Explorer which do not provide modern browser features natively or have non-compliant implementations, consider including a global polyfill in your bundled application.



### Scheduler (Experimental)

  * Remove unstable `scheduler/tracing` API



## Notable Changes

### React

  * **Components can now render`undefined` :** React no longer throws if you return `undefined` from a component. This makes the allowed component return values consistent with values that are allowed in the middle of a component tree. We suggest to use a linter to prevent mistakes like forgetting a `return` statement before JSX.
  * **In tests,`act` warnings are now opt-in:** If you're running end-to-end tests, the `act` warnings are unnecessary. We've introduced an [opt-in](https://github.com/reactwg/react-18/discussions/102) mechanism so you can enable them only for unit tests where they are useful and beneficial.
  * **No warning about`setState` on unmounted components:** Previously, React warned about memory leaks when you call `setState` on an unmounted component. This warning was added for subscriptions, but people primarily run into it in scenarios where setting state is fine, and workarounds make the code worse. We've [removed](https://github.com/facebook/react/pull/22114) this warning.
  * **No suppression of console logs:** When you use Strict Mode, React renders each component twice to help you find unexpected side effects. In React 17, we've suppressed console logs for one of the two renders to make the logs easier to read. In response to [community feedback](https://github.com/facebook/react/issues/21783) about this being confusing, we've removed the suppression. Instead, if you have React DevTools installed, the second log's renders will be displayed in grey, and there will be an option (off by default) to suppress them completely.
  * **Improved memory usage:** React now cleans up more internal fields on unmount, making the impact from unfixed memory leaks that may exist in your application code less severe.



### React DOM Server

  * **`renderToString`:** Will no longer error when suspending on the server. Instead, it will emit the fallback HTML for the closest `<Suspense>` boundary and then retry rendering the same content on the client. It is still recommended that you switch to a streaming API like `renderToPipeableStream` or `renderToReadableStream` instead.
  * **`renderToStaticMarkup`:** Will no longer error when suspending on the server. Instead, it will emit the fallback HTML for the closest `<Suspense>` boundary and retry rendering on the client.



## All Changes

## React

  * Add `useTransition` and `useDeferredValue` to separate urgent updates from transitions. ([#10426](https://github.com/facebook/react/pull/10426), [#10715](https://github.com/facebook/react/pull/10715), [#15593](https://github.com/facebook/react/pull/15593), [#15272](https://github.com/facebook/react/pull/15272), [#15578](https://github.com/facebook/react/pull/15578), [#15769](https://github.com/facebook/react/pull/15769), [#17058](https://github.com/facebook/react/pull/17058), [#18796](https://github.com/facebook/react/pull/18796), [#19121](https://github.com/facebook/react/pull/19121), [#19703](https://github.com/facebook/react/pull/19703), [#19719](https://github.com/facebook/react/pull/19719), [#19724](https://github.com/facebook/react/pull/19724), [#20672](https://github.com/facebook/react/pull/20672), [#20976](https://github.com/facebook/react/pull/20976) by [[@acdlite](https://github.com/acdlite)](<https://git>...



[Read more](/facebook/react/releases/tag/v18.0.0)

Assets 2

Loading

👍 711 aabuhijleh, chayeoi, medanat, yezz123, targos, ricardocanelas, hundehausen, lin72h, andreasnilssondev, AlekseiAndriushin, and 701 more reacted with thumbs up emoji 😄 123 ricardocanelas, lin72h, reichhartd, birdview-HongKi, must479, kytosai, tronikelis, JulesPatry, xxxxue, pedro-lb, and 113 more reacted with laugh emoji 🎉 313 ricardocanelas, hundehausen, lin72h, reichhartd, mario-jerkovic, mahmoudkandeel, RemyMachado, A1101101IR, saitergun, joulev, and 303 more reacted with hooray emoji ❤️ 242 ricardocanelas, lin72h, reichhartd, matuzalemsteles, mario-jerkovic, mahmoudkandeel, birdview-HongKi, josuazurbruegg, fpiaggio-optiwe, sshquack, and 232 more reacted with heart emoji 🚀 256 Danieltf100, medanat, leonardopliski, luoxuhai, aslupin, andipaetzold, RafaelBahiense, ricardocanelas, hundehausen, lin72h, and 246 more reacted with rocket emoji 👀 109 luoxuhai, yezz123, ricardocanelas, reichhartd, sudovijay, tronikelis, JulesPatry, Illu, xxxxue, pedro-lb, and 99 more reacted with eyes emoji

All reactions

  * 👍 711 reactions
  * 😄 123 reactions
  * 🎉 313 reactions
  * ❤️ 242 reactions
  * 🚀 256 reactions
  * 👀 109 reactions



960 people reacted

## 17.0.2 (March 22, 2021)

22 Mar 22:00 

[gaearon](/gaearon)

[ v17.0.2  ](/facebook/react/tree/v17.0.2)

[ `12adaff`](/facebook/react/commit/12adaffef7105e2714f82651ea51936c563fe15c)

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v17.0.2)

Loading

[View all tags](/facebook/react/tags)

[17.0.2 (March 22, 2021)](/facebook/react/releases/tag/v17.0.2)

### React DOM

  * Remove an unused dependency to address the `SharedArrayBuffer`[ cross-origin isolation warning](https://developer.chrome.com/blog/enabling-shared-array-buffer/). ([@koba04](https://github.com/koba04) and [@bvaughn](https://github.com/bvaughn) in [#20831](https://github.com/facebook/react/pull/20831), [#20832](https://github.com/facebook/react/pull/20832), and [#20840](https://github.com/facebook/react/pull/20840))



## Artifacts

  * react: <https://unpkg.com/react@17.0.2/umd/>
  * react-art: <https://unpkg.com/react-art@17.0.2/umd/>
  * react-dom: <https://unpkg.com/react-dom@17.0.2/umd/>
  * react-is: <https://unpkg.com/react-is@17.0.2/umd/>
  * react-test-renderer: <https://unpkg.com/react-test-renderer@17.0.2/umd/>
  * scheduler: <https://unpkg.com/scheduler@0.20.2/umd/>



Assets 2

Loading

👍 148 asumaran, moongue, niubaba63, ogawaryu, lkzwc, cdslily, Mayandev, cococov, Nikolozi-Code, luvagu, and 138 more reacted with thumbs up emoji 😄 42 asumaran, cococov, sungkwangkim, leandrowilliam, shourysharma, andrey1997acer, zeayal, NavidMansuri5155, pH-7, 365kim, and 32 more reacted with laugh emoji 🎉 51 asumaran, cococov, sungkwangkim, shourysharma, raysubham, andrey1997acer, zeayal, imaksp, NavidMansuri5155, pH-7, and 41 more reacted with hooray emoji ❤️ 53 asumaran, mohitsinhchavda, shourysharma, raysubham, andrey1997acer, zeayal, NavidMansuri5155, 365kim, masudparvezsajjad, zereight, and 43 more reacted with heart emoji 🚀 55 asumaran, maxpou, cococov, sungkwangkim, leandrowilliam, crazy-grizzly, mohitsinhchavda, shourysharma, raysubham, theory-of-soul, and 45 more reacted with rocket emoji 👀 40 asumaran, cococov, shourysharma, andrey1997acer, zeayal, NavidMansuri5155, jettandres, DJLuis97, 365kim, rodamaral, and 30 more reacted with eyes emoji

All reactions

  * 👍 148 reactions
  * 😄 42 reactions
  * 🎉 51 reactions
  * ❤️ 53 reactions
  * 🚀 55 reactions
  * 👀 40 reactions



187 people reacted

## 17.0.1 (October 22, 2020)

22 Mar 21:59 

[gaearon](/gaearon)

[ v17.0.1  ](/facebook/react/tree/v17.0.1)

[ `8e5adfb`](/facebook/react/commit/8e5adfbd7e605bda9c5e96c10e015b3dc0df688e)

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v17.0.1)

Loading

[View all tags](/facebook/react/tags)

[17.0.1 (October 22, 2020)](/facebook/react/releases/tag/v17.0.1)

### React DOM

  * Fix a crash in IE11. ([@gaearon](https://github.com/gaearon) in [#20071](https://github.com/facebook/react/pull/20071))



Assets 2

Loading

👍 2 chris6090 and ikhtearalamshawonmollah54321 reacted with thumbs up emoji 😄 14 hoa00, farm16, ArthurIanb, joshkautz, vituchini, liuhaiyang1997, Schweinepriester, theoludwig, huynhdev24, njosueofficol, and 4 more reacted with laugh emoji 🎉 2 chris6090 and ikhtearalamshawonmollah54321 reacted with hooray emoji ❤️ 14 SonNg2k, farzadrastgar, rex11458, sadeghbarati, Jmenache, 010265mohamadazat, jose1937JS, vahidalvandi, njosueofficol, krishangopalgupta, and 4 more reacted with heart emoji 🚀 3 dream2023, chris6090, and ikhtearalamshawonmollah54321 reacted with rocket emoji 👀 5 zereight, sadeghbarati, kstejas, vkzkvkzk, and chris6090 reacted with eyes emoji

All reactions

  * 👍 2 reactions
  * 😄 14 reactions
  * 🎉 2 reactions
  * ❤️ 14 reactions
  * 🚀 3 reactions
  * 👀 5 reactions



29 people reacted

## 17.0.0 (October 20, 2020)

20 Oct 20:45 

[gaearon](/gaearon)

[ v17.0.0  ](/facebook/react/tree/v17.0.0)

[ `89b6109`](/facebook/react/commit/89b610969d70d788f8c9769e3fa5b0044f5737ab)

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v17.0.0)

Loading

[View all tags](/facebook/react/tags)

[17.0.0 (October 20, 2020)](/facebook/react/releases/tag/v17.0.0)

Today, we are releasing React 17!

**[Learn more about React 17 and how to update to it on the official React blog.](https://reactjs.org/blog/2020/10/20/react-v17.html)**

### React

  * Add `react/jsx-runtime` and `react/jsx-dev-runtime` for the [new JSX transform](https://babeljs.io/blog/2020/03/16/7.9.0#a-new-jsx-transform-11154-https-githubcom-babel-babel-pull-11154). ([@lunaruan](https://github.com/lunaruan) in [#18299](https://github.com/facebook/react/pull/18299))
  * Build component stacks from native error frames. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18561](https://github.com/facebook/react/pull/18561))
  * Allow to specify `displayName` on context for improved stacks. ([@eps1lon](https://github.com/eps1lon) in [#18224](https://github.com/facebook/react/pull/18224))
  * Prevent `'use strict'` from leaking in the UMD bundles. ([@koba04](https://github.com/koba04) in [#19614](https://github.com/facebook/react/pull/19614))
  * Stop using `fb.me` for redirects. ([@cylim](https://github.com/cylim) in [#19598](https://github.com/facebook/react/pull/19598))



### React DOM

  * Delegate events to roots instead of `document`. ([@trueadm](https://github.com/trueadm) in [#18195](https://github.com/facebook/react/pull/18195) and [others](https://github.com/facebook/react/pulls?q=is%3Apr+author%3Atrueadm+modern+event+is%3Amerged))
  * Clean up all effects before running any next effects. ([@bvaughn](https://github.com/bvaughn) in [#17947](https://github.com/facebook/react/pull/17947))
  * Run `useEffect` cleanup functions asynchronously. ([@bvaughn](https://github.com/bvaughn) in [#17925](https://github.com/facebook/react/pull/17925))
  * Use browser `focusin` and `focusout` for `onFocus` and `onBlur`. ([@trueadm](https://github.com/trueadm) in [#19186](https://github.com/facebook/react/pull/19186))
  * Make all `Capture` events use the browser capture phase. ([@trueadm](https://github.com/trueadm) in [#19221](https://github.com/facebook/react/pull/19221))
  * Don't emulate bubbling of the `onScroll` event. ([@gaearon](https://github.com/gaearon) in [#19464](https://github.com/facebook/react/pull/19464))
  * Throw if `forwardRef` or `memo` component returns `undefined`. ([@gaearon](https://github.com/gaearon) in [#19550](https://github.com/facebook/react/pull/19550))
  * Remove event pooling. ([@trueadm](https://github.com/trueadm) in [#18969](https://github.com/facebook/react/pull/18969))
  * Stop exposing internals that won’t be needed by React Native Web. ([@necolas](https://github.com/necolas) in [#18483](https://github.com/facebook/react/pull/18483))
  * Attach all known event listeners when the root mounts. ([@gaearon](https://github.com/gaearon) in [#19659](https://github.com/facebook/react/pull/19659))
  * Disable `console` in the second render pass of DEV mode double render. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18547](https://github.com/facebook/react/pull/18547))
  * Deprecate the undocumented and misleading `ReactTestUtils.SimulateNative` API. ([@gaearon](https://github.com/gaearon) in [#13407](https://github.com/facebook/react/pull/13407))
  * Rename private field names used in the internals. ([@gaearon](https://github.com/gaearon) in [#18377](https://github.com/facebook/react/pull/18377))
  * Don't call User Timing API in development. ([@gaearon](https://github.com/gaearon) in [#18417](https://github.com/facebook/react/pull/18417))
  * Disable console during the repeated render in Strict Mode. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18547](https://github.com/facebook/react/pull/18547))
  * In Strict Mode, double-render components without Hooks too. ([@eps1lon](https://github.com/eps1lon) in [#18430](https://github.com/facebook/react/pull/18430))
  * Allow calling `ReactDOM.flushSync` during lifecycle methods (but warn). ([@sebmarkbage](https://github.com/sebmarkbage) in [#18759](https://github.com/facebook/react/pull/18759))
  * Add the `code` property to the keyboard event objects. ([@bl00mber](https://github.com/bl00mber) in [#18287](https://github.com/facebook/react/pull/18287))
  * Add the `disableRemotePlayback` property for `video` elements. ([@tombrowndev](https://github.com/tombrowndev) in [#18619](https://github.com/facebook/react/pull/18619))
  * Add the `enterKeyHint` property for `input` elements. ([@eps1lon](https://github.com/eps1lon) in [#18634](https://github.com/facebook/react/pull/18634))
  * Warn when no `value` is provided to `<Context.Provider>`. ([@charlie1404](https://github.com/charlie1404) in [#19054](https://github.com/facebook/react/pull/19054))
  * Warn when `memo` or `forwardRef` components return `undefined`. ([@bvaughn](https://github.com/bvaughn) in [#19550](https://github.com/facebook/react/pull/19550))
  * Improve the error message for invalid updates. ([@JoviDeCroock](https://github.com/JoviDeCroock) in [#18316](https://github.com/facebook/react/pull/18316))
  * Exclude forwardRef and memo from stack frames. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18559](https://github.com/facebook/react/pull/18559))
  * Improve the error message when switching between controlled and uncontrolled inputs. ([@vcarl](https://github.com/vcarl) in [#17070](https://github.com/facebook/react/pull/17070))
  * Keep `onTouchStart`, `onTouchMove`, and `onWheel` passive. ([@gaearon](https://github.com/gaearon) in [#19654](https://github.com/facebook/react/pull/19654))
  * Fix `setState` hanging in development inside a closed iframe. ([@gaearon](https://github.com/gaearon) in [#19220](https://github.com/facebook/react/pull/19220))
  * Fix rendering bailout for lazy components with `defaultProps`. ([@jddxf](https://github.com/jddxf) in [#18539](https://github.com/facebook/react/pull/18539))
  * Fix a false positive warning when `dangerouslySetInnerHTML` is `undefined`. ([@eps1lon](https://github.com/eps1lon) in [#18676](https://github.com/facebook/react/pull/18676))
  * Fix Test Utils with non-standard `require` implementation. ([@just-boris](https://github.com/just-boris) in [#18632](https://github.com/facebook/react/pull/18632))
  * Fix `onBeforeInput` reporting an incorrect `event.type`. ([@eps1lon](https://github.com/eps1lon) in [#19561](https://github.com/facebook/react/pull/19561))
  * Fix `event.relatedTarget` reported as `undefined` in Firefox. ([@claytercek](https://github.com/claytercek) in [#19607](https://github.com/facebook/react/pull/19607))
  * Fix "unspecified error" in IE11. ([@hemakshis](https://github.com/hemakshis) in [#19664](https://github.com/facebook/react/pull/19664))
  * Fix rendering into a shadow root. ([@Jack-Works](https://github.com/Jack-Works) in [#15894](https://github.com/facebook/react/pull/15894))
  * Fix `movementX/Y` polyfill with capture events. ([@gaearon](https://github.com/gaearon) in [#19672](https://github.com/facebook/react/pull/19672))
  * Use delegation for `onSubmit` and `onReset` events. ([@gaearon](https://github.com/gaearon) in [#19333](https://github.com/facebook/react/pull/19333))
  * Improve memory usage. ([@trueadm](https://github.com/trueadm) in [#18970](https://github.com/facebook/react/pull/18970))



### React DOM Server

  * Make `useCallback` behavior consistent with `useMemo` for the server renderer. ([@alexmckenley](https://github.com/alexmckenley) in [#18783](https://github.com/facebook/react/pull/18783))
  * Fix state leaking when a function component throws. ([@pmaccart](https://github.com/pmaccart) in [#19212](https://github.com/facebook/react/pull/19212))



### React Test Renderer

  * Improve `findByType` error message. ([@henryqdineen](https://github.com/henryqdineen) in [#17439](https://github.com/facebook/react/pull/17439))



### Concurrent Mode (Experimental)

  * Revamp the priority batching heuristics. ([@acdlite](https://github.com/acdlite) in [#18796](https://github.com/facebook/react/pull/18796))
  * Add the `unstable_` prefix before the experimental APIs. ([@acdlite](https://github.com/acdlite) in [#18825](https://github.com/facebook/react/pull/18825))
  * Remove `unstable_discreteUpdates` and `unstable_flushDiscreteUpdates`. ([@trueadm](https://github.com/trueadm) in [#18825](https://github.com/facebook/react/pull/18825))
  * Remove the `timeoutMs` argument. ([@acdlite](https://github.com/acdlite) in [#19703](https://github.com/facebook/react/pull/19703))
  * Disable `<div hidden />` prerendering in favor of a different future API. ([@acdlite](https://github.com/acdlite) in [#18917](https://github.com/facebook/react/pull/18917))
  * Add `unstable_expectedLoadTime` to Suspense for CPU-bound trees. ([@acdlite](https://github.com/acdlite) in [#19936](https://github.com/facebook/react/pull/19936))
  * Add an experimental `unstable_useOpaqueIdentifier` Hook. ([@lunaruan](https://github.com/lunaruan) in [#17322](https://github.com/facebook/react/pull/17322))
  * Add an experimental `unstable_startTransition` API. ([@rickhanlonii](https://github.com/rickhanlonii) in [#19696](https://github.com/facebook/react/pull/19696))
  * Using `act` in the test renderer no longer flushes Suspense fallbacks. ([@acdlite](https://github.com/acdlite) in [#18596](https://github.com/facebook/react/pull/18596))
  * Use global render timeout for CPU Suspense. ([@sebmarkbage](https://github.com/sebmarkbage) in [#19643](https://github.com/facebook/react/pull/19643))
  * Clear the existing root content before mounting. ([@bvaughn](https://github.com/bvaughn) in [#18730](https://github.com/facebook/react/pull/18730))
  * Fix a bug with error boundaries. ([@acdlite](https://github.com/acdlite) in [#18265](https://github.com/facebook/react/pull/18265))
  * Fix a bug causing dropped updates in a suspended tree. ([@acdlite](https://github.com/acdlite) in [#18384](https://github.com/facebook/react/pull/18384) and [#18457](https://github.com/facebook/react/pull/18457))
  * Fix a bug causing dropped render phase updates. ([@acdlite](https://github.com/acdlite) in [#18537](https://github.com/facebook/react/pull/18537))
  * Fix a bug in Suspens...



[Read more](/facebook/react/releases/tag/v17.0.0)

Assets 2

Loading

👍 22 kwiniarski97, eduardo-fernandes-marques, andriyor, sadeghbarati, bulabulaka, Jmenache, lucas-dolsan, yusoofsh, HazemKhaled, jamesalmeida, and 12 more reacted with thumbs up emoji 😄 2 subham007-coder and lin72h reacted with laugh emoji 🎉 7 perseus98, hansfpc, Shubhamsharma585, kyuhyunIm, chris6090, lin72h, and ikhtearalamshawonmollah54321 reacted with hooray emoji ❤️ 9 0xping, gonzalovazquez, theenadayalan-byjus, hansfpc, Shubhamsharma585, kyuhyunIm, chris6090, lin72h, and ikhtearalamshawonmollah54321 reacted with heart emoji 🚀 8 duzitug, hansfpc, gokul-pathak, Shubhamsharma585, kyuhyunIm, chris6090, lin72h, and ikhtearalamshawonmollah54321 reacted with rocket emoji 👀 5 huynhdev24, Shubhamsharma585, kyuhyunIm, Arnavdons, and chris6090 reacted with eyes emoji

All reactions

  * 👍 22 reactions
  * 😄 2 reactions
  * 🎉 7 reactions
  * ❤️ 9 reactions
  * 🚀 8 reactions
  * 👀 5 reactions



30 people reacted

Previous _1_ [2](/facebook/react/releases?page=2) [3](/facebook/react/releases?page=3) [4](/facebook/react/releases?page=4) [5](/facebook/react/releases?page=5) … [10](/facebook/react/releases?page=10) [11](/facebook/react/releases?page=11) [Next](/facebook/react/releases?page=2)

Previous [Next](/facebook/react/releases?page=2)

## Footer

[ ](https://github.com "GitHub") © 2024 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You can’t perform that action at this time. 
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

How A Small Team of Developers Created React at Facebook | React.js: The Documentary

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

95%

•

Up next

LiveUpcoming

CancelPlay Now

[From Node.js to Deno: How It All Began9:12](https://www.youtube.com/watch?v=zxitJn9MwYs)

[Node.js: The Documentary [OFFICIAL TRAILER]1:51](https://www.youtube.com/watch?v=SfWPqr04srM)

Honeypot | Europe's Developer-Focused Job Platform

honeypot.io

[Sign up](https://www.youtube.com/redirect?event=endscreen&redir_token=QUFFLUhqbFpTaVZORGtqUFBRcWlrVTdKanhoWDdwTTFWZ3xBQ3Jtc0ttVHl2THFBZ2J3NUFnUHJqbkVmQnBodThRNG9fZE1ncXdqdDJrdFo1NkdsWkFkVnJaQWxKRWhNNlc0MTI4b2lmeFIwS2ppUzgza1dFZFJGQVh5dzAzdDBjZzBIQkEtQkpRYVJBd2pYWnVUS0VjVEVoWQ&q=honeypot.io)

Honeypot

Subscribe

Subscribed

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?v=LB8KwiiUGy0 "Next \(SHIFT+n\)")

0:00 / 1:18:14•Watch full videoLive

•

•

Scroll for details

#  How A Small Team of Developers Created React at Facebook | React.js: The Documentary

[](/@Honeypotio)

[Honeypot](/@Honeypotio)

Honeypot 

238K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

37K

Share

Download

Download 

Save

1.4M views1 year ago

1,422,617 views • Premiered Feb 10, 2023 

Show less 

React is easily one of the single most popular libraries in use today. Given that it was made within a juggernaut like Facebook, you might have assumed it was always destined for success.…...more 

...more 

Transcript

Follow along using the transcript.

Show transcript

### [Honeypot 238K subscribers  ](/@Honeypotio)

[Videos](/channel/UCsUalyRg43M8D60mtHe6YcA/videos)

[About](/channel/UCsUalyRg43M8D60mtHe6YcA/about)

[Videos](/channel/UCsUalyRg43M8D60mtHe6YcA/videos)[About](/channel/UCsUalyRg43M8D60mtHe6YcA/about)[Twitter](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqazlNRDJPZWJORXJ3WW9tcEhxUjR5blJzUmpad3xBQ3Jtc0tuOFlNV1NTNnJicVY0REV4SjBjQkRxcmxrRGxCZm5lMFpwV01vOVQyc0pReHp2end1Z1J2dll1WlRLR3dQUGR6SzhjNzg3Q1pMQXhVNGNUVnpsZlpaTWpuR1hmTThNUzlZNUlQOFRrT01zcWpvcmdrbw&q=https%3A%2F%2Ftwitter.com%2Fhoneypotio)[Linkedin](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbmVEMF9aV0pIQXNfeEtmQ0ZDcW5IeVdNa2hQQXxBQ3Jtc0tsU0txTFZiYUJOcG9sM1pwVmlqUWNpS2ZJWlZDZFZRUHQ1VlpTQ3dnb0hFXzNnVm1XVUdMc3pGbXRNWFczbVowLU9FUk1TMkNFb3FuRjh1NS05ZWFwNmQyOHJOdXBTMElmOVhLNE05cVdMZjlsRndIaw&q=https%3A%2F%2Fwww.linkedin.com%2Fcompany%2F10210811%2F)[Instagram](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa18xSHVNUnFuZmxZb1RwTU4tcDhFY1UtNjBJUXxBQ3Jtc0tsMWtZSzZrY2pMMExadkU4TEh0N3dQYjE0WlktMDNNZjZwVVBKUkx6ekNNQzZYSURIR2hiVERKTkZkWGhiMEZfakpQd0g0MzQxbEY1QV82UHVQVTBlUWxlMlUtTlZkQ3JIbWQtczJqanBoUlhBWHVFdw&q=https%3A%2F%2Fwww.instagram.com%2Fhoneypot.cult%2F)[Facebook](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbVQ5cmJvVE5KczdOdkk1T2Z3aXpQa1E1cThEd3xBQ3Jtc0ttR0EwMWk4d0RKNU9FOUtaeUxoNGlkNFFrVmV5ZUxGMno4NGRMYnFNZ1dGQ2pHQVBxbk5FVTZBdFZCTnlnUXpYYlhzU0FXR2hLR3pqV2NHLXVvM0ZUTmFhWmhlQnRrTmxjYjEwUExfVnBUa1ptbkxPQQ&q=https%3A%2F%2Fwww.facebook.com%2FHoneypotio%2F)

[ 7:14 7:14  ](/watch?v=WvRcZkuXmpo) [ Andrew Clark on the Creation of Redux by Honeypot ](/watch?v=WvRcZkuXmpo)

Show less 

## Live chat replay

See what others said about this video while it was live.

Open panel

# How A Small Team of Developers Created React at Facebook | React.js: The Documentary

1,422,617 views1.4M views

Premiered Feb 10, 2023

37K

Share

Download

Download 

Save

##  Comments 1.1K

Top comments  Newest first 

##  Description

How A Small Team of Developers Created React at Facebook | React.js: The Documentary

React is easily one of the single most popular libraries in use today. Given that it was made within a juggernaut like Facebook, you might have assumed it was always destined for success. But what if we told you that React’s first brush with the public sphere was anything but glamorous? React.js: The Documentary brings you the full story behind the early days of React, focusing on the dedicated group of developers who helped bring it to the world stage. This story is told by an all-star cast of developers like Tom Occhino, Christopher Chedeau, Pete Hunt, Sebastian Markbåge, Dan Abramov, and many more. Check out the home for untold developer stories around open source, careers and all the other cool stuff developers are doing at cult.honeypot.io. Honeypot is a developer-focused job platform, on a mission to get developers great jobs. Wanna see what we're all about? Visit honeypot.io to find a job you love. To learn more about Honeypot: [https://bit.ly/3OGoDjG](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbkRtdVV3QWVSUTNiSFp0VDMxRV8ycWV0NjFFQXxBQ3Jtc0tuQVZ4bGJRZ0NmOWprWUxaR0dlNlh3VlpwRTN4MzJKa0hDckM0ZGxkY1pZMVdBeXMzVFVTM3ZScU1VMF9sbDRIVUdzVXgxZnFyTGF6RlFOWDNpdDl1Q04wRmcyZWpELXU3SzVaOUg1b1FxSDlNRnRFNA&q=https%3A%2F%2Fbit.ly%2F3OGoDjG&v=8pDqJVdNa44) Follow the cast: Adam Wolff: [ / dmwlff ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnF4Y2I0ZV9yT0o2M2lGWk9QOEpMcGRwbVU4QXxBQ3Jtc0tsbS0yRHFIbWhGenhHZFg4Zm83Z3VzVlBoeTVmcDQ0SElRM2Y3dTBZbDVfVUxlcEN4VDljNjZwVWF2QXNDTzdnVVRhY3J5QnZPc25JZFg1aDhUNElCMGtlSkQ4NVNRMkt5M2I2VUQ0X2JickZWVWp4TQ&q=https%3A%2F%2Ftwitter.com%2Fdmwlff&v=8pDqJVdNa44) Andrew Clark: [ / acdlite ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbTJnTmNZanhWNWNXSkp0QVIyWk1tS2JvS3dYd3xBQ3Jtc0trSmticXFZY3BQQVNDdlRmcnRDa0l5cFNfTzczaXZOVmJjWnFQWlpTeUJMM1UwRVlYRXBianhwNDhmYTFidURhQnBZSGlXQUJUR1o0LXBUenphOFFXSVFJQzhmUHZacWlEVHRGNVZnWGxaYld2T1czYw&q=https%3A%2F%2Ftwitter.com%2Facdlite&v=8pDqJVdNa44) Christopher Chedeau: [ / vjeux ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbVBOaTQ1TGE0Y1BZd0F3UU5nYlR0bVByN2xiQXxBQ3Jtc0trWGVCbldXbl9NZHRxajFVOU9ZUjN1azlOMzFQcmkxSWNZZ0dxV2ZSNWtnQU5lZkR1SXl5Z0ZrelFfR3FzaXlmeXZkWnBINUYtRDBLcVM1U1lzbldmUUQwQnBGQV9rWVlGNmgtOWU1NEZCUWw1b0Z3cw&q=https%3A%2F%2Ftwitter.com%2FVjeux&v=8pDqJVdNa44) Dan Abramov: [ / dan_abramov ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbVpEMnMxdUFmSWQ3cElFcWJuSllxWmpPbEo0d3xBQ3Jtc0traGFiQTdJcnlqSTEyZkJlMG9xeHdrYzM3dXprZGhDa0FuSy1rempHdGkySE8xME5hbjkyTHpOdGtOMmR3cDczNU85VlhnZU12bWdiQXIyYTUzQ1k3Q095YWdTUHpVQUp4cklhOG53NHFJR1Z4YkcxMA&q=https%3A%2F%2Ftwitter.com%2Fdan_abramov&v=8pDqJVdNa44) David Nolen: [ / swannodette ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2NldF90LWdicTdVNVJvLUYzYTcxMFcwN200UXxBQ3Jtc0trS05WZ1N1bmVnUUxSZlhoVmhGZk41YUM2MVRKSVEteDRRLTZiUHpDQXFKZGc4ZnJ2UjFTM3I3dE5sRkJ0aHdtVHFHSHJKci1HRFFJcnpVVllNUmVMWDdKWV9FYTFMWUpwR1VIaFJ0MEVrMlJ3OFM0OA&q=https%3A%2F%2Ftwitter.com%2Fswannodette&v=8pDqJVdNa44) Lee Byron: [ / leeb ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqazE5dWFPNWlONmZRNTBmR2Z4bUJ3aXg5SUtrZ3xBQ3Jtc0tsc09YMksyNlp5Q2c4WFBXb25LcWNxaUlNcWpiQTRvVjVnMklZTWZMT3RBSURvemJkcm0xNHZVU25BOG9kZ1VaREdESnBpZEJ3Y0hhVC0yQzFSdmNpZDhWeC1FQjRPOHdzM3VwX2g3VW5OTURLclBJVQ&q=https%3A%2F%2Ftwitter.com%2Fleeb&v=8pDqJVdNa44) Michael Chan: [ / chantastic ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2hvOTdXMU1kSVJUbXZBbGNsa2p1ZWltSEpOQXxBQ3Jtc0tsRXFoaHJRQ05EUXhRbTRUNDZ0akRvUF82ZjBZOTR6WlFSUFdlOWgzNkFvVVIyelFJMFhXTDNzcTFXYUlsRFVxVEtqaUhvV3NCMEVkc2s5RTNNdzFfcUJQTXllWmo0UGJhWWZwT0xiZi1waG9ER0Y1cw&q=https%3A%2F%2Ftwitter.com%2Fchantastic&v=8pDqJVdNa44) Pete Hunt: [ / floydophone ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbmFwSEtuQkxzX0hLLWxrSWRCZDNwVk1uMVVZQXxBQ3Jtc0trMVJLNWpEbVJjSDNzV2UwNFZ3Ylh5SnYwWFAzSzRDYUEtWjZ0TVRJWF83RDdvNFdzV2p5cnJURUdiSnpDMlIzXzgxZ2RnUWpIcFdXeUJZbzJrY0R0M01FZVRVRFZCQmFva3hWMVo3bkJOTENBaGJoWQ&q=https%3A%2F%2Ftwitter.com%2Ffloydophone&v=8pDqJVdNa44) Sebastian Markbåge: [ / sebmarkbage ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnhqdzZTYnRjNy1xbGZ6MDlUOXFndTRuUHlPUXxBQ3Jtc0ttRmhpMl9kd1M0STJHd01UTWJ1d2xQMV9mRWpCUVp4Yk5GbkdyMjl2ZVZkX1Y5Rzh1aDVWVWtNMksyelI2ZWVpWklITk1DSExWbEcxWnI0ZHE2Y3hnTS1kZ2kzSzFPQjBYSjBWbVE4aEtPcmNBaUN4Yw&q=https%3A%2F%2Ftwitter.com%2Fsebmarkbage&v=8pDqJVdNa44) Shane O'Sullivan: [ / chofter ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2taQTVUdEhaQmdXNGdVQ2VHTlNPU2FsM2h0d3xBQ3Jtc0tsWmtnWGZHa0U3eE5LeDZsV05hUE9BazVEX0pVVHFJeThpc3dIYjBkQ3FNTEZzdlRCRzBpVHVzZ01PZHJOb3ZxTkRBaXRUc2ZIRHptdncwRVFCSkNEWWx5ZnY3Q3V1a1VHX3AybndhWE55M1ZhSUZJMA&q=https%3A%2F%2Ftwitter.com%2FChofter&v=8pDqJVdNa44) and [https://chofter.com/](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbERWUWI5X3lLbGNUNlMwRGVxSEdlZXE5REFYd3xBQ3Jtc0ttUUcxWTFBTllOWFpYNThSb1FFa3ljOFhoQVRheVRDM0lQcmtESDdkUGV1by1UZVpFMmpjUEEzaHlmUjZTVXdFcF9PUlFJLUR5NVNTWnkyazJXcEoxQjlRYTZZTFFzbXJueW8xWDl6azBfbXE5aEJORQ&q=https%3A%2F%2Fchofter.com%2F&v=8pDqJVdNa44) Sophie Alpert: [ / sophiebits ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbFlxampVMGRnSVJtaGoySmZEbDJtRHhpbVh4QXxBQ3Jtc0tsNE1vREpxQ09OdzlGb1J3a1JXaE1xc0FvUUEwWk9yeTZYUDU5QWp3WV9vVkRldm9sWW9EeUtKRUpudUdUbmtIeHNyVTRBcnpGNXdwTEd4SlBnbzg1elE3U3JnTmlraFVBVXVVTHI3YWU2WDVyRHRFTQ&q=https%3A%2F%2Ftwitter.com%2Fsophiebits&v=8pDqJVdNa44) and [https://sophiebits.com/](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa0JjdjA3SVVuNFpFN2x5bjVsb09iTERmSUUzUXxBQ3Jtc0treVdSY00yb2taQlZ2MnFXUFNyTW9YcE5OcHZicS1ZdUdJaktPUi1JSWpwZjFDMTRPTHRiNkN0MFhjT3VTaWYyOFFwT1plMUdCWXJTclhJdlhScGtQV0FZSk1BUk0xQmRRZW5JRzhMSHBnM1F4MHBydw&q=https%3A%2F%2Fsophiebits.com%2F&v=8pDqJVdNa44) Tom Occhino: [ / tomocchino ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbm1hWjBRSTd5cHZxbWUwVDZ5bWtkNWFnV294d3xBQ3Jtc0tuNWR4RWZuT2dGaEVqZlJIM2VqcE91LWVIVzdjSkJGcE05U21xaFZuSjJYUmh6T242RnRnemdHMXZaa2xSWGk1UWEwWkNUQzI4bVNILXFqMEJxaGJ1Z3RfdzVfNlRvUkc2YmpSNzJJRjhRcE1BZXd2WQ&q=https%3A%2F%2Ftwitter.com%2Ftomocchino&v=8pDqJVdNa44) Tony Casparro: [ / iamtonyc ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbHpHdnYzeVU3ejRwQWgzdHQyYmxxXzZRYWFDZ3xBQ3Jtc0ttOFdUblpiTlNSTVlKc0N5SWgxazBxczRWaGFvMEZ3alVZYzVpekk2dWh2Rk94Z05PbXRGeFRrNTVGRGVvZE0yQi1rS204QnUzcU9hN3A3NUU1MXZFT1J0VmRaNmpWYUl6MHptN0xyMlZSRTJ1aEFuSQ&q=https%3A%2F%2Ftwitter.com%2FIamTonyC&v=8pDqJVdNa44) Many people contributed to React throughout the years and this documentary is just a little slice of that history. You can find full acknowledgements here: [https://reactjs.org/acknowledgements....](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnF3MmJJcHV3NV9BWklhNWJqSmxvZktueUROQXxBQ3Jtc0ttNVVuOVFnc1FWcW5sXzBGbVhjd1JQbzJyNXpHYldnMTk5VXdhTmx1ck1vRXdqcWxCODJrYVg4a0dINUlSU19pUTdERGNHRHBrclozdnVRb0lOVE9nYVo4cl9KVjFscjJqYVNWa2xFZ21oWHZIRHFKWQ&q=https%3A%2F%2Freactjs.org%2Facknowledgements.html&v=8pDqJVdNa44) Thanks to these amazing people for translating subtitles: Charlie: [ / charliesbot ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa3JQYUJxemI4UC1fWGFjbHpvRVY0aVZsaHRpUXxBQ3Jtc0tsV3V0Zkg0Z1RKWkhSN040Q3BieE1nZEpzTFR2OVdjLWp5UjM0T1VvTndKSFJHOVVEUFJyT3BkTHh3OEVmTEo2d2dpbHowUEZqVlZrYmxmU29scDg5VTVrTENrcFd2SERwblZxU25UUE5CMTNpbWFHdw&q=https%3A%2F%2Ftwitter.com%2Fcharliesbot&v=8pDqJVdNa44) Jose: [ / jbetosalinas ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa0ljdnZfOHpqd3I4cWVKZ1Nic1NkQlRtWDc1QXxBQ3Jtc0trVldLc0hleThQYlNub3pnalg1QkZxLUlLRlA5a2JoWTN1WW40V29XcEJBelRPdm12NzZtYzlFWE5WZHZnSVNQd2RTai1xdXRSM0pGWkowRnhpMUVhMWdRVlVnazFhSUdiN2l2TEVFZkM4UHNkVGM1cw&q=https%3A%2F%2Ftwitter.com%2Fjbetosalinas&v=8pDqJVdNa44) Gustavo Gonçalves Follow us: Twitter: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2lqQWNUVGpmaXNFc2trOEkwOV9zNTNSTkFYQXxBQ3Jtc0trNVR1QU5aaURDZWp0WXI0UUNlQkNyRlQxQUN0N2FBZzBDXzE3M29GbWpkaVJnTnh3OHFkMDhrbzZ5dWljcHFZQ2x5bzFiazQ0a2hfekF1N3c5RERJUFJDM3JZVmFZTTRJcmQ3X2VFQnU5SktFMzdEaw&q=https%3A%2F%2Ftwitter.com%2Fhoneypotio&v=8pDqJVdNa44) Facebook: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbUpQSkNvV0d0dkZXYVFJbllNT01Yc3dZQUwzUXxBQ3Jtc0tuQnEwaUdEa1BtRlIzd2FSSTV4bW03dEwwOGFRZnVTdk4ybTNSdzBVcHAtd0JXbDZwS2djMXJ2cTFzZUZHQmx3OFR4U0tnZFlrNzJlMlQxa3A5S3czeHlFSWVoUWM0bGlzTk41cWJNMDJzM0tROEdZbw&q=https%3A%2F%2Fwww.facebook.com%2FHoneypotio%2F&v=8pDqJVdNa44) LinkedIn: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2dFcmRaWWtWN0c4d1Mxd0RjUTNjMDFXWXNuUXxBQ3Jtc0tsNk00RHFMU2NMSl8yWUZEcDNvaFViZ2p2aDNqR3hiaHlNNWotdUNfWEprT0tlY2hhUFN5Vk5SOGE0OWRjRUZHVXlqMF9NcUhGSjBVbWFnenc5YS1IdTJHc0Q0YWJEY0YtQmFnZDRhMkp1eDlCU29nQQ&q=https%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fhoneypotio%2F&v=8pDqJVdNa44) Instagram: [ / honeypot.cult ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbS1iQ1FGeEhpanNkTHpSVVNOdzlDQ2VVaU9VUXxBQ3Jtc0tuUDJqYy1Rbk16am1IOHZGWTZrUUlsWWVKYXoyYk9VS29FeGZ0MjJBQlZhRHRia3owaWdiWUFtd0FfQmVSZVh3a2ZwczNxek9mMm9KcXdSV2U3SHpNeDZhNTU0X3lZdkJmemxTblhFZHM0d25kWGpNNA&q=https%3A%2F%2Fwww.instagram.com%2Fhoneypot.cult%2F&v=8pDqJVdNa44)

Show less ...more

React is easily one of the single most popular libraries in use today. Given that it was made within a juggernaut like Facebook, you might have assumed it was always destined for success. But what if we told you that React’s first brush with the public sphere was anything but glamorous? React.js: The Documentary brings you the full story behind the early days of React, focusing on the dedicated group of developers who helped bring it to the world stage. This story is told by an all-star cast of developers like Tom Occhino, Christopher Chedeau, Pete Hunt, Sebastian Markbåge, Dan Abramov, and many more. Check out the home for untold developer stories around open source, careers and all the other cool stuff developers are doing at cult.honeypot.io. Honeypot is a developer-focused job platform, on a mission to get developers great jobs. Wanna see what we're all about? Visit honeypot.io to find a job you love. To learn more about Honeypot: [https://bit.ly/3OGoDjG](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbkRtdVV3QWVSUTNiSFp0VDMxRV8ycWV0NjFFQXxBQ3Jtc0tuQVZ4bGJRZ0NmOWprWUxaR0dlNlh3VlpwRTN4MzJKa0hDckM0ZGxkY1pZMVdBeXMzVFVTM3ZScU1VMF9sbDRIVUdzVXgxZnFyTGF6RlFOWDNpdDl1Q04wRmcyZWpELXU3SzVaOUg1b1FxSDlNRnRFNA&q=https%3A%2F%2Fbit.ly%2F3OGoDjG&v=8pDqJVdNa44) Follow the cast: Adam Wolff: [ / dmwlff ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnF4Y2I0ZV9yT0o2M2lGWk9QOEpMcGRwbVU4QXxBQ3Jtc0tsbS0yRHFIbWhGenhHZFg4Zm83Z3VzVlBoeTVmcDQ0SElRM2Y3dTBZbDVfVUxlcEN4VDljNjZwVWF2QXNDTzdnVVRhY3J5QnZPc25JZFg1aDhUNElCMGtlSkQ4NVNRMkt5M2I2VUQ0X2JickZWVWp4TQ&q=https%3A%2F%2Ftwitter.com%2Fdmwlff&v=8pDqJVdNa44) Andrew Clark: [ / acdlite ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbTJnTmNZanhWNWNXSkp0QVIyWk1tS2JvS3dYd3xBQ3Jtc0trSmticXFZY3BQQVNDdlRmcnRDa0l5cFNfTzczaXZOVmJjWnFQWlpTeUJMM1UwRVlYRXBianhwNDhmYTFidURhQnBZSGlXQUJUR1o0LXBUenphOFFXSVFJQzhmUHZacWlEVHRGNVZnWGxaYld2T1czYw&q=https%3A%2F%2Ftwitter.com%2Facdlite&v=8pDqJVdNa44) Christopher Chedeau: [ / vjeux ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbVBOaTQ1TGE0Y1BZd0F3UU5nYlR0bVByN2xiQXxBQ3Jtc0trWGVCbldXbl9NZHRxajFVOU9ZUjN1azlOMzFQcmkxSWNZZ0dxV2ZSNWtnQU5lZkR1SXl5Z0ZrelFfR3FzaXlmeXZkWnBINUYtRDBLcVM1U1lzbldmUUQwQnBGQV9rWVlGNmgtOWU1NEZCUWw1b0Z3cw&q=https%3A%2F%2Ftwitter.com%2FVjeux&v=8pDqJVdNa44) Dan Abramov: [ / dan_abramov ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbVpEMnMxdUFmSWQ3cElFcWJuSllxWmpPbEo0d3xBQ3Jtc0traGFiQTdJcnlqSTEyZkJlMG9xeHdrYzM3dXprZGhDa0FuSy1rempHdGkySE8xME5hbjkyTHpOdGtOMmR3cDczNU85VlhnZU12bWdiQXIyYTUzQ1k3Q095YWdTUHpVQUp4cklhOG53NHFJR1Z4YkcxMA&q=https%3A%2F%2Ftwitter.com%2Fdan_abramov&v=8pDqJVdNa44) David Nolen: [ / swannodette ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2NldF90LWdicTdVNVJvLUYzYTcxMFcwN200UXxBQ3Jtc0trS05WZ1N1bmVnUUxSZlhoVmhGZk41YUM2MVRKSVEteDRRLTZiUHpDQXFKZGc4ZnJ2UjFTM3I3dE5sRkJ0aHdtVHFHSHJKci1HRFFJcnpVVllNUmVMWDdKWV9FYTFMWUpwR1VIaFJ0MEVrMlJ3OFM0OA&q=https%3A%2F%2Ftwitter.com%2Fswannodette&v=8pDqJVdNa44) Lee Byron: [ / leeb ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqazE5dWFPNWlONmZRNTBmR2Z4bUJ3aXg5SUtrZ3xBQ3Jtc0tsc09YMksyNlp5Q2c4WFBXb25LcWNxaUlNcWpiQTRvVjVnMklZTWZMT3RBSURvemJkcm0xNHZVU25BOG9kZ1VaREdESnBpZEJ3Y0hhVC0yQzFSdmNpZDhWeC1FQjRPOHdzM3VwX2g3VW5OTURLclBJVQ&q=https%3A%2F%2Ftwitter.com%2Fleeb&v=8pDqJVdNa44) Michael Chan: [ / chantastic ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2hvOTdXMU1kSVJUbXZBbGNsa2p1ZWltSEpOQXxBQ3Jtc0tsRXFoaHJRQ05EUXhRbTRUNDZ0akRvUF82ZjBZOTR6WlFSUFdlOWgzNkFvVVIyelFJMFhXTDNzcTFXYUlsRFVxVEtqaUhvV3NCMEVkc2s5RTNNdzFfcUJQTXllWmo0UGJhWWZwT0xiZi1waG9ER0Y1cw&q=https%3A%2F%2Ftwitter.com%2Fchantastic&v=8pDqJVdNa44) Pete Hunt: [ / floydophone ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbmFwSEtuQkxzX0hLLWxrSWRCZDNwVk1uMVVZQXxBQ3Jtc0trMVJLNWpEbVJjSDNzV2UwNFZ3Ylh5SnYwWFAzSzRDYUEtWjZ0TVRJWF83RDdvNFdzV2p5cnJURUdiSnpDMlIzXzgxZ2RnUWpIcFdXeUJZbzJrY0R0M01FZVRVRFZCQmFva3hWMVo3bkJOTENBaGJoWQ&q=https%3A%2F%2Ftwitter.com%2Ffloydophone&v=8pDqJVdNa44) Sebastian Markbåge: [ / sebmarkbage ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnhqdzZTYnRjNy1xbGZ6MDlUOXFndTRuUHlPUXxBQ3Jtc0ttRmhpMl9kd1M0STJHd01UTWJ1d2xQMV9mRWpCUVp4Yk5GbkdyMjl2ZVZkX1Y5Rzh1aDVWVWtNMksyelI2ZWVpWklITk1DSExWbEcxWnI0ZHE2Y3hnTS1kZ2kzSzFPQjBYSjBWbVE4aEtPcmNBaUN4Yw&q=https%3A%2F%2Ftwitter.com%2Fsebmarkbage&v=8pDqJVdNa44) Shane O'Sullivan: [ / chofter ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2taQTVUdEhaQmdXNGdVQ2VHTlNPU2FsM2h0d3xBQ3Jtc0tsWmtnWGZHa0U3eE5LeDZsV05hUE9BazVEX0pVVHFJeThpc3dIYjBkQ3FNTEZzdlRCRzBpVHVzZ01PZHJOb3ZxTkRBaXRUc2ZIRHptdncwRVFCSkNEWWx5ZnY3Q3V1a1VHX3AybndhWE55M1ZhSUZJMA&q=https%3A%2F%2Ftwitter.com%2FChofter&v=8pDqJVdNa44) and [https://chofter.com/](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbERWUWI5X3lLbGNUNlMwRGVxSEdlZXE5REFYd3xBQ3Jtc0ttUUcxWTFBTllOWFpYNThSb1FFa3ljOFhoQVRheVRDM0lQcmtESDdkUGV1by1UZVpFMmpjUEEzaHlmUjZTVXdFcF9PUlFJLUR5NVNTWnkyazJXcEoxQjlRYTZZTFFzbXJueW8xWDl6azBfbXE5aEJORQ&q=https%3A%2F%2Fchofter.com%2F&v=8pDqJVdNa44) Sophie Alpert: [ / sophiebits ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbFlxampVMGRnSVJtaGoySmZEbDJtRHhpbVh4QXxBQ3Jtc0tsNE1vREpxQ09OdzlGb1J3a1JXaE1xc0FvUUEwWk9yeTZYUDU5QWp3WV9vVkRldm9sWW9EeUtKRUpudUdUbmtIeHNyVTRBcnpGNXdwTEd4SlBnbzg1elE3U3JnTmlraFVBVXVVTHI3YWU2WDVyRHRFTQ&q=https%3A%2F%2Ftwitter.com%2Fsophiebits&v=8pDqJVdNa44) and [https://sophiebits.com/](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa0JjdjA3SVVuNFpFN2x5bjVsb09iTERmSUUzUXxBQ3Jtc0treVdSY00yb2taQlZ2MnFXUFNyTW9YcE5OcHZicS1ZdUdJaktPUi1JSWpwZjFDMTRPTHRiNkN0MFhjT3VTaWYyOFFwT1plMUdCWXJTclhJdlhScGtQV0FZSk1BUk0xQmRRZW5JRzhMSHBnM1F4MHBydw&q=https%3A%2F%2Fsophiebits.com%2F&v=8pDqJVdNa44) Tom Occhino: [ / tomocchino ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbm1hWjBRSTd5cHZxbWUwVDZ5bWtkNWFnV294d3xBQ3Jtc0tuNWR4RWZuT2dGaEVqZlJIM2VqcE91LWVIVzdjSkJGcE05U21xaFZuSjJYUmh6T242RnRnemdHMXZaa2xSWGk1UWEwWkNUQzI4bVNILXFqMEJxaGJ1Z3RfdzVfNlRvUkc2YmpSNzJJRjhRcE1BZXd2WQ&q=https%3A%2F%2Ftwitter.com%2Ftomocchino&v=8pDqJVdNa44) Tony Casparro: [ / iamtonyc ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbHpHdnYzeVU3ejRwQWgzdHQyYmxxXzZRYWFDZ3xBQ3Jtc0ttOFdUblpiTlNSTVlKc0N5SWgxazBxczRWaGFvMEZ3alVZYzVpekk2dWh2Rk94Z05PbXRGeFRrNTVGRGVvZE0yQi1rS204QnUzcU9hN3A3NUU1MXZFT1J0VmRaNmpWYUl6MHptN0xyMlZSRTJ1aEFuSQ&q=https%3A%2F%2Ftwitter.com%2FIamTonyC&v=8pDqJVdNa44) Many people contributed to React throughout the years and this documentary is just a little slice of that history. You can find full acknowledgements here: [https://reactjs.org/acknowledgements....](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnF3MmJJcHV3NV9BWklhNWJqSmxvZktueUROQXxBQ3Jtc0ttNVVuOVFnc1FWcW5sXzBGbVhjd1JQbzJyNXpHYldnMTk5VXdhTmx1ck1vRXdqcWxCODJrYVg4a0dINUlSU19pUTdERGNHRHBrclozdnVRb0lOVE9nYVo4cl9KVjFscjJqYVNWa2xFZ21oWHZIRHFKWQ&q=https%3A%2F%2Freactjs.org%2Facknowledgements.html&v=8pDqJVdNa44) Thanks to these amazing people for translating subtitles: Charlie: [ / charliesbot ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa3JQYUJxemI4UC1fWGFjbHpvRVY0aVZsaHRpUXxBQ3Jtc0tsV3V0Zkg0Z1RKWkhSN040Q3BieE1nZEpzTFR2OVdjLWp5UjM0T1VvTndKSFJHOVVEUFJyT3BkTHh3OEVmTEo2d2dpbHowUEZqVlZrYmxmU29scDg5VTVrTENrcFd2SERwblZxU25UUE5CMTNpbWFHdw&q=https%3A%2F%2Ftwitter.com%2Fcharliesbot&v=8pDqJVdNa44) Jose: [ / jbetosalinas ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa0ljdnZfOHpqd3I4cWVKZ1Nic1NkQlRtWDc1QXxBQ3Jtc0trVldLc0hleThQYlNub3pnalg1QkZxLUlLRlA5a2JoWTN1WW40V29XcEJBelRPdm12NzZtYzlFWE5WZHZnSVNQd2RTai1xdXRSM0pGWkowRnhpMUVhMWdRVlVnazFhSUdiN2l2TEVFZkM4UHNkVGM1cw&q=https%3A%2F%2Ftwitter.com%2Fjbetosalinas&v=8pDqJVdNa44) Gustavo Gonçalves Follow us: Twitter: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2lqQWNUVGpmaXNFc2trOEkwOV9zNTNSTkFYQXxBQ3Jtc0trNVR1QU5aaURDZWp0WXI0UUNlQkNyRlQxQUN0N2FBZzBDXzE3M29GbWpkaVJnTnh3OHFkMDhrbzZ5dWljcHFZQ2x5bzFiazQ0a2hfekF1N3c5RERJUFJDM3JZVmFZTTRJcmQ3X2VFQnU5SktFMzdEaw&q=https%3A%2F%2Ftwitter.com%2Fhoneypotio&v=8pDqJVdNa44) Facebook: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbUpQSkNvV0d0dkZXYVFJbllNT01Yc3dZQUwzUXxBQ3Jtc0tuQnEwaUdEa1BtRlIzd2FSSTV4bW03dEwwOGFRZnVTdk4ybTNSdzBVcHAtd0JXbDZwS2djMXJ2cTFzZUZHQmx3OFR4U0tnZFlrNzJlMlQxa3A5S3czeHlFSWVoUWM0bGlzTk41cWJNMDJzM0tROEdZbw&q=https%3A%2F%2Fwww.facebook.com%2FHoneypotio%2F&v=8pDqJVdNa44) LinkedIn: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2dFcmRaWWtWN0c4d1Mxd0RjUTNjMDFXWXNuUXxBQ3Jtc0tsNk00RHFMU2NMSl8yWUZEcDNvaFViZ2p2aDNqR3hiaHlNNWotdUNfWEprT0tlY2hhUFN5Vk5SOGE0OWRjRUZHVXlqMF9NcUhGSjBVbWFnenc5YS1IdTJHc0Q0YWJEY0YtQmFnZDRhMkp1eDlCU29nQQ&q=https%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fhoneypotio%2F&v=8pDqJVdNa44) Instagram: [ / honeypot.cult ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbS1iQ1FGeEhpanNkTHpSVVNOdzlDQ2VVaU9VUXxBQ3Jtc0tuUDJqYy1Rbk16am1IOHZGWTZrUUlsWWVKYXoyYk9VS29FeGZ0MjJBQlZhRHRia3owaWdiWUFtd0FfQmVSZVh3a2ZwczNxek9mMm9KcXdSV2U3SHpNeDZhNTU0X3lZdkJmemxTblhFZHM0d25kWGpNNA&q=https%3A%2F%2Fwww.instagram.com%2Fhoneypot.cult%2F&v=8pDqJVdNa44)…...more 

...more Show less 

Transcript

Follow along using the transcript.

Show transcript

### [Honeypot 238K subscribers  ](/@Honeypotio)

[Videos](/channel/UCsUalyRg43M8D60mtHe6YcA/videos)

[About](/channel/UCsUalyRg43M8D60mtHe6YcA/about)

[Videos](/channel/UCsUalyRg43M8D60mtHe6YcA/videos)[About](/channel/UCsUalyRg43M8D60mtHe6YcA/about)[Twitter](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqazlNRDJPZWJORXJ3WW9tcEhxUjR5blJzUmpad3xBQ3Jtc0tuOFlNV1NTNnJicVY0REV4SjBjQkRxcmxrRGxCZm5lMFpwV01vOVQyc0pReHp2end1Z1J2dll1WlRLR3dQUGR6SzhjNzg3Q1pMQXhVNGNUVnpsZlpaTWpuR1hmTThNUzlZNUlQOFRrT01zcWpvcmdrbw&q=https%3A%2F%2Ftwitter.com%2Fhoneypotio)[Linkedin](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbmVEMF9aV0pIQXNfeEtmQ0ZDcW5IeVdNa2hQQXxBQ3Jtc0tsU0txTFZiYUJOcG9sM1pwVmlqUWNpS2ZJWlZDZFZRUHQ1VlpTQ3dnb0hFXzNnVm1XVUdMc3pGbXRNWFczbVowLU9FUk1TMkNFb3FuRjh1NS05ZWFwNmQyOHJOdXBTMElmOVhLNE05cVdMZjlsRndIaw&q=https%3A%2F%2Fwww.linkedin.com%2Fcompany%2F10210811%2F)[Instagram](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa18xSHVNUnFuZmxZb1RwTU4tcDhFY1UtNjBJUXxBQ3Jtc0tsMWtZSzZrY2pMMExadkU4TEh0N3dQYjE0WlktMDNNZjZwVVBKUkx6ekNNQzZYSURIR2hiVERKTkZkWGhiMEZfakpQd0g0MzQxbEY1QV82UHVQVTBlUWxlMlUtTlZkQ3JIbWQtczJqanBoUlhBWHVFdw&q=https%3A%2F%2Fwww.instagram.com%2Fhoneypot.cult%2F)[Facebook](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbVQ5cmJvVE5KczdOdkk1T2Z3aXpQa1E1cThEd3xBQ3Jtc0ttR0EwMWk4d0RKNU9FOUtaeUxoNGlkNFFrVmV5ZUxGMno4NGRMYnFNZ1dGQ2pHQVBxbk5FVTZBdFZCTnlnUXpYYlhzU0FXR2hLR3pqV2NHLXVvM0ZUTmFhWmhlQnRrTmxjYjEwUExfVnBUa1ptbkxPQQ&q=https%3A%2F%2Fwww.facebook.com%2FHoneypotio%2F)

[ 7:14 7:14  ](/watch?v=WvRcZkuXmpo) [ Andrew Clark on the Creation of Redux by Honeypot ](/watch?v=WvRcZkuXmpo)

##  Transcript

NaN / NaN

Show chat replay

[ 1:02:49 1:02:49 Now playing ](/watch?v=LB8KwiiUGy0)

### [ Node.js: The Documentary | An origin story  Honeypot Honeypot  • • 680K views 8 months ago ](/watch?v=LB8KwiiUGy0)

[ ](/watch?v=SqcY0GlETPk)

### [ React Tutorial for Beginners  Programming with Mosh Programming with Mosh  • • 3.6M views 1 year ago ](/watch?v=SqcY0GlETPk)

[ ](/watch?v=783ccP__No8)

### [ GraphQL: The Documentary  Honeypot Honeypot  • • 578K views 5 years ago ](/watch?v=783ccP__No8)

[ ](/watch?v=WXuK6gekU1Y)

### [ AlphaGo - The Movie | Full award-winning documentary  Google DeepMind Google DeepMind  • • 36M views 4 years ago ](/watch?v=WXuK6gekU1Y)

[ ](/watch?v=PaQkIoTrSLY)

### [ From Nerd Olympics to Tech Entrepreneurship: Mike Serbinis' Story  Mark MacLeod Mark MacLeod  • • 34 views 2 days ago New ](/watch?v=PaQkIoTrSLY)

[ ](/watch?v=U6s2pdxebSo)

### [ TypeScript Origins: The Documentary  OfferZen Origins OfferZen Origins  • • 298K views 1 year ago ](/watch?v=U6s2pdxebSo)

[ ](/watch?v=OrxmtDw4pVI)

### [ Vue.js: The Documentary  Honeypot Honeypot  • • 1.5M views 4 years ago ](/watch?v=OrxmtDw4pVI)
Tap to unmute

[Open App](vnd.youtube://m.youtube.com/watch?v=x7cQ3mrcKaY&feature=mweb_c3_open_app_11268432&itc_campaign=mweb_c3_open_app_11268432&redirect_app_store_ios=1&app=desktop)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[Sign in](https://accounts.google.com/ServiceLogin?service=youtube&uilel=3&passive=true&continue=https%3A%2F%2Fwww.youtube.com%2Fsignin%3Faction_handle_signin%3Dtrue%26app%3Ddesktop%26hl%3Den%26next%3Dhttps%253A%252F%252Fwww.youtube.com%252Fwatch%253Fv%253DKVZ-P-ZI6W4&hl=en&ec=65620)

[ ](/ "YouTube Home") IN 

React.js Conf 2015 Keynote - Introducing React Native

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Up next

LiveUpcoming

CancelPlay Now

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?v=7rDsRXj9-cU "Next \(SHIFT+n\)")

0:00 / 31:46•Watch full videoLive

•

•

Scroll for details

#  React.js Conf 2015 Keynote - Introducing React Native

[](/@MetaDevelopers)

[Meta Developers](/@MetaDevelopers)

Meta Developers 

173K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

2.5K

Share

Download

Download 

Save

306K views9 years ago

306,342 views • Jan 28, 2015 

Show less 

Tom Occhino reviews the past and present of React in 2015, and teases where it's going next.…...more 

...more 

## 

Key moments

View all

#### [Facebook Ads Org Facebook Ads Org 1:54 ](/watch?v=KVZ-P-ZI6W4&t=114s)

#### [Facebook Ads Org ](/watch?v=KVZ-P-ZI6W4&t=114s)

1:54

#### [Complicated Apps Complicated Apps 2:26 ](/watch?v=KVZ-P-ZI6W4&t=146s)

#### [Complicated Apps ](/watch?v=KVZ-P-ZI6W4&t=146s)

2:26

#### [Cascading Updates Cascading Updates 3:05 ](/watch?v=KVZ-P-ZI6W4&t=185s)

#### [Cascading Updates ](/watch?v=KVZ-P-ZI6W4&t=185s)

3:05

#### [Unpredictable Code Unpredictable Code 3:33 ](/watch?v=KVZ-P-ZI6W4&t=213s)

#### [Unpredictable Code ](/watch?v=KVZ-P-ZI6W4&t=213s)

3:33

#### [Huge step backwards Huge step backwards 9:07 ](/watch?v=KVZ-P-ZI6W4&t=547s)

#### [Huge step backwards ](/watch?v=KVZ-P-ZI6W4&t=547s)

9:07

#### [What makes React so powerful? What makes React so powerful? 12:54 ](/watch?v=KVZ-P-ZI6W4&t=774s)

#### [What makes React so powerful? ](/watch?v=KVZ-P-ZI6W4&t=774s)

12:54

#### [Server rendering? Server rendering? 13:16 ](/watch?v=KVZ-P-ZI6W4&t=796s)

#### [Server rendering? ](/watch?v=KVZ-P-ZI6W4&t=796s)

13:16

#### [React wraps an imperative API with a declarative one React wraps an imperative API with a declarative one 14:00 ](/watch?v=KVZ-P-ZI6W4&t=840s)

#### [React wraps an imperative API with a declarative one ](/watch?v=KVZ-P-ZI6W4&t=840s)

14:00

Transcript

Follow along using the transcript.

Show transcript

### [Meta Developers 173K subscribers  ](/@MetaDevelopers)

[Videos](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/videos)

[About](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/about)

[Videos](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/videos)[About](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/about)[Website](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa3NZWjJkV29XeDMtT3d6UloySlNoeVBjUUZxUXxBQ3Jtc0trVmU5YmRTdTk5RDVHaWZuZFhaMWhFQW1ZYkczMGtlSVlvamFXb2Y0NHRza2tvQkpuNEVrVGdlQnBCWXFfaDktcnJWV001cnV1aGFZVWdLdjlVTEhVSnZkeFlMdG9OTHFWMGdLNHNhUmJYX3BremtSOA&q=https%3A%2F%2Fdevelopers.facebook.com%2F)[Facebook](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbVBNNHdSdHJ3UUdFbjQzdndiUlp6TGhuU2M5QXxBQ3Jtc0tueFZxLWVxMzZpNG5xcG5TQThJbVczUVRmem80cGRJSkpOQnlVUWIyYnRIVjZLbGpkbGY2b0dZaGFkcThaZ3UwTGt6c3ZXVkc0SG1tTnNIUWpNaU5CSGFKMDhRV2w5NGEyZDl5NXJuMzczb2c0RE02NA&q=https%3A%2F%2Fwww.facebook.com%2FMetaforDevelopers)[Instagram](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbE1sRFlkWUU5S3kxY3NFV1U5X2hjdVJSVWYzUXxBQ3Jtc0tuSWhmMjlDeWJZTGJrTmZnaEJyN21RU3Bka3hVNFhWUTk4aXBuU1ZPSW9LcldNXzRxcUNNR25xMXRsS2VTR0lrWVdTWWJQdUtGVjQzOXFFSXYxVHJad29UZW8tTVRTZXpyNmp4YWRYNGRzUUphQjl4MA&q=https%3A%2F%2Fwww.instagram.com%2Fmetafordevelopers%2F)[LinkedIn](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa21EOVc3Sk5qWTJPYzFqNC1VczRNc05pck42QXxBQ3Jtc0trSDhHR2IwaXBFcEpQbVZ3Vk52cUVLYURGaFQzN0FRdk9oZ09LUHU0T18xcTJqQXBmVXdEZ1ctSGdNbU9PSTV5R2pjYWtQNUVjdWprTERpNjJNcGpxUHItYXhsOXhzZ1F3enJxcGllRmNTdXNhU3ZMRQ&q=https%3A%2F%2Fwww.linkedin.com%2Fshowcase%2F6647805%2F)

Show less 

# React.js Conf 2015 Keynote - Introducing React Native

306,342 views306K views

Jan 28, 2015

2.5K

Share

Download

Download 

Save

##  Comments 74

Top comments  Newest first 

##  Key moments

#### [Facebook Ads Org Facebook Ads Org 1:54 ](/watch?v=KVZ-P-ZI6W4&t=114s)

#### [Facebook Ads Org ](/watch?v=KVZ-P-ZI6W4&t=114s)

1:54

#### [Complicated Apps Complicated Apps 2:26 ](/watch?v=KVZ-P-ZI6W4&t=146s)

#### [Complicated Apps ](/watch?v=KVZ-P-ZI6W4&t=146s)

2:26

#### [Cascading Updates Cascading Updates 3:05 ](/watch?v=KVZ-P-ZI6W4&t=185s)

#### [Cascading Updates ](/watch?v=KVZ-P-ZI6W4&t=185s)

3:05

#### [Unpredictable Code Unpredictable Code 3:33 ](/watch?v=KVZ-P-ZI6W4&t=213s)

#### [Unpredictable Code ](/watch?v=KVZ-P-ZI6W4&t=213s)

3:33

#### [Huge step backwards Huge step backwards 9:07 ](/watch?v=KVZ-P-ZI6W4&t=547s)

#### [Huge step backwards ](/watch?v=KVZ-P-ZI6W4&t=547s)

9:07

#### [What makes React so powerful? What makes React so powerful? 12:54 ](/watch?v=KVZ-P-ZI6W4&t=774s)

#### [What makes React so powerful? ](/watch?v=KVZ-P-ZI6W4&t=774s)

12:54

#### [Server rendering? Server rendering? 13:16 ](/watch?v=KVZ-P-ZI6W4&t=796s)

#### [Server rendering? ](/watch?v=KVZ-P-ZI6W4&t=796s)

13:16

#### [React wraps an imperative API with a declarative one React wraps an imperative API with a declarative one 14:00 ](/watch?v=KVZ-P-ZI6W4&t=840s)

#### [React wraps an imperative API with a declarative one ](/watch?v=KVZ-P-ZI6W4&t=840s)

14:00

#### [declarative - predictable declarative - predictable 14:35 ](/watch?v=KVZ-P-ZI6W4&t=875s)

#### [declarative - predictable ](/watch?v=KVZ-P-ZI6W4&t=875s)

14:35

#### [predictable -- confidence predictable -- confidence 14:55 ](/watch?v=KVZ-P-ZI6W4&t=895s)

#### [predictable -- confidence ](/watch?v=KVZ-P-ZI6W4&t=895s)

14:55

#### [confidence – reliability confidence – reliability 15:34 ](/watch?v=KVZ-P-ZI6W4&t=934s)

#### [confidence – reliability ](/watch?v=KVZ-P-ZI6W4&t=934s)

15:34

#### [React's real power lies in how it makes you to write your code React's real power lies in how it makes you to write your code 16:07 ](/watch?v=KVZ-P-ZI6W4&t=967s)

#### [React's real power lies in how it makes you to write your code ](/watch?v=KVZ-P-ZI6W4&t=967s)

16:07

#### [Sophisticated gesture handling Sophisticated gesture handling 19:16 ](/watch?v=KVZ-P-ZI6W4&t=1156s)

#### [Sophisticated gesture handling ](/watch?v=KVZ-P-ZI6W4&t=1156s)

19:16

#### [Native environment Native environment 20:45 ](/watch?v=KVZ-P-ZI6W4&t=1245s)

#### [Native environment ](/watch?v=KVZ-P-ZI6W4&t=1245s)

20:45

#### [React Native React Native 22:55 ](/watch?v=KVZ-P-ZI6W4&t=1375s)

#### [React Native ](/watch?v=KVZ-P-ZI6W4&t=1375s)

22:55

#### [demo demo 23:08 ](/watch?v=KVZ-P-ZI6W4&t=1388s)

#### [demo ](/watch?v=KVZ-P-ZI6W4&t=1388s)

23:08

#### [What was that? What was that? 25:15 ](/watch?v=KVZ-P-ZI6W4&t=1515s)

#### [What was that? ](/watch?v=KVZ-P-ZI6W4&t=1515s)

25:15

#### [Everything on screen was native Everything on screen was native 25:20 ](/watch?v=KVZ-P-ZI6W4&t=1520s)

#### [Everything on screen was native ](/watch?v=KVZ-P-ZI6W4&t=1520s)

25:20

#### [No WebView No WebView 25:34 ](/watch?v=KVZ-P-ZI6W4&t=1534s)

#### [No WebView ](/watch?v=KVZ-P-ZI6W4&t=1534s)

25:34

#### [Completely powered by JavaScript Completely powered by JavaScript 25:37 ](/watch?v=KVZ-P-ZI6W4&t=1537s)

#### [Completely powered by JavaScript ](/watch?v=KVZ-P-ZI6W4&t=1537s)

25:37

#### [This is working This is working 28:33 ](/watch?v=KVZ-P-ZI6W4&t=1713s)

#### [This is working ](/watch?v=KVZ-P-ZI6W4&t=1713s)

28:33

#### [Write once run anywhere Write once run anywhere 28:56 ](/watch?v=KVZ-P-ZI6W4&t=1736s)

#### [Write once run anywhere ](/watch?v=KVZ-P-ZI6W4&t=1736s)

28:56

#### [Learn once, write anywhere Learn once, write anywhere 29:14 ](/watch?v=KVZ-P-ZI6W4&t=1754s)

#### [Learn once, write anywhere ](/watch?v=KVZ-P-ZI6W4&t=1754s)

29:14

#### [Tomorrow Morning Tomorrow Morning 29:52 ](/watch?v=KVZ-P-ZI6W4&t=1792s)

#### [Tomorrow Morning ](/watch?v=KVZ-P-ZI6W4&t=1792s)

29:52

#### [Where's the code? Where's the code? 30:03 ](/watch?v=KVZ-P-ZI6W4&t=1803s)

#### [Where's the code? ](/watch?v=KVZ-P-ZI6W4&t=1803s)

30:03

#### [What happens next? What happens next? 30:48 ](/watch?v=KVZ-P-ZI6W4&t=1848s)

#### [What happens next? ](/watch?v=KVZ-P-ZI6W4&t=1848s)

30:48

#### [Existing Frameworks Influenced: All of them Existing Frameworks Influenced: All of them 31:12 ](/watch?v=KVZ-P-ZI6W4&t=1872s)

#### [Existing Frameworks Influenced: All of them ](/watch?v=KVZ-P-ZI6W4&t=1872s)

31:12

Sync to video time 

Sync to video time

##  Description

React.js Conf 2015 Keynote - Introducing React Native

2.5KLikes

306,342Views

2015Jan 28

Tom Occhino reviews the past and present of React in 2015, and teases where it's going next.

Show less ...more

Tom Occhino reviews the past and present of React in 2015, and teases where it's going next.…...more 

...more Show less 

## 

Key moments

View all

#### [Facebook Ads Org Facebook Ads Org 1:54 ](/watch?v=KVZ-P-ZI6W4&t=114s)

#### [Facebook Ads Org ](/watch?v=KVZ-P-ZI6W4&t=114s)

1:54

#### [Complicated Apps Complicated Apps 2:26 ](/watch?v=KVZ-P-ZI6W4&t=146s)

#### [Complicated Apps ](/watch?v=KVZ-P-ZI6W4&t=146s)

2:26

#### [Cascading Updates Cascading Updates 3:05 ](/watch?v=KVZ-P-ZI6W4&t=185s)

#### [Cascading Updates ](/watch?v=KVZ-P-ZI6W4&t=185s)

3:05

#### [Unpredictable Code Unpredictable Code 3:33 ](/watch?v=KVZ-P-ZI6W4&t=213s)

#### [Unpredictable Code ](/watch?v=KVZ-P-ZI6W4&t=213s)

3:33

Transcript

Follow along using the transcript.

Show transcript

### [Meta Developers 173K subscribers  ](/@MetaDevelopers)

[Videos](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/videos)

[About](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/about)

[Videos](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/videos)[About](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/about)[Website](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa3NZWjJkV29XeDMtT3d6UloySlNoeVBjUUZxUXxBQ3Jtc0trVmU5YmRTdTk5RDVHaWZuZFhaMWhFQW1ZYkczMGtlSVlvamFXb2Y0NHRza2tvQkpuNEVrVGdlQnBCWXFfaDktcnJWV001cnV1aGFZVWdLdjlVTEhVSnZkeFlMdG9OTHFWMGdLNHNhUmJYX3BremtSOA&q=https%3A%2F%2Fdevelopers.facebook.com%2F)[Facebook](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbVBNNHdSdHJ3UUdFbjQzdndiUlp6TGhuU2M5QXxBQ3Jtc0tueFZxLWVxMzZpNG5xcG5TQThJbVczUVRmem80cGRJSkpOQnlVUWIyYnRIVjZLbGpkbGY2b0dZaGFkcThaZ3UwTGt6c3ZXVkc0SG1tTnNIUWpNaU5CSGFKMDhRV2w5NGEyZDl5NXJuMzczb2c0RE02NA&q=https%3A%2F%2Fwww.facebook.com%2FMetaforDevelopers)[Instagram](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbE1sRFlkWUU5S3kxY3NFV1U5X2hjdVJSVWYzUXxBQ3Jtc0tuSWhmMjlDeWJZTGJrTmZnaEJyN21RU3Bka3hVNFhWUTk4aXBuU1ZPSW9LcldNXzRxcUNNR25xMXRsS2VTR0lrWVdTWWJQdUtGVjQzOXFFSXYxVHJad29UZW8tTVRTZXpyNmp4YWRYNGRzUUphQjl4MA&q=https%3A%2F%2Fwww.instagram.com%2Fmetafordevelopers%2F)[LinkedIn](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa21EOVc3Sk5qWTJPYzFqNC1VczRNc05pck42QXxBQ3Jtc0trSDhHR2IwaXBFcEpQbVZ3Vk52cUVLYURGaFQzN0FRdk9oZ09LUHU0T18xcTJqQXBmVXdEZ1ctSGdNbU9PSTV5R2pjYWtQNUVjdWprTERpNjJNcGpxUHItYXhsOXhzZ1F3enJxcGllRmNTdXNhU3ZMRQ&q=https%3A%2F%2Fwww.linkedin.com%2Fshowcase%2F6647805%2F)

##  Transcript

NaN / NaN

[ 30:14 30:14 Now playing ](/watch?v=7rDsRXj9-cU)

### [ React.js Conf 2015 Keynote 2 - A Deep Dive into React Native  Meta Developers Meta Developers  • • 149K views 9 years ago ](/watch?v=7rDsRXj9-cU)

[ ](/watch?v=8pDqJVdNa44)

### [ How A Small Team of Developers Created React at Facebook | React.js: The Documentary  Honeypot Honeypot  • • 1.4M views 1 year ago ](/watch?v=8pDqJVdNa44)

[ ](/watch?v=vwgmBsMSwmo)

### [ Introducing Agentforce 2.0 with Marc Benioff | Salesforce  Salesforce Salesforce  • • 20K views 10 hours ago New ](/watch?v=vwgmBsMSwmo)

[ ](/watch?v=Q5SMmKb7qVI)

### [ React Conf Keynote (Day 2)  React Conf React Conf  • • 14K views 4 months ago ](/watch?v=Q5SMmKb7qVI)

[ ](/watch?v=6aQgiJHReCI)

### [ React 19 is finally out!  Theo - t3․gg Theo - t3․gg  • • 64K views 8 days ago ](/watch?v=6aQgiJHReCI)

[ ](/watch?v=MGuKhcnrqGA)

### [ React.js Conf 2016 - Nick Schrock - Keynote  Meta Developers Meta Developers  • • 69K views 8 years ago ](/watch?v=MGuKhcnrqGA)

[ ](/watch?v=19g66ezsKAg)

### [ Next.js Conf 2024 Opening Keynote  Vercel Vercel  • • 17K views 1 month ago ](/watch?v=19g66ezsKAg)
Tap to unmute
[Data Fetching with React Server Components](https://m.youtube.com/watch?v=TQQPAU21ZUw)

Search

Share

Copy link

Info

Shopping

Tap to unmute

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.
[Skip to content](#geist-skip-nav)

[](https://vercel.com/home?utm_source=next-site&utm_medium=banner&utm_campaign=home "Go to Vercel homepage")

[](/?uwu=true "Go to the homepage")

[](/ "Go to the homepage")

Search documentation...`CtrlK`Search...`⌘K`

[](https://vercel.com/home?utm_source=next-site&utm_medium=banner&utm_campaign=home "Go to Vercel homepage")

[](/?uwu=true "Go to the homepage")

[](/ "Go to the homepage")

[Showcase](/showcase)[Docs](/docs "Documentation")[Blog](/blog)[Templates](https://vercel.com/templates/next.js?utm_source=next-site&utm_medium=navbar&utm_campaign=next_site_nav_templates)[Enterprise](https://vercel.com/contact/sales/nextjs?utm_source=next-site&utm_medium=navbar&utm_campaign=next_site_nav_enterprise)

Search documentation...`CtrlK`Search...`⌘K`[Deploy](https://vercel.com/new/clone?utm_source=next-site&utm_medium=banner&b=main&s=https%3A%2F%2Fgithub.com%2Fvercel%2Fvercel%2Ftree%2Fmain%2Fexamples%2Fnextjs&showOptionalTeamCreation=false&template=nextjs&teamCreateStatus=hidden&utm_campaign=home)[Learn](/learn)

# The React Framework for the Web

Used by some of the world's largest companies, Next.js enables you to create **high-quality web applications** with the power of React components.

[Get Started](/docs)[Learn Next.js](/learn?utm_source=next-site&utm_medium=homepage-cta&utm_campaign=home)

▲ ~ npx create-next-app@latest

## What's in Next.js?

Everything you need to build great products on the web.

[Original1440px375pxBuilt-in OptimizationsAutomatic Image, Font, and Script Optimizations for improved UX and Core Web Vitals.](/docs/app/building-your-application/optimizing/images)[Data FetchingMake your React component async and await your data. Next.js supports both server and client data fetching.](/docs/app/building-your-application/data-fetching)[Server ActionsRun server code by calling a function. Skip the API. Then, easily revalidate cached data and update your UI in one network roundtrip.](/docs/app/building-your-application/data-fetching/forms-and-mutations)[Advanced Routing & Nested LayoutsCreate routes using the file system, including support for more advanced routing patterns and UI layouts.](/docs/app/building-your-application/routing)

[Dynamic HTML StreamingInstantly stream UI from the server, integrated with the App Router and React Suspense.](/docs/app/building-your-application/routing/loading-ui-and-streaming)[CSS SupportStyle your application with your favorite tools, including support for CSS Modules, Tailwind CSS, and popular community libraries.](/docs/app/building-your-application/styling)[Route HandlersBuild API endpoints to securely connect with third-party services for handling auth or listening for webhooks.](/docs/app/building-your-application/routing/router-handlers)[MiddlewareTake control of the incoming request. Use code to define routing and access rules for authentication, experimentation, and internationalization.](/docs/app/building-your-application/routing/middleware)

[React Server ComponentsAdd components without sending additional client-side JavaScript. Built on the latest React features.](/docs/app/building-your-application/rendering/server-components)[Client and Server RenderingFlexible rendering and caching options, including Incremental Static Regeneration (ISR), on a per-page level.](/docs/app/building-your-application/rendering)[Next.js 15The power of full-stack to the frontend. Read the release notes.](/blog/next-15)

[Built-in OptimizationsAutomatic Image, Font, and Script Optimizations for improved UX and Core Web Vitals.](/docs/app/building-your-application/optimizing/images)[React Server ComponentsAdd components without sending additional client-side JavaScript. Built on the latest React features.](/docs/app/building-your-application/rendering/server-components)[Data FetchingMake your React component async and await your data. Next.js supports both server and client data fetching.](/docs/app/building-your-application/data-fetching)[Server ActionsRun server code by calling a function. Skip the API. Then, easily revalidate cached data and update your UI in one network roundtrip.](/docs/app/building-your-application/data-fetching/forms-and-mutations)[Advanced Routing & Nested LayoutsCreate routes using the file system, including support for more advanced routing patterns and UI layouts.](/docs/app/building-your-application/routing)

[Dynamic HTML StreamingInstantly stream UI from the server, integrated with the App Router and React Suspense.](/docs/app/building-your-application/routing/loading-ui-and-streaming)[CSS SupportStyle your application with your favorite tools, including support for CSS Modules, Tailwind CSS, and popular community libraries.](/docs/app/building-your-application/styling)[Route HandlersBuild API endpoints to securely connect with third-party services for handling auth or listening for webhooks.](/docs/app/building-your-application/routing/router-handlers)[MiddlewareTake control of the incoming request. Use code to define routing and access rules for authentication, experimentation, and internationalization.](/docs/app/building-your-application/routing/middleware)[Client and Server RenderingFlexible rendering and caching options, including Incremental Static Regeneration (ISR), on a per-page level.](/docs/app/building-your-application/rendering)[Next.js 15The power of full-stack to the frontend. Read the release notes.](/blog/next-15)

[Built-in OptimizationsAutomatic Image, Font, and Script Optimizations for improved UX and Core Web Vitals.](/docs/app/building-your-application/optimizing/images)[Dynamic HTML StreamingInstantly stream UI from the server, integrated with the App Router and React Suspense.](/docs/app/building-your-application/routing/loading-ui-and-streaming)[React Server ComponentsAdd components without sending additional client-side JavaScript. Built on the latest React features.](/docs/app/building-your-application/rendering/server-components)

[Data FetchingMake your React component async and await your data. Next.js supports both server and client data fetching.](/docs/app/building-your-application/data-fetching)[Server ActionsRun server code by calling a function. Skip the API. Then, easily revalidate cached data and update your UI in one network roundtrip.](/docs/app/building-your-application/data-fetching/forms-and-mutations)[Advanced Routing & Nested LayoutsCreate routes using the file system, including support for more advanced routing patterns and UI layouts.](/docs/app/building-your-application/routing)[CSS SupportStyle your application with your favorite tools, including support for CSS Modules, Tailwind CSS, and popular community libraries.](/docs/app/building-your-application/styling)[Route HandlersBuild API endpoints to securely connect with third-party services for handling auth or listening for webhooks.](/docs/app/building-your-application/routing/router-handlers)[MiddlewareTake control of the incoming request. Use code to define routing and access rules for authentication, experimentation, and internationalization.](/docs/app/building-your-application/routing/middleware)[Client and Server RenderingFlexible rendering and caching options, including Incremental Static Regeneration (ISR), on a per-page level.](/docs/app/building-your-application/rendering)

[Next.js 15The power of full-stack to the frontend. Read the release notes.](/blog/next-15)

## Built on a foundation of fast, production-grade tooling

Powered By

[ReactThe library for web and native user interfaces. Next.js is built on the latest React features, including Server Components and Actions.](https://react.dev)[TurbopackAn incremental bundler optimized for JavaScript and TypeScript, written in Rust , and built into Next.js.](https://turbo.build)[Speedy Web CompilerAn extensible Rust based platform for the next generation of fast developer tools, and can be used for both compilation and minification.](https://swc.rs)

## Get started in seconds

Deploy Next.js to Vercel

StarterEcommerceBlogAIPortfolioSaaSMulti-tenant AppsRealtime AppsDocumentationVirtual EventWeb3

Vercel is a frontend cloud from the creators of Next.js, making it easy to get started with Next.js quickly.

Jumpstart your Next.js development with pre-built solutions from Vercel and our community.

[Deploy a Template on Vercel](https://vercel.com/templates/next.js?utm_source=next-site&utm_medium=deploy-template-on-vercel-cta&utm_campaign=homepage-new)

Next.js Boilerplate

A Next.js starter from create-next-app.

Image Gallery Starter

An image gallery built on Next.js and Cloudinary.

Next.js Commerce

An all-in-one starter kit for high-performance ecommerce sites.

## The framework of choice when it matters

[Audible](/showcase)[Sonos](/showcase)

[Dice](/showcase)

[Notion](/showcase)

[Today](/showcase)[ProductHunt](/showcase)

[Nike](/showcase)[Washington Post](/showcase)

[Sonos](/showcase)[Audible](/showcase)[Nike](/showcase)

[Notion](/showcase)[ProductHunt](/showcase)[Washington Post](/showcase)

For **performance** , **efficiency** and **developer experience**. Next.js is trusted by some of the biggest names on the web.

[View the Next.js Showcase](/showcase)

## Customer Testimonials

> ### “With Next.js, we now consistently average 0.09 or lower for Cumulative Layout Shift, placing our site in the top tier for user experience and Core Web Vitals.”

Senior Software Engineer, Frontend

> ### “Our UI for Frame.io responds to user input within 100ms and all animations run at a consistent 60fps with Next.js.”

Charlton Roberts, Product Engineering

> ### “Next.js has been a game-changer for our agency work and team collaboration. Its powerful features have allowed us to build high-performance websites quickly and efficiently like never before.”

Daniel Lopes, Frontend Developer

[](https://vercel.com/home?utm_source=next-site&utm_medium=footer&utm_campaign=next-website "Go to the Vercel website")

[](https://github.com/vercel/next.js)[](https://bsky.app/profile/nextjs.org)

#### Resources

[Docs](/docs)[Learn](/learn)[Showcase](/showcase)[Blog](/blog)[Analytics](https://vercel.com/analytics?utm_source=next-site&utm_medium=footer&utm_campaign=home)[Next.js Conf](/conf)[Previews](https://vercel.com/products/previews?utm_source=next-site&utm_medium=footer&utm_campaign=home)

#### More

[Next.js Commerce](https://vercel.com/templates/next.js/nextjs-commerce?utm_source=next-site&utm_medium=footer&utm_campaign=home)[Contact Sales](https://vercel.com/contact/sales?utm_source=next-site&utm_medium=footer&utm_campaign=home)[GitHub](https://github.com/vercel/next.js)[Releases](https://github.com/vercel/next.js/releases)[Telemetry](/telemetry)[Governance](/governance)

#### About Vercel

[Next.js + Vercel](https://vercel.com/solutions/nextjs?utm_source=next-site&utm_medium=footer&utm_campaign=home)[Open Source Software](https://vercel.com/oss?utm_source=next-site&utm_medium=footer&utm_campaign=home)[GitHub](https://github.com/vercel)[Bluesky](https://bsky.app/profile/vercel.com)

#### Legal

[Privacy Policy](https://vercel.com/legal/privacy-policy)Cookie Preferences

#### Subscribe to our newsletter

Stay updated on new releases and features, guides, and case studies.

Subscribe

© 2024 Vercel, Inc.

[](https://github.com/vercel/next.js)[](https://bsky.app/profile/nextjs.org)
[](/)[Docs](/docs/en/main)[Blog](/blog)[Showcase](/showcase)[Resources](/resources)

[Docs](/docs/en/main)[Blog](/blog)[Showcase](/showcase)[Resources](/resources)

# Welcome to Remix

## Focused on web standards and modern web app UX, you’re simply going to build better websites

Remix is a full stack web framework that lets you focus on the user interface and work back through web standards to deliver a fast, slick, and resilient user experience. People are gonna love using your stuff.

[Get Started](/docs/start/quickstart)[Read the Docs](/docs)

```
export async function loader({ request }) {
 return getProjects();
}
export async function action({ request }) {
 const form = await request.formData();
 return createProject({
  title: form.get("title"),
 });
}
export default function Projects() {
 const projects = useLoaderData();
 const { state } = useNavigation();
 const busy = state === "submitting";
 return (
  <div>
   {projects.map((project) => (
    <Link to={project.slug}>
     {project.title}
    </Link>
   ))}
   <Form method="post">
    <input name="title" />
    <button type="submit" disabled={busy}>
     {busy
      ? "Creating..."
      : "Create New Project"}
    </button>
   </Form>
  </div>
 );
}

```


```
export async function loader({ request }) {
 return getProjects();
}
export async function action({ request }) {
 const form = await request.formData();
 return createProject({ title: form.get("title") });
}
export default function Projects() {
 const projects = useLoaderData();
 const { state } = useNavigation();
 const busy = state === "submitting";
 return (
  <div>
   {projects.map((project) => (
    <Link to={project.slug}>{project.title}</Link>
   ))}
   <Form method="post">
    <input name="title" />
    <button type="submit" disabled={busy}>
     {busy ? "Creating..." : "Create New Project"}
    </button>
   </Form>
  </div>
 );
}

```


## Testimonials

Twitter Logo

, 

Radix UI

> I've been waiting for something to encourage progressive enhancement in the React space *forever* and Remix truly is so much more. Proving we don't need to sacrifice React or choose SSG for a lightning fast, accessible UI, and the DX makes it all too easy 🤤

Cloudflare

> holy 💩 Remix is good

Discord, prev React Core

> I just rewrote my first Remix app on top of Cloudflare Workers and Supabase and it’s so damn good

Software Developer

> My mind is still blown away with Remix! So easy and elegant 😩. I love how it also focuses on Accessibility (Progressive Enhancement...) 🤯, A few days ago I was like wazzup with remix, we got Next.js and Svelte 😴 ... and now I'm fired up like crazy 😂. This is so good 🤤

Daffy, prev Vercel

> What’s really cool with Remix loaders is that you can do most of your data transformation and calculations there, like check if a list is empty, limit the number of records, only send specific attributes, so your React component just receives the data and renders it, no logic needed

Fullstack Dev, Frontside

> Remix is going to put developers on the Hot Path to build accessible, scaleable, and performant apps, that have stellar user experiences and amazing developer ergonomics. It's not only going to be a win for developers, but also a big win for the end-users!

Fullstack Developer

> In my opinion @remix_run will be game changer for corporate teams hesitant to adopt full stack JavaScript. The core concepts are so intuitive you can pick it up in a day, and it will even integrate into your existing stack.

Software Engineer, Box

> I love what @mjackson and @ryanflorence are doing with Remix! Deploying to AWS Lambda in under 30 seconds 🤯

Web Developer

> Building with @remix_run has been awesome so far. Having used Next.js for applications for years, the nested layouts are a wonderful feature. I also haven't learned this much about the web in years.

Web Developer

> I love using @remix_run for my website. Remix has improved my productivity as a front-end developer by empowering me to seamlessly switch between front-end and back-end code.

App Developer

> If you're doing #webdevelopment you should check out Remix 🔥 It's a new (old) paradigm for web dev, which simplifies our code, especially state management😅, speeds up our page loads, and gives us a mental model and framework we can rely on to create our best work

![](/wave.png)![](/loading.gif)

## While you were waiting for your static site to build, distributed web infra­structure got really good. Break through the static.

Remix is a seamless server and browser runtime that provides snappy page loads and instant transitions by leveraging distributed systems and native browser features instead of clunky static builds. Built on the Web Fetch API (instead of Node) **it can run anywhere**. It already runs natively on Cloudflare Workers, and of course supports serverless and traditional Node.js environments, so you can come as you are.

Page speed is only one aspect of our true goal though. We're after **better user experiences**. As you’ve pushed the boundaries of the web, your tools haven’t caught up to your appetite. **Remix is ready** to serve you from the initial request to the fanciest UX your designers can think up. Check it out 👀

## Remix has a cheat code:Nested Routes.

↑↑↓↓←→←→BA↵

Websites usually have levels of navigation that control child views.

Not only are these components pretty much always coupled to URL segments...

...they’re also the semantic boundary of data loading and code splitting.

Hover or tap the buttons to see how they’re all related

👇

<Root><Sales><Invoices><Invoice id={id}>

example.com/sales/invoices/102000

Fakebooks

Dashboard

Accounts

Sales

Expenses

Reports

Sales

Overview

Subscriptions

Invoices

Customers

Deposits

Overdue

$10,800

Due Soon

$62,000

Invoice List

Santa Monica

$10,800

1995

Overdue

Stankonia

$8,000

2000

Due Today

Ocean Avenue

$9,500

2003

Paid

Tubthumper

$14,000

1997

Due in 10 Days

Wide Open Sp...

$4,600

1998

Due in 8 Days

Stankonia

$8,000

Due Today • Invoiced 10/31/2000

Pro Plan

$6,000

Custom

$2,000

Net Total

$8,000

## What about loading states?

Through nested routes, Remix can eliminate nearly every loading state.

Most web apps fetch inside of components, creating request waterfalls, slower loads, and jank.

Remix loads data in parallel on the server and sends a fully formed HTML document. Way faster, jank free.

Without Remix

about:blank

document

root.js

user.json

sales.js

sales/nav.json

invoices.js

invoice.js

invoice/{id}.json

With Remix

about:blank

document

root.js

sales.js

invoices.js

invoice.js

(Keep scrolling to compare)

Say good­bye to Spinnageddon

Say good­bye to Spinnageddon

## Pre-fetching Everything

Nested routes allow Remix to make your app as fast as instant.

Remix can prefetch everything in parallel before the user clicks a link.

Public Data. User Data. Modules. Heck, even CSS.

Zero loading states. Zero skeleton UI. Zero jank.

Alright, you caught us, they’re just prefetch link tags, #useThePlatform

example.com/dashboard

Fakebooks

Dashboard

Accounts

Sales

Expenses

Reports

Dashboard

Recent Activity

Alerts

Messages

New Invoice

Customer

Stankonia

Net Total

$8,000

New Invoice

Customer

Ocean Avenue

Net Total

$9,500

## Data loading

... ![](/yawn.png)

You ever notice most of the code in your app is for changing data?

Imagine if React only had props and no way to set state. What’s the point? If a web framework helps you load data but doesn’t help you update it, what’s the point? Remix doesn’t drop you off at the `<form onSubmit>` cliff. (What the heck does `event.preventDefault` do anyway?)

Resilient, progressively enhanced data updates are built in.

It’s so simple it’s kind of silly. Just make a form...

...and an action on a route module. It looks like traditional HTML forms but enables fully dynamic web experiences you're after.

Remix runs the action server side, revalidates data client side, and even handles race conditions from resubmissions.

Get fancy with transition hooks and make some pending UI. Remix handles all the state, you simply ask for it.

Or get jiggy with some optimistic UI. Remix provides the data being sent to the server so you can skip the busy spinners for mutations, too.

HTML forms for mutations. Who knew?

```
export default function NewInvoice() {
 return (
  <Form method="post">
   <input type="text" name="company" />
   <input type="text" name="amount" />
   <button type="submit">Create</button>
  </Form>
 );
}

```


## Error Handling

:)

Your websites run into problems, but with Remix they don’t need to be refreshed. Error handling is hard to remember and hard to do. That’s why it’s built in.

Remix handles errors while Server Rendering. Errors while Client Rendering. Even errors in your server side data handling.

![](/qrcode.png)

## Route Error Boundaries keep the happy path happy.

Each route module can export an error boundary next to the default route component.

If an error is thrown, client or server side, users see the boundary instead of the default component.

Routes w/o trouble render normally, so users have more options than slamming refresh.

If a route has no boundary, errors bubble up. Just put one at the top and chill out about errors in code review, yeah?

```
export default function InvoiceRoute() {
 const invoice = useLoaderData();
 return <Invoice data={invoice} />;
}

```


That's probably enough for now. What are you waiting for?

[Go Play!](/docs)

[GitHub Logo](https://github.com/remix-run)[YouTube logo](https://youtube.com/remix_run)[](https://rmx.as/discord)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

1/19

React 18 Keynote

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=HS6vIYkSNks "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=ytudH8je5ko "Next \(SHIFT+n\)")

0:00 / 33:48•Watch full videoLive

•

•

Scroll for details

#  React 18 Keynote

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

1.9K

Share

Download

Download 

Save

128K views3 years ago

128,024 views • Dec 9, 2021 

Show less 

Andrew Clark, Lauren Tan, Juan Tejada & Ricky Hanlon…...more 

...more 

## 

Key moments

View all

#### [React's APIs are rooted primarily in design principles, not programming React's APIs are rooted primarily in design principles, not programming 2:06 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

#### [React's APIs are rooted primarily in design principles, not programming ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

2:06

#### [When you use React, it feels like you're directly authoring the user experience When you use React, it feels like you're directly authoring the user experience 3:50 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

#### [When you use React, it feels like you're directly authoring the user experience ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

3:50

#### [Specifying the loading state Specifying the loading state 12:27 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

#### [Specifying the loading state ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

12:27

#### [Day 1 improvements Automatic batching Day 1 improvements Automatic batching 18:36 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

#### [Day 1 improvements Automatic batching ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

18:36

#### [Concurrent rendering...? Concurrent rendering...? 19:24 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1164s)

#### [Concurrent rendering...? ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1164s)

19:24

#### [A behind-the-scenes capability in React that powers features like Suspense A behind-the-scenes capability in React that powers features like Suspense 19:40 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1180s)

#### [A behind-the-scenes capability in React that powers features like Suspense ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1180s)

19:40

#### ["Concurrent mode" Abandoned adoption strategy "Concurrent mode" Abandoned adoption strategy 21:14 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1274s)

#### ["Concurrent mode" Abandoned adoption strategy ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1274s)

21:14

#### [Concurrent features New adoption strategy Concurrent features New adoption strategy 21:38 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1298s)

#### [Concurrent features New adoption strategy ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1298s)

21:38

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# React 18 Keynote

128,024 views128K views

Dec 9, 2021

1.9K

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [React's APIs are rooted primarily in design principles, not programming React's APIs are rooted primarily in design principles, not programming 2:06 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

#### [React's APIs are rooted primarily in design principles, not programming ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

2:06

#### [When you use React, it feels like you're directly authoring the user experience When you use React, it feels like you're directly authoring the user experience 3:50 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

#### [When you use React, it feels like you're directly authoring the user experience ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

3:50

#### [Specifying the loading state Specifying the loading state 12:27 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

#### [Specifying the loading state ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

12:27

#### [Day 1 improvements Automatic batching Day 1 improvements Automatic batching 18:36 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

#### [Day 1 improvements Automatic batching ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

18:36

#### [Concurrent rendering...? Concurrent rendering...? 19:24 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1164s)

#### [Concurrent rendering...? ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1164s)

19:24

#### [A behind-the-scenes capability in React that powers features like Suspense A behind-the-scenes capability in React that powers features like Suspense 19:40 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1180s)

#### [A behind-the-scenes capability in React that powers features like Suspense ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1180s)

19:40

#### ["Concurrent mode" Abandoned adoption strategy "Concurrent mode" Abandoned adoption strategy 21:14 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1274s)

#### ["Concurrent mode" Abandoned adoption strategy ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1274s)

21:14

#### [Concurrent features New adoption strategy Concurrent features New adoption strategy 21:38 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1298s)

#### [Concurrent features New adoption strategy ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1298s)

21:38

#### [React 18 Beta React 18 Beta 22:22 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1342s)

#### [React 18 Beta ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1342s)

22:22

#### [React 18 RC React 18 RC 22:38 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1358s)

#### [React 18 RC ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1358s)

22:38

#### [Final round of public testing Final round of public testing 22:47 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1367s)

#### [Final round of public testing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1367s)

22:47

#### [Server Components Server Components 23:37 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1417s)

#### [Server Components ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1417s)

23:37

#### [Concurrent rendering was originally inspired by problems found in React Native Concurrent rendering was originally inspired by problems found in React Native 26:18 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1578s)

#### [Concurrent rendering was originally inspired by problems found in React Native ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1578s)

26:18

#### [Where is React Native today? Where is React Native today? 30:47 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1847s)

#### [Where is React Native today? ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1847s)

30:47

Sync to video time 

Sync to video time

##  Description

React 18 Keynote

1.9KLikes

128,024Views

2021Dec 9

Andrew Clark, Lauren Tan, Juan Tejada & Ricky Hanlon

Show less ...more

Andrew Clark, Lauren Tan, Juan Tejada & Ricky Hanlon…...more 

...more Show less 

## 

Key moments

View all

#### [React's APIs are rooted primarily in design principles, not programming React's APIs are rooted primarily in design principles, not programming 2:06 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

#### [React's APIs are rooted primarily in design principles, not programming ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

2:06

#### [When you use React, it feels like you're directly authoring the user experience When you use React, it feels like you're directly authoring the user experience 3:50 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

#### [When you use React, it feels like you're directly authoring the user experience ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

3:50

#### [Specifying the loading state Specifying the loading state 12:27 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

#### [Specifying the loading state ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

12:27

#### [Day 1 improvements Automatic batching Day 1 improvements Automatic batching 18:36 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

#### [Day 1 improvements Automatic batching ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

18:36

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:React 18 for app developers

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

1 / 191 / 19

Loop playlist 

Shuffle playlist 

[ ▶ [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=ytudH8je5ko)

### [ React 18 for app developers  React Conf React Conf  • • 65K views 3 years ago ](/watch?v=ytudH8je5ko)

[ ](/watch?v=lyEKhv8-3n0)

### [ React Conf Keynote (Day 1)  React Conf React Conf  • • 7.7K views 4 months ago ](/watch?v=lyEKhv8-3n0)

[ ](/watch?v=ByBPyMBTzM0)

### [ Concurrent Rendering in React - Andrew Clark and Brian Vaughn - React Conf 2018  React Conf React Conf  • • 79K views 6 years ago ](/watch?v=ByBPyMBTzM0)

[ ](/watch?v=gfU1iZnjRZM)

### [ Next.js Conf Keynote (Next.js 14)  Vercel Vercel  • • 58K views 1 year ago ](/watch?v=gfU1iZnjRZM)

[ ](/watch?v=NZoRlVi3MjQ)

### [ The Story of Concurrent React  uidotdev uidotdev  • • 161K views 2 years ago ](/watch?v=NZoRlVi3MjQ)

[ ](/watch?v=pj5N-Khihgc)

### [ Streaming Server Rendering with Suspense  React Conf React Conf  • • 48K views 3 years ago ](/watch?v=pj5N-Khihgc)

[ ](/watch?v=R0B2HsSM78s)

### [ React Unpacked: A Roadmap to React 19 | Sam Selikoff  React Conf React Conf  • • 6.3K views 4 months ago ](/watch?v=R0B2HsSM78s)

[ ](/watch?v=TQQPAU21ZUw)

### [ Data Fetching with React Server Components  Meta Open Source Meta Open Source  • • 264K views 3 years ago ](/watch?v=TQQPAU21ZUw)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

2/19

React 18 for app developers

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=FZ0cG47msEk "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=pj5N-Khihgc "Next \(SHIFT+n\)")

0:00 / 19:08•Watch full videoLive

•

•

Scroll for details

#  React 18 for app developers

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

961

Share

Download

Download 

Save

65K views3 years ago

65,767 views • Dec 9, 2021 

Show less 

Shruti Kapoor…...more 

...more 

## 

Key moments

View all

#### [Before React 18: not batched Before React 18: not batched 1:58 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

#### [Before React 18: not batched ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

1:58

#### [Automatic batching in React 18 Automatic batching in React 18 2:16 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

#### [Automatic batching in React 18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

2:16

#### [Server rendering Server rendering 3:18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

#### [Server rendering ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

3:18

#### [Suspense on the server Suspense on the server 3:54 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

#### [Suspense on the server ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

3:54

#### [New APls (concurrent features) New APls (concurrent features) 5:44 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=344s)

#### [New APls (concurrent features) ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=344s)

5:44

#### [How to upgrade to React 18 How to upgrade to React 18 7:24 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=444s)

#### [How to upgrade to React 18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=444s)

7:24

#### [Edge cases to watch out for Edge cases to watch out for 17:42 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=1062s)

#### [Edge cases to watch out for ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=1062s)

17:42

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# React 18 for app developers

65,767 views65K views

Dec 9, 2021

961

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [Before React 18: not batched Before React 18: not batched 1:58 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

#### [Before React 18: not batched ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

1:58

#### [Automatic batching in React 18 Automatic batching in React 18 2:16 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

#### [Automatic batching in React 18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

2:16

#### [Server rendering Server rendering 3:18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

#### [Server rendering ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

3:18

#### [Suspense on the server Suspense on the server 3:54 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

#### [Suspense on the server ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

3:54

#### [New APls (concurrent features) New APls (concurrent features) 5:44 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=344s)

#### [New APls (concurrent features) ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=344s)

5:44

#### [How to upgrade to React 18 How to upgrade to React 18 7:24 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=444s)

#### [How to upgrade to React 18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=444s)

7:24

#### [Edge cases to watch out for Edge cases to watch out for 17:42 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=1062s)

#### [Edge cases to watch out for ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=1062s)

17:42

Sync to video time 

Sync to video time

##  Description

React 18 for app developers

961Likes

65,767Views

2021Dec 9

Shruti Kapoor

Show less ...more

Shruti Kapoor…...more 

...more Show less 

## 

Key moments

View all

#### [Before React 18: not batched Before React 18: not batched 1:58 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

#### [Before React 18: not batched ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

1:58

#### [Automatic batching in React 18 Automatic batching in React 18 2:16 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

#### [Automatic batching in React 18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

2:16

#### [Server rendering Server rendering 3:18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

#### [Server rendering ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

3:18

#### [Suspense on the server Suspense on the server 3:54 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

#### [Suspense on the server ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

3:54

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Streaming Server Rendering with Suspense

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

2 / 192 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ ▶ [ ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=pj5N-Khihgc)

### [ Streaming Server Rendering with Suspense  React Conf React Conf  • • 48K views 3 years ago ](/watch?v=pj5N-Khihgc)

[ ](/watch?v=FZ0cG47msEk)

### [ React 18 Keynote  React Conf React Conf  • • 128K views 3 years ago ](/watch?v=FZ0cG47msEk)

[ ](/watch?v=lhVGdErZuN4)

### [ Re-introducing Relay  React Conf React Conf  • • 22K views 3 years ago ](/watch?v=lhVGdErZuN4)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=lGEMwh32soc)

### [ React without memo  React Conf React Conf  • • 140K views 3 years ago ](/watch?v=lGEMwh32soc)

[ ](/watch?v=oxDfrke8rZg)

### [ React Developer Tooling  React Conf React Conf  • • 19K views 3 years ago ](/watch?v=oxDfrke8rZg)

[ ](/watch?v=lvhPq5chokM)

### [ Forget About Memo | Lauren Tan  React Conf React Conf  • • 3.7K views 4 months ago ](/watch?v=lvhPq5chokM)
Tap to unmute

[Open App](vnd.youtube://m.youtube.com/watch?v=pj5N-Khihgc&feature=mweb_c3_open_app_11268432&itc_campaign=mweb_c3_open_app_11268432&redirect_app_store_ios=1&app=desktop)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

4/19

The first React Working Group

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=pj5N-Khihgc "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=oxDfrke8rZg "Next \(SHIFT+n\)")

0:00 / 14:41•Watch full videoLive

•

•

Scroll for details

#  The first React Working Group

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

84

Share

Download

Download 

Save

12K views3 years ago

12,473 views • Dec 9, 2021 

Show less 

Aakansha Doshi…...more 

...more 

## 

Key moments

View all

#### [Meeting between React & Redux Team Meeting between React & Redux Team 5:13 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

#### [Meeting between React & Redux Team ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

5:13

#### [Internals of Concurrent Scheduling Internals of Concurrent Scheduling 9:53 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

#### [Internals of Concurrent Scheduling ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

9:53

#### [How React keeps browser interactive during hydration? How React keeps browser interactive during hydration? 10:15 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

#### [How React keeps browser interactive during hydration? ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

10:15

#### [Prepare libraries for concurrent support. Prepare libraries for concurrent support. 10:46 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

#### [Prepare libraries for concurrent support. ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

10:46

#### [Beginner friendly Questions Beginner friendly Questions 12:32 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=752s)

#### [Beginner friendly Questions ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=752s)

12:32

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# The first React Working Group

12,473 views12K views

Dec 9, 2021

84

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [Meeting between React & Redux Team Meeting between React & Redux Team 5:13 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

#### [Meeting between React & Redux Team ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

5:13

#### [Internals of Concurrent Scheduling Internals of Concurrent Scheduling 9:53 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

#### [Internals of Concurrent Scheduling ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

9:53

#### [How React keeps browser interactive during hydration? How React keeps browser interactive during hydration? 10:15 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

#### [How React keeps browser interactive during hydration? ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

10:15

#### [Prepare libraries for concurrent support. Prepare libraries for concurrent support. 10:46 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

#### [Prepare libraries for concurrent support. ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

10:46

#### [Beginner friendly Questions Beginner friendly Questions 12:32 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=752s)

#### [Beginner friendly Questions ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=752s)

12:32

Sync to video time 

Sync to video time

##  Description

The first React Working Group

84Likes

12,473Views

2021Dec 9

Aakansha Doshi

Show less ...more

Aakansha Doshi…...more 

...more Show less 

## 

Key moments

View all

#### [Meeting between React & Redux Team Meeting between React & Redux Team 5:13 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

#### [Meeting between React & Redux Team ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

5:13

#### [Internals of Concurrent Scheduling Internals of Concurrent Scheduling 9:53 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

#### [Internals of Concurrent Scheduling ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

9:53

#### [How React keeps browser interactive during hydration? How React keeps browser interactive during hydration? 10:15 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

#### [How React keeps browser interactive during hydration? ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

10:15

#### [Prepare libraries for concurrent support. Prepare libraries for concurrent support. 10:46 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

#### [Prepare libraries for concurrent support. ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

10:46

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:React Developer Tooling

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

4 / 194 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ ▶ [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

25 videos

### [React Conf 2024](/watch?v=p6auCiVoa3c&list=PLNG_1j3cPCaapCRvpsyQ2CrNtnTtLf2jz)

[React Conf](/@ReactConfOfficial) • [Playlist](/@ReactConfOfficial)

[View full playlist](/playlist?list=PLNG_1j3cPCaapCRvpsyQ2CrNtnTtLf2jz)

[ ](/watch?v=cxbVN1F-aag)

### [ Let’s break React’s rules | Charlotte Isambert  React Conf React Conf  • • 2K views 4 months ago ](/watch?v=cxbVN1F-aag)

[ ](/watch?v=pOo7x8OiAec)

### [ And Now You Understand React Server Components | Kent C. Dodds  React Conf React Conf  • • 13K views 4 months ago ](/watch?v=pOo7x8OiAec)

[ ](/watch?v=oxDfrke8rZg)

### [ React Developer Tooling  React Conf React Conf  • • 19K views 3 years ago ](/watch?v=oxDfrke8rZg)

[ ](/watch?v=AJOGzVygGcY)

### [ What's new in React 19 | Lydia Hallie  React Conf React Conf  • • 51K views 4 months ago ](/watch?v=AJOGzVygGcY)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=iCkPaE4nxaw)

### [ React team Q&A  React Conf React Conf  • • 1.2K views 4 months ago ](/watch?v=iCkPaE4nxaw)
Tap to unmute

[Open App](intent://m.youtube.com/watch?v=oxDfrke8rZg&feature=mweb_c3_open_app_11268432&itc_campaign=mweb_c3_open_app_11268432&redirect_app_store_ios=1&app=desktop#Intent;package=com.google.android.youtube;scheme=vnd.youtube;launchFlags=268435456;end)
React without memo

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Up next

LiveUpcoming

CancelPlay Now

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

0:00 / 12:00•Watch full videoLive

•

•

Scroll for details

•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/)

Search 

Search 

[ ](/)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

7/19

React Docs Keynote

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=lGEMwh32soc "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=-7odLW_hG7s "Next \(SHIFT+n\)")

0:00 / 10:06•Watch full videoLive

•

•

Scroll for details

#  React Docs Keynote

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

221

Share

Download

Download 

Save

12K views3 years ago

12,268 views • Dec 9, 2021 

Show less 

Rachel Nabors…...more 

...more 

## 

Key moments

View all

#### [React Docs Keynote React Docs Keynote 0:35 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

#### [React Docs Keynote ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

0:35

#### [Illustrations Illustrations 6:01 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

#### [Illustrations ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

6:01

#### [Diagrams Diagrams 6:13 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

#### [Diagrams ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

6:13

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# React Docs Keynote

12,268 views12K views

Dec 9, 2021

221

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [React Docs Keynote React Docs Keynote 0:35 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

#### [React Docs Keynote ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

0:35

#### [Illustrations Illustrations 6:01 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

#### [Illustrations ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

6:01

#### [Diagrams Diagrams 6:13 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

#### [Diagrams ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

6:13

Sync to video time 

Sync to video time

##  Description

React Docs Keynote

221Likes

12,268Views

2021Dec 9

Rachel Nabors

Show less ...more

Rachel Nabors…...more 

...more Show less 

## 

Key moments

View all

#### [React Docs Keynote React Docs Keynote 0:35 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

#### [React Docs Keynote ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

0:35

#### [Illustrations Illustrations 6:01 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

#### [Illustrations ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

6:01

#### [Diagrams Diagrams 6:13 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

#### [Diagrams ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

6:13

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Things I learnt from the new React docs

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

7 / 197 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ 12:52 12:52 Now playing ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ 12:01 12:01 Now playing ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ ▶ [ 10:07 10:07 Now playing ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ 9:20 9:20 Now playing ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=lyEKhv8-3n0)

### [ React Conf Keynote (Day 1)  React Conf React Conf  • • 7.7K views 4 months ago ](/watch?v=lyEKhv8-3n0)

[ ](/watch?v=pj5N-Khihgc)

### [ Streaming Server Rendering with Suspense  React Conf React Conf  • • 48K views 3 years ago ](/watch?v=pj5N-Khihgc)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=-7odLW_hG7s)

### [ Things I learnt from the new React docs  React Conf React Conf  • • 7.6K views 3 years ago ](/watch?v=-7odLW_hG7s)

[ ](/watch?v=FZ0cG47msEk)

### [ React 18 Keynote  React Conf React Conf  • • 128K views 3 years ago ](/watch?v=FZ0cG47msEk)

[ ](/watch?v=ytudH8je5ko)

### [ React 18 for app developers  React Conf React Conf  • • 65K views 3 years ago ](/watch?v=ytudH8je5ko)

[ ](/watch?v=KMjVTYmWnW0)

### [ Webinar: Learn the basics of Nextflow Tower Cloud (June 2023)  Seqera Seqera  • • 173 views 2 weeks ago ](/watch?v=KMjVTYmWnW0)

[ ](/watch?v=Ul3y1LXxzdU)

### [ Learn React Router v6 In 45 Minutes  Web Dev Simplified Web Dev Simplified  • • 574K views 2 years ago ](/watch?v=Ul3y1LXxzdU)

[ ](/watch?v=HPoC-k7Rxwo)

### [ Goodbye, useEffect: David Khourshid  Real World React Real World React  • • 235K views 2 years ago ](/watch?v=HPoC-k7Rxwo)
[Things I learnt from the new React docs](https://m.youtube.com/watch?v=-7odLW_hG7s)

Search

Share

Copy link

Info

Shopping

Tap to unmute

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.
Tap to unmute

[Open App](vnd.youtube://m.youtube.com/watch?v=5X-WEQflCL0&feature=mweb_c3_open_app_11268432&itc_campaign=mweb_c3_open_app_11268432&redirect_app_store_ios=1&app=desktop)
Tap to unmute

[Open App](intent://m.youtube.com/watch?v=7cPWmID5XAk&feature=mweb_c3_open_app_11268432&itc_campaign=mweb_c3_open_app_11268432&redirect_app_store_ios=1&app=desktop#Intent;package=com.google.android.youtube;scheme=vnd.youtube;launchFlags=268435456;end)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

11/19

Interactive playgrounds with React

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=7cPWmID5XAk "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=lhVGdErZuN4 "Next \(SHIFT+n\)")

0:00 / 9:00•Watch full videoLive

•

•

Scroll for details

#  Interactive playgrounds with React

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

330

Share

Download

Download 

Save

14K views3 years ago

14,492 views • Dec 9, 2021 

Show less 

Delba De Oliveira…...more 

...more 

## 

Key moments

View all

#### [An interactive, learning experience with a tight feedback loop. An interactive, learning experience with a tight feedback loop. 1:37 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

#### [An interactive, learning experience with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

1:37

#### [USER INTERFACE COMPLEX TOPIC USER INTERFACE COMPLEX TOPIC 3:15 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

#### [USER INTERFACE COMPLEX TOPIC ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

3:15

#### [Interactive, learning experiences with a tight feedback loop. Interactive, learning experiences with a tight feedback loop. 3:32 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

#### [Interactive, learning experiences with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

3:32

#### [Static & Dynamic Static & Dynamic 5:47 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

#### [Static & Dynamic ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

5:47

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# Interactive playgrounds with React

14,492 views14K views

Dec 9, 2021

330

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [An interactive, learning experience with a tight feedback loop. An interactive, learning experience with a tight feedback loop. 1:37 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

#### [An interactive, learning experience with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

1:37

#### [USER INTERFACE COMPLEX TOPIC USER INTERFACE COMPLEX TOPIC 3:15 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

#### [USER INTERFACE COMPLEX TOPIC ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

3:15

#### [Interactive, learning experiences with a tight feedback loop. Interactive, learning experiences with a tight feedback loop. 3:32 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

#### [Interactive, learning experiences with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

3:32

#### [Static & Dynamic Static & Dynamic 5:47 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

#### [Static & Dynamic ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

5:47

Sync to video time 

Sync to video time

##  Description

Interactive playgrounds with React

330Likes

14,492Views

2021Dec 9

Delba De Oliveira

Show less ...more

Delba De Oliveira…...more 

...more Show less 

## 

Key moments

View all

#### [An interactive, learning experience with a tight feedback loop. An interactive, learning experience with a tight feedback loop. 1:37 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

#### [An interactive, learning experience with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

1:37

#### [USER INTERFACE COMPLEX TOPIC USER INTERFACE COMPLEX TOPIC 3:15 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

#### [USER INTERFACE COMPLEX TOPIC ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

3:15

#### [Interactive, learning experiences with a tight feedback loop. Interactive, learning experiences with a tight feedback loop. 3:32 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

#### [Interactive, learning experiences with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

3:32

#### [Static & Dynamic Static & Dynamic 5:47 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

#### [Static & Dynamic ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

5:47

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Re-introducing Relay

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

11 / 1911 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ ▶ [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=lhVGdErZuN4)

### [ Re-introducing Relay  React Conf React Conf  • • 22K views 3 years ago ](/watch?v=lhVGdErZuN4)

[ ](/watch?v=DFwLGLmLuFg)

### [ Caching in NextJs ft Delba Oliveira from Vercel  Hamed Bahram Hamed Bahram  • • 20K views 5 months ago ](/watch?v=DFwLGLmLuFg)

[ ](/watch?v=ytudH8je5ko)

### [ React 18 for app developers  React Conf React Conf  • • 65K views 3 years ago ](/watch?v=ytudH8je5ko)

[ ](/watch?v=z1F6Dv5Pw4M)

### [ Perplexity AI: A Game-Changer for Teacher Research  Teacher's Tech Teacher's Tech  • • 4.1K views 7 months ago ](/watch?v=z1F6Dv5Pw4M)

[ ](/watch?v=AJOGzVygGcY)

### [ What's new in React 19 | Lydia Hallie  React Conf React Conf  • • 51K views 4 months ago ](/watch?v=AJOGzVygGcY)

[ ](/watch?v=pOo7x8OiAec)

### [ And Now You Understand React Server Components | Kent C. Dodds  React Conf React Conf  • • 13K views 4 months ago ](/watch?v=pOo7x8OiAec)

[ ](/watch?v=sPM2WiwA1us)

### [ GSoC 2025 Complete Roadmap | Google Summer of Code  Apna College Apna College  • • 335K views 2 weeks ago ](/watch?v=sPM2WiwA1us)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

12/19

Re-introducing Relay

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=zL8cz2W0z34 "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=9L4FFrvwJwY "Next \(SHIFT+n\)")

0:00 / 19:34•Watch full videoLive

•

•

Scroll for details

#  Re-introducing Relay

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

620

Share

Download

Download 

Save

22K views3 years ago

22,710 views • Dec 9, 2021 

Show less 

Robert Balicki…...more 

...more 

## 

Key moments

View all

#### [Implicit dependency between query declaration and subcomponents Implicit dependency between query declaration and subcomponents 4:05 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

#### [Implicit dependency between query declaration and subcomponents ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

4:05

#### [Every component can be reasoned about in isolation Every component can be reasoned about in isolation 6:41 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

#### [Every component can be reasoned about in isolation ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

6:41

#### [Slow-to-calculate fields Slow-to-calculate fields 8:04 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

#### [Slow-to-calculate fields ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

8:04

#### [Components and loading states are separate concerns Components and loading states are separate concerns 10:20 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

#### [Components and loading states are separate concerns ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

10:20

#### [Pre-generated instructions Pre-generated instructions 15:12 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=912s)

#### [Pre-generated instructions ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=912s)

15:12

#### [5x on average 7x at p95 5x on average 7x at p95 17:03 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=1023s)

#### [5x on average 7x at p95 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=1023s)

17:03

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# Re-introducing Relay

22,710 views22K views

Dec 9, 2021

620

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [Implicit dependency between query declaration and subcomponents Implicit dependency between query declaration and subcomponents 4:05 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

#### [Implicit dependency between query declaration and subcomponents ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

4:05

#### [Every component can be reasoned about in isolation Every component can be reasoned about in isolation 6:41 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

#### [Every component can be reasoned about in isolation ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

6:41

#### [Slow-to-calculate fields Slow-to-calculate fields 8:04 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

#### [Slow-to-calculate fields ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

8:04

#### [Components and loading states are separate concerns Components and loading states are separate concerns 10:20 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

#### [Components and loading states are separate concerns ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

10:20

#### [Pre-generated instructions Pre-generated instructions 15:12 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=912s)

#### [Pre-generated instructions ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=912s)

15:12

#### [5x on average 7x at p95 5x on average 7x at p95 17:03 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=1023s)

#### [5x on average 7x at p95 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=1023s)

17:03

Sync to video time 

Sync to video time

##  Description

Re-introducing Relay

620Likes

22,710Views

2021Dec 9

Robert Balicki

Show less ...more

Robert Balicki…...more 

...more Show less 

## 

Key moments

View all

#### [Implicit dependency between query declaration and subcomponents Implicit dependency between query declaration and subcomponents 4:05 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

#### [Implicit dependency between query declaration and subcomponents ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

4:05

#### [Every component can be reasoned about in isolation Every component can be reasoned about in isolation 6:41 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

#### [Every component can be reasoned about in isolation ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

6:41

#### [Slow-to-calculate fields Slow-to-calculate fields 8:04 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

#### [Slow-to-calculate fields ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

8:04

#### [Components and loading states are separate concerns Components and loading states are separate concerns 10:20 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

#### [Components and loading states are separate concerns ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

10:20

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:React Native Desktop

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

12 / 1912 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ 12:52 12:52 Now playing ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ 12:01 12:01 Now playing ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ 10:07 10:07 Now playing ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ 9:20 9:20 Now playing ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ ▶ [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=FZ0cG47msEk)

### [ React 18 Keynote  React Conf React Conf  • • 128K views 3 years ago ](/watch?v=FZ0cG47msEk)

[ ](/watch?v=Tl0S7QkxFE4)

### [ Data Fetching With Suspense In Relay | Joe Savona  React Conf React Conf  • • 30K views 5 years ago ](/watch?v=Tl0S7QkxFE4)

[ ](/watch?v=xnvzz7Z658I)

### [ Deep dive on Relay GraphQL client for React  Hasura Hasura  • • 14K views 4 years ago ](/watch?v=xnvzz7Z658I)

[ ](/watch?v=lyEKhv8-3n0)

### [ React Conf Keynote (Day 1)  React Conf React Conf  • • 7.7K views 4 months ago ](/watch?v=lyEKhv8-3n0)

[ ](/watch?v=ytudH8je5ko)

### [ React 18 for app developers  React Conf React Conf  • • 65K views 3 years ago ](/watch?v=ytudH8je5ko)

[ ](/watch?v=WxPtYJRjLL0)

### [ F8 2019: Building the New Facebook.com with React, GraphQL and Relay  Meta Developers Meta Developers  • • 31K views 5 years ago ](/watch?v=WxPtYJRjLL0)

[ ](/watch?v=9L4FFrvwJwY)

### [ React Native Desktop  React Conf React Conf  • • 19K views 3 years ago ](/watch?v=9L4FFrvwJwY)

[ ](/watch?v=NdWTDZ7dg-8)

### [ Design Representation  Hardware Modeling Using Verilog Hardware Modeling Using Verilog  • • 105K views 7 years ago ](/watch?v=NdWTDZ7dg-8)

[ ](/watch?v=If1Lw4pLLEo)

### [ Spring Framework Tutorial | Full Course  Telusko Telusko  • • 2.2M views 5 years ago ](/watch?v=If1Lw4pLLEo)

[ ](/watch?v=1_dLaSjzOMY)

### [ Write Clean Code with React Suspense | React Error Boundaries Explained  Dave Gray Dave Gray  • • 28K views 1 year ago ](/watch?v=1_dLaSjzOMY)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[Sign in](https://accounts.google.com/ServiceLogin?service=youtube&uilel=3&passive=true&continue=https%3A%2F%2Fwww.youtube.com%2Fsignin%3Faction_handle_signin%3Dtrue%26app%3Ddesktop%26hl%3Den%26next%3Dhttps%253A%252F%252Fwww.youtube.com%252Fwatch%253Fv%253D9L4FFrvwJwY%2526list%253DPLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa%2526index%253D13&hl=en&ec=65620)

[ ](/ "YouTube Home") IN 

13/19

React Native Desktop

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=lhVGdErZuN4 "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=NLj73vrc2I8 "Next \(SHIFT+n\)")

0:00 / 15:32•Watch full videoLive

•

•

Scroll for details

#  React Native Desktop

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

306

Share

Download

Download 

Save

19K views3 years ago

19,398 views • Dec 9, 2021 

Show less 

Eric Rozell & Steven Moyes…...more 

...more 

## 

Key moments

View all

#### [React Native Desktop React Native Desktop 0:36 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

#### [React Native Desktop ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

0:36

#### [Miniview Miniview 3:46 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

#### [Miniview ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

3:46

#### [Participant Reordering Participant Reordering 4:14 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

#### [Participant Reordering ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

4:14

#### [How and Why Is Microsoft Using React Native How and Why Is Microsoft Using React Native 7:50 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

#### [How and Why Is Microsoft Using React Native ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

7:50

#### [Xbox Apps Xbox Apps 8:43 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=523s)

#### [Xbox Apps ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=523s)

8:43

#### [Powerapps Player Powerapps Player 9:21 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=561s)

#### [Powerapps Player ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=561s)

9:21

#### [Demo Demo 10:52 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=652s)

#### [Demo ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=652s)

10:52

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# React Native Desktop

19,398 views19K views

Dec 9, 2021

306

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [React Native Desktop React Native Desktop 0:36 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

#### [React Native Desktop ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

0:36

#### [Miniview Miniview 3:46 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

#### [Miniview ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

3:46

#### [Participant Reordering Participant Reordering 4:14 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

#### [Participant Reordering ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

4:14

#### [How and Why Is Microsoft Using React Native How and Why Is Microsoft Using React Native 7:50 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

#### [How and Why Is Microsoft Using React Native ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

7:50

#### [Xbox Apps Xbox Apps 8:43 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=523s)

#### [Xbox Apps ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=523s)

8:43

#### [Powerapps Player Powerapps Player 9:21 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=561s)

#### [Powerapps Player ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=561s)

9:21

#### [Demo Demo 10:52 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=652s)

#### [Demo ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=652s)

10:52

Sync to video time 

Sync to video time

##  Description

React Native Desktop

306Likes

19,398Views

2021Dec 9

Eric Rozell & Steven Moyes

Show less ...more

Eric Rozell & Steven Moyes…...more 

...more Show less 

## 

Key moments

View all

#### [React Native Desktop React Native Desktop 0:36 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

#### [React Native Desktop ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

0:36

#### [Miniview Miniview 3:46 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

#### [Miniview ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

3:46

#### [Participant Reordering Participant Reordering 4:14 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

#### [Participant Reordering ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

4:14

#### [How and Why Is Microsoft Using React Native How and Why Is Microsoft Using React Native 7:50 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

#### [How and Why Is Microsoft Using React Native ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

7:50

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:On-device Machine Learning for React Native

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

13 / 1913 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ 12:52 12:52 Now playing ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ 12:01 12:01 Now playing ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ 10:07 10:07 Now playing ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ 9:20 9:20 Now playing ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ 10:44 10:44 Now playing ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ 11:09 11:09 Now playing ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ 9:01 9:01 Now playing ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ 19:35 19:35 Now playing ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ ▶ [ 15:33 15:33 Now playing ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ 14:01 14:01 Now playing ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ 19:23 19:23 Now playing ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ 8:32 8:32 Now playing ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ 10:33 10:33 Now playing ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ 10:15 10:15 Now playing ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ 9:38 9:38 Now playing ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

24:40

### [From Gaming to Productivity: how Microsoft is using React Native across a portfolio of experiences](/watch?v=EgpHCLCwebU)

[Callstack Engineers](/@CallstackEngineers)

2.8K views • 1 year ago

17:19

### [ELECTRON: why people HATE it, why devs USE it](/watch?v=G1K0Mb-rLBU)

[The Linux Experiment](/@TheLinuxEXP)

195K views • 2 years ago

22:54

### [What’s next for React Native for Desktop? — Saad Najmi, Steven Moyes | React Universe Conf 2024](/watch?v=1leGdmEse9Y)

[Callstack Engineers](/@CallstackEngineers)

292 views • 2 months ago

19:35

### [Re-introducing Relay](/watch?v=lhVGdErZuN4)

[React Conf](/@ReactConfOfficial)

22K views • 3 years ago

40:20

### [MS Build SK119 React Native: Build cross platform apps that target Windows, Mac, and more!](/watch?v=QMFbrHZnvvw)

[Microsoft 365 Developer](/@Microsoft365Developer)

24K views • 4 years ago

59:26

### [Is your business ready for AI? We can help!](/watch?v=wd4jgaHaZh0)

[The I.T. Company Ltd.](/@thei.t.companyltd.5368)

25 views • 7 days ago

8:15

### [Australia v India 2024-25 | Third Test | Day Five](/watch?v=pGvp5Q-1Yag)

[cricket.com.au](/@cricketcomau)

2.5M views • 4 hours ago

New

18:12

### [Gabriel Donadel – Launching Desktop Apps to Orbit with React Native | App.js Conf 2024](/watch?v=K7yC3JKfWYU)

[Software Mansion](/@SoftwareMansion)

2.7K views • 6 months ago

1:11:48

### [Create a Desktop App With JavaScript & Electron](/watch?v=ML743nrkMHw)

[Traversy Media](/@TraversyMedia)

382K views • 2 years ago
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

14/19

On-device Machine Learning for React Native

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Up next

LiveUpcoming

CancelPlay Now

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=9L4FFrvwJwY "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=oPfSC5bQPR8 "Next \(SHIFT+n\)")

0:00 / 14:00•Watch full videoLive

•

•

Scroll for details

#  On-device Machine Learning for React Native

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

195

Share

Download

Download 

Save

12K views3 years ago

12,132 views • Dec 9, 2021 

Show less 

Roman Rädle…...more 

...more 

## 

Key moments

View all

#### [Image Classification Model Image Classification Model 3:57 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

#### [Image Classification Model ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

3:57

#### [Image Classification Image Classification 4:12 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

#### [Image Classification ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

4:12

#### [Type Safety Type Safety 7:33 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

#### [Type Safety ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

7:33

#### [React Hooks React Hooks 8:54 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

#### [React Hooks ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

8:54

#### [Camera Component Camera Component 11:52 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=712s)

#### [Camera Component ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=712s)

11:52

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# On-device Machine Learning for React Native

12,132 views12K views

Dec 9, 2021

195

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [Image Classification Model Image Classification Model 3:57 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

#### [Image Classification Model ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

3:57

#### [Image Classification Image Classification 4:12 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

#### [Image Classification ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

4:12

#### [Type Safety Type Safety 7:33 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

#### [Type Safety ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

7:33

#### [React Hooks React Hooks 8:54 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

#### [React Hooks ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

8:54

#### [Camera Component Camera Component 11:52 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=712s)

#### [Camera Component ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=712s)

11:52

Sync to video time 

Sync to video time

##  Description

On-device Machine Learning for React Native

195Likes

12,132Views

2021Dec 9

Roman Rädle

Show less ...more

Roman Rädle…...more 

...more Show less 

## 

Key moments

View all

#### [Image Classification Model Image Classification Model 3:57 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

#### [Image Classification Model ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

3:57

#### [Image Classification Image Classification 4:12 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

#### [Image Classification ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

4:12

#### [Type Safety Type Safety 7:33 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

#### [Type Safety ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

7:33

#### [React Hooks React Hooks 8:54 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

#### [React Hooks ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

8:54

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:React 18 for External Store Libraries

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

14 / 1914 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ 12:52 12:52 Now playing ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ 12:01 12:01 Now playing ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ 10:07 10:07 Now playing ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ 9:20 9:20 Now playing ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ 10:44 10:44 Now playing ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ ▶ [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=0-S5a0eXPoc)

### [ React Native Tutorial for Beginners - Build a React Native App  Programming with Mosh Programming with Mosh  • • 3.2M views 4 years ago ](/watch?v=0-S5a0eXPoc)

[ ](/watch?v=oPfSC5bQPR8)

### [ React 18 for External Store Libraries  React Conf React Conf  • • 19K views 3 years ago ](/watch?v=oPfSC5bQPR8)

[ ](/watch?v=2LqrfEzuIMk)

### [ How to Deploy Machine Learning Model using Flask (Iris Dataset) | Python  Hackers Realm Hackers Realm  • • 20K views 2 years ago ](/watch?v=2LqrfEzuIMk)

[ ](/watch?v=Ij5MoUnLQ0E)

### [ ONNX and ONNX Runtime  Microsoft Research Microsoft Research  • • 26K views 5 years ago ](/watch?v=Ij5MoUnLQ0E)

[ ](/watch?v=tFnNBhr0WTw)

### [ Build your own AI Shopping App with React Native and Supabase Vector  Simon Grimm Simon Grimm  • • 7.7K views 1 year ago ](/watch?v=tFnNBhr0WTw)

[ ](/watch?v=lhVGdErZuN4)

### [ Re-introducing Relay  React Conf React Conf  • • 22K views 3 years ago ](/watch?v=lhVGdErZuN4)

[ ](/watch?v=S--SD4QbGps)

### [ Build a Machine Learning App From Scratch with Flask & Docker  Patrick Loeber Patrick Loeber  • • 55K views 2 years ago ](/watch?v=S--SD4QbGps)

[ ](/watch?v=-ovliZG617g)

### [ Redux Toolkit - Complete Tutorial ( with Project ) 🔥🔥  RoadsideCoder RoadsideCoder  • • 23K views 3 months ago ](/watch?v=-ovliZG617g)

[ ](/watch?v=2FeymQoKvrk)

### [ Build and Deploy Your Own ChatGPT AI App in JavaScript | OpenAI, Machine Learning  JavaScript Mastery JavaScript Mastery  • • 861K views 1 year ago ](/watch?v=2FeymQoKvrk)

[ ](/watch?v=pC7mCEHiYQw)

### [ How to deploy your custom tensorflow model to react native  Oh Yicong Oh Yicong  • • 25K views 4 years ago ](/watch?v=pC7mCEHiYQw)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

15/19

React 18 for External Store Libraries

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=NLj73vrc2I8 "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=dcm8fjBfro8 "Next \(SHIFT+n\)")

0:00 / 19:22•Watch full videoLive

•

•

Scroll for details

#  React 18 for External Store Libraries

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

377

Share

Download

Download 

Save

19K views3 years ago

19,815 views • Dec 9, 2021 

Show less 

Daishi Kato…...more 

...more 

## 

Key moments

View all

#### [About the Speaker About the Speaker 0:35 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

#### [About the Speaker ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

0:35

#### [Concurrent Rendering and Libraries Concurrent Rendering and Libraries 2:10 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

#### [Concurrent Rendering and Libraries ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

2:10

#### [Tearing with Concurrent Rendering Tearing with Concurrent Rendering 3:04 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

#### [Tearing with Concurrent Rendering ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

3:04

#### [What are External Stores? What are External Stores? 3:34 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

#### [What are External Stores? ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

3:34

#### [Package: use-sync-external-store Package: use-sync-external-store 6:52 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=412s)

#### [Package: use-sync-external-store ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=412s)

6:52

#### [What Are External Stores Again? What Are External Stores Again? 16:30 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=990s)

#### [What Are External Stores Again? ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=990s)

16:30

#### [Get Ready for React 18 Get Ready for React 18 18:33 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=1113s)

#### [Get Ready for React 18 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=1113s)

18:33

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# React 18 for External Store Libraries

19,815 views19K views

Dec 9, 2021

377

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [About the Speaker About the Speaker 0:35 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

#### [About the Speaker ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

0:35

#### [Concurrent Rendering and Libraries Concurrent Rendering and Libraries 2:10 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

#### [Concurrent Rendering and Libraries ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

2:10

#### [Tearing with Concurrent Rendering Tearing with Concurrent Rendering 3:04 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

#### [Tearing with Concurrent Rendering ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

3:04

#### [What are External Stores? What are External Stores? 3:34 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

#### [What are External Stores? ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

3:34

#### [Package: use-sync-external-store Package: use-sync-external-store 6:52 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=412s)

#### [Package: use-sync-external-store ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=412s)

6:52

#### [What Are External Stores Again? What Are External Stores Again? 16:30 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=990s)

#### [What Are External Stores Again? ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=990s)

16:30

#### [Get Ready for React 18 Get Ready for React 18 18:33 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=1113s)

#### [Get Ready for React 18 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=1113s)

18:33

Sync to video time 

Sync to video time

##  Description

React 18 for External Store Libraries

377Likes

19,815Views

2021Dec 9

Daishi Kato

Show less ...more

Daishi Kato…...more 

...more Show less 

## 

Key moments

View all

#### [About the Speaker About the Speaker 0:35 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

#### [About the Speaker ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

0:35

#### [Concurrent Rendering and Libraries Concurrent Rendering and Libraries 2:10 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

#### [Concurrent Rendering and Libraries ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

2:10

#### [Tearing with Concurrent Rendering Tearing with Concurrent Rendering 3:04 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

#### [Tearing with Concurrent Rendering ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

3:04

#### [What are External Stores? What are External Stores? 3:34 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

#### [What are External Stores? ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

3:34

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Building accessible components with React 18

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

15 / 1915 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ ▶ [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=ytudH8je5ko)

### [ React 18 for app developers  React Conf React Conf  • • 65K views 3 years ago ](/watch?v=ytudH8je5ko)

[ ](/watch?v=FZ0cG47msEk)

### [ React 18 Keynote  React Conf React Conf  • • 128K views 3 years ago ](/watch?v=FZ0cG47msEk)

[ ](/watch?v=pj5N-Khihgc)

### [ Streaming Server Rendering with Suspense  React Conf React Conf  • • 48K views 3 years ago ](/watch?v=pj5N-Khihgc)

[ ](/watch?v=LOH1l-MP_9k)

### [ ALL React Hooks Explained in 12 Minutes  Code Bootcamp Code Bootcamp  • • 169K views 8 months ago ](/watch?v=LOH1l-MP_9k)

[ ](/watch?v=zL8cz2W0z34)

### [ Interactive playgrounds with React  React Conf React Conf  • • 14K views 3 years ago ](/watch?v=zL8cz2W0z34)

[ ](/watch?v=r8Dg0KVnfMA)

### [ Learn React Query In 50 Minutes  Web Dev Simplified Web Dev Simplified  • • 315K views 1 year ago ](/watch?v=r8Dg0KVnfMA)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

16/19

Building accessible components with React 18

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Up next

LiveUpcoming

CancelPlay Now

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=oPfSC5bQPR8 "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=S4a0QlsH0pU "Next \(SHIFT+n\)")

0:00 / 8:31•Watch full videoLive

•

Intro

•

Scroll for details

#  Building accessible components with React 18

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

480

Share

Download

Download 

Save

14K views3 years ago

14,977 views • Dec 9, 2021 

Show less 

Diego Haz…...more 

...more 

## 

Chapters

View all

#### [Intro Intro 0:00 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

#### [Intro ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

0:00

#### [Overview Overview 0:27 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

#### [Overview ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

0:27

#### [Problems Problems 0:56 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

#### [Problems ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

0:56

#### [NVDA NVDA 2:15 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

#### [NVDA ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

2:15

#### [Arcade Arcade 2:43 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=163s)

#### [Arcade ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=163s)

2:43

#### [Combo Box Combo Box 4:20 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=260s)

#### [Combo Box ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=260s)

4:20

#### [Dynamic Component Dynamic Component 5:12 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=312s)

#### [Dynamic Component ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=312s)

5:12

#### [Improvements Improvements 6:21 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=381s)

#### [Improvements ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=381s)

6:21

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# Building accessible components with React 18

14,977 views14K views

Dec 9, 2021

480

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Chapters

These chapters are auto-generated #### [Intro Intro 0:00 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

#### [Intro ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

0:00

#### [Overview Overview 0:27 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

#### [Overview ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

0:27

#### [Problems Problems 0:56 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

#### [Problems ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

0:56

#### [NVDA NVDA 2:15 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

#### [NVDA ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

2:15

#### [Arcade Arcade 2:43 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=163s)

#### [Arcade ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=163s)

2:43

#### [Combo Box Combo Box 4:20 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=260s)

#### [Combo Box ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=260s)

4:20

#### [Dynamic Component Dynamic Component 5:12 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=312s)

#### [Dynamic Component ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=312s)

5:12

#### [Improvements Improvements 6:21 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=381s)

#### [Improvements ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=381s)

6:21

Sync to video time 

Sync to video time

##  Description

Building accessible components with React 18

480Likes

14,977Views

2021Dec 9

Diego Haz

Show less ...more

Diego Haz…...more 

...more Show less 

## 

Chapters

View all

#### [Intro Intro 0:00 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

#### [Intro ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

0:00

#### [Overview Overview 0:27 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

#### [Overview ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

0:27

#### [Problems Problems 0:56 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

#### [Problems ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

0:56

#### [NVDA NVDA 2:15 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

#### [NVDA ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

2:15

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Accessible Japanese Form Components with React

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

16 / 1916 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ ▶ [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=lhVGdErZuN4)

### [ Re-introducing Relay  React Conf React Conf  • • 22K views 3 years ago ](/watch?v=lhVGdErZuN4)

[ ](/watch?v=lGEMwh32soc)

### [ React without memo  React Conf React Conf  • • 140K views 3 years ago ](/watch?v=lGEMwh32soc)

[ ](/watch?v=QuLfCUh-iwI)

### [ 3 React Mistakes, 1 App Killer  Jack Herrington Jack Herrington  • • 116K views 1 year ago ](/watch?v=QuLfCUh-iwI)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=eXRlVpw1SIQ)

### [ Creating High-Quality React Components: Best Practices for Reusability  Josh tried coding Josh tried coding  • • 112K views 1 year ago ](/watch?v=eXRlVpw1SIQ)

[ ](/watch?v=lTPh6NGLAmk)

### [ Why You Should Use React Aria Components...  Jolly Coding Jolly Coding  • • 16K views 6 months ago ](/watch?v=lTPh6NGLAmk)

[ ](/watch?v=lkFeFzhOEoc)

### [ React accessibility essentials for developers  LogRocket LogRocket  • • 4.5K views 2 years ago ](/watch?v=lkFeFzhOEoc)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

17/19

Accessible Japanese Form Components with React

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=dcm8fjBfro8 "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=b3l4WxipFsE "Next \(SHIFT+n\)")

0:00 / 10:32•Watch full videoLive

•

Introduction

•

Scroll for details

#  Accessible Japanese Form Components with React

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

68

Share

Download

Download 

Save

4.4K views3 years ago

4,485 views • Dec 9, 2021 

Show less 

Tafu Nakazaki…...more 

...more 

## 

Chapters

View all

#### [Introduction Introduction 0:00 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

#### [Introduction ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

0:00

#### [Problematic administrative procedures Problematic administrative procedures 0:47 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

#### [Problematic administrative procedures ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

0:47

#### [Challenges in human resource and management Challenges in human resource and management 2:29 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

#### [Challenges in human resource and management ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

2:29

#### [Challenges complexity Challenges complexity 4:27 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

#### [Challenges complexity ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

4:27

#### [Challenges user diversity Challenges user diversity 5:46 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=346s)

#### [Challenges user diversity ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=346s)

5:46

#### [Conclusion Conclusion 10:17 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=617s)

#### [Conclusion ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=617s)

10:17

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# Accessible Japanese Form Components with React

4,485 views4.4K views

Dec 9, 2021

68

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Chapters

These chapters are auto-generated #### [Introduction Introduction 0:00 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

#### [Introduction ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

0:00

#### [Problematic administrative procedures Problematic administrative procedures 0:47 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

#### [Problematic administrative procedures ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

0:47

#### [Challenges in human resource and management Challenges in human resource and management 2:29 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

#### [Challenges in human resource and management ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

2:29

#### [Challenges complexity Challenges complexity 4:27 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

#### [Challenges complexity ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

4:27

#### [Challenges user diversity Challenges user diversity 5:46 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=346s)

#### [Challenges user diversity ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=346s)

5:46

#### [Conclusion Conclusion 10:17 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=617s)

#### [Conclusion ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=617s)

10:17

Sync to video time 

Sync to video time

##  Description

Accessible Japanese Form Components with React

68Likes

4,485Views

2021Dec 9

Tafu Nakazaki

Show less ...more

Tafu Nakazaki…...more 

...more Show less 

## 

Chapters

View all

#### [Introduction Introduction 0:00 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

#### [Introduction ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

0:00

#### [Problematic administrative procedures Problematic administrative procedures 0:47 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

#### [Problematic administrative procedures ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

0:47

#### [Challenges in human resource and management Challenges in human resource and management 2:29 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

#### [Challenges in human resource and management ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

2:29

#### [Challenges complexity Challenges complexity 4:27 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

#### [Challenges complexity ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

4:27

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:UI Tools for artists

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

17 / 1917 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ ▶ [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=lkFeFzhOEoc)

### [ React accessibility essentials for developers  LogRocket LogRocket  • • 4.5K views 2 years ago ](/watch?v=lkFeFzhOEoc)

[ ](/watch?v=lyEKhv8-3n0)

### [ React Conf Keynote (Day 1)  React Conf React Conf  • • 7.7K views 4 months ago ](/watch?v=lyEKhv8-3n0)

[ ](/watch?v=z8xUCzToff8)

### [ Accessibility Fundamentals with Rob Dodson  SFHTML5 SFHTML5  • • 104K views 6 years ago ](/watch?v=z8xUCzToff8)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=b3l4WxipFsE)

### [ UI Tools for artists  React Conf React Conf  • • 5.7K views 3 years ago ](/watch?v=b3l4WxipFsE)

[ ](/watch?v=AJOGzVygGcY)

### [ What's new in React 19 | Lydia Hallie  React Conf React Conf  • • 51K views 4 months ago ](/watch?v=AJOGzVygGcY)

[ ](/watch?v=pGvp5Q-1Yag)

### [ Australia v India 2024-25 | Third Test | Day Five  cricket.com.au cricket.com.au  • • 2.5M views 4 hours ago New ](/watch?v=pGvp5Q-1Yag)

[ ](/watch?v=e2nkq3h1P68)

### [ Learn Accessibility - Full a11y Tutorial  freeCodeCamp.org freeCodeCamp.org  • • 76K views 10 months ago ](/watch?v=e2nkq3h1P68)

[ ](/watch?v=lTPh6NGLAmk)

### [ Why You Should Use React Aria Components...  Jolly Coding Jolly Coding  • • 16K views 6 months ago ](/watch?v=lTPh6NGLAmk)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

18/19

UI Tools for artists

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=S4a0QlsH0pU "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=HS6vIYkSNks "Next \(SHIFT+n\)")

0:00 / 10:14•Watch full videoLive

•

•

Scroll for details

#  UI Tools for artists

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

83

Share

Download

Download 

Save

5.7K views3 years ago

5,718 views • Dec 9, 2021 

Show less 

Lyle Troxell…...more 

...more 

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# UI Tools for artists

5,718 views5.7K views

Dec 9, 2021

83

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Description

UI Tools for artists

83Likes

5,718Views

2021Dec 9

Lyle Troxell

Show less ...more

Lyle Troxell…...more 

...more Show less 

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Hydrogen + React 18

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

18 / 1918 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ 12:52 12:52 Now playing ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ 12:01 12:01 Now playing ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ 10:07 10:07 Now playing ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ 9:20 9:20 Now playing ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ 10:44 10:44 Now playing ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ ▶ [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=lhVGdErZuN4)

### [ Re-introducing Relay  React Conf React Conf  • • 22K views 3 years ago ](/watch?v=lhVGdErZuN4)

[ ](/watch?v=pj5N-Khihgc)

### [ Streaming Server Rendering with Suspense  React Conf React Conf  • • 48K views 3 years ago ](/watch?v=pj5N-Khihgc)

[ ](/watch?v=5X-WEQflCL0)

### [ Learning in the Browser  React Conf React Conf  • • 5.7K views 3 years ago ](/watch?v=5X-WEQflCL0)

[ ](/watch?v=CS2hxS9MdSo)

### [ Manipur: Police Seize Starlink Device Made by Elon Musk’s SpaceX | Vantage with Palki Sharma  Firstpost Firstpost  • • 263K views 18 hours ago New ](/watch?v=CS2hxS9MdSo)

[ ](/watch?v=YLo6g58vUm0)

### [ Welcome to design systems - Lesson 1 : Introduction to design systems  Figma Figma  • • 247K views 1 year ago ](/watch?v=YLo6g58vUm0)

[ ](/watch?v=pGvp5Q-1Yag)

### [ Australia v India 2024-25 | Third Test | Day Five  cricket.com.au cricket.com.au  • • 2.5M views 4 hours ago New ](/watch?v=pGvp5Q-1Yag)

[ ](/watch?v=oJA1CXmVtgE)

### [ Nirmala Sitharaman VS Priyanka Gandhi🔥 : War Of Words Between Them | Lok Sabha | News Buzz  News Buzz News Buzz  • • 288K views 21 hours ago New ](/watch?v=oJA1CXmVtgE)

[ ](/watch?v=n2waUD7hXbM)

### [ ஒரே நாடு ஒரே தேர்தல்.. ``நேற்றே முடிவு தெரிந்துவிட்டது'' - பாஜகவுக்கு காத்திருந்த அதிர்ச்சி  Thanthi TV Thanthi TV  • • 33K views 6 hours ago New ](/watch?v=n2waUD7hXbM)

[ ](/watch?v=Ivwn0zN8y-4)

### [ 3D Art for 2D Artists: How to stop worrying, and begin to play in the 3rd dimension  Cave Darr Cave Darr  • • 331 views 2 weeks ago ](/watch?v=Ivwn0zN8y-4)
Tap to unmute
[Skip to main content](#__docusaurus_skipToContent_fallback)

The New Architecture has arrived - [learn more](/blog/2024/10/23/the-new-architecture-is-here)

[**React Native**](/)

[Development](#)

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



[Contributing](/contributing/overview)[Community](/community/overview)[Showcase](/showcase)[Blog](/blog)[](https://github.com/facebook/react-native)

Search

[Star](https://github.com/facebook/react-native)

# React Native

## Learn once, write anywhere.

[Get Started](/docs/environment-setup)[Learn the Basics](/docs/getting-started)

# Create native apps for Android, iOS, and more using React

### React Native brings the best parts of developing with React to native development. It's a best-in-class JavaScript library for building user interfaces.

index.js

```
function HomeScreen() {  return (   <View>    <Text> Hello World 👋 🌍!</Text>  </View>  ); }
```


**Written in JavaScript, rendered with native code.** React primitives render to native platform UI, meaning your app uses the same native platform APIs other apps do.

# Native development for everyone

### React Native lets you create truly native apps and doesn't compromise your users' experiences. It provides a core set of platform agnostic native components like `View`, `Text`, and `Image` that map directly to the platform's native UI building blocks.

# Get a head start with a framework

### React Native brings the React programming paradigm to platforms like Android and iOS. It doesn’t prescribe how to do routing, or how to access each of the numerous platform APIs. To build a new app with React Native, we recommend a framework like [Expo](https://expo.dev).

#### File-based routing

Create stack, modal, drawer, and tab screens with minimal boilerplate using your filesystem.

#### Use any library, SDK, or native code

Generate native changes or write your own native code. Use over 50 modules to create your app.

#### Developer tools

Get started quickly with Expo Go, then continue with expo-dev-client: a module that adds Expo’s tools to apps that require native changes.

# Watch and learn

### Watch talks by the React team and learn how to get the most out of React Native. Find the latest on .

#### FB 2019: Mobile innovation with React Native

45:29

#### Why React Native?

1:42

# Meta supported. Community driven.

Meta released React Native in 2015 and has been maintaining it ever since.

In 2018, React Native had the [2nd highest](https://octoverse.github.com/2018/projects#repositories) number of contributors for any repository in GitHub. Today, React Native is supported by contributions from individuals and companies around the world including [Callstack](https://callstack.com/), [Expo](https://expo.io/), [Infinite Red](https://infinite.red/), [Microsoft](https://www.microsoft.com/) and [Software Mansion](https://swmansion.com/).

Our community is always shipping exciting new projects and exploring platforms beyond Android and iOS with repos like [React Native Windows](https://github.com/microsoft/react-native-windows#readme), [React Native macOS](https://github.com/microsoft/react-native-macos#readme) and [React Native Web](https://github.com/necolas/react-native-web#readme).

React Native is being used in thousands of apps, but it's likely you've already used it in one of these apps:

  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://blog.coinbase.com/optimizing-react-native-7e7bf7ac3a34)
  * [](https://formidable.com/work/puma-scaling-across-the-globe/)
  * [](https://github.com/wordpress-mobile/gutenberg-mobile)
  * [](https://engineering.tableau.com/react-native-at-tableau-3-years-in-89d43c38354c)
  * [](https://blog.flipkart.tech/the-journey-of-react-native-flipkart-47dcd0c3d1c6)
  * [](https://medium.com/mercari-engineering/why-we-decided-to-rewrite-our-ios-android-apps-from-scratch-in-react-native-9f1737558299)
  * [](https://discord.com/blog/how-discord-achieves-native-ios-performance-with-react-native)
  * [](https://www.techatbloomberg.com/blog/bloomberg-used-react-native-develop-new-consumer-app/)
  * [](https://medium.com/@Pinterest_Engineering/supporting-react-native-at-pinterest-f8c2233f90e6)
  * [](https://www.tesla.com/blog)
  * [](https://medium.com/walmartlabs/react-native-at-walmartlabs-cdd140589560#.ueonqqloc)
  * [](https://www.tencent.com/en-us/business.html)
  * [](https://github.com/mattermost/mattermost-mobile)



and [many more](/showcase).

# Welcome to the React Native community

[Get Started](/docs/environment-setup)

Develop

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



Participate

  * [Showcase](/showcase)
  * [Contributing](/contributing/overview)
  * [Community](/community/overview)
  * [Directory](https://reactnative.directory/)
  * [Stack Overflow](https://stackoverflow.com/questions/tagged/react-native)



Find us

  * [Blog](/blog)
  * [GitHub](https://github.com/facebook/react-native)



Explore More

  * [ReactJS](https://react.dev/)
  * [Privacy Policy](https://opensource.fb.com/legal/privacy/)
  * [Terms of Service](https://opensource.fb.com/legal/terms/)



[](https://opensource.fb.com/)

Copyright © 2024 Meta Platforms, Inc.
[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Fexpo%2Fexpo)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Fexpo%2Fexpo)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=expo%2Fexpo) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ expo ](/expo) / **[expo](/expo/expo) ** Public

  * [ Notifications ](/login?return_to=%2Fexpo%2Fexpo) You must be signed in to change notification settings
  * [ Fork 5.7k ](/login?return_to=%2Fexpo%2Fexpo)
  * [ Star  35.5k ](/login?return_to=%2Fexpo%2Fexpo)




An open-source framework for making universal native apps with React. Expo runs on Android, iOS, and the web. 

[docs.expo.dev](https://docs.expo.dev "https://docs.expo.dev")

### License

[ MIT license ](/expo/expo/blob/main/LICENSE)

[ 35.5k stars ](/expo/expo/stargazers) [ 5.7k forks ](/expo/expo/forks) [ Branches ](/expo/expo/branches) [ Tags ](/expo/expo/tags) [ Activity ](/expo/expo/activity)

[ Star  ](/login?return_to=%2Fexpo%2Fexpo)

[ Notifications ](/login?return_to=%2Fexpo%2Fexpo) You must be signed in to change notification settings

  * [ Code ](/expo/expo)
  * [ Issues 446 ](/expo/expo/issues)
  * [ Pull requests 225 ](/expo/expo/pulls)
  * [ Discussions ](/expo/expo/discussions)
  * [ Actions ](/expo/expo/actions)
  * [ Projects 0 ](/expo/expo/projects)
  * [ Wiki ](/expo/expo/wiki)
  * [ Security ](/expo/expo/security)
  * [ Insights ](/expo/expo/pulse)



Additional navigation options

  * [ Code  ](/expo/expo)
  * [ Issues  ](/expo/expo/issues)
  * [ Pull requests  ](/expo/expo/pulls)
  * [ Discussions  ](/expo/expo/discussions)
  * [ Actions  ](/expo/expo/actions)
  * [ Projects  ](/expo/expo/projects)
  * [ Wiki  ](/expo/expo/wiki)
  * [ Security  ](/expo/expo/security)
  * [ Insights  ](/expo/expo/pulse)



# expo/expo

main

[**618** Branches](/expo/expo/branches)[**0** Tags](/expo/expo/tags)

[](/expo/expo/branches)[](/expo/expo/tags)

Go to file

Code

## Folders and files

Name| Name| Last commit message| Last commit date  
---|---|---|---  
  
## Latest commit

[](/Kudo)[Kudo](/expo/expo/commits?author=Kudo)[[dev-menu][dev-launcher] fix broken local development on android (](/expo/expo/commit/d9b65b28e55d0e223b51ea4164a173696931e4af)[#33714](https://github.com/expo/expo/pull/33714)Dec 18, 2024[d9b65b2](/expo/expo/commit/d9b65b28e55d0e223b51ea4164a173696931e4af) · Dec 18, 2024

## History

[24,776 Commits](/expo/expo/commits/main/)[](/expo/expo/commits/main/)  
[.github](/expo/expo/tree/main/.github ".github")| [.github](/expo/expo/tree/main/.github ".github")  
[.vscode](/expo/expo/tree/main/.vscode ".vscode")| [.vscode](/expo/expo/tree/main/.vscode ".vscode")  
[apps](/expo/expo/tree/main/apps "apps")| [apps](/expo/expo/tree/main/apps "apps")  
[bin](/expo/expo/tree/main/bin "bin")| [bin](/expo/expo/tree/main/bin "bin")  
[docs](/expo/expo/tree/main/docs "docs")| [docs](/expo/expo/tree/main/docs "docs")  
[fastlane](/expo/expo/tree/main/fastlane "fastlane")| [fastlane](/expo/expo/tree/main/fastlane "fastlane")  
[guides](/expo/expo/tree/main/guides "guides")| [guides](/expo/expo/tree/main/guides "guides")  
[packages](/expo/expo/tree/main/packages "packages")| [packages](/expo/expo/tree/main/packages "packages")  
[patches](/expo/expo/tree/main/patches "patches")| [patches](/expo/expo/tree/main/patches "patches")  
[react-native-lab](/expo/expo/tree/main/react-native-lab "react-native-lab")| [react-native-lab](/expo/expo/tree/main/react-native-lab "react-native-lab")  
[scripts](/expo/expo/tree/main/scripts "scripts")| [scripts](/expo/expo/tree/main/scripts "scripts")  
[secrets](/expo/expo/tree/main/secrets "secrets")| [secrets](/expo/expo/tree/main/secrets "secrets")  
[template-files](/expo/expo/tree/main/template-files "template-files")| [template-files](/expo/expo/tree/main/template-files "template-files")  
[templates](/expo/expo/tree/main/templates "templates")| [templates](/expo/expo/tree/main/templates "templates")  
[tools](/expo/expo/tree/main/tools "tools")| [tools](/expo/expo/tree/main/tools "tools")  
[.dockerignore](/expo/expo/blob/main/.dockerignore ".dockerignore")| [.dockerignore](/expo/expo/blob/main/.dockerignore ".dockerignore")  
[.envrc](/expo/expo/blob/main/.envrc ".envrc")| [.envrc](/expo/expo/blob/main/.envrc ".envrc")  
[.eslintignore](/expo/expo/blob/main/.eslintignore ".eslintignore")| [.eslintignore](/expo/expo/blob/main/.eslintignore ".eslintignore")  
[.eslintrc.js](/expo/expo/blob/main/.eslintrc.js ".eslintrc.js")| [.eslintrc.js](/expo/expo/blob/main/.eslintrc.js ".eslintrc.js")  
[.gitattributes](/expo/expo/blob/main/.gitattributes ".gitattributes")| [.gitattributes](/expo/expo/blob/main/.gitattributes ".gitattributes")  
[.gitignore](/expo/expo/blob/main/.gitignore ".gitignore")| [.gitignore](/expo/expo/blob/main/.gitignore ".gitignore")  
[.gitmodules](/expo/expo/blob/main/.gitmodules ".gitmodules")| [.gitmodules](/expo/expo/blob/main/.gitmodules ".gitmodules")  
[.lfsconfig](/expo/expo/blob/main/.lfsconfig ".lfsconfig")| [.lfsconfig](/expo/expo/blob/main/.lfsconfig ".lfsconfig")  
[.prettierignore](/expo/expo/blob/main/.prettierignore ".prettierignore")| [.prettierignore](/expo/expo/blob/main/.prettierignore ".prettierignore")  
[.prettierrc](/expo/expo/blob/main/.prettierrc ".prettierrc")| [.prettierrc](/expo/expo/blob/main/.prettierrc ".prettierrc")  
[.swiftlint.yml](/expo/expo/blob/main/.swiftlint.yml ".swiftlint.yml")| [.swiftlint.yml](/expo/expo/blob/main/.swiftlint.yml ".swiftlint.yml")  
[.watchmanconfig](/expo/expo/blob/main/.watchmanconfig ".watchmanconfig")| [.watchmanconfig](/expo/expo/blob/main/.watchmanconfig ".watchmanconfig")  
[CHANGELOG.md](/expo/expo/blob/main/CHANGELOG.md "CHANGELOG.md")| [CHANGELOG.md](/expo/expo/blob/main/CHANGELOG.md "CHANGELOG.md")  
[CONTRIBUTING.md](/expo/expo/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")| [CONTRIBUTING.md](/expo/expo/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")  
[Gemfile](/expo/expo/blob/main/Gemfile "Gemfile")| [Gemfile](/expo/expo/blob/main/Gemfile "Gemfile")  
[Gemfile.lock](/expo/expo/blob/main/Gemfile.lock "Gemfile.lock")| [Gemfile.lock](/expo/expo/blob/main/Gemfile.lock "Gemfile.lock")  
[LICENSE](/expo/expo/blob/main/LICENSE "LICENSE")| [LICENSE](/expo/expo/blob/main/LICENSE "LICENSE")  
[README.md](/expo/expo/blob/main/README.md "README.md")| [README.md](/expo/expo/blob/main/README.md "README.md")  
[SECURITY.md](/expo/expo/blob/main/SECURITY.md "SECURITY.md")| [SECURITY.md](/expo/expo/blob/main/SECURITY.md "SECURITY.md")  
[SUPPORT.md](/expo/expo/blob/main/SUPPORT.md "SUPPORT.md")| [SUPPORT.md](/expo/expo/blob/main/SUPPORT.md "SUPPORT.md")  
[THIRD-PARTY-LICENSES](/expo/expo/blob/main/THIRD-PARTY-LICENSES "THIRD-PARTY-LICENSES")| [THIRD-PARTY-LICENSES](/expo/expo/blob/main/THIRD-PARTY-LICENSES "THIRD-PARTY-LICENSES")  
[buildAndroidTarballLocally.sh](/expo/expo/blob/main/buildAndroidTarballLocally.sh "buildAndroidTarballLocally.sh")| [buildAndroidTarballLocally.sh](/expo/expo/blob/main/buildAndroidTarballLocally.sh "buildAndroidTarballLocally.sh")  
[changelogVersions.json](/expo/expo/blob/main/changelogVersions.json "changelogVersions.json")| [changelogVersions.json](/expo/expo/blob/main/changelogVersions.json "changelogVersions.json")  
[dev-home-config.json](/expo/expo/blob/main/dev-home-config.json "dev-home-config.json")| [dev-home-config.json](/expo/expo/blob/main/dev-home-config.json "dev-home-config.json")  
[package.json](/expo/expo/blob/main/package.json "package.json")| [package.json](/expo/expo/blob/main/package.json "package.json")  
[tsconfig.json](/expo/expo/blob/main/tsconfig.json "tsconfig.json")| [tsconfig.json](/expo/expo/blob/main/tsconfig.json "tsconfig.json")  
[tsconfig.node.json](/expo/expo/blob/main/tsconfig.node.json "tsconfig.node.json")| [tsconfig.node.json](/expo/expo/blob/main/tsconfig.node.json "tsconfig.node.json")  
[yarn.lock](/expo/expo/blob/main/yarn.lock "yarn.lock")| [yarn.lock](/expo/expo/blob/main/yarn.lock "yarn.lock")  
View all files  
  
## Repository files navigation

  * [README](#)
  * [MIT license](#)
  * [Security](#)



[ ](https://expo.dev/)

# Expo

[](#expo)

[ ](https://www.npmjs.com/package/expo) [ ](https://chat.expo.dev) [ ](https://github.com/expo/expo/blob/main/LICENSE) [ ](http://www.npmtrends.com/expo)

[**Try Expo in the Browser**](https://snack.expo.dev) • [Read the Documentation](https://docs.expo.dev) • [Learn more on our blog](https://expo.dev/blog) • [Request a feature](https://expo.canny.io/feature-requests)

###### Follow us on

[](#follow-us-on)

[ ](https://github.com/expo) [ ](https://bsky.app/profile/expo.dev)

## Introduction

[](#introduction)

Expo is an open-source platform for making universal native apps that run on Android, iOS, and the web. It includes a universal runtime and libraries that let you build native apps by writing React and JavaScript.

This repository includes the Expo SDK, Modules API, Go app, CLI, Router, documentation, and various other supporting tools. [Expo Application Services (EAS)](https://expo.dev/eas) is a platform of hosted services that are deeply integrated with Expo open source tools. EAS helps you build, ship, and iterate on your app as an individual or a team.

Read the [Expo Community Guidelines](https://expo.dev/guidelines) before interacting in the repository. Thank you for helping keep the Expo community open and welcoming!

## Table of contents

[](#table-of-contents)

  * [📚 Documentation](#-documentation)
  * [🗺 Project Layout](#-project-layout)
  * [🏅 Badges](#-badges)
  * [👏 Contributing](#-contributing)
  * [❓ FAQ](#-faq)
  * [💙 The Team](#-the-team)
  * [License](#license)



## 📚 Documentation

[](#-documentation)

Learn about building and deploying universal apps [in our official docs!](https://docs.expo.dev)

  * [Getting Started](https://docs.expo.dev/)
  * [API Reference](https://docs.expo.dev/versions/latest/)
  * [Using Custom Native Modules](https://docs.expo.dev/workflow/customizing/)



## 🗺 Project Layout

[](#-project-layout)

  * `packages`[](/expo/expo/blob/main/packages) All the source code for Expo modules, if you want to edit a library or just see how it works this is where you'll find it.
  * `apps`[](/expo/expo/blob/main/apps) This is where you can find Expo projects which are linked to the development modules. You'll do most of your testing in here.
  * `apps/expo-go`[](/expo/expo/blob/main/apps/expo-go) This is where you can find the source code for Expo Go.
  * `apps/expo-go/ios/Exponent.xcworkspace`[](/expo/expo/blob/main/apps/expo-go/ios) is the Xcode workspace. When developing iOS, always open this instead of `Exponent.xcodeproj` because the workspace also loads the CocoaPods dependencies.
  * `docs`[](/expo/expo/blob/main/docs) The source code for **<https://docs.expo.dev>**
  * `templates`[](/expo/expo/blob/main/templates) The template projects you get when you run `npx create-expo-app`
  * `react-native-lab`[](/expo/expo/blob/main/react-native-lab) This is our fork of `react-native` used to build Expo Go.
  * `guides`[](/expo/expo/blob/main/guides) In-depth tutorials for advanced topics like contributing to the client.
  * `tools`[](/expo/expo/blob/main/tools) contain build and configuration tools.
  * `template-files`[](/expo/expo/blob/main/template-files) contains templates for files that require private keys. They are populated using the keys in `template-files/keys.json`.
  * `template-files/ios/dependencies.json`[](/expo/expo/blob/main/template-files/ios/dependencies.json) specifies the CocoaPods dependencies of the app.



## 🏅 Badges

[](#-badges)

Let everyone know your app can be run instantly in the _Expo Go_ app! 

[](https://expo.dev/client)

[](https://expo.dev/client)

```
[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-000.svg?style=flat-square&logo=EXPO&labelColor=f3f3f3&logoColor=000)](https://expo.dev/client)
[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-4630EB.svg?style=flat-square&logo=EXPO&labelColor=f3f3f3&logoColor=000)](https://expo.dev/client)
```


## 👏 Contributing

[](#-contributing)

If you like Expo and want to help make it better then check out our [contributing guide](/expo/expo/blob/main/CONTRIBUTING.md)! Check out the [CLI package](https://github.com/expo/expo/tree/main/packages/%40expo/cli) to work on the Expo CLI.

## ❓ FAQ

[](#-faq)

If you have questions about Expo and want answers, then check out our [Frequently Asked Questions](https://docs.expo.dev/faq/)!

If you still have questions you can ask them on our [Discord and Forums](https://chat.expo.dev) or X .

## 💙 The Team

[](#-the-team)

Curious about who makes Expo? Here are our [team members](https://expo.dev/about)!

## License

[](#license)

The Expo source code is made available under the [MIT license](/expo/expo/blob/main/LICENSE). Some of the dependencies are licensed differently, with the BSD license, for example.

[](https://user-images.githubusercontent.com/9664363/185428788-d762fd5d-97b3-4f59-8db7-f72405be9677.gif) [ ](https://user-images.githubusercontent.com/9664363/185428788-d762fd5d-97b3-4f59-8db7-f72405be9677.gif) [ ](https://user-images.githubusercontent.com/9664363/185428788-d762fd5d-97b3-4f59-8db7-f72405be9677.gif)

## About

An open-source framework for making universal native apps with React. Expo runs on Android, iOS, and the web. 

[docs.expo.dev](https://docs.expo.dev "https://docs.expo.dev")

### Topics

[ react ](/topics/react "Topic: react") [ javascript ](/topics/javascript "Topic: javascript") [ android ](/topics/android "Topic: android") [ ios ](/topics/ios "Topic: ios") [ mobile ](/topics/mobile "Topic: mobile") [ framework ](/topics/framework "Topic: framework") [ typescript ](/topics/typescript "Topic: typescript") [ react-native ](/topics/react-native "Topic: react-native") [ web ](/topics/web "Topic: web") [ frontend ](/topics/frontend "Topic: frontend") [ native ](/topics/native "Topic: native") [ universal ](/topics/universal "Topic: universal") [ web-framework ](/topics/web-framework "Topic: web-framework") [ native-apps ](/topics/native-apps "Topic: native-apps") [ app-framework ](/topics/app-framework "Topic: app-framework") [ expo ](/topics/expo "Topic: expo")

### Resources

[ Readme ](#readme-ov-file)

### License

[ MIT license ](#MIT-1-ov-file)

### Security policy

[ Security policy ](#security-ov-file)

[ Activity](/expo/expo/activity)

[ Custom properties](/expo/expo/custom-properties)

### Stars

[ **35.5k** stars](/expo/expo/stargazers)

### Watchers

[ **305** watching](/expo/expo/watchers)

### Forks

[ **5.7k** forks](/expo/expo/forks)

[ Report repository ](/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2Fexpo%2Fexpo&report=expo+%28user%29)

##  [Used by 1.1m](/expo/expo/network/dependents)

[ + 1,067,006  ](/expo/expo/network/dependents)

##  [Contributors 1,468](/expo/expo/graphs/contributors)

  * [ ](https://github.com/brentvatne)
  * [ ](https://github.com/tsapeta)
  * [ ](https://github.com/EvanBacon)
  * [ ](https://github.com/lukmccall)
  * [ ](https://github.com/amandeepmittal)
  * [ ](https://github.com/terribleben)
  * [ ](https://github.com/esamelson)
  * [ ](https://github.com/Kudo)
  * [ ](https://github.com/expo-bot)
  * [ ](https://github.com/sjchmiela)
  * [ ](https://github.com/Simek)
  * [ ](https://github.com/ide)
  * [ ](https://github.com/wschurman)
  * [ ](https://github.com/byCedric)



[+ 1,454 contributors](/expo/expo/graphs/contributors)

## Languages

  * [ TypeScript 38.8% ](/expo/expo/search?l=typescript)
  * [ JavaScript 28.1% ](/expo/expo/search?l=javascript)
  * [ Kotlin 12.5% ](/expo/expo/search?l=kotlin)
  * [ Swift 8.2% ](/expo/expo/search?l=swift)
  * [ Objective-C 5.2% ](/expo/expo/search?l=objective-c)
  * [ Java 2.9% ](/expo/expo/search?l=java)
  * Other 4.3%



## Footer

[ ](https://github.com "GitHub") © 2024 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You can’t perform that action at this time. 
[Skip to main content](#__docusaurus_skipToContent_fallback)

The New Architecture has arrived - [learn more](/blog/2024/10/23/the-new-architecture-is-here)

[**React Native**](/)

[Development](#)

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



[Contributing](/contributing/overview)[Community](/community/overview)[Showcase](/showcase)[Blog](/blog)[](https://github.com/facebook/react-native)

Search

[Star](https://github.com/facebook/react-native)

# React Native

## Learn once, write anywhere.

[Get Started](/docs/environment-setup)[Learn the Basics](/docs/getting-started)

# Create native apps for Android, iOS, and more using React

### React Native brings the best parts of developing with React to native development. It's a best-in-class JavaScript library for building user interfaces.

index.js

```
function HomeScreen() {  return (   <View>    <Text> Hello World 👋 🌍!</Text>  </View>  ); }
```


**Written in JavaScript, rendered with native code.** React primitives render to native platform UI, meaning your app uses the same native platform APIs other apps do.

# Native development for everyone

### React Native lets you create truly native apps and doesn't compromise your users' experiences. It provides a core set of platform agnostic native components like `View`, `Text`, and `Image` that map directly to the platform's native UI building blocks.

# Get a head start with a framework

### React Native brings the React programming paradigm to platforms like Android and iOS. It doesn’t prescribe how to do routing, or how to access each of the numerous platform APIs. To build a new app with React Native, we recommend a framework like [Expo](https://expo.dev).

#### File-based routing

Create stack, modal, drawer, and tab screens with minimal boilerplate using your filesystem.

#### Use any library, SDK, or native code

Generate native changes or write your own native code. Use over 50 modules to create your app.

#### Developer tools

Get started quickly with Expo Go, then continue with expo-dev-client: a module that adds Expo’s tools to apps that require native changes.

# Watch and learn

### Watch talks by the React team and learn how to get the most out of React Native. Find the latest on .

#### FB 2019: Mobile innovation with React Native

45:29

#### Why React Native?

1:42

# Meta supported. Community driven.

Meta released React Native in 2015 and has been maintaining it ever since.

In 2018, React Native had the [2nd highest](https://octoverse.github.com/2018/projects#repositories) number of contributors for any repository in GitHub. Today, React Native is supported by contributions from individuals and companies around the world including [Callstack](https://callstack.com/), [Expo](https://expo.io/), [Infinite Red](https://infinite.red/), [Microsoft](https://www.microsoft.com/) and [Software Mansion](https://swmansion.com/).

Our community is always shipping exciting new projects and exploring platforms beyond Android and iOS with repos like [React Native Windows](https://github.com/microsoft/react-native-windows#readme), [React Native macOS](https://github.com/microsoft/react-native-macos#readme) and [React Native Web](https://github.com/necolas/react-native-web#readme).

React Native is being used in thousands of apps, but it's likely you've already used it in one of these apps:

  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://blog.coinbase.com/optimizing-react-native-7e7bf7ac3a34)
  * [](https://formidable.com/work/puma-scaling-across-the-globe/)
  * [](https://github.com/wordpress-mobile/gutenberg-mobile)
  * [](https://engineering.tableau.com/react-native-at-tableau-3-years-in-89d43c38354c)
  * [](https://blog.flipkart.tech/the-journey-of-react-native-flipkart-47dcd0c3d1c6)
  * [](https://medium.com/mercari-engineering/why-we-decided-to-rewrite-our-ios-android-apps-from-scratch-in-react-native-9f1737558299)
  * [](https://discord.com/blog/how-discord-achieves-native-ios-performance-with-react-native)
  * [](https://www.techatbloomberg.com/blog/bloomberg-used-react-native-develop-new-consumer-app/)
  * [](https://medium.com/@Pinterest_Engineering/supporting-react-native-at-pinterest-f8c2233f90e6)
  * [](https://www.tesla.com/blog)
  * [](https://medium.com/walmartlabs/react-native-at-walmartlabs-cdd140589560#.ueonqqloc)
  * [](https://www.tencent.com/en-us/business.html)
  * [](https://github.com/mattermost/mattermost-mobile)



and [many more](/showcase).

# Welcome to the React Native community

[Get Started](/docs/environment-setup)

Develop

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



Participate

  * [Showcase](/showcase)
  * [Contributing](/contributing/overview)
  * [Community](/community/overview)
  * [Directory](https://reactnative.directory/)
  * [Stack Overflow](https://stackoverflow.com/questions/tagged/react-native)



Find us

  * [Blog](/blog)
  * [GitHub](https://github.com/facebook/react-native)



Explore More

  * [ReactJS](https://react.dev/)
  * [Privacy Policy](https://opensource.fb.com/legal/privacy/)
  * [Terms of Service](https://opensource.fb.com/legal/terms/)



[](https://opensource.fb.com/)

Copyright © 2024 Meta Platforms, Inc.
[](/)

Meta Open Source

## Welcome to our community

Empowering diverse communities through open source technology.

[Explore projects](/projects)

### Meta Embraces Open Source

Meta is committed to the notion that open source not only provides great technology for developers, but also brings the best out in people. Meta believes in the following tenets:

#### Collaboration

Open source allows developers from around the world to proactively work together to achieve common goals.

#### Community

Open source provides opportunities for the creation of diverse communities in support of the betterment of everyone.

#### Technology

Open source has produced historic technologies, including operating systems, frameworks and programming languages.

Featured Media

[The Diff Episode 10: Talking Open Source with Paul O'ShannessyDecember 7, 2021](https://www.youtube.com/watch?v=QR84BJt4fw0)

[Explain Like I'm 5: Season 3September 28, 2021](https://youtube.com/playlist?list=PLzIwronG0sE49zLk608yB5GKKT8WbEhnZ)

[See all media](/media)

Popular Projects

[DocumentationDocusaurusSetup a website for your documentation quickly and easily.View Project](https://docusaurus.io)

[FrameworksReactA JavaScript framework for building awesome user interfaces.View Project](https://reactjs.org)

[FrameworksPyTorchA Python-based machine learning framework for dynamic neural networks.View Project](https://pytorch.org)

[See more projects](/projects)

[](https://nasa.github.io/cumulus/docs/cumulus-docs-readme)

[](https://developers.diem.com)

[](https://slack.engineering/hacklang-at-slack-a-better-php/)

[](https://www.opencompute.org/membership/membership-organizational-directory?keyword=AT%26T)

[](https://aws.amazon.com/blogs/aws/announcing-torchserve-an-open-source-model-server-for-pytorch/)

[](https://www.carbondesignsystem.com/developing/frameworks/react/)

Showcase

## Globally trusted

Open source is used by teams of all shapes and sizes to create, iterate, and grow.

[See Showcase](/showcase)

[](https://meta.com)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



Site Map[Projects](/projects)[FAQ](/get-involved#faq)[About](/about)[Get Involved](/get-involved)

Information[Linux](/linux)[Careers](https://metacareers.com)[Bug Bounty Program](https://bugbounty.meta.com)

Connect[GitHub](https://github.com/facebook)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



© 2024 Meta

  * [Code of Conduct](/code-of-conduct)
  * [Privacy Policy](/legal/privacy)
  * [Cookie Policy](/legal/cookie-policy)
  * [Terms of Use](/legal/terms)
  * [Trademark Policy](/legal/trademark)


Don’t miss what’s happening

People on X are the first to know.

[Log in](/login)

[Sign up](/i/flow/signup)

Welcome to x.com!

We are letting you know that we are changing our URL, but your privacy and data protection settings remain the same.

For more details, see our Privacy Policy: 

# [](/)

[Settings](/settings)

## Profile

See new posts
[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact%2Fblob%2Fmain%2FCODE_OF_CONDUCT.md)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact%2Fblob%2Fmain%2FCODE_OF_CONDUCT.md)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Fblob%2Fshow&source=header-repo&source_repo=facebook%2Freact) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ facebook ](/facebook) / **[react](/facebook/react) ** Public

  * [ Notifications ](/login?return_to=%2Ffacebook%2Freact) You must be signed in to change notification settings
  * [ Fork 47.2k ](/login?return_to=%2Ffacebook%2Freact)
  * [ Star  231k ](/login?return_to=%2Ffacebook%2Freact)




  * [ Code ](/facebook/react)
  * [ Issues 764 ](/facebook/react/issues)
  * [ Pull requests 176 ](/facebook/react/pulls)
  * [ Actions ](/facebook/react/actions)
  * [ Projects 0 ](/facebook/react/projects)
  * [ Wiki ](/facebook/react/wiki)
  * [ Security ](/facebook/react/security)
  * [ Insights ](/facebook/react/pulse)



Additional navigation options

  * [ Code  ](/facebook/react)
  * [ Issues  ](/facebook/react/issues)
  * [ Pull requests  ](/facebook/react/pulls)
  * [ Actions  ](/facebook/react/actions)
  * [ Projects  ](/facebook/react/projects)
  * [ Wiki  ](/facebook/react/wiki)
  * [ Security  ](/facebook/react/security)
  * [ Insights  ](/facebook/react/pulse)



## Files

main

  * .codesandbox

  * .github

  * compiler

  * fixtures

  * packages

  * scripts

  * .editorconfig

  * .eslintignore

  * .eslintrc.js

  * .git-blame-ignore-revs

  * .gitattributes

  * .gitignore

  * .mailmap

  * .nvmrc

  * .prettierignore

  * .prettierrc.js

  * .watchmanconfig

  * CHANGELOG-canary.md

  * CHANGELOG.md

  * CODE_OF_CONDUCT.md

  * CONTRIBUTING.md

  * LICENSE

  * README.md

  * ReactVersions.js

  * SECURITY.md

  * babel.config.js

  * dangerfile.js

  * netlify.toml

  * package.json

  * react.code-workspace

  * yarn.lock




## Breadcrumbs

  1. [react](/facebook/react/tree/main)



/

# CODE_OF_CONDUCT.md

Blame

Blame

## Latest commit

[](/zahad-a-s)[zahad-a-s](/facebook/react/commits?author=zahad-a-s)

[revert last grammatical edit (](/facebook/react/commit/7a227276e653b481b73ed9e9178244b53d61f730)[#25067](https://github.com/facebook/react/pull/25067)[)](/facebook/react/commit/7a227276e653b481b73ed9e9178244b53d61f730)

Aug 11, 2022

[7a22727](/facebook/react/commit/7a227276e653b481b73ed9e9178244b53d61f730) · Aug 11, 2022

## History

[History](/facebook/react/commits/main/CODE_OF_CONDUCT.md)

[](/facebook/react/commits/main/CODE_OF_CONDUCT.md)

80 lines (60 loc) · 3.46 KB

## Breadcrumbs

  1. [react](/facebook/react/tree/main)



/

# CODE_OF_CONDUCT.md

Top

## File metadata and controls

  * Preview

  * Code

  * Blame




80 lines (60 loc) · 3.46 KB

[Raw](https://github.com/facebook/react/raw/refs/heads/main/CODE_OF_CONDUCT.md)

# Code of Conduct

[](#code-of-conduct)

## Our Pledge

[](#our-pledge)

In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.

## Our Standards

[](#our-standards)

Examples of behavior that contributes to creating a positive environment include:

  * Using welcoming and inclusive language
  * Being respectful of differing viewpoints and experiences
  * Gracefully accepting constructive criticism
  * Focusing on what is best for the community
  * Showing empathy towards other community members



Examples of unacceptable behavior by participants include:

  * The use of sexualized language or imagery and unwelcome sexual attention or advances
  * Trolling, insulting/derogatory comments, and personal or political attacks
  * Public or private harassment
  * Publishing others' private information, such as a physical or electronic address, without explicit permission
  * Other conduct which could reasonably be considered inappropriate in a professional setting



## Our Responsibilities

[](#our-responsibilities)

Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.

Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.

## Scope

[](#scope)

This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.

This Code of Conduct also applies outside the project spaces when there is a reasonable belief that an individual's behavior may have a negative impact on the project or its community.

## Enforcement

[](#enforcement)

Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at opensource-conduct@fb.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.

Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.

## Attribution

[](#attribution)

This Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org), version 1.4, available at <https://www.contributor-covenant.org/version/1/4/code-of-conduct.html>

For answers to common questions about this code of conduct, see <https://www.contributor-covenant.org/faq>

## Footer

[ ](https://github.com "GitHub") © 2024 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You can’t perform that action at this time. 
[](/)

# Meta Open Source - Privacy Policy

 _Effective April 25, 2023_

This Privacy Policy describes Meta Platforms, Inc. (**"Meta"** , **"we"** , **"us"** or **"our"**) practices for handling your information in connection with this website and our open source-related websites (**"Websites"**) and any content, related documentation, information and services (e.g. apps, tutorials, tools to support the developer workflow, access to resources, etc.) made available to you on this website (collectively, the **"Services"**). This Privacy Policy describes the personal information we process to support our Services.

For clarity, this Privacy Policy only applies to the Websites and does not apply to any:

  1. use of open source code, documentation or specifications made available on GitHub, which are governed by the terms of the applicable open source license;
  2. pull requests, issues and any other interactions or features related to participation in open source projects on GitHub, which are governed by GitHub's terms and conditions; or
  3. use of any other Meta website, service or product, which are governed by the terms and conditions applicable to those offerings.



#### What Kinds of Information Do We Collect?

When you interact with us through our Services, we may collect or receive the following types of information:

**_Information you provide directly to us._** For certain activities, we may collect the following types of information:

  * **_Contact information,_** such as name, email address and contact details; and
  * ** _Other information_** you provide to us, such as when you send us correspondence or otherwise participate on the Services.



**_Information we collect automatically._** Depending on the type of device you use and how you interact with us, we may also collect certain information automatically when you use our Services, such as:

  * **_Device attributes,_** including information such as the operating system, hardware and software versions, battery level, signal strength, available storage space, browser type, app and file names and types, and plugins.
  * **_Device operations,_** including information about operations performed on the Services as well as pages visited.
  * **_Identifiers,_** including information such as unique identifiers, device IDs, and other identifiers, and Family Device IDs associated with the same device or account.
  * **_Network and connections,_** information such as the name of your mobile operator or ISP, language, time zone, mobile phone number, IP address, connection speed, information about other devices that are nearby or on your network, and Wi-Fi hotspots you connect to using our Services.
  * **_Cookie data,_** data from cookies and other similar technologies that are stored on your device, including cookie IDs and settings. Learn more about how we use cookies by reading our [Cookie Policy](/legal/cookie-policy).



**_Information you provide to us through our app (where applicable)._** Some of our Services include the provision of an app. In such cases, we may receive certain video and text content that you choose to provide to us through our app. We may analyze this depending on the context and content in accordance with the purposes described below.

**_Integrations with other services from third parties._** Some of our Services allow you to enable or log in via various online services (collectively, **"Login Services"**). By including these Login Services, we aim to make your online experiences richer and more personalized. When you add a Login Service account to our Services or log in to our Services using such an account, we may collect relevant information necessary to enable our Services to facilitate your login, such as your email address. We may also share your information with that Login Service to facilitate or enhance the delivery of that platform or our Services.

As part of an integration with a Login Service, that Login Service may provide us with access to certain information that you have provided to their platform, and we will use, store, and disclose such information in accordance with this Privacy Policy. However, please remember that the manner in which platforms use, store, and disclose your information is governed by the policies that apply to those platforms. Information collected by Login Services is subject to their own terms and policies, not this one.

**_Social media features._** Our Services may use social media features, such as the Facebook "like" button, the "Tweet" button and other sharing widgets (**"Social Media Features"**). You may be given the option by such Social Media Features to post information about your activities on a website to a profile page of yours that is provided by a third party social media network in order to share with others within your network. Social Media Features are either hosted by the respective social media network or hosted directly on our Websites. To the extent the Social Media Features are hosted by the respective social media network(s) and you click through to these from our Websites, the latter may receive information showing that you have visited our Websites. If you are logged in to your social media account, it is possible that the respective social media network can link your visit to our Websites with your social media profile. Your interactions with Social Media Features are governed by the privacy policies of the companies providing the relevant Social Media Features.

#### Cookies and Similar Technologies

Cookies are small pieces of text used to store information on web browsers. Cookies are used to store and receive identifiers and other information on computers, phones and other devices. We use cookies and similar technologies, for such things as maintaining and monitoring the infrastructure of the Services, ensuring security protections, analyzing how our Services perform and other analytics purposes, and fulfilling other legitimate purposes as further described in this Privacy Policy. We also use analytics cookies to better understand how our Services are being used by tracking how you interact with the Services and where you click.

We use cookies served by Google Analytics to collect limited data directly from end-user browsers to enable us to better understand your use of the Services, including making use of the demographics and interests reports services of Google Analytics. Further information on how Google collects and uses this data, including processing in the United States, can be found at <https://www.google.com/policies/privacy/partners/>. You can opt-out of all Google supported analytics within the Services by going to the following webpage: <https://tools.google.com/dlpage/gaoptout>.

Learn more about how we use cookies by reading our [Cookie Policy](/legal/cookie-policy).

#### How Do We Use Information?

We will use the information described above for the purpose of operating and providing the Websites and our Services. Specifically, we will use the information for the following purposes:

  * **_Provide, personalize and improve our Services._** We use your information to provide the Websites and fulfill your requests for resources, services, and information; analyze content that you provide to us and provide suggestions for what is in such content; analyze the use of the Services and user data to understand, improve and operate the Services; and customize the content you see when you use the Services;
  * **_Communicate with you._** We use your email address to communicate with you about the Services and let you know about our terms and policies. If you subscribe to a newsletter, we will use your email address to send you such newsletter. We also use your information to respond to you when you contact us;
  * **_Promote safety, integrity and security._** We use the information that we have to verify accounts and activity, combat harmful conduct, maintain the integrity of our Services, and promote safety and security on our Websites. For example, we use data that we have to investigate suspicious activity or breaches of the [Terms of Use](/legal/terms);
  * **_For any other purposes_** disclosed to you at the time we collect your information or pursuant to your consent.



#### How We Share Information

There are certain circumstances in which we may share your information with certain third parties without further notice to you, as set forth below:

  * **_Service providers and third-party vendors._** We share your information with third-party vendors and service providers that support the Services, for example cloud hosting providers (to provide data storage and processing services), communications providers (to process new queries and to manage our emails) and analytics providers to perform analysis on the Services. These service providers are limited from using your information for any purpose other than to perform services for us.
  * **_Legal purposes._** We may disclose information for legal purposes, such as to respond to subpoenas, court orders, legal process, law enforcement requests, legal claims or government inquiries, detect fraud, and to protect and defend the rights, interests, safety, and security of Meta, our affiliates, owner, users, or the public.
  * **_Business transfers._** We may share your information in connection with a substantial corporate transaction, such as the sale of a website, a merger, consolidation, asset sale, or in the unlikely event of bankruptcy.
  * **_With your consent._** We may share information for any other purposes disclosed to you at the time we collect the information or pursuant to your consent. If you choose to engage in public activities on the Websites, you should be aware that any information you share there can be read, collected, or used by other users of these areas. You should use caution in disclosing personal information while participating in these areas. We are not responsible for the information you choose to submit in these public areas.



#### Children's Information

Meta does not knowingly collect or store information from children under the age of 13, unless permitted by law. We will delete any information we may have inadvertently received from a child under 13 upon notice. If you have reason to believe that a child under the age of 13 has provided personal information to Meta through our Services please contact us.

#### Third-Party Links

Our Websites may contain links to other sites that we do not own or operate (e.g. GitHub). Except as provided in this Privacy Policy, we do not provide your information to these third parties without your consent. The linked websites have separate and independent privacy statements, notices and terms of use, which we recommend you carefully review. We do not have any control over such websites, and therefore have no liability or responsibility for the linked websites' personal information practices.

#### Data Retention

We retain information relating to the Services until it is no longer necessary to serve the purposes for which it was collected, such as to provide the Services to you or improve the Services. Reasons we may retain some information for longer periods include:

  * A legal request or obligation, including obligations of Meta Companies or to comply with applicable law;
  * A governmental investigation;
  * An investigation of possible violations of our terms or policies;
  * To prevent harm;
  * For safety, security and integrity purposes;
  * To protect ourselves, including our rights, property or products;
  * If it's needed in relation to a legal claim, complaint, litigation or regulatory proceedings.



#### Additional Information for United States Residents

If you are a United States resident, you can learn more about the consumer privacy rights that may be available to you by reviewing the .

#### Additional Information for Individuals in the European Region and the United Kingdom

If you are a user in a territory or country listed below (the "European Region") or the United Kingdom, the following information also applies to you and supplements the information contained above in the Privacy Policy.

Andorra, Austria, Azores, Belgium, Bulgaria, Canary Islands, Channel Islands, Croatia, Czech Republic, Denmark, Estonia, Finland, France, French Guiana, Germany, Greece, Guadeloupe, Hungary, Iceland, Ireland, Isle of Man, Italy, Latvia, Liechtenstein, Lithuania, Luxembourg, Madeira, Malta, Martinique, Mayotte, Monaco, Netherlands, Norway, Poland, Portugal, Republic of Cyprus, Réunion, Romania, San Marino, Saint Barthélemy, Saint-Martin, Slovakia, Slovenia, Spain, Sweden, Switzerland, and Vatican City and the UK sovereign bases in Cyprus (Akrotiri and Dhekelia).

If you live in the European Region, the data controller responsible for your information when you use the Websites is Meta Platforms Ireland Ltd. If you live in the United Kingdom, the data controller responsible for your information when you use the Websites is Meta Platforms, Inc.

**_Our legal basis for processing data._** We collect, use and share data in the ways described above based on the following:

  * **_Contractual necessity._** The majority of the processing of personal data described in this Privacy Policy is justified on the basis that it is necessary for the performance of a contract and specifically, for the purposes of our [Terms of Use](/legal/terms). For example, we rely on this legal basis to create your account, grant you access to our Services and to communicate with you regarding the Services.
  * **_Legitimate interests._** Our processing of personal data as described in this Privacy Policy is justified on the basis that it is necessary for the legitimate interests or the legitimate interests of a third party, where not outweighed by your interests or fundamental rights and freedoms. We rely on this legal basis to further understand who is accessing and using the Services; prevent and address fraud, unauthorized use of the Services, breaches of our terms and policies, or other harmful or illegal activity; protect ourselves (including our rights, property or products), our users or others, including as part of investigations or regulatory enquiries; or to prevent death or imminent bodily harm.
  * **_Compliance with a legal obligation._** We rely on this legal basis for processing data when the law requires it, including, for example, if there is a valid legal request for certain data.



**_Data Transfers._** We transfer personal data both internally within Meta and externally with our partners. Information controlled by Meta Platforms Ireland Ltd. or Meta Platforms, Inc. may be transferred or transmitted to, or stored and processed in, the United States or other countries for the purposes described in this policy. These data transfers are necessary to provide the services set forth in the [Terms of Use](/legal/terms).

Meta Platforms Ireland Ltd. will protect your data when it is transferred outside the European Region by implementing appropriate safeguards to protect your personal data, where required, such as using the European Commission's Standard Contractual Clauses for the transfer of personal data outside the EEA. Meta Platforms, Inc. will protect your data when it is transferred to countries outside of the United Kingdom by implementing appropriate safeguards to protect your personal data, where required, such as using the International Data Transfer Agreement or the International Data Transfer Addendum which have been approved by the UK Parliament.

**_Your Rights_**

Under the GDPR and UK GDPR, you have the right to data portability, right to access, right to rectify, and right to erase your data under certain circumstances. You also have the right to object to and restrict certain processing of your data. In evaluating an objection, we will evaluate several factors, including: reasonable user expectations; the benefits and risks to you and third parties; and other available means to achieve the same purpose that may be less invasive and do not require disproportional effort. Your objection will be upheld and we will cease processing your information, unless continued processing is based on compelling legitimate grounds or is needed for legal reasons.

Please note that to protect your information, we may need to verify your identity before processing your request. In some cases, we may need to collect additional information to verify your identity, such as a government issued ID. To exercise your rights under the GDPR or UK GDPR, you can email opensource@meta.com or contact us by mail at the address provided below.

**_Contact information for individuals in the European Region only_**

The data controller responsible for your information is Meta Platforms Ireland Ltd., which you can contact by writing to:

Meta Platforms Ireland Ltd.ATTN: Privacy OperationsMerrion RoadDublin 4, D04 X2K5Ireland

Contact the Data Protection Officer for Meta Platforms Ireland Ltd. You also have the right to lodge a complaint with Meta Platforms Ireland Ltd.'s lead supervisory authority, the Irish Data Protection Commissioner, or your local supervisory authority.

**_Contact information for individuals in the United Kingdom only_**

If you are in the United Kingdom, the data controller responsible for your information is Meta Platforms, Inc., which you can contact , or by writing to:

Meta Platforms, Inc.ATTN: Privacy Operations1601 Willow RoadMenlo Park, CA 94025

Contact the Data Protection Officer for Meta Platforms, Inc. You also have the right to lodge a complaint with the UK's Information Commissioner's Office.

#### Changes to this Policy

We will notify you before we make material changes to this Policy. If we make non-material changes, we may update or modify this Privacy Policy at any time without prior notice.

We recommend that you review the Privacy Policy each time you visit the Websites to stay informed of our privacy practices. Any changes will be effective when we post the revised policy.

#### Questions

If you have any questions about this Privacy Policy or our practices, please contact us at opensource@meta.com or by mail at:

Meta, Inc.ATTN: Privacy Operations1601 Willow RoadMenlo Park, CA 94025

Table of contents[](#undefined)[](#undefined)[](#undefined)[](#undefined)[What Kinds of Information Do We Collect?](#what-kinds-of-information-do-we-collect)[Cookies and Similar Technologies](#cookies-and-similar-technologies)[How Do We Use Information?](#how-do-we-use-information)[How We Share Information](#how-we-share-information)[Children's Information](#childrens-information)[Third-Party Links](#third-party-links)[Data Retention](#data-retention)[Additional Information for United States Residents](#additional-information-for-united-states-residents)[Additional Information for Individuals in the European Region and the United Kingdom](#additional-information-for-individuals-in-the-european-region-and-the-united-kingdom)[Changes to this Policy](#changes-to-this-policy)[Questions](#questions)

[](https://meta.com)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



Site Map[Projects](/projects)[FAQ](/get-involved#faq)[About](/about)[Get Involved](/get-involved)

Information[Linux](/linux)[Careers](https://metacareers.com)[Bug Bounty Program](https://bugbounty.meta.com)

Connect[GitHub](https://github.com/facebook)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



© 2024 Meta

  * [Code of Conduct](/code-of-conduct)
  * [Privacy Policy](/legal/privacy)
  * [Cookie Policy](/legal/cookie-policy)
  * [Terms of Use](/legal/terms)
  * [Trademark Policy](/legal/trademark)


[](/)

# Meta Open Source - Terms of Use

 _Effective December 1, 2020_

These Terms of Use ("**Terms** ") govern your use of this website hosted and provided by Meta Platforms, Inc. ("**Meta** ", "**us** " or "**we** "), ("**Website** ") and any services offered through the Website ("**Services** ").

These Terms are a legal contract between you and us so it is important that you review them carefully.

For clarity, these Terms only apply to this Website and do not apply to any:

  1. use of open source code, documentation or specifications made available on GitHub, which are governed by the terms of the applicable open source license;
  2. pull requests, issues and any other interactions or features related to participation in open source projects on GitHub, which are governed by GitHub's terms and conditions; or
  3. use of any other Meta website, service or product, which are governed by the terms and conditions applicable to those offerings.



We may change these Terms or modify any features of the Website or the Services at any time. Any such change or modification will be effective immediately upon posting on our Website. You accept these Terms by browsing this Website and/or using the Services, and you accept any changes to the Terms by continuing to use the Website after we post any such changes.

If you do not agree to these Terms, please do not access or use the Website.

If you need to contact us for any reason, please do so at opensource@meta.com

#### 1. What you can do on this Website

We make this Website available to you and others to help everyone better understand our open source projects. In exchange, we need you to make the following commitments:

**(a) Who can use the Website**

We try to make our Website broadly available to everyone, but you cannot use our Website if:

  * You are a minor in your country of residence except if your parents or guardians have agreed to these Terms on your behalf.
  * You are prohibited from accessing the Website under applicable laws.

**(b) What you can share and do on the Website**

You agree not to engage in the conduct described below (or to facilitate or support others in doing so):

  1. You may not use our Website, do or share anything:
     * That violates these Terms (and other terms and policies that apply to your use of the Website);
     * That is unlawful in any country, misleading, discriminatory or fraudulent; and/or
     * That infringes or violates someone else's rights, including their intellectual property rights.
  2. You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of the Services or Website.

**(c) Access to the Website**

The Website is made available free of charge and the Services are available only for informational purposes. We make no representations or warranties of any kind as to the accuracy, currency, or completeness of the information and other materials made available through the Website and are not liable for any decisions you may make in reliance on this content.

#### 2. Links To Third-Party Content

The Website or Services may contain links to third-party content. For example, our user communities may be hosted by third party platforms over which we have no control and for which we have no responsibility. Therefore, please review each of these platforms or websites' terms of use and privacy policies before participating.

We do not control, endorse, sponsor, recommend, or otherwise accept responsibility for any content, terms of use, policies on or use of any third party website.

#### 3. Limits on Liability

We work hard to provide the best Website and Services we can and to specify clear guidelines for everyone who uses them. Our Website and Services, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, that they will function without disruptions, delays, or imperfections or content will be accurate, current and complete. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT IN RELATION TO THE WEBSITE, THE SERVICES AND THEIR CONTENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content). Some jurisdictions do not allow the exclusion or limitation of implied warranties, in which case parts of this disclaimer may not apply to you.

We cannot predict when issues might arise with our Website and Services. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms, the Website or the Services, even if we have been advised of the possibility of such damages. Our aggregate liability arising out of or relating to these Terms, the Website or the Services will not exceed $100.

We do not exclude or limit in any way our liability to you where it would be unlawful to do so therefore depending on the country where you reside some of these exclusions and limitations may not apply to you.

#### 4. Disputes

We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.

For any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms, the Website and/or the Services ("**claim** "), you agree that it will be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County. You also agree to submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.

The preceding provision regarding applicable law and venue does not apply if you are a consumer based in the European Union. If you are a consumer based in the European Union, these Terms will be subject to the laws of your country of residence and you may bring a claim in front of those courts.

#### 5. Privacy

Under data protection legislation, we are required to provide you with certain information about who we are, how we process your personal data and for what purposes and your rights in relation to your personal data and how to exercise them. This information is provided in our [Privacy Policy](/legal/privacy) and it is important that you read that information. Please also review our [Cookie Policy](/legal/cookie-policy), which tells you which cookies we use on the Website and how to manage them.

#### 6. Other important terms

These Terms make up the entire agreement between you and Meta Platforms, Inc. regarding your use of our Services and this Website. They supersede any prior agreements.

If any portion of these Terms is found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.

You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.

You agree that no joint venture, partnership, employment, or agency relationship exists between you and us as a result of these Terms or your access to and use of the Website or Services.

These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.

We reserve all rights not expressly granted to you.

Table of contents[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[1. What you can do on this Website](#what-you-can-do-on-this-website)[2. Links To Third-Party Content](#links-to-third-party-content)[3. Limits on Liability](#limits-on-liability)[4. Disputes](#disputes)[5. Privacy](#privacy)[6. Other important terms](#other-important-terms)

[](https://meta.com)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



Site Map[Projects](/projects)[FAQ](/get-involved#faq)[About](/about)[Get Involved](/get-involved)

Information[Linux](/linux)[Careers](https://metacareers.com)[Bug Bounty Program](https://bugbounty.meta.com)

Connect[GitHub](https://github.com/facebook)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



© 2024 Meta

  * [Code of Conduct](/code-of-conduct)
  * [Privacy Policy](/legal/privacy)
  * [Cookie Policy](/legal/cookie-policy)
  * [Terms of Use](/legal/terms)
  * [Trademark Policy](/legal/trademark)



Don’t miss what’s happening

People on X are the first to know.

[Log in](/login)

[Sign up](/i/flow/signup)

Welcome to x.com!

We are letting you know that we are changing our URL, but your privacy and data protection settings remain the same.

For more details, see our Privacy Policy: 

# [](/)

[Settings](/settings)

[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=facebook%2Freact) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ facebook ](/facebook) / **[react](/facebook/react) ** Public

  * [ Notifications ](/login?return_to=%2Ffacebook%2Freact) You must be signed in to change notification settings
  * [ Fork 47.2k ](/login?return_to=%2Ffacebook%2Freact)
  * [ Star  231k ](/login?return_to=%2Ffacebook%2Freact)




The library for web and native user interfaces. 

[react.dev](https://react.dev "https://react.dev")

### License

[ MIT license ](/facebook/react/blob/main/LICENSE)

[ 231k stars ](/facebook/react/stargazers) [ 47.2k forks ](/facebook/react/forks) [ Branches ](/facebook/react/branches) [ Tags ](/facebook/react/tags) [ Activity ](/facebook/react/activity)

[ Star  ](/login?return_to=%2Ffacebook%2Freact)

[ Notifications ](/login?return_to=%2Ffacebook%2Freact) You must be signed in to change notification settings

  * [ Code ](/facebook/react)
  * [ Issues 764 ](/facebook/react/issues)
  * [ Pull requests 176 ](/facebook/react/pulls)
  * [ Actions ](/facebook/react/actions)
  * [ Projects 0 ](/facebook/react/projects)
  * [ Wiki ](/facebook/react/wiki)
  * [ Security ](/facebook/react/security)
  * [ Insights ](/facebook/react/pulse)



Additional navigation options

  * [ Code  ](/facebook/react)
  * [ Issues  ](/facebook/react/issues)
  * [ Pull requests  ](/facebook/react/pulls)
  * [ Actions  ](/facebook/react/actions)
  * [ Projects  ](/facebook/react/projects)
  * [ Wiki  ](/facebook/react/wiki)
  * [ Security  ](/facebook/react/security)
  * [ Insights  ](/facebook/react/pulse)



# facebook/react

main

[**358** Branches](/facebook/react/branches)[**145** Tags](/facebook/react/tags)

[](/facebook/react/branches)[](/facebook/react/tags)

Go to file

Code

## Folders and files

Name| Name| Last commit message| Last commit date  
---|---|---|---  
  
## Latest commit

[](/sebmarkbage)[sebmarkbage](/facebook/react/commits?author=sebmarkbage)[[Flight] Mark Errored Server Components (](/facebook/react/commit/50f00fd876b0b92b243cd8b54a222f9577446392)[#31879](https://github.com/facebook/react/pull/31879)[)](/facebook/react/commit/50f00fd876b0b92b243cd8b54a222f9577446392)Dec 28, 2024[50f00fd](/facebook/react/commit/50f00fd876b0b92b243cd8b54a222f9577446392) · Dec 28, 2024

## History

[19,815 Commits](/facebook/react/commits/main/)[](/facebook/react/commits/main/)  
[.codesandbox](/facebook/react/tree/main/.codesandbox ".codesandbox")| [.codesandbox](/facebook/react/tree/main/.codesandbox ".codesandbox")| [Codesandbox: upgrade to Node.js 18 (](/facebook/react/commit/88313ffd57a5df2666520c9a528eafdf2914d5f2 "Codesandbox: upgrade to Node.js 18 \(#26330\)
Turns out Codesandbox didn't support `String.prototype.replaceAll` in
#26329.
This updates the config to use Node.js 18 for Codesandbox builds.")[#26330](https://github.com/facebook/react/pull/26330)[)](/facebook/react/commit/88313ffd57a5df2666520c9a528eafdf2914d5f2 "Codesandbox: upgrade to Node.js 18 \(#26330\)
Turns out Codesandbox didn't support `String.prototype.replaceAll` in
#26329.
This updates the config to use Node.js 18 for Codesandbox builds.")| Mar 7, 2023  
[.github](/facebook/react/tree/main/.github ".github")| [.github](/facebook/react/tree/main/.github ".github")| [Update runtime workflow to use HEAD commit (](/facebook/react/commit/9463d51e515544bb3119dd4cec46ce2177cf4c62 "Update runtime workflow to use HEAD commit \(#31850\)
This updates the CI workflow for the runtime build and tests to use the
HEAD commit of the PR branch rather than the Fake News merge commit that
the `@actions/checkout` action bafflingly defaults to.
Testing against the merge commit never made sense to me as a behavior
because as soon as someone updates upstream, it's out of date anyway.
It should just match the exact commit that the developer pushed, and the
once that appears in the GitHub UI.")[#31850](https://github.com/facebook/react/pull/31850)[)](/facebook/react/commit/9463d51e515544bb3119dd4cec46ce2177cf4c62 "Update runtime workflow to use HEAD commit \(#31850\)
This updates the CI workflow for the runtime build and tests to use the
HEAD commit of the PR branch rather than the Fake News merge commit that
the `@actions/checkout` action bafflingly defaults to.
Testing against the merge commit never made sense to me as a behavior
because as soon as someone updates upstream, it's out of date anyway.
It should just match the exact commit that the developer pushed, and the
once that appears in the GitHub UI.")| Dec 19, 2024  
[compiler](/facebook/react/tree/main/compiler "compiler")| [compiler](/facebook/react/tree/main/compiler "compiler")| [[rcr] Relax react peer dep requirement (](/facebook/react/commit/4309bde2b4faa044dc6266142378a330c030e053 "\[rcr\] Relax react peer dep requirement \(#31915\)
There's no real reason to restrict the React peer dep to
non-experimental, so relax it.
---
\[//\]: # \(BEGIN SAPLING FOOTER\)
Stack created with \[Sapling\]\(https://sapling-scm.com\). Best reviewed
with \[ReviewStack\]\(https://reviewstack.dev/facebook/react/pull/31915\).
* #31919
* #31918
* #31917
* #31916
* __->__ #31915
* #31920")[#31915](https://github.com/facebook/react/pull/31915)[)](/facebook/react/commit/4309bde2b4faa044dc6266142378a330c030e053 "\[rcr\] Relax react peer dep requirement \(#31915\)
There's no real reason to restrict the React peer dep to
non-experimental, so relax it.
---
\[//\]: # \(BEGIN SAPLING FOOTER\)
Stack created with \[Sapling\]\(https://sapling-scm.com\). Best reviewed
with \[ReviewStack\]\(https://reviewstack.dev/facebook/react/pull/31915\).
* #31919
* #31918
* #31917
* #31916
* __->__ #31915
* #31920")| Dec 28, 2024  
[fixtures](/facebook/react/tree/main/fixtures "fixtures")| [fixtures](/facebook/react/tree/main/fixtures "fixtures")| [Add Profiler mode to fixtures even if React DevTools is not installed (](/facebook/react/commit/d4ac7689f94f8ed53b779a651d62a2b9af20e6c0 "Add Profiler mode to fixtures even if React DevTools is not installed \(#31877\)
Currently you need to do one of either:
1. Install React DevTools
2. Install React Refresh
3. Add Profiler component
To opt in to component level profiling.
It was a bit confusing that some of the fixtures was doing 2 which made
them work while other was depending on if you had DevTools.
Really React Refresh shouldn't really opt you in I think.")[…](https://github.com/facebook/react/pull/31877)| Dec 28, 2024  
[packages](/facebook/react/tree/main/packages "packages")| [packages](/facebook/react/tree/main/packages "packages")| [[Flight] Mark Errored Server Components (](/facebook/react/commit/50f00fd876b0b92b243cd8b54a222f9577446392 "\[Flight\] Mark Errored Server Components \(#31879\)
This is similar to #31876 but for Server Components.
It marks them as errored and puts the error message in the Summary
properties.
<img width="1511" alt="Screenshot 2024-12-20 at 5 05 35 PM"
src="https://github.com/user-attachments/assets/92f11e42-0e23-41c7-bfd4-09effb25e024"
/>
This only looks at the current chunk for rejections. That means that
there might still be promises deeper that rejected but it's only the
immediate return value of the Server Component that's considered a
rejection of the component itself.")[#31879](https://github.com/facebook/react/pull/31879)[)](/facebook/react/commit/50f00fd876b0b92b243cd8b54a222f9577446392 "\[Flight\] Mark Errored Server Components \(#31879\)
This is similar to #31876 but for Server Components.
It marks them as errored and puts the error message in the Summary
properties.
<img width="1511" alt="Screenshot 2024-12-20 at 5 05 35 PM"
src="https://github.com/user-attachments/assets/92f11e42-0e23-41c7-bfd4-09effb25e024"
/>
This only looks at the current chunk for rejections. That means that
there might still be promises deeper that rejected but it's only the
immediate return value of the Server Component that's considered a
rejection of the component itself.")| Dec 28, 2024  
[scripts](/facebook/react/tree/main/scripts "scripts")| [scripts](/facebook/react/tree/main/scripts "scripts")| [[asserts helpers] react package (](/facebook/react/commit/94867f33be327a52bfffda89a14c85897180e43e "\[asserts helpers\] react package \(#31853\)
Based off https://github.com/facebook/react/pull/31844
Commit to review:
https://github.com/facebook/react/commit/11aa104e3e70c0accc21f785060b812beb145089
Converts the rest of the `react` package.")[#31853](https://github.com/facebook/react/pull/31853)[)](/facebook/react/commit/94867f33be327a52bfffda89a14c85897180e43e "\[asserts helpers\] react package \(#31853\)
Based off https://github.com/facebook/react/pull/31844
Commit to review:
https://github.com/facebook/react/commit/11aa104e3e70c0accc21f785060b812beb145089
Converts the rest of the `react` package.")| Dec 24, 2024  
[.editorconfig](/facebook/react/blob/main/.editorconfig ".editorconfig")| [.editorconfig](/facebook/react/blob/main/.editorconfig ".editorconfig")| [Remove trim_trailing_whitespace from editorconfig (](/facebook/react/commit/33c7bd9ae3b4f998a477fe0ea8ebdf2f2ee8a144 "Remove trim_trailing_whitespace from editorconfig \(#31413\)
This setting breaks `toMatchInlineSnapshot` by removing whitespace in
snapshots.")[#31413](https://github.com/facebook/react/pull/31413)[)](/facebook/react/commit/33c7bd9ae3b4f998a477fe0ea8ebdf2f2ee8a144 "Remove trim_trailing_whitespace from editorconfig \(#31413\)
This setting breaks `toMatchInlineSnapshot` by removing whitespace in
snapshots.")| Nov 5, 2024  
[.eslintignore](/facebook/react/blob/main/.eslintignore ".eslintignore")| [.eslintignore](/facebook/react/blob/main/.eslintignore ".eslintignore")| [Fix ESLint and Prettier configs for React Compiler (](/facebook/react/commit/c93c30f9d4c6339708636c3fbf9189acfe96443f "Fix ESLint and Prettier configs for React Compiler \(#29073\)
Fixes the top-level ESLint and Prettier configs to ignore the compiler.
For now the compiler has its own prettier and linting setup with
different versions/configs.")[#29073](https://github.com/facebook/react/pull/29073)[)](/facebook/react/commit/c93c30f9d4c6339708636c3fbf9189acfe96443f "Fix ESLint and Prettier configs for React Compiler \(#29073\)
Fixes the top-level ESLint and Prettier configs to ignore the compiler.
For now the compiler has its own prettier and linting setup with
different versions/configs.")| May 16, 2024  
[.eslintrc.js](/facebook/react/blob/main/.eslintrc.js ".eslintrc.js")| [.eslintrc.js](/facebook/react/blob/main/.eslintrc.js ".eslintrc.js")| [Implement react-server-dom-parcel (](/facebook/react/commit/ca587425fe21b644bebb336f058f1a0d9763631b "Implement react-server-dom-parcel \(#31725\)
This adds a new `react-server-dom-parcel-package`, which is an RSC
integration for the Parcel bundler. It is mostly copied from the
existing webpack/turbopack integrations, with some changes to utilize
Parcel runtime APIs for loading and executing bundles/modules.
See https://github.com/parcel-bundler/parcel/pull/10043 for the Parcel
side of this, which includes the plugin needed to generate client and
server references. https://github.com/parcel-bundler/rsc-examples also
includes examples of various ways to use RSCs with Parcel.
Differences from other integrations:
* Client and server modules are all part of the same graph, and we use
Parcel's
\[environments\]\(https://parceljs.org/plugin-system/transformer/#the-environment\)
to distinguish them. The server is the Parcel build entry point, and it
imports and renders server components in route handlers. When a `"use
client"` directive is seen, the environment changes and Parcel creates a
new client bundle for the page, combining all client modules together.
CSS from both client and server components are also combined
automatically.
* There is no separate manifest file that needs to be passed around by
the user. A \[Runtime\]\(https://parceljs.org/plugin-system/runtime/\)
plugin injects client and server references as needed into the relevant
bundles, and registers server action ids using `react-server-dom-parcel`
automatically.
* A special `<Resources>` component is also generated by Parcel to
render the `<script>` and `<link rel="stylesheet">` elements needed for
a page, using the relevant info from the bundle graph.
Note: I've already published a 0.0.x version of this package to npm for
testing purposes but happy to add whoever needs access to it as well.
### Questions
* How to test this in the React repo. I'll have integration tests in
Parcel, but setting up all the different mocks and environments to
simulate that here seems challenging. I could try to copy how
Webpack/Turbopack do it but it's a bit different.
* Where to put TypeScript types. Right now I have some ambient types in
my \[example
repo\]\(https://github.com/parcel-bundler/rsc-examples/blob/main/types.d.ts\)
but it would be nice for users not to copy and paste these. Can I
include them in the package or do they need to maintained separately in
definitelytyped? I would really prefer not to have to maintain code in
three different repos ideally.
---------
Co-authored-by: Sebastian Markbage <sebastian@calyptus.eu>")[#31725](https://github.com/facebook/react/pull/31725)[)](/facebook/react/commit/ca587425fe21b644bebb336f058f1a0d9763631b "Implement react-server-dom-parcel \(#31725\)
This adds a new `react-server-dom-parcel-package`, which is an RSC
integration for the Parcel bundler. It is mostly copied from the
existing webpack/turbopack integrations, with some changes to utilize
Parcel runtime APIs for loading and executing bundles/modules.
See https://github.com/parcel-bundler/parcel/pull/10043 for the Parcel
side of this, which includes the plugin needed to generate client and
server references. https://github.com/parcel-bundler/rsc-examples also
includes examples of various ways to use RSCs with Parcel.
Differences from other integrations:
* Client and server modules are all part of the same graph, and we use
Parcel's
\[environments\]\(https://parceljs.org/plugin-system/transformer/#the-environment\)
to distinguish them. The server is the Parcel build entry point, and it
imports and renders server components in route handlers. When a `"use
client"` directive is seen, the environment changes and Parcel creates a
new client bundle for the page, combining all client modules together.
CSS from both client and server components are also combined
automatically.
* There is no separate manifest file that needs to be passed around by
the user. A \[Runtime\]\(https://parceljs.org/plugin-system/runtime/\)
plugin injects client and server references as needed into the relevant
bundles, and registers server action ids using `react-server-dom-parcel`
automatically.
* A special `<Resources>` component is also generated by Parcel to
render the `<script>` and `<link rel="stylesheet">` elements needed for
a page, using the relevant info from the bundle graph.
Note: I've already published a 0.0.x version of this package to npm for
testing purposes but happy to add whoever needs access to it as well.
### Questions
* How to test this in the React repo. I'll have integration tests in
Parcel, but setting up all the different mocks and environments to
simulate that here seems challenging. I could try to copy how
Webpack/Turbopack do it but it's a bit different.
* Where to put TypeScript types. Right now I have some ambient types in
my \[example
repo\]\(https://github.com/parcel-bundler/rsc-examples/blob/main/types.d.ts\)
but it would be nice for users not to copy and paste these. Can I
include them in the package or do they need to maintained separately in
definitelytyped? I would really prefer not to have to maintain code in
three different repos ideally.
---------
Co-authored-by: Sebastian Markbage <sebastian@calyptus.eu>")| Dec 12, 2024  
[.git-blame-ignore-revs](/facebook/react/blob/main/.git-blame-ignore-revs ".git-blame-ignore-revs")| [.git-blame-ignore-revs](/facebook/react/blob/main/.git-blame-ignore-revs ".git-blame-ignore-revs")| [Add run prettier commit to .git-blame-ignore-revs](/facebook/react/commit/d439f279ff0517417e062cae8ebb77a67fe21fa9 "Add run prettier commit to .git-blame-ignore-revs
ghstack-source-id: a10c3b3d6412873023747d6f253f8793fa689b60
Pull Request resolved: https://github.com/facebook/react/pull/30391")| Jul 19, 2024  
[.gitattributes](/facebook/react/blob/main/.gitattributes ".gitattributes")| [.gitattributes](/facebook/react/blob/main/.gitattributes ".gitattributes")| [.gitattributes to ensure LF line endings when we should](/facebook/react/commit/8abca77381fbd31ffc2ff2b4fa12020768b8fc07 ".gitattributes to ensure LF line endings when we should")| Jan 18, 2014  
[.gitignore](/facebook/react/blob/main/.gitignore ".gitignore")| [.gitignore](/facebook/react/blob/main/.gitignore ".gitignore")| [feat[devtools]: add package for fusebox integration (](/facebook/react/commit/96c58466109c2944adb817001fec38088a7c431e "feat\[devtools\]: add package for fusebox integration \(#28553\)
## Summary
Stacked on https://github.com/facebook/react/pull/28552. Review only the
\[last commit at the
top\]\(https://github.com/facebook/react/pull/28553/commits/c69952f1bf6e23252d47e0f7eb98efbbb2cc2c55\).
These changes add new package `react-devtools-fusebox`, which is the
entrypoint for the RDT Frontend, which will be used in Chrome DevTools
panel. The main differences from other frontend shells \(extension,
standalone\) are:
1. This package builds scripts in ESM format, this is required by Chrome
DevTools, see webpack config:
https://github.com/facebook/react/blob/c69952f1bf6e23252d47e0f7eb98efbbb2cc2c55/packages/react-devtools-fusebox/webpack.config.frontend.js#L50-L52
2. The build includes styles in a separate `.css` file, which is
required for Chrome DevTools: styles are loaded lazily once panel is
mounted.")[#28553](https://github.com/facebook/react/pull/28553)[)](/facebook/react/commit/96c58466109c2944adb817001fec38088a7c431e "feat\[devtools\]: add package for fusebox integration \(#28553\)
## Summary
Stacked on https://github.com/facebook/react/pull/28552. Review only the
\[last commit at the
top\]\(https://github.com/facebook/react/pull/28553/commits/c69952f1bf6e23252d47e0f7eb98efbbb2cc2c55\).
These changes add new package `react-devtools-fusebox`, which is the
entrypoint for the RDT Frontend, which will be used in Chrome DevTools
panel. The main differences from other frontend shells \(extension,
standalone\) are:
1. This package builds scripts in ESM format, this is required by Chrome
DevTools, see webpack config:
https://github.com/facebook/react/blob/c69952f1bf6e23252d47e0f7eb98efbbb2cc2c55/packages/react-devtools-fusebox/webpack.config.frontend.js#L50-L52
2. The build includes styles in a separate `.css` file, which is
required for Chrome DevTools: styles are loaded lazily once panel is
mounted.")| Apr 12, 2024  
[.mailmap](/facebook/react/blob/main/.mailmap ".mailmap")| [.mailmap](/facebook/react/blob/main/.mailmap ".mailmap")| [updates mailmap entries (](/facebook/react/commit/ebb2253428315bfa3237df403082b0d2ec2f9c5c "updates mailmap entries \(#19824\)")[#19824](https://github.com/facebook/react/pull/19824)[)](/facebook/react/commit/ebb2253428315bfa3237df403082b0d2ec2f9c5c "updates mailmap entries \(#19824\)")| Sep 12, 2020  
[.nvmrc](/facebook/react/blob/main/.nvmrc ".nvmrc")| [.nvmrc](/facebook/react/blob/main/.nvmrc ".nvmrc")| [[ci] Standardize node version and timezones](/facebook/react/commit/922c7971ba3e52adf46678774bef3022d1aad4e0 "\[ci\] Standardize node version and timezones
Quick change to standardize on a single timezone across all workflows
and to use the same version of node \(18.20.1\).
Also updates .nvmrc
ghstack-source-id: e1d43006ec018acfcd88444feadde1b1d260de9d
Pull Request resolved: https://github.com/facebook/react/pull/30323")| Jul 12, 2024  
[.prettierignore](/facebook/react/blob/main/.prettierignore ".prettierignore")| [.prettierignore](/facebook/react/blob/main/.prettierignore ".prettierignore")| [[prettier] Ignore compiler/target (](/facebook/react/commit/0f1127b552790e6dc0b65650680237ba4c94d977 "\[prettier\] Ignore compiler/target \(#31168\)
Add missing directory to prettierignore.
---
\[//\]: # \(BEGIN SAPLING FOOTER\)
Stack created with \[Sapling\]\(https://sapling-scm.com\). Best reviewed
with \[ReviewStack\]\(https://reviewstack.dev/facebook/react/pull/31168\).
* #31167
* #31166
* #31165
* #31164
* #31148
* __->__ #31168")[#31168](https://github.com/facebook/react/pull/31168)[)](/facebook/react/commit/0f1127b552790e6dc0b65650680237ba4c94d977 "\[prettier\] Ignore compiler/target \(#31168\)
Add missing directory to prettierignore.
---
\[//\]: # \(BEGIN SAPLING FOOTER\)
Stack created with \[Sapling\]\(https://sapling-scm.com\). Best reviewed
with \[ReviewStack\]\(https://reviewstack.dev/facebook/react/pull/31168\).
* #31167
* #31166
* #31165
* #31164
* #31148
* __->__ #31168")| Oct 10, 2024  
[.prettierrc.js](/facebook/react/blob/main/.prettierrc.js ".prettierrc.js")| [.prettierrc.js](/facebook/react/blob/main/.prettierrc.js ".prettierrc.js")| [[BE] switch to hermes parser for prettier (](/facebook/react/commit/70484844bfd47382ad0011e0066ccf25d1a84464 "\[BE\] switch to hermes parser for prettier \(#30421\)
This will allow us to parse new flow syntax since the `flow` parser is
no longer updated.
I had to exclude some files and have them fall back to `flow` parser
since they contain invalid graphql syntax that makes the plugin crash.")[#30421](https://github.com/facebook/react/pull/30421)[)](/facebook/react/commit/70484844bfd47382ad0011e0066ccf25d1a84464 "\[BE\] switch to hermes parser for prettier \(#30421\)
This will allow us to parse new flow syntax since the `flow` parser is
no longer updated.
I had to exclude some files and have them fall back to `flow` parser
since they contain invalid graphql syntax that makes the plugin crash.")| Jul 23, 2024  
[.watchmanconfig](/facebook/react/blob/main/.watchmanconfig ".watchmanconfig")| [.watchmanconfig](/facebook/react/blob/main/.watchmanconfig ".watchmanconfig")| [.watchmanconfig must be valid json (](/facebook/react/commit/29b45596354035754d598d8b23a8233f3d2414f0 ".watchmanconfig must be valid json \(#16118\)
faceworldproblems?")[#16118](https://github.com/facebook/react/pull/16118)[)](/facebook/react/commit/29b45596354035754d598d8b23a8233f3d2414f0 ".watchmanconfig must be valid json \(#16118\)
faceworldproblems?")| Jul 12, 2019  
[CHANGELOG-canary.md](/facebook/react/blob/main/CHANGELOG-canary.md "CHANGELOG-canary.md")| [CHANGELOG-canary.md](/facebook/react/blob/main/CHANGELOG-canary.md "CHANGELOG-canary.md")| [Add useActionState to CHANGELOG-canary.md (](/facebook/react/commit/0a444356748ec1619acfbb60f9b112451c709343 "Add useActionState to CHANGELOG-canary.md \(#28632\)
Co-authored-by: Sébastien Lorber <slorber@users.noreply.github.com>")[#28632](https://github.com/facebook/react/pull/28632)[)](/facebook/react/commit/0a444356748ec1619acfbb60f9b112451c709343 "Add useActionState to CHANGELOG-canary.md \(#28632\)
Co-authored-by: Sébastien Lorber <slorber@users.noreply.github.com>")| Mar 26, 2024  
[CHANGELOG.md](/facebook/react/blob/main/CHANGELOG.md "CHANGELOG.md")| [CHANGELOG.md](/facebook/react/blob/main/CHANGELOG.md "CHANGELOG.md")| [Fix headings in React 19 CHANGELOG (](/facebook/react/commit/7283a213dbbc31029e65005276f12202558558fc "Fix headings in React 19 CHANGELOG \(#31683\)
Co-authored-by: eps1lon <sebastian.silbermann@vercel.com>")[#31683](https://github.com/facebook/react/pull/31683)[)](/facebook/react/commit/7283a213dbbc31029e65005276f12202558558fc "Fix headings in React 19 CHANGELOG \(#31683\)
Co-authored-by: eps1lon <sebastian.silbermann@vercel.com>")| Dec 6, 2024  
[CODE_OF_CONDUCT.md](/facebook/react/blob/main/CODE_OF_CONDUCT.md "CODE_OF_CONDUCT.md")| [CODE_OF_CONDUCT.md](/facebook/react/blob/main/CODE_OF_CONDUCT.md "CODE_OF_CONDUCT.md")| [revert last grammatical edit (](/facebook/react/commit/7a227276e653b481b73ed9e9178244b53d61f730 "revert last grammatical edit \(#25067\)
on line 29, #24798 edited \(others'\) to \(other's\); however, the subject here is plural \(e.g. "others in the community"\), thus \(others'\) is grammatically correct")[#25067](https://github.com/facebook/react/pull/25067)[)](/facebook/react/commit/7a227276e653b481b73ed9e9178244b53d61f730 "revert last grammatical edit \(#25067\)
on line 29, #24798 edited \(others'\) to \(other's\); however, the subject here is plural \(e.g. "others in the community"\), thus \(others'\) is grammatically correct")| Aug 11, 2022  
[CONTRIBUTING.md](/facebook/react/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")| [CONTRIBUTING.md](/facebook/react/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")| [Fix: Updated link in CONTRIBUTING (](/facebook/react/commit/2d80a0cd690bb5650b6c8a6c079a87b5dc42bd15 "Fix: Updated link in CONTRIBUTING \(#25381\)")[#25381](https://github.com/facebook/react/pull/25381)[)](/facebook/react/commit/2d80a0cd690bb5650b6c8a6c079a87b5dc42bd15 "Fix: Updated link in CONTRIBUTING \(#25381\)")| Oct 3, 2022  
[LICENSE](/facebook/react/blob/main/LICENSE "LICENSE")| [LICENSE](/facebook/react/blob/main/LICENSE "LICENSE")| [[Codemod] Update copyright header to Meta (](/facebook/react/commit/9cdf8a99edcfd94d7420835ea663edca04237527 "\[Codemod\] Update copyright header to Meta \(#25315\)
* Facebook -> Meta in copyright
rg --files | xargs sed -i 's#Copyright \(c\) Facebook, Inc. and its affiliates.#Copyright \(c\) Meta Platforms, Inc. and affiliates.#g'
* Manual tweaks")[#25315](https://github.com/facebook/react/pull/25315)[)](/facebook/react/commit/9cdf8a99edcfd94d7420835ea663edca04237527 "\[Codemod\] Update copyright header to Meta \(#25315\)
* Facebook -> Meta in copyright
rg --files | xargs sed -i 's#Copyright \(c\) Facebook, Inc. and its affiliates.#Copyright \(c\) Meta Platforms, Inc. and affiliates.#g'
* Manual tweaks")| Oct 18, 2022  
[README.md](/facebook/react/blob/main/README.md "README.md")| [README.md](/facebook/react/blob/main/README.md "README.md")| [[ez] Remove circleci badge from readme](/facebook/react/commit/4e482f490405c0c601d8712a0625fd17c04978e4 "\[ez\] Remove circleci badge from readme
CircleCI is no longer in use in this repo: a6b5ed01ae98a18507cb92d8e932a8ca321602e6
ghstack-source-id: b6234f11d143d2c65832e17ccf180b255dc23c9d
Pull Request resolved: https://github.com/facebook/react/pull/30502")| Jul 29, 2024  
[ReactVersions.js](/facebook/react/blob/main/ReactVersions.js "ReactVersions.js")| [ReactVersions.js](/facebook/react/blob/main/ReactVersions.js "ReactVersions.js")| [Fix canary version strings (](/facebook/react/commit/e854ce3b1551a4ac97012336c2e2076ab0cc0636 "Fix canary version strings \(#31721\)
We're still publishing RCs and creating canary version strings using the
RC naming convention. Setting the `canaryChannelLabel` back to canary
fixes the version names and tags after the 19 stable release.")[#31721](https://github.com/facebook/react/pull/31721)[)](/facebook/react/commit/e854ce3b1551a4ac97012336c2e2076ab0cc0636 "Fix canary version strings \(#31721\)
We're still publishing RCs and creating canary version strings using the
RC naming convention. Setting the `canaryChannelLabel` back to canary
fixes the version names and tags after the 19 stable release.")| Dec 13, 2024  
[SECURITY.md](/facebook/react/blob/main/SECURITY.md "SECURITY.md")| [SECURITY.md](/facebook/react/blob/main/SECURITY.md "SECURITY.md")| [Create SECURITY.md (](/facebook/react/commit/1b6e269751c28030429503a60590114e252fc86c "Create SECURITY.md \(#15784\)
Adds SECURITY.md as mentioned in #15722.")[#15784](https://github.com/facebook/react/pull/15784)[)](/facebook/react/commit/1b6e269751c28030429503a60590114e252fc86c "Create SECURITY.md \(#15784\)
Adds SECURITY.md as mentioned in #15722.")| Jan 10, 2020  
[babel.config.js](/facebook/react/blob/main/babel.config.js "babel.config.js")| [babel.config.js](/facebook/react/blob/main/babel.config.js "babel.config.js")| [Upgrade tests to use react/jsx-runtime (](/facebook/react/commit/952aa74f8e45ed35ac6bf1de10ad5ed5410deac6 "Upgrade tests to use react/jsx-runtime \(#28252\)
Instead of createElement.
We should have done this when we initially released jsx-runtime but
better late than never. The general principle is that our tests should
be written using the most up-to-date idioms that we recommend for users,
except when explicitly testing an edge case or legacy behavior, like for
backwards compatibility.
Most of the diff is related to tweaking test output and isn't very
interesting.
I did have to workaround an issue related to component stacks. The
component stack logic depends on shared state that lives in the React
module. The problem is that most of our tests reset the React module
state and re-require a fresh instance of React, React DOM, etc. However,
the JSX runtime is not re-required because it's injected by the compiler
as a static import. This means its copy of the shared state is no longer
the same as the one used by React, causing any warning logged by the JSX
runtime to not include a component stack. \(This same issue also breaks
string refs, but since we're removing those soon I'm not so concerned
about that.\) The solution I went with for now is to mock the JSX runtime
with a proxy that re-requires the module on every function invocation. I
don't love this but it will have to do for now. What we should really do
is migrate our tests away from manually resetting the module state and
use import syntax instead.")[#28252](https://github.com/facebook/react/pull/28252)[)](/facebook/react/commit/952aa74f8e45ed35ac6bf1de10ad5ed5410deac6 "Upgrade tests to use react/jsx-runtime \(#28252\)
Instead of createElement.
We should have done this when we initially released jsx-runtime but
better late than never. The general principle is that our tests should
be written using the most up-to-date idioms that we recommend for users,
except when explicitly testing an edge case or legacy behavior, like for
backwards compatibility.
Most of the diff is related to tweaking test output and isn't very
interesting.
I did have to workaround an issue related to component stacks. The
component stack logic depends on shared state that lives in the React
module. The problem is that most of our tests reset the React module
state and re-require a fresh instance of React, React DOM, etc. However,
the JSX runtime is not re-required because it's injected by the compiler
as a static import. This means its copy of the shared state is no longer
the same as the one used by React, causing any warning logged by the JSX
runtime to not include a component stack. \(This same issue also breaks
string refs, but since we're removing those soon I'm not so concerned
about that.\) The solution I went with for now is to mock the JSX runtime
with a proxy that re-requires the module on every function invocation. I
don't love this but it will have to do for now. What we should really do
is migrate our tests away from manually resetting the module state and
use import syntax instead.")| Feb 6, 2024  
[dangerfile.js](/facebook/react/blob/main/dangerfile.js "dangerfile.js")| [dangerfile.js](/facebook/react/blob/main/dangerfile.js "dangerfile.js")| [[ci] Cleanup more references to circleci](/facebook/react/commit/8fe510752f150a34be4409f474ca7de0746b7b18 "\[ci\] Cleanup more references to circleci
ghstack-source-id: 85a5f17b2b9dee35bb747ce2da13bffaed0fa34a
Pull Request resolved: https://github.com/facebook/react/pull/30509")| Jul 30, 2024  
[netlify.toml](/facebook/react/blob/main/netlify.toml "netlify.toml")| [netlify.toml](/facebook/react/blob/main/netlify.toml "netlify.toml")| [[UMD] Remove umd builds (](/facebook/react/commit/da6ba53b10d8240fc251ba14a3e5878604d3dc7d "\[UMD\] Remove umd builds \(#28735\)
In React 19 React will finally stop publishing UMD builds. This is
motivated primarily by the lack of use of UMD format and the added
complexity of maintaining build infra for these releases. Additionally
with ESM becoming more prevalent in browsers and services like esm.sh
which can host React as an ESM module there are other options for doing
script tag based react loading.
This PR removes all the UMD build configs and forks.
There are some fixtures that still have references to UMD builds however
many of them already do not work \(for instance they are using legacy
features like ReactDOM.render\) and rather than block the removal on
these fixtures being brought up to date we'll just move forward and fix
or removes fixtures as necessary in the future.")[#28735](https://github.com/facebook/react/pull/28735)[)](/facebook/react/commit/da6ba53b10d8240fc251ba14a3e5878604d3dc7d "\[UMD\] Remove umd builds \(#28735\)
In React 19 React will finally stop publishing UMD builds. This is
motivated primarily by the lack of use of UMD format and the added
complexity of maintaining build infra for these releases. Additionally
with ESM becoming more prevalent in browsers and services like esm.sh
which can host React as an ESM module there are other options for doing
script tag based react loading.
This PR removes all the UMD build configs and forks.
There are some fixtures that still have references to UMD builds however
many of them already do not work \(for instance they are using legacy
features like ReactDOM.render\) and rather than block the removal on
these fixtures being brought up to date we'll just move forward and fix
or removes fixtures as necessary in the future.")| Apr 17, 2024  
[package.json](/facebook/react/blob/main/package.json "package.json")| [package.json](/facebook/react/blob/main/package.json "package.json")| [Bump rollup from 3.20.0 to 3.29.5 (](/facebook/react/commit/db320ea4d910d360ccb83850ccdbc464a77fc1c5 "Bump rollup from 3.20.0 to 3.29.5 \(#31072\)
Bumps \[rollup\]\(https://github.com/rollup/rollup\) from 3.20.0 to 3.29.5.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a
href="https://github.com/rollup/rollup/releases">rollup's
releases</a>.</em></p>
<blockquote>
<h2>v3.29.4</h2>
<h2>3.29.4</h2>
<p><em>2023-09-28</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix static analysis when an exported function uses callbacks \(<a
href="https://redirect.github.com/rollup/rollup/issues/5158">#5158</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5158">#5158</a>:
Deoptimize all parameters when losing track of a function \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>v3.29.3</h2>
<h2>3.29.3</h2>
<p><em>2023-09-24</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix a bug where code was wrongly tree-shaken after mutating function
parameters \(<a
href="https://redirect.github.com/rollup/rollup/issues/5153">#5153</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5145">#5145</a>:
docs: improve the docs repl appearance in the light mode \(<a
href="https://github.com/TrickyPi"><code>@​TrickyPi</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5148">#5148</a>:
chore\(deps\): update dependency
<code>@​vue/eslint-config-typescript</code> to v12 \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5149">#5149</a>:
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5153">#5153</a>:
Fully deoptimize first level path when deoptimizing nested parameter
paths \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>v3.29.2</h2>
<h2>3.29.2</h2>
<p><em>2023-09-15</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Export <code>TreeshakingPreset</code> type \(<a
href="https://redirect.github.com/rollup/rollup/issues/5131">#5131</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5131">#5131</a>:
fix: exports <code>TreeshakingPreset</code> \(<a
href="https://github.com/moltar"><code>@​moltar</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5134">#5134</a>:
docs: steps to enable symlinks on windows \(<a
href="https://github.com/thebanjomatic"><code>@​thebanjomatic</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5137">#5137</a>:
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
</ul>
<h2>v3.29.1</h2>
<h2>3.29.1</h2>
<p><em>2023-09-10</em></p>
<h3>Bug Fixes</h3>
<!-- raw HTML omitted -->
</blockquote>
<p>... \(truncated\)</p>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href="https://github.com/rollup/rollup/blob/master/CHANGELOG.md">rollup's
changelog</a>.</em></p>
<blockquote>
<h1>rollup changelog</h1>
<h2>4.22.4</h2>
<p><em>2024-09-21</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix a vulnerability in generated code that affects IIFE, UMD and CJS
bundles when run in a browser context \(<a
href="https://redirect.github.com/rollup/rollup/issues/5671">#5671</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5670">#5670</a>:
refactor: Use object.prototype to check for reserved properties \(<a
href="https://github.com/YuHyeonWook"><code>@​YuHyeonWook</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5671">#5671</a>:
Fix DOM Clobbering CVE \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.3</h2>
<p><em>2024-09-21</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Ensure that mutations in modules without side effects are observed
while properly handling transitive dependencies \(<a
href="https://redirect.github.com/rollup/rollup/issues/5669">#5669</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5669">#5669</a>:
Ensure impure dependencies of pure modules are added \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.2</h2>
<p><em>2024-09-20</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Revert fix for side effect free modules until other issues are
investigated \(<a
href="https://redirect.github.com/rollup/rollup/issues/5667">#5667</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5667">#5667</a>:
Partially revert <a
href="https://redirect.github.com/rollup/rollup/issues/5658">#5658</a>
and re-apply <a
href="https://redirect.github.com/rollup/rollup/issues/5644">#5644</a>
\(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.1</h2>
<p><em>2024-09-20</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Revert <a
href="https://redirect.github.com/rollup/rollup/issues/5644">#5644</a>
&quot;stable chunk hashes&quot; while issues are being investigated</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5663">#5663</a>:
chore\(deps\): update dependency inquirer to v11 \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\], <a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<!-- raw HTML omitted -->
</blockquote>
<p>... \(truncated\)</p>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href="https://github.com/rollup/rollup/commit/dfd233d3a9feb18aa69b49b6c1da0248a4f1c6e3"><code>dfd233d</code></a>
3.29.5</li>
<li><a
href="https://github.com/rollup/rollup/commit/2ef77c00ec2635d42697cff2c0567ccc8db34fb4"><code>2ef77c0</code></a>
Fix DOM Clobbering CVE</li>
<li><a
href="https://github.com/rollup/rollup/commit/a6448b99f725d457e35821b73a865b5c4d4c6a61"><code>a6448b9</code></a>
3.29.4</li>
<li><a
href="https://github.com/rollup/rollup/commit/4e92d60fa90cead39481e3703d26e5d812f43bd1"><code>4e92d60</code></a>
Deoptimize all parameters when losing track of a function \(<a
href="https://redirect.github.com/rollup/rollup/issues/5158">#5158</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/801ffd1a9bebe550b6a0ce665bdca1ead06313de"><code>801ffd1</code></a>
3.29.3</li>
<li><a
href="https://github.com/rollup/rollup/commit/353e4628284b1ef4d8a8b47d895881e5ce6546f4"><code>353e462</code></a>
Fully deoptimize first level path when deoptimizing nested parameter
paths \(#...</li>
<li><a
href="https://github.com/rollup/rollup/commit/a1a89e77fbe06a23229486194970f0813593e9df"><code>a1a89e7</code></a>
chore\(deps\): update dependency
<code>@​vue/eslint-config-typescript</code> to v12 \(<a
href="https://redirect.github.com/rollup/rollup/issues/5148">#5148</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/cc14f7070af8c02ac2d477bda043f3203955291d"><code>cc14f70</code></a>
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://redirect.github.com/rollup/rollup/issues/5149">#5149</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/1e8355b2b68811da24e1d96dea32176b403dc377"><code>1e8355b</code></a>
docs: improve the docs repl appearance in the light mode \(<a
href="https://redirect.github.com/rollup/rollup/issues/5145">#5145</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/5950fc8a6bf6c9f8ef1c7ae05bb8c43d5c313212"><code>5950fc8</code></a>
Adapt branches in REPL workflow</li>
<li>Additional commits viewable in <a
href="https://github.com/rollup/rollup/compare/v3.20.0...v3.29.5">compare
view</a></li>
</ul>
</details>
<br />

\[!\[Dependabot compatibility
score\]\(https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=rollup&package-manager=npm_and_yarn&previous-version=3.20.0&new-version=3.29.5\)\]\(https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores\)
Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.
\[//\]: # \(dependabot-automerge-start\)
\[//\]: # \(dependabot-automerge-end\)
---
<details>
<summary>Dependabot commands and options</summary>
<br />
You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version \(unless you reopen
the PR or upgrade to it yourself\)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version \(unless you reopen
the PR or upgrade to it yourself\)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency \(unless you reopen the
PR or upgrade to it yourself\)
You can disable automated security fix PRs for this repo from the
\[Security Alerts
page\]\(https://github.com/facebook/react/network/alerts\).
</details>
Signed-off-by: dependabot\[bot\] <support@github.com>
Co-authored-by: dependabot\[bot\] <49699333+dependabot\[bot\]@users.noreply.github.com>")[#31072](https://github.com/facebook/react/pull/31072)[)](/facebook/react/commit/db320ea4d910d360ccb83850ccdbc464a77fc1c5 "Bump rollup from 3.20.0 to 3.29.5 \(#31072\)
Bumps \[rollup\]\(https://github.com/rollup/rollup\) from 3.20.0 to 3.29.5.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a
href="https://github.com/rollup/rollup/releases">rollup's
releases</a>.</em></p>
<blockquote>
<h2>v3.29.4</h2>
<h2>3.29.4</h2>
<p><em>2023-09-28</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix static analysis when an exported function uses callbacks \(<a
href="https://redirect.github.com/rollup/rollup/issues/5158">#5158</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5158">#5158</a>:
Deoptimize all parameters when losing track of a function \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>v3.29.3</h2>
<h2>3.29.3</h2>
<p><em>2023-09-24</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix a bug where code was wrongly tree-shaken after mutating function
parameters \(<a
href="https://redirect.github.com/rollup/rollup/issues/5153">#5153</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5145">#5145</a>:
docs: improve the docs repl appearance in the light mode \(<a
href="https://github.com/TrickyPi"><code>@​TrickyPi</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5148">#5148</a>:
chore\(deps\): update dependency
<code>@​vue/eslint-config-typescript</code> to v12 \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5149">#5149</a>:
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5153">#5153</a>:
Fully deoptimize first level path when deoptimizing nested parameter
paths \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>v3.29.2</h2>
<h2>3.29.2</h2>
<p><em>2023-09-15</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Export <code>TreeshakingPreset</code> type \(<a
href="https://redirect.github.com/rollup/rollup/issues/5131">#5131</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5131">#5131</a>:
fix: exports <code>TreeshakingPreset</code> \(<a
href="https://github.com/moltar"><code>@​moltar</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5134">#5134</a>:
docs: steps to enable symlinks on windows \(<a
href="https://github.com/thebanjomatic"><code>@​thebanjomatic</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5137">#5137</a>:
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
</ul>
<h2>v3.29.1</h2>
<h2>3.29.1</h2>
<p><em>2023-09-10</em></p>
<h3>Bug Fixes</h3>
<!-- raw HTML omitted -->
</blockquote>
<p>... \(truncated\)</p>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href="https://github.com/rollup/rollup/blob/master/CHANGELOG.md">rollup's
changelog</a>.</em></p>
<blockquote>
<h1>rollup changelog</h1>
<h2>4.22.4</h2>
<p><em>2024-09-21</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix a vulnerability in generated code that affects IIFE, UMD and CJS
bundles when run in a browser context \(<a
href="https://redirect.github.com/rollup/rollup/issues/5671">#5671</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5670">#5670</a>:
refactor: Use object.prototype to check for reserved properties \(<a
href="https://github.com/YuHyeonWook"><code>@​YuHyeonWook</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5671">#5671</a>:
Fix DOM Clobbering CVE \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.3</h2>
<p><em>2024-09-21</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Ensure that mutations in modules without side effects are observed
while properly handling transitive dependencies \(<a
href="https://redirect.github.com/rollup/rollup/issues/5669">#5669</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5669">#5669</a>:
Ensure impure dependencies of pure modules are added \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.2</h2>
<p><em>2024-09-20</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Revert fix for side effect free modules until other issues are
investigated \(<a
href="https://redirect.github.com/rollup/rollup/issues/5667">#5667</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5667">#5667</a>:
Partially revert <a
href="https://redirect.github.com/rollup/rollup/issues/5658">#5658</a>
and re-apply <a
href="https://redirect.github.com/rollup/rollup/issues/5644">#5644</a>
\(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.1</h2>
<p><em>2024-09-20</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Revert <a
href="https://redirect.github.com/rollup/rollup/issues/5644">#5644</a>
&quot;stable chunk hashes&quot; while issues are being investigated</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5663">#5663</a>:
chore\(deps\): update dependency inquirer to v11 \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\], <a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<!-- raw HTML omitted -->
</blockquote>
<p>... \(truncated\)</p>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href="https://github.com/rollup/rollup/commit/dfd233d3a9feb18aa69b49b6c1da0248a4f1c6e3"><code>dfd233d</code></a>
3.29.5</li>
<li><a
href="https://github.com/rollup/rollup/commit/2ef77c00ec2635d42697cff2c0567ccc8db34fb4"><code>2ef77c0</code></a>
Fix DOM Clobbering CVE</li>
<li><a
href="https://github.com/rollup/rollup/commit/a6448b99f725d457e35821b73a865b5c4d4c6a61"><code>a6448b9</code></a>
3.29.4</li>
<li><a
href="https://github.com/rollup/rollup/commit/4e92d60fa90cead39481e3703d26e5d812f43bd1"><code>4e92d60</code></a>
Deoptimize all parameters when losing track of a function \(<a
href="https://redirect.github.com/rollup/rollup/issues/5158">#5158</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/801ffd1a9bebe550b6a0ce665bdca1ead06313de"><code>801ffd1</code></a>
3.29.3</li>
<li><a
href="https://github.com/rollup/rollup/commit/353e4628284b1ef4d8a8b47d895881e5ce6546f4"><code>353e462</code></a>
Fully deoptimize first level path when deoptimizing nested parameter
paths \(#...</li>
<li><a
href="https://github.com/rollup/rollup/commit/a1a89e77fbe06a23229486194970f0813593e9df"><code>a1a89e7</code></a>
chore\(deps\): update dependency
<code>@​vue/eslint-config-typescript</code> to v12 \(<a
href="https://redirect.github.com/rollup/rollup/issues/5148">#5148</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/cc14f7070af8c02ac2d477bda043f3203955291d"><code>cc14f70</code></a>
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://redirect.github.com/rollup/rollup/issues/5149">#5149</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/1e8355b2b68811da24e1d96dea32176b403dc377"><code>1e8355b</code></a>
docs: improve the docs repl appearance in the light mode \(<a
href="https://redirect.github.com/rollup/rollup/issues/5145">#5145</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/5950fc8a6bf6c9f8ef1c7ae05bb8c43d5c313212"><code>5950fc8</code></a>
Adapt branches in REPL workflow</li>
<li>Additional commits viewable in <a
href="https://github.com/rollup/rollup/compare/v3.20.0...v3.29.5">compare
view</a></li>
</ul>
</details>
<br />

\[!\[Dependabot compatibility
score\]\(https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=rollup&package-manager=npm_and_yarn&previous-version=3.20.0&new-version=3.29.5\)\]\(https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores\)
Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.
\[//\]: # \(dependabot-automerge-start\)
\[//\]: # \(dependabot-automerge-end\)
---
<details>
<summary>Dependabot commands and options</summary>
<br />
You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version \(unless you reopen
the PR or upgrade to it yourself\)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version \(unless you reopen
the PR or upgrade to it yourself\)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency \(unless you reopen the
PR or upgrade to it yourself\)
You can disable automated security fix PRs for this repo from the
\[Security Alerts
page\]\(https://github.com/facebook/react/network/alerts\).
</details>
Signed-off-by: dependabot\[bot\] <support@github.com>
Co-authored-by: dependabot\[bot\] <49699333+dependabot\[bot\]@users.noreply.github.com>")| Sep 26, 2024  
[react.code-workspace](/facebook/react/blob/main/react.code-workspace "react.code-workspace")| [react.code-workspace](/facebook/react/blob/main/react.code-workspace "react.code-workspace")| [created a vscode workspace file for the repo (](/facebook/react/commit/dfd30974aba0d7740e084f70a8af1cd4c54bb273 "created a vscode workspace file for the repo \(#29830\)
### Summary
Similarly to what has been done on the `react-native` repo in
https://github.com/facebook/react-native/pull/43851, this PR adds a
`react.code-workspace` workspace file when using VSCode.
This disables the built-in TypeScript Language Service for `.js`, `.ts`,
and `.json` files, recommends extensions, enables `formatOnSave`,
excludes certain files in search, and configures Flow language support.
### Motivation
This is a DevX benefit for **React contributors** using open source VS
Code. Without this, it takes quite a long time to set up the environment
in vscode to work well.
For me the following two points took around an hour each to figure out,
but for others it may take even more \(screenshots can be found below\):
* Search with "files to include" was searching in ignored files
\(compiled/generated\)
* Configure language validation and prettier both in "packages" that use
flow and in the "compiler" folder that uses typescript.
### Recommended extensions
NOTE: The recommended extensions list is currently minimal — happy to
extend this now or in future, but let's aim to keep these conservative
at the moment.
* Flow — language support
* EditorConfig — formatting based on `.editorconfig`, all file types
* Prettier — formatting for JS* files
* ESLint — linter for JS* files
### Why `react.code-workspace`?
`.code-workspace` files have slight extra behaviours over a `.vscode/`
directory:
* Allows user to opt-in or skip.
* Allows double-click launching from file managers.
* Allows base folder \(and any subfolders in future\) to be opened with
local file tree scope \(useful in fbsource!\)
* \(Minor point\) Single config file over multiple files.
https://code.visualstudio.com/docs/editor/workspaces
### Test plan
Against a new un-configured copy of Visual Studio Code Insiders.
**Without workspace config**
❌ .js files raise errors by default \(built-in TypeScript language
service\)
❌ When using the Flow VS Code extension, the wrong version \(global\) of
Flow is used.
<img width="978" alt="Screenshot 2024-06-10 at 16 03 59"
src="https://github.com/facebook/react/assets/5188459/17e19ba4-bac2-48ea-9b35-6b4b6242bcc1">
❌ Searching in excluded files when the "include" field is specified
<img width="502" alt="Screenshot 2024-06-10 at 15 41 24"
src="https://github.com/facebook/react/assets/5188459/00248755-7905-41bc-b303-498ddba82108">
**With workspace config**
✅ Built-in TypeScript Language Service is disabled for .js files, but
still enabled for .ts\[x\] files
!\[Screen Recording 2024-06-13 at 12 21
24\]\(https://github.com/facebook/react/assets/5188459/6048218c-f316-44cd-8771-d2d0e848991d\)
✅ Flow language support is configured correctly against flow version in
package.json
<img width="993" alt="Screenshot 2024-06-10 at 16 03 44"
src="https://github.com/facebook/react/assets/5188459/b54e143c-a013-4e73-8995-3af7b5a03e36">
✅ Does not search in excluded files when the "include" field is
specified
<img width="555" alt="Screenshot 2024-06-10 at 15 39 18"
src="https://github.com/facebook/react/assets/5188459/dd3e5344-84fb-4b5d-8689-4c8bd28168e0">
✅ Workspace config is suggested when folder is opened in VS Code
!\[image\]\(https://github.com/facebook/react/assets/5188459/7434261f-1057-4954-9885-b057a10684ad\)
✅ Dialog is shown on workspace launch with recommended VS Code
extensions
<img width="580" alt="Screenshot 2024-06-10 at 15 40 52"
src="https://github.com/facebook/react/assets/5188459/c6406fb6-92a0-47f1-8497-4ffe899bb6a9">")[#29830](https://github.com/facebook/react/pull/29830)[)](/facebook/react/commit/dfd30974aba0d7740e084f70a8af1cd4c54bb273 "created a vscode workspace file for the repo \(#29830\)
### Summary
Similarly to what has been done on the `react-native` repo in
https://github.com/facebook/react-native/pull/43851, this PR adds a
`react.code-workspace` workspace file when using VSCode.
This disables the built-in TypeScript Language Service for `.js`, `.ts`,
and `.json` files, recommends extensions, enables `formatOnSave`,
excludes certain files in search, and configures Flow language support.
### Motivation
This is a DevX benefit for **React contributors** using open source VS
Code. Without this, it takes quite a long time to set up the environment
in vscode to work well.
For me the following two points took around an hour each to figure out,
but for others it may take even more \(screenshots can be found below\):
* Search with "files to include" was searching in ignored files
\(compiled/generated\)
* Configure language validation and prettier both in "packages" that use
flow and in the "compiler" folder that uses typescript.
### Recommended extensions
NOTE: The recommended extensions list is currently minimal — happy to
extend this now or in future, but let's aim to keep these conservative
at the moment.
* Flow — language support
* EditorConfig — formatting based on `.editorconfig`, all file types
* Prettier — formatting for JS* files
* ESLint — linter for JS* files
### Why `react.code-workspace`?
`.code-workspace` files have slight extra behaviours over a `.vscode/`
directory:
* Allows user to opt-in or skip.
* Allows double-click launching from file managers.
* Allows base folder \(and any subfolders in future\) to be opened with
local file tree scope \(useful in fbsource!\)
* \(Minor point\) Single config file over multiple files.
https://code.visualstudio.com/docs/editor/workspaces
### Test plan
Against a new un-configured copy of Visual Studio Code Insiders.
**Without workspace config**
❌ .js files raise errors by default \(built-in TypeScript language
service\)
❌ When using the Flow VS Code extension, the wrong version \(global\) of
Flow is used.
<img width="978" alt="Screenshot 2024-06-10 at 16 03 59"
src="https://github.com/facebook/react/assets/5188459/17e19ba4-bac2-48ea-9b35-6b4b6242bcc1">
❌ Searching in excluded files when the "include" field is specified
<img width="502" alt="Screenshot 2024-06-10 at 15 41 24"
src="https://github.com/facebook/react/assets/5188459/00248755-7905-41bc-b303-498ddba82108">
**With workspace config**
✅ Built-in TypeScript Language Service is disabled for .js files, but
still enabled for .ts\[x\] files
!\[Screen Recording 2024-06-13 at 12 21
24\]\(https://github.com/facebook/react/assets/5188459/6048218c-f316-44cd-8771-d2d0e848991d\)
✅ Flow language support is configured correctly against flow version in
package.json
<img width="993" alt="Screenshot 2024-06-10 at 16 03 44"
src="https://github.com/facebook/react/assets/5188459/b54e143c-a013-4e73-8995-3af7b5a03e36">
✅ Does not search in excluded files when the "include" field is
specified
<img width="555" alt="Screenshot 2024-06-10 at 15 39 18"
src="https://github.com/facebook/react/assets/5188459/dd3e5344-84fb-4b5d-8689-4c8bd28168e0">
✅ Workspace config is suggested when folder is opened in VS Code
!\[image\]\(https://github.com/facebook/react/assets/5188459/7434261f-1057-4954-9885-b057a10684ad\)
✅ Dialog is shown on workspace launch with recommended VS Code
extensions
<img width="580" alt="Screenshot 2024-06-10 at 15 40 52"
src="https://github.com/facebook/react/assets/5188459/c6406fb6-92a0-47f1-8497-4ffe899bb6a9">")| Jun 13, 2024  
[yarn.lock](/facebook/react/blob/main/yarn.lock "yarn.lock")| [yarn.lock](/facebook/react/blob/main/yarn.lock "yarn.lock")| [Bump next prerelease version numbers (](/facebook/react/commit/c86542b240375f95dfd14af5b8ec39e29881e74d "Bump next prerelease version numbers \(#31676\)
Updates the version numbers in the prerelease \(canary and experimental\)
channels.
---------
Co-authored-by: Jack Pope <jackpope1@gmail.com>")[#31676](https://github.com/facebook/react/pull/31676)[)](/facebook/react/commit/c86542b240375f95dfd14af5b8ec39e29881e74d "Bump next prerelease version numbers \(#31676\)
Updates the version numbers in the prerelease \(canary and experimental\)
channels.
---------
Co-authored-by: Jack Pope <jackpope1@gmail.com>")| Dec 13, 2024  
View all files  
  
## Repository files navigation

  * [README](#)
  * [Code of conduct](#)
  * [MIT license](#)
  * [Security](#)



# [React](https://react.dev/) · [](https://github.com/facebook/react/blob/main/LICENSE) [](https://www.npmjs.com/package/react) [![\(Runtime\) Build and Test](https://github.com/facebook/react/actions/workflows/runtime_build_and_test.yml/badge.svg)](https://github.com/facebook/react/actions/workflows/runtime_build_and_test.yml) [![\(Compiler\) TypeScript](https://github.com/facebook/react/actions/workflows/compiler_typescript.yml/badge.svg?branch=main)](https://github.com/facebook/react/actions/workflows/compiler_typescript.yml) [](https://legacy.reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

[](#react------)

React is a JavaScript library for building user interfaces.

  * **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
  * **Component-Based:** Build encapsulated components that manage their own state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
  * **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using [Node](https://nodejs.org/en) and power mobile apps using [React Native](https://reactnative.dev/).



[Learn how to use React in your project](https://react.dev/learn).

## Installation

[](#installation)

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need** :

  * Use [Quick Start](https://react.dev/learn) to get a taste of React.
  * [Add React to an Existing Project](https://react.dev/learn/add-react-to-an-existing-project) to use as little or as much React as you need.
  * [Create a New React App](https://react.dev/learn/start-a-new-react-project) if you're looking for a powerful JavaScript toolchain.



## Documentation

[](#documentation)

You can find the React documentation [on the website](https://react.dev/).

Check out the [Getting Started](https://react.dev/learn) page for a quick overview.

The documentation is divided into several sections:

  * [Quick Start](https://react.dev/learn)
  * [Tutorial](https://react.dev/learn/tutorial-tic-tac-toe)
  * [Thinking in React](https://react.dev/learn/thinking-in-react)
  * [Installation](https://react.dev/learn/installation)
  * [Describing the UI](https://react.dev/learn/describing-the-ui)
  * [Adding Interactivity](https://react.dev/learn/adding-interactivity)
  * [Managing State](https://react.dev/learn/managing-state)
  * [Advanced Guides](https://react.dev/learn/escape-hatches)
  * [API Reference](https://react.dev/reference/react)
  * [Where to Get Support](https://react.dev/community)
  * [Contributing Guide](https://legacy.reactjs.org/docs/how-to-contribute.html)



You can improve it by sending pull requests to [this repository](https://github.com/reactjs/react.dev).

## Examples

[](#examples)

We have several examples [on the website](https://react.dev/). Here is the first one to get you started:

```
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
 return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```


This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://react.dev/learn#writing-markup-with-jsx). JSX is not required to use React, but it makes code more readable, and writing it feels like writing HTML.

## Contributing

[](#contributing)

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

[](#code-of-conduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://legacy.reactjs.org/docs/how-to-contribute.html)

[](#contributing-guide)

Read our [contributing guide](https://legacy.reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### [Good First Issues](https://github.com/facebook/react/labels/good%20first%20issue)

[](#good-first-issues)

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

[](#license)

React is [MIT licensed](/facebook/react/blob/main/LICENSE).

## About

The library for web and native user interfaces. 

[react.dev](https://react.dev "https://react.dev")

### Topics

[ react ](/topics/react "Topic: react") [ javascript ](/topics/javascript "Topic: javascript") [ library ](/topics/library "Topic: library") [ ui ](/topics/ui "Topic: ui") [ frontend ](/topics/frontend "Topic: frontend") [ declarative ](/topics/declarative "Topic: declarative")

### Resources

[ Readme ](#readme-ov-file)

### License

[ MIT license ](#MIT-1-ov-file)

### Code of conduct

[ Code of conduct ](#coc-ov-file)

### Security policy

[ Security policy ](#security-ov-file)

[ Activity](/facebook/react/activity)

[ Custom properties](/facebook/react/custom-properties)

### Stars

[ **231k** stars](/facebook/react/stargazers)

### Watchers

[ **6.6k** watching](/facebook/react/watchers)

### Forks

[ **47.2k** forks](/facebook/react/forks)

[ Report repository ](/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact&report=facebook+%28user%29)

##  [Releases 103](/facebook/react/releases)

[ 19.0.0 (December 5, 2024) Latest  Dec 5, 2024 ](/facebook/react/releases/tag/v19.0.0)

[+ 102 releases](/facebook/react/releases)

##  [Used by 25.8m](/facebook/react/network/dependents)

[ + 25,798,629  ](/facebook/react/network/dependents)

##  [Contributors 1,676](/facebook/react/graphs/contributors)

  * [ ](https://github.com/zpao)
  * [ ](https://github.com/gaearon)
  * [ ](https://github.com/sebmarkbage)
  * [ ](https://github.com/acdlite)
  * [ ](https://github.com/sophiebits)
  * [ ](https://github.com/josephsavona)
  * [ ](https://github.com/poteto)
  * [ ](https://github.com/jimfb)
  * [ ](https://github.com/trueadm)
  * [ ](https://github.com/bvaughn)
  * [ ](https://github.com/gsathya)
  * [ ](https://github.com/petehunt)
  * [ ](https://github.com/mofeiZ)
  * [ ](https://github.com/kassens)



[+ 1,662 contributors](/facebook/react/graphs/contributors)

## Languages

  * [ JavaScript 63.4% ](/facebook/react/search?l=javascript)
  * [ TypeScript 22.5% ](/facebook/react/search?l=typescript)
  * [ Rust 10.7% ](/facebook/react/search?l=rust)
  * [ HTML 1.4% ](/facebook/react/search?l=html)
  * [ CSS 0.9% ](/facebook/react/search?l=css)
  * [ C++ 0.6% ](/facebook/react/search?l=c%2B%2B)
  * Other 0.5%



## Footer

[ ](https://github.com "GitHub") © 2024 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You can’t perform that action at this time. 
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

# React

The library for web and native user interfaces

[Learn React](/learn)[API Reference](/reference/react)

## Create user interfaces from components

React lets you build user interfaces out of individual pieces called components. Create your own React components like `Thumbnail`, `LikeButton`, and `Video`. Then combine them into entire screens, pages, and apps.

### Video.js

```


function Video({ video }) {

 return (

  <div>

   <Thumbnail video={video} />

   <a href={video.url}>

    <h3>{video.title}</h3>

    <p>{video.description}</p>

   </a>

   <LikeButton video={video} />

  </div>

 );

}


```


My videoVideo description

Whether you work on your own or with thousands of other developers, using React feels the same. It is designed to let you seamlessly combine components written by independent people, teams, and organizations.

## Write components with code and markup

React components are JavaScript functions. Want to show some content conditionally? Use an `if` statement. Displaying a list? Try array `map()`. Learning React is learning programming.

### VideoList.js

```


function VideoList({ videos, emptyHeading }) {

 const count = videos.length;

 let heading = emptyHeading;

 if (count > 0) {

  const noun = count > 1 ? 'Videos' : 'Video';

  heading = count + ' ' + noun;

 }

 return (

  <section>

   <h2>{heading}</h2>

   {videos.map(video =>

    <Video key={video.id} video={video} />

   )}

  </section>

 );

}


```


## 3 Videos

First videoVideo description

Second videoVideo description

Third videoVideo description

This markup syntax is called JSX. It is a JavaScript syntax extension popularized by React. Putting JSX markup close to related rendering logic makes React components easy to create, maintain, and delete.

## Add interactivity wherever you need it

React components receive data and return what should appear on the screen. You can pass them new data in response to an interaction, like when the user types into an input. React will then update the screen to match the new data.

### SearchableVideoList.js

```


import { useState } from 'react';

function SearchableVideoList({ videos }) {

 const [searchText, setSearchText] = useState('');

 const foundVideos = filterVideos(videos, searchText);

 return (

  <>

   <SearchInput

    value={searchText}

    onChange={newText => setSearchText(newText)} />

   <VideoList

    videos={foundVideos}

    emptyHeading={`No matches for “${searchText}”`} />

  </>

 );

}


```


example.com/videos.html

# React Videos

A brief history of React

Search

## 5 Videos

[](https://www.youtube.com/watch?v=8pDqJVdNa44)### [React: The DocumentaryThe origin story of React](https://www.youtube.com/watch?v=8pDqJVdNa44)

[](https://www.youtube.com/watch?v=x7cQ3mrcKaY)### [Rethinking Best PracticesPete Hunt (2013)](https://www.youtube.com/watch?v=x7cQ3mrcKaY)

[](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)### [Introducing React NativeTom Occhino (2015)](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)

[](https://www.youtube.com/watch?v=V-QO-KO90iQ)### [Introducing React HooksSophie Alpert and Dan Abramov (2018)](https://www.youtube.com/watch?v=V-QO-KO90iQ)

[](https://www.youtube.com/watch?v=TQQPAU21ZUw)### [Introducing Server ComponentsDan Abramov and Lauren Tan (2020)](https://www.youtube.com/watch?v=TQQPAU21ZUw)

You don’t have to build your whole page in React. Add React to your existing HTML page, and render interactive React components anywhere on it.

[Add React to your page](/learn/add-react-to-an-existing-project)

## Go full-stack with a framework

React is a library. It lets you put components together, but it doesn’t prescribe how to do routing and data fetching. To build an entire app with React, we recommend a full-stack React framework like [Next.js](https://nextjs.org) or [Remix](https://remix.run).

### confs/[slug].js

```


import { db } from './database.js';

import { Suspense } from 'react';

async function ConferencePage({ slug }) {

 const conf = await db.Confs.find({ slug });

 return (

  <ConferenceLayout conf={conf}>

   <Suspense fallback={<TalksLoading />}>

    <Talks confId={conf.id} />

   </Suspense>

  </ConferenceLayout>

 );

}

async function Talks({ confId }) {

 const talks = await db.Talks.findAll({ confId });

 const videos = talks.map(talk => talk.video);

 return <SearchableVideoList videos={videos} />;

}


```


example.com/confs/react-conf-2021

React Conf 2021React Conf 2019

Search

## 19 Videos

[React Conf](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)### [React 18 KeynoteThe React Team](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)

[React Conf](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)### [React 18 for App DevelopersShruti Kapoor](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)

[React Conf](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)### [Streaming Server Rendering with SuspenseShaundai Person](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)

[React Conf](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)### [The First React Working GroupAakansha Doshi](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)

[React Conf](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)### [React Developer ToolingBrian Vaughn](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)

[React Conf](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)### [React without memoXuan Huang (黄玄)](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)

[React Conf](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)### [React Docs KeynoteRachel Nabors](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)

[React Conf](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)### [Things I Learnt from the New React DocsDebbie O'Brien](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)

[React Conf](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)### [Learning in the BrowserSarah Rainsberger](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)

[React Conf](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)### [The ROI of Designing with ReactLinton Ye](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)

[React Conf](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)### [Interactive Playgrounds with ReactDelba de Oliveira](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)

[React Conf](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)### [Re-introducing RelayRobert Balicki](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)

[React Conf](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)### [React Native DesktopEric Rozell and Steven Moyes](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)

[React Conf](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)### [On-device Machine Learning for React NativeRoman Rädle](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)

[React Conf](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)### [React 18 for External Store LibrariesDaishi Kato](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)

[React Conf](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)### [Building Accessible Components with React 18Diego Haz](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)

[React Conf](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)### [Accessible Japanese Form Components with ReactTafu Nakazaki](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)

[React Conf](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)### [UI Tools for ArtistsLyle Troxell](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)

[React Conf](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)### [Hydrogen + React 18Helen Lin](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)

React is also an architecture. Frameworks that implement it let you fetch data in asynchronous components that run on the server or even during the build. Read data from a file or a database, and pass it down to your interactive components.

[Get started with a framework](/learn/start-a-new-react-project)

## Use the best from every platform

People love web and native apps for different reasons. React lets you build both web apps and native apps using the same skills. It leans upon each platform’s unique strengths to let your interfaces feel just right on every platform.

example.com

#### Stay true to the web

People expect web app pages to load fast. On the server, React lets you start streaming HTML while you’re still fetching data, progressively filling in the remaining content before any JavaScript code loads. On the client, React can use standard web APIs to keep your UI responsive even in the middle of rendering.

9:40 AM

#### Go truly native

People expect native apps to look and feel like their platform. [React Native](https://reactnative.dev) and [Expo](https://github.com/expo/expo) let you build apps in React for Android, iOS, and more. They look and feel native because their UIs _are_ truly native. It’s not a web view—your React components render real Android and iOS views provided by the platform.

With React, you can be a web _and_ a native developer. Your team can ship to many platforms without sacrificing the user experience. Your organization can bridge the platform silos, and form teams that own entire features end-to-end.

[Build for native platforms](https://reactnative.dev/)

## Upgrade when the future is ready

React approaches changes with care. Every React commit is tested on business-critical surfaces with over a billion users. Over 100,000 React components at Meta help validate every migration strategy.

The React team is always researching how to improve React. Some research takes years to pay off. React has a high bar for taking a research idea into production. Only proven approaches become a part of React.

[Read more React news](/blog)

Latest React News

## [React 19December 05, 2024](/blog/2024/12/05/react-19)

## [React Compiler Beta Release and RoadmapOctober 21, 2024](/blog/2024/10/21/react-compiler-beta-release)

## [React Conf 2024 RecapMay 22, 2024](/blog/2024/05/22/react-conf-2024-recap)

## [React 19 RCApril 25, 2024](/blog/2024/04/25/react-19)

[Read more React news](/blog)

## Join a community of millions

You’re not alone. Two million developers from all over the world visit the React docs every month. React is something that people and teams can agree on.

This is why React is more than a library, an architecture, or even an ecosystem. React is a community. It’s a place where you can ask for help, find opportunities, and meet new friends. You will meet both developers and designers, beginners and experts, researchers and artists, teachers and students. Our backgrounds may be very different, but React lets us all create user interfaces together.

## Welcome to the React community

[Get Started](/learn)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

# React

The library for web and native user interfaces

[Learn React](/learn)[API Reference](/reference/react)

## Create user interfaces from components

React lets you build user interfaces out of individual pieces called components. Create your own React components like `Thumbnail`, `LikeButton`, and `Video`. Then combine them into entire screens, pages, and apps.

### Video.js

```


function Video({ video }) {

 return (

  <div>

   <Thumbnail video={video} />

   <a href={video.url}>

    <h3>{video.title}</h3>

    <p>{video.description}</p>

   </a>

   <LikeButton video={video} />

  </div>

 );

}


```


My videoVideo description

Whether you work on your own or with thousands of other developers, using React feels the same. It is designed to let you seamlessly combine components written by independent people, teams, and organizations.

## Write components with code and markup

React components are JavaScript functions. Want to show some content conditionally? Use an `if` statement. Displaying a list? Try array `map()`. Learning React is learning programming.

### VideoList.js

```


function VideoList({ videos, emptyHeading }) {

 const count = videos.length;

 let heading = emptyHeading;

 if (count > 0) {

  const noun = count > 1 ? 'Videos' : 'Video';

  heading = count + ' ' + noun;

 }

 return (

  <section>

   <h2>{heading}</h2>

   {videos.map(video =>

    <Video key={video.id} video={video} />

   )}

  </section>

 );

}


```


## 3 Videos

First videoVideo description

Second videoVideo description

Third videoVideo description

This markup syntax is called JSX. It is a JavaScript syntax extension popularized by React. Putting JSX markup close to related rendering logic makes React components easy to create, maintain, and delete.

## Add interactivity wherever you need it

React components receive data and return what should appear on the screen. You can pass them new data in response to an interaction, like when the user types into an input. React will then update the screen to match the new data.

### SearchableVideoList.js

```


import { useState } from 'react';

function SearchableVideoList({ videos }) {

 const [searchText, setSearchText] = useState('');

 const foundVideos = filterVideos(videos, searchText);

 return (

  <>

   <SearchInput

    value={searchText}

    onChange={newText => setSearchText(newText)} />

   <VideoList

    videos={foundVideos}

    emptyHeading={`No matches for “${searchText}”`} />

  </>

 );

}


```


example.com/videos.html

# React Videos

A brief history of React

Search

## 5 Videos

[](https://www.youtube.com/watch?v=8pDqJVdNa44)### [React: The DocumentaryThe origin story of React](https://www.youtube.com/watch?v=8pDqJVdNa44)

[](https://www.youtube.com/watch?v=x7cQ3mrcKaY)### [Rethinking Best PracticesPete Hunt (2013)](https://www.youtube.com/watch?v=x7cQ3mrcKaY)

[](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)### [Introducing React NativeTom Occhino (2015)](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)

[](https://www.youtube.com/watch?v=V-QO-KO90iQ)### [Introducing React HooksSophie Alpert and Dan Abramov (2018)](https://www.youtube.com/watch?v=V-QO-KO90iQ)

[](https://www.youtube.com/watch?v=TQQPAU21ZUw)### [Introducing Server ComponentsDan Abramov and Lauren Tan (2020)](https://www.youtube.com/watch?v=TQQPAU21ZUw)

You don’t have to build your whole page in React. Add React to your existing HTML page, and render interactive React components anywhere on it.

[Add React to your page](/learn/add-react-to-an-existing-project)

## Go full-stack with a framework

React is a library. It lets you put components together, but it doesn’t prescribe how to do routing and data fetching. To build an entire app with React, we recommend a full-stack React framework like [Next.js](https://nextjs.org) or [Remix](https://remix.run).

### confs/[slug].js

```


import { db } from './database.js';

import { Suspense } from 'react';

async function ConferencePage({ slug }) {

 const conf = await db.Confs.find({ slug });

 return (

  <ConferenceLayout conf={conf}>

   <Suspense fallback={<TalksLoading />}>

    <Talks confId={conf.id} />

   </Suspense>

  </ConferenceLayout>

 );

}

async function Talks({ confId }) {

 const talks = await db.Talks.findAll({ confId });

 const videos = talks.map(talk => talk.video);

 return <SearchableVideoList videos={videos} />;

}


```


example.com/confs/react-conf-2021

React Conf 2021React Conf 2019

Search

## 19 Videos

[React Conf](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)### [React 18 KeynoteThe React Team](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)

[React Conf](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)### [React 18 for App DevelopersShruti Kapoor](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)

[React Conf](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)### [Streaming Server Rendering with SuspenseShaundai Person](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)

[React Conf](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)### [The First React Working GroupAakansha Doshi](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)

[React Conf](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)### [React Developer ToolingBrian Vaughn](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)

[React Conf](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)### [React without memoXuan Huang (黄玄)](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)

[React Conf](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)### [React Docs KeynoteRachel Nabors](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)

[React Conf](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)### [Things I Learnt from the New React DocsDebbie O'Brien](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)

[React Conf](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)### [Learning in the BrowserSarah Rainsberger](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)

[React Conf](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)### [The ROI of Designing with ReactLinton Ye](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)

[React Conf](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)### [Interactive Playgrounds with ReactDelba de Oliveira](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)

[React Conf](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)### [Re-introducing RelayRobert Balicki](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)

[React Conf](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)### [React Native DesktopEric Rozell and Steven Moyes](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)

[React Conf](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)### [On-device Machine Learning for React NativeRoman Rädle](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)

[React Conf](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)### [React 18 for External Store LibrariesDaishi Kato](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)

[React Conf](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)### [Building Accessible Components with React 18Diego Haz](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)

[React Conf](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)### [Accessible Japanese Form Components with ReactTafu Nakazaki](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)

[React Conf](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)### [UI Tools for ArtistsLyle Troxell](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)

[React Conf](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)### [Hydrogen + React 18Helen Lin](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)

React is also an architecture. Frameworks that implement it let you fetch data in asynchronous components that run on the server or even during the build. Read data from a file or a database, and pass it down to your interactive components.

[Get started with a framework](/learn/start-a-new-react-project)

## Use the best from every platform

People love web and native apps for different reasons. React lets you build both web apps and native apps using the same skills. It leans upon each platform’s unique strengths to let your interfaces feel just right on every platform.

example.com

#### Stay true to the web

People expect web app pages to load fast. On the server, React lets you start streaming HTML while you’re still fetching data, progressively filling in the remaining content before any JavaScript code loads. On the client, React can use standard web APIs to keep your UI responsive even in the middle of rendering.

9:40 AM

#### Go truly native

People expect native apps to look and feel like their platform. [React Native](https://reactnative.dev) and [Expo](https://github.com/expo/expo) let you build apps in React for Android, iOS, and more. They look and feel native because their UIs _are_ truly native. It’s not a web view—your React components render real Android and iOS views provided by the platform.

With React, you can be a web _and_ a native developer. Your team can ship to many platforms without sacrificing the user experience. Your organization can bridge the platform silos, and form teams that own entire features end-to-end.

[Build for native platforms](https://reactnative.dev/)

## Upgrade when the future is ready

React approaches changes with care. Every React commit is tested on business-critical surfaces with over a billion users. Over 100,000 React components at Meta help validate every migration strategy.

The React team is always researching how to improve React. Some research takes years to pay off. React has a high bar for taking a research idea into production. Only proven approaches become a part of React.

[Read more React news](/blog)

Latest React News

## [React 19December 05, 2024](/blog/2024/12/05/react-19)

## [React Compiler Beta Release and RoadmapOctober 21, 2024](/blog/2024/10/21/react-compiler-beta-release)

## [React Conf 2024 RecapMay 22, 2024](/blog/2024/05/22/react-conf-2024-recap)

## [React 19 RCApril 25, 2024](/blog/2024/04/25/react-19)

[Read more React news](/blog)

## Join a community of millions

You’re not alone. Two million developers from all over the world visit the React docs every month. React is something that people and teams can agree on.

This is why React is more than a library, an architecture, or even an ecosystem. React is a community. It’s a place where you can ask for help, find opportunities, and meet new friends. You will meet both developers and designers, beginners and experts, researchers and artists, teachers and students. Our backgrounds may be very different, but React lets us all create user interfaces together.

## Welcome to the React community

[Get Started](/learn)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")
  * [Installation ](/learn/installation "Installation")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")
  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")
  * [Managing State ](/learn/managing-state "Managing State")
  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

### REACT API

  * [Hooks ](/reference/react "Hooks")
  * [Components ](/reference/react/components "Components")
  * [APIs ](/reference/react/apis "APIs")
  * [Legacy APIs ](/reference/react/legacy "Legacy APIs")

### REACT DOM API

  * [Components ](/reference/react-dom/components "Components")
  * [APIs ](/reference/react-dom "APIs")
  * [Client APIs ](/reference/react-dom/client "Client APIs")
  * [Server APIs ](/reference/react-dom/server "Server APIs")

### GET INVOLVED

  * [React Community ](/community "React Community")

### STAY INFORMED

  * [React Blog ](/blog "React Blog")



Is this page useful?

[React Docs](/)

# React Versions[](#undefined "Link for this heading")

The React docs at [react.dev](https://react.dev) provide documentation for the latest version of React.

We aim to keep the docs updated within major versions, and do not publish versions for each minor or patch version. When a new major is released, we archive the docs for the previous version as `x.react.dev`. See our [versioning policy](/community/versioning-policy) for more info.

You can find an archive of previous major versions below.

## Latest version: 19.0 [](#latest-version "Link for Latest version: 19.0 ")

  * [react.dev](https://react.dev)



## Previous versions [](#previous-versions "Link for Previous versions ")

  * [18.react.dev](https://18.react.dev)
  * [17.react.dev](https://17.react.dev)
  * [16.react.dev](https://16.react.dev)
  * [15.react.dev](https://15.react.dev)



### Note

#### Legacy Docs [](#legacy-docs "Link for Legacy Docs ")

In 2023, we [launched our new docs](/blog/2023/03/16/introducing-react-dev) for React 18 as [react.dev](https://react.dev). The legacy React 18 docs are available at [legacy.reactjs.org](https://legacy.reactjs.org). Versions 17 and below are hosted on legacy sites.

For versions older than React 15, see [15.react.dev](https://15.react.dev).

## Changelog [](#changelog "Link for Changelog ")

### React 19 [](#react-19 "Link for React 19 ")

**Blog Posts**

  * [React v19](/blog/2024/12/05/react-19)
  * [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide)
  * [React Compiler Beta Release](/blog/2024/10/21/react-compiler-beta-release)



**Talks**

  * [React 19 Keynote](https://www.youtube.com/watch?v=lyEKhv8-3n0)
  * [A Roadmap to React 19](https://www.youtube.com/watch?v=R0B2HsSM78s)
  * [What’s new in React 19](https://www.youtube.com/watch?v=AJOGzVygGcY)
  * [React for Two Computers](https://www.youtube.com/watch?v=ozI4V_29fj4)
  * [React Compiler Deep Dive](https://www.youtube.com/watch?v=uA_PVyZP7AI)
  * [React Compiler Case Studies](https://www.youtube.com/watch?v=lvhPq5chokM)
  * [React 19 Deep Dive: Coordinating HTML](https://www.youtube.com/watch?v=IBBN-s77YSI)



**Releases**

  * [v19.0.0 (December, 2024)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1900-december-5-2024)



### React 18 [](#react-18 "Link for React 18 ")

**Blog Posts**

  * [React v18.0](/blog/2022/03/29/react-v18)
  * [How to Upgrade to React 18](/blog/2022/03/08/react-18-upgrade-guide)
  * [The Plan for React 18](/blog/2021/06/08/the-plan-for-react-18)



**Talks**

  * [React 18 Keynote](https://www.youtube.com/watch?v=FZ0cG47msEk)
  * [React 18 for app developers](https://www.youtube.com/watch?v=ytudH8je5ko)
  * [Streaming Server Rendering with Suspense](https://www.youtube.com/watch?v=pj5N-Khihgc)
  * [React without memo](https://www.youtube.com/watch?v=lGEMwh32soc)
  * [React Docs Keynote](https://www.youtube.com/watch?v=mneDaMYOKP8)
  * [React Developer Tooling](https://www.youtube.com/watch?v=oxDfrke8rZg)
  * [The first React Working Group](https://www.youtube.com/watch?v=qn7gRClrC9U)
  * [React 18 for External Store Libraries](https://www.youtube.com/watch?v=oPfSC5bQPR8)



**Releases**

  * [v18.3.1 (April, 2024)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1831-april-26-2024)
  * [v18.3.0 (April, 2024)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1830-april-25-2024)
  * [v18.2.0 (June, 2022)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1820-june-14-2022)
  * [v18.1.0 (April, 2022)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1810-april-26-2022)
  * [v18.0.0 (March 2022)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1800-march-29-2022)



### React 17 [](#react-17 "Link for React 17 ")

**Blog Posts**

  * [React v17.0](https://legacy.reactjs.org/blog/2020/10/20/react-v17.html)
  * [Introducing the New JSX Transform](https://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html)
  * [React v17.0 Release Candidate: No New Features](https://legacy.reactjs.org/blog/2020/08/10/react-v17-rc.html)



**Releases**

  * [v17.0.2 (March 2021)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1702-march-22-2021)
  * [v17.0.1 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1701-october-22-2020)
  * [v17.0.0 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1700-october-20-2020)



### React 16 [](#react-16 "Link for React 16 ")

**Blog Posts**

  * [React v16.0](https://legacy.reactjs.org/blog/2017/09/26/react-v16.0.html)
  * [DOM Attributes in React 16](https://legacy.reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html)
  * [Error Handling in React 16](https://legacy.reactjs.org/blog/2017/07/26/error-handling-in-react-16.html)
  * [React v16.2.0: Improved Support for Fragments](https://legacy.reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html)
  * [React v16.4.0: Pointer Events](https://legacy.reactjs.org/blog/2018/05/23/react-v-16-4.html)
  * [React v16.4.2: Server-side vulnerability fix](https://legacy.reactjs.org/blog/2018/08/01/react-v-16-4-2.html)
  * [React v16.6.0: lazy, memo and contextType](https://legacy.reactjs.org/blog/2018/10/23/react-v-16-6.html)
  * [React v16.7: No, This Is Not the One With Hooks](https://legacy.reactjs.org/blog/2018/12/19/react-v-16-7.html)
  * [React v16.8: The One With Hooks](https://legacy.reactjs.org/blog/2019/02/06/react-v16.8.0.html)
  * [React v16.9.0 and the Roadmap Update](https://legacy.reactjs.org/blog/2019/08/08/react-v16.9.0.html)
  * [React v16.13.0](https://legacy.reactjs.org/blog/2020/02/26/react-v16.13.0.html)



**Releases**

  * [v16.14.0 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16140-october-14-2020)
  * [v16.13.1 (March 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16131-march-19-2020)
  * [v16.13.0 (February 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16130-february-26-2020)
  * [v16.12.0 (November 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16120-november-14-2019)
  * [v16.11.0 (October 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16110-october-22-2019)
  * [v16.10.2 (October 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16102-october-3-2019)
  * [v16.10.1 (September 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16101-september-28-2019)
  * [v16.10.0 (September 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16100-september-27-2019)
  * [v16.9.0 (August 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1690-august-8-2019)
  * [v16.8.6 (March 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1686-march-27-2019)
  * [v16.8.5 (March 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1685-march-22-2019)
  * [v16.8.4 (March 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1684-march-5-2019)
  * [v16.8.3 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1683-february-21-2019)
  * [v16.8.2 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1682-february-14-2019)
  * [v16.8.1 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1681-february-6-2019)
  * [v16.8.0 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1680-february-6-2019)
  * [v16.7.0 (December 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1670-december-19-2018)
  * [v16.6.3 (November 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1663-november-12-2018)
  * [v16.6.2 (November 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1662-november-12-2018)
  * [v16.6.1 (November 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1661-november-6-2018)
  * [v16.6.0 (October 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1660-october-23-2018)
  * [v16.5.2 (September 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1652-september-18-2018)
  * [v16.5.1 (September 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1651-september-13-2018)
  * [v16.5.0 (September 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1650-september-5-2018)
  * [v16.4.2 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1642-august-1-2018)
  * [v16.4.1 (June 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1641-june-13-2018)
  * [v16.4.0 (May 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1640-may-23-2018)
  * [v16.3.3 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1633-august-1-2018)
  * [v16.3.2 (April 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1632-april-16-2018)
  * [v16.3.1 (April 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1631-april-3-2018)
  * [v16.3.0 (March 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1630-march-29-2018)
  * [v16.2.1 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1621-august-1-2018)
  * [v16.2.0 (November 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1620-november-28-2017)
  * [v16.1.2 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1612-august-1-2018)
  * [v16.1.1 (November 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1611-november-13-2017)
  * [v16.1.0 (November 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1610-november-9-2017)
  * [v16.0.1 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1601-august-1-2018)
  * [v16.0 (September 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1600-september-26-2017)



### React 15 [](#react-15 "Link for React 15 ")

**Blog Posts**

  * [React v15.0](https://legacy.reactjs.org/blog/2016/04/07/react-v15.html)
  * [React v15.0 Release Candidate 2](https://legacy.reactjs.org/blog/2016/03/16/react-v15-rc2.html)
  * [React v15.0 Release Candidate](https://legacy.reactjs.org/blog/2016/03/07/react-v15-rc1.html)
  * [New Versioning Scheme](https://legacy.reactjs.org/blog/2016/02/19/new-versioning-scheme.html)
  * [Discontinuing IE 8 Support in React DOM](https://legacy.reactjs.org/blog/2016/01/12/discontinuing-ie8-support.html)
  * [Introducing React’s Error Code System](https://legacy.reactjs.org/blog/2016/07/11/introducing-reacts-error-code-system.html)
  * [React v15.0.1](https://legacy.reactjs.org/blog/2016/04/08/react-v15.0.1.html)
  * [React v15.4.0](https://legacy.reactjs.org/blog/2016/11/16/react-v15.4.0.html)
  * [React v15.5.0](https://legacy.reactjs.org/blog/2017/04/07/react-v15.5.0.html)
  * [React v15.6.0](https://legacy.reactjs.org/blog/2017/06/13/react-v15.6.0.html)
  * [React v15.6.2](https://legacy.reactjs.org/blog/2017/09/25/react-v15.6.2.html)



**Releases**

  * [v15.7.0 (October 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1570-october-14-2020)
  * [v15.6.2 (September 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1562-september-25-2017)
  * [v15.6.1 (June 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1561-june-14-2017)
  * [v15.6.0 (June 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1560-june-13-2017)
  * [v15.5.4 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1554-april-11-2017)
  * [v15.5.3 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1553-april-7-2017)
  * [v15.5.2 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1552-april-7-2017)
  * [v15.5.1 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1551-april-7-2017)
  * [v15.5.0 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1550-april-7-2017)
  * [v15.4.2 (January 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1542-january-6-2017)
  * [v15.4.1 (November 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1541-november-22-2016)
  * [v15.4.0 (November 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1540-november-16-2016)
  * [v15.3.2 (September 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1532-september-19-2016)
  * [v15.3.1 (August 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1531-august-19-2016)
  * [v15.3.0 (July 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1530-july-29-2016)
  * [v15.2.1 (July 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1521-july-8-2016)
  * [v15.2.0 (July 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1520-july-1-2016)
  * [v15.1.0 (May 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1510-may-20-2016)
  * [v15.0.2 (April 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1502-april-29-2016)
  * [v15.0.1 (April 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1501-april-8-2016)
  * [v15.0.0 (April 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1500-april-7-2016)



### React 0.14 [](#react-14 "Link for React 0.14 ")

**Blog Posts**

  * [React v0.14](https://legacy.reactjs.org/blog/2015/10/07/react-v0.14.html)
  * [React v0.14 Release Candidate](https://legacy.reactjs.org/blog/2015/09/10/react-v0.14-rc1.html)
  * [React v0.14 Beta 1](https://legacy.reactjs.org/blog/2015/07/03/react-v0.14-beta-1.html)
  * [New React Developer Tools](https://legacy.reactjs.org/blog/2015/09/02/new-react-developer-tools.html)
  * [New React Devtools Beta](https://legacy.reactjs.org/blog/2015/08/03/new-react-devtools-beta.html)
  * [React v0.14.1](https://legacy.reactjs.org/blog/2015/10/28/react-v0.14.1.html)
  * [React v0.14.2](https://legacy.reactjs.org/blog/2015/11/02/react-v0.14.2.html)
  * [React v0.14.3](https://legacy.reactjs.org/blog/2015/11/18/react-v0.14.3.html)
  * [React v0.14.4](https://legacy.reactjs.org/blog/2015/12/29/react-v0.14.4.html)
  * [React v0.14.8](https://legacy.reactjs.org/blog/2016/03/29/react-v0.14.8.html)



**Releases**

  * [v0.14.10 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#01410-october-14-2020)
  * [v0.14.8 (March 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0148-march-29-2016)
  * [v0.14.7 (January 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0147-january-28-2016)
  * [v0.14.6 (January 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0146-january-6-2016)
  * [v0.14.5 (December 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0145-december-29-2015)
  * [v0.14.4 (December 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0144-december-29-2015)
  * [v0.14.3 (November 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0143-november-18-2015)
  * [v0.14.2 (November 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0142-november-2-2015)
  * [v0.14.1 (October 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0141-october-28-2015)
  * [v0.14.0 (October 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0140-october-7-2015)



### React 0.13 [](#react-13 "Link for React 0.13 ")

**Blog Posts**

  * [React Native v0.4](https://legacy.reactjs.org/blog/2015/04/17/react-native-v0.4.html)
  * [React v0.13](https://legacy.reactjs.org/blog/2015/03/10/react-v0.13.html)
  * [React v0.13 RC2](https://legacy.reactjs.org/blog/2015/03/03/react-v0.13-rc2.html)
  * [React v0.13 RC](https://legacy.reactjs.org/blog/2015/02/24/react-v0.13-rc1.html)
  * [React v0.13.0 Beta 1](https://legacy.reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html)
  * [Streamlining React Elements](https://legacy.reactjs.org/blog/2015/02/24/streamlining-react-elements.html)
  * [Introducing Relay and GraphQL](https://legacy.reactjs.org/blog/2015/02/20/introducing-relay-and-graphql.html)
  * [Introducing React Native](https://legacy.reactjs.org/blog/2015/03/26/introducing-react-native.html)
  * [React v0.13.1](https://legacy.reactjs.org/blog/2015/03/16/react-v0.13.1.html)
  * [React v0.13.2](https://legacy.reactjs.org/blog/2015/04/18/react-v0.13.2.html)
  * [React v0.13.3](https://legacy.reactjs.org/blog/2015/05/08/react-v0.13.3.html)



**Releases**

  * [v0.13.3 (May 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0133-may-8-2015)
  * [v0.13.2 (April 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0132-april-18-2015)
  * [v0.13.1 (March 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0131-march-16-2015)
  * [v0.13.0 (March 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0130-march-10-2015)



### React 0.12 [](#react-12 "Link for React 0.12 ")

**Blog Posts**

  * [React v0.12](https://legacy.reactjs.org/blog/2014/10/28/react-v0.12.html)
  * [React v0.12 RC](https://legacy.reactjs.org/blog/2014/10/16/react-v0.12-rc1.html)
  * [Introducing React Elements](https://legacy.reactjs.org/blog/2014/10/14/introducing-react-elements.html)
  * [React v0.12.2](https://legacy.reactjs.org/blog/2014/12/18/react-v0.12.2.html)



**Releases**

  * [v0.12.2 (December 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0122-december-18-2014)
  * [v0.12.1 (November 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0121-november-18-2014)
  * [v0.12.0 (October 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0120-october-28-2014)



### React 0.11 [](#react-11 "Link for React 0.11 ")

**Blog Posts**

  * [React v0.11](https://legacy.reactjs.org/blog/2014/07/17/react-v0.11.html)
  * [React v0.11 RC](https://legacy.reactjs.org/blog/2014/07/13/react-v0.11-rc1.html)
  * [One Year of Open-Source React](https://legacy.reactjs.org/blog/2014/05/29/one-year-of-open-source-react.html)
  * [The Road to 1.0](https://legacy.reactjs.org/blog/2014/03/28/the-road-to-1.0.html)
  * [React v0.11.1](https://legacy.reactjs.org/blog/2014/07/25/react-v0.11.1.html)
  * [React v0.11.2](https://legacy.reactjs.org/blog/2014/09/16/react-v0.11.2.html)
  * [Introducing the JSX Specificaion](https://legacy.reactjs.org/blog/2014/09/03/introducing-the-jsx-specification.html)



**Releases**

  * [v0.11.2 (September 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0112-september-16-2014)
  * [v0.11.1 (July 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0111-july-24-2014)
  * [v0.11.0 (July 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0110-july-17-2014)



### React 0.10 and below [](#react-10-and-below "Link for React 0.10 and below ")

**Blog Posts**

  * [React v0.10](https://legacy.reactjs.org/blog/2014/03/21/react-v0.10.html)
  * [React v0.10 RC](https://legacy.reactjs.org/blog/2014/03/19/react-v0.10-rc1.html)
  * [React v0.9](https://legacy.reactjs.org/blog/2014/02/20/react-v0.9.html)
  * [React v0.9 RC](https://legacy.reactjs.org/blog/2014/02/16/react-v0.9-rc1.html)
  * [React Chrome Developer Tools](https://legacy.reactjs.org/blog/2014/01/02/react-chrome-developer-tools.html)
  * [React v0.8](https://legacy.reactjs.org/blog/2013/12/19/react-v0.8.0.html)
  * [React v0.5.2, v0.4.2](https://legacy.reactjs.org/blog/2013/12/18/react-v0.5.2-v0.4.2.html)
  * [React v0.5.1](https://legacy.reactjs.org/blog/2013/10/29/react-v0-5-1.html)
  * [React v0.5](https://legacy.reactjs.org/blog/2013/10/16/react-v0.5.0.html)
  * [React v0.4.1](https://legacy.reactjs.org/blog/2013/07/26/react-v0-4-1.html)
  * [React v0.4.0](https://legacy.reactjs.org/blog/2013/07/17/react-v0-4-0.html)
  * [New in React v0.4: Prop Validation and Default Values](https://legacy.reactjs.org/blog/2013/07/11/react-v0-4-prop-validation-and-default-values.html)
  * [New in React v0.4: Autobind by Default](https://legacy.reactjs.org/blog/2013/07/02/react-v0-4-autobind-by-default.html)
  * [React v0.3.3](https://legacy.reactjs.org/blog/2013/07/02/react-v0-4-autobind-by-default.html)



**Releases**

  * [v0.10.0 (March 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0100-march-21-2014)
  * [v0.9.0 (February 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#090-february-20-2014)
  * [v0.8.0 (December 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#080-december-19-2013)
  * [v0.5.2 (December 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#052-042-december-18-2013)
  * [v0.5.1 (October 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#051-october-29-2013)
  * [v0.5.0 (October 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#050-october-16-2013)
  * [v0.4.1 (July 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#041-july-26-2013)
  * [v0.4.0 (July 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#040-july-17-2013)
  * [v0.3.3 (June 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#033-june-20-2013)
  * [v0.3.2 (May 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#032-may-31-2013)
  * [v0.3.1 (May 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#031-may-30-2013)
  * [v0.3.0 (May 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#031-may-30-2013)



### Initial Commit [](#initial-commit "Link for Initial Commit ")

React was open-sourced on May 29, 2013. The initial commit is: `75897c`[: Initial public release](https://github.com/facebook/react/commit/75897c2dcd1dd3a6ca46284dd37e13d22b4b16b4)

See the first blog post: [Why did we build React?](https://legacy.reactjs.org/blog/2013/06/05/why-react.html)

React was open sourced at Facebook Seattle in 2013:

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Latest version: 19.0 ](#latest-version)
  * [Previous versions ](#previous-versions)
  * [Changelog ](#changelog)
  * [React 19 ](#react-19)
  * [React 18 ](#react-18)
  * [React 17 ](#react-17)
  * [React 16 ](#react-16)
  * [React 15 ](#react-15)
  * [React 0.14 ](#react-14)
  * [React 0.13 ](#react-13)
  * [React 0.12 ](#react-12)
  * [React 0.11 ](#react-11)
  * [React 0.10 and below ](#react-10-and-below)
  * [Initial Commit ](#initial-commit)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Quick Start[](#undefined "Link for this heading")

Welcome to the React documentation! This page will give you an introduction to 80% of the React concepts that you will use on a daily basis.

### You will learn

  * How to create and nest components
  * How to add markup and styles
  * How to display data
  * How to render conditions and lists
  * How to respond to events and update the screen
  * How to share data between components



## Creating and nesting components [](#components "Link for Creating and nesting components ")

React apps are made out of _components_. A component is a piece of the UI (user interface) that has its own logic and appearance. A component can be as small as a button, or as large as an entire page.

React components are JavaScript functions that return markup:

```


function MyButton() {

 return (

  <button>I'm a button</button>

 );

}


```


Now that you’ve declared `MyButton`, you can nest it into another component:

```


export default function MyApp() {

 return (

  <div>

   <h1>Welcome to my app</h1>

   <MyButton />

  </div>

 );

}


```


Notice that `<MyButton />` starts with a capital letter. That’s how you know it’s a React component. React component names must always start with a capital letter, while HTML tags must be lowercase.

Have a look at the result:

App.js

App.js

Download ResetFork

99

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

function MyButton() {

return (

<button>

I'm a button

</button>

);

}

export default function MyApp() {

return (

<div>

<h1>Welcome to my app</h1>

<MyButton />

</div>

);

}

[Open on CodeSandboxOpen Sandbox](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

Show more

The `export default` keywords specify the main component in the file. If you’re not familiar with some piece of JavaScript syntax, [MDN](https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export) and [javascript.info](https://javascript.info/import-export) have great references.

## Writing markup with JSX [](#writing-markup-with-jsx "Link for Writing markup with JSX ")

The markup syntax you’ve seen above is called _JSX_. It is optional, but most React projects use JSX for its convenience. All of the [tools we recommend for local development](/learn/installation) support JSX out of the box.

JSX is stricter than HTML. You have to close tags like `<br />`. Your component also can’t return multiple JSX tags. You have to wrap them into a shared parent, like a `<div>...</div>` or an empty `<>...</>` wrapper:

```


function AboutPage() {

 return (

  <>

   <h1>About</h1>

   <p>Hello there.<br />How do you do?</p>

  </>

 );

}


```


If you have a lot of HTML to port to JSX, you can use an [online converter.](https://transform.tools/html-to-jsx)

## Adding styles [](#adding-styles "Link for Adding styles ")

In React, you specify a CSS class with `className`. It works the same way as the HTML `class`[](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class) attribute:

```


<img className="avatar" />


```


Then you write the CSS rules for it in a separate CSS file:

```


/* In your CSS */

.avatar {

 border-radius: 50%;

}


```


React does not prescribe how you add CSS files. In the simplest case, you’ll add a `<link>`[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link) tag to your HTML. If you use a build tool or a framework, consult its documentation to learn how to add a CSS file to your project.

## Displaying data [](#displaying-data "Link for Displaying data ")

JSX lets you put markup into JavaScript. Curly braces let you “escape back” into JavaScript so that you can embed some variable from your code and display it to the user. For example, this will display `user.name`:

```


return (

 <h1>

  {user.name}

 </h1>

);


```


You can also “escape into JavaScript” from JSX attributes, but you have to use curly braces _instead of_ quotes. For example, `className="avatar"` passes the `"avatar"` string as the CSS class, but `src={user.imageUrl}` reads the JavaScript `user.imageUrl` variable value, and then passes that value as the `src` attribute:

```


return (

 <img

  className="avatar"

  src={user.imageUrl}

 />

);


```


You can put more complex expressions inside the JSX curly braces too, for example, [string concatenation](https://javascript.info/operators#string-concatenation-with-binary):

App.js

App.js

Download ResetFork

```
const user = {
 name: 'Hedy Lamarr',
 imageUrl: 'https://i.imgur.com/yXOvdOSs.jpg',
 imageSize: 90,
};
export default function Profile() {
 return (
  <>
   <h1>{user.name}</h1>
   <img
    className="avatar"
    src={user.imageUrl}
    alt={'Photo of ' + user.name}
    style={{
     width: user.imageSize,
     height: user.imageSize
    }}
   />
  </>
 );
}

```


Show more

In the above example, `style={{}}` is not a special syntax, but a regular `{}` object inside the `style={ }` JSX curly braces. You can use the `style` attribute when your styles depend on JavaScript variables.

## Conditional rendering [](#conditional-rendering "Link for Conditional rendering ")

In React, there is no special syntax for writing conditions. Instead, you’ll use the same techniques as you use when writing regular JavaScript code. For example, you can use an `if`[](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) statement to conditionally include JSX:

```


let content;

if (isLoggedIn) {

 content = <AdminPanel />;

} else {

 content = <LoginForm />;

}

return (

 <div>

  {content}

 </div>

);


```


If you prefer more compact code, you can use the [conditional `?` operator.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator) Unlike `if`, it works inside JSX:

```


<div>

 {isLoggedIn ? (

  <AdminPanel />

 ) : (

  <LoginForm />

 )}

</div>


```


When you don’t need the `else` branch, you can also use a shorter [logical `&&` syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#short-circuit_evaluation):

```


<div>

 {isLoggedIn && <AdminPanel />}

</div>


```


All of these approaches also work for conditionally specifying attributes. If you’re unfamiliar with some of this JavaScript syntax, you can start by always using `if...else`.

## Rendering lists [](#rendering-lists "Link for Rendering lists ")

You will rely on JavaScript features like `for`[ loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) and the [array `map()` function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) to render lists of components.

For example, let’s say you have an array of products:

```


const products = [

 { title: 'Cabbage', id: 1 },

 { title: 'Garlic', id: 2 },

 { title: 'Apple', id: 3 },

];


```


Inside your component, use the `map()` function to transform an array of products into an array of `<li>` items:

```


const listItems = products.map(product =>

 <li key={product.id}>

  {product.title}

 </li>

);

return (

 <ul>{listItems}</ul>

);


```


Notice how `<li>` has a `key` attribute. For each item in a list, you should pass a string or a number that uniquely identifies that item among its siblings. Usually, a key should be coming from your data, such as a database ID. React uses your keys to know what happened if you later insert, delete, or reorder the items.

App.js

App.js

Download ResetFork

```
const products = [
 { title: 'Cabbage', isFruit: false, id: 1 },
 { title: 'Garlic', isFruit: false, id: 2 },
 { title: 'Apple', isFruit: true, id: 3 },
];
export default function ShoppingList() {
 const listItems = products.map(product =>
  <li
   key={product.id}
   style={{
    color: product.isFruit ? 'magenta' : 'darkgreen'
   }}
  >
   {product.title}
  </li>
 );
 return (
  <ul>{listItems}</ul>
 );
}

```


Show more

## Responding to events [](#responding-to-events "Link for Responding to events ")

You can respond to events by declaring _event handler_ functions inside your components:

```


function MyButton() {

 function handleClick() {

  alert('You clicked me!');

 }

 return (

  <button onClick={handleClick}>

   Click me

  </button>

 );

}


```


Notice how `onClick={handleClick}` has no parentheses at the end! Do not _call_ the event handler function: you only need to _pass it down_. React will call your event handler when the user clicks the button.

## Updating the screen [](#updating-the-screen "Link for Updating the screen ")

Often, you’ll want your component to “remember” some information and display it. For example, maybe you want to count the number of times a button is clicked. To do this, add _state_ to your component.

First, import `useState`[](/reference/react/useState) from React:

```


import { useState } from 'react';


```


Now you can declare a _state variable_ inside your component:

```


function MyButton() {

 const [count, setCount] = useState(0);

 // ...


```


You’ll get two things from `useState`: the current state (`count`), and the function that lets you update it (`setCount`). You can give them any names, but the convention is to write `[something, setSomething]`.

The first time the button is displayed, `count` will be `0` because you passed `0` to `useState()`. When you want to change state, call `setCount()` and pass the new value to it. Clicking this button will increment the counter:

```


function MyButton() {

 const [count, setCount] = useState(0);

 function handleClick() {

  setCount(count + 1);

 }

 return (

  <button onClick={handleClick}>

   Clicked {count} times

  </button>

 );

}


```


React will call your component function again. This time, `count` will be `1`. Then it will be `2`. And so on.

If you render the same component multiple times, each will get its own state. Click each button separately:

App.js

App.js

Download ResetFork

```
import { useState } from 'react';
export default function MyApp() {
 return (
  <div>
   <h1>Counters that update separately</h1>
   <MyButton />
   <MyButton />
  </div>
 );
}
function MyButton() {
 const [count, setCount] = useState(0);
 function handleClick() {
  setCount(count + 1);
 }
 return (
  <button onClick={handleClick}>
   Clicked {count} times
  </button>
 );
}

```


Show more

Notice how each button “remembers” its own `count` state and doesn’t affect other buttons.

## Using Hooks [](#using-hooks "Link for Using Hooks ")

Functions starting with `use` are called _Hooks_. `useState` is a built-in Hook provided by React. You can find other built-in Hooks in the [API reference.](/reference/react) You can also write your own Hooks by combining the existing ones.

Hooks are more restrictive than other functions. You can only call Hooks _at the top_ of your components (or other Hooks). If you want to use `useState` in a condition or a loop, extract a new component and put it there.

## Sharing data between components [](#sharing-data-between-components "Link for Sharing data between components ")

In the previous example, each `MyButton` had its own independent `count`, and when each button was clicked, only the `count` for the button clicked changed:

Initially, each `MyButton`’s `count` state is `0`

The first `MyButton` updates its `count` to `1`

However, often you’ll need components to _share data and always update together_.

To make both `MyButton` components display the same `count` and update together, you need to move the state from the individual buttons “upwards” to the closest component containing all of them.

In this example, it is `MyApp`:

Initially, `MyApp`’s `count` state is `0` and is passed down to both children

On click, `MyApp` updates its `count` state to `1` and passes it down to both children

Now when you click either button, the `count` in `MyApp` will change, which will change both of the counts in `MyButton`. Here’s how you can express this in code.

First, _move the state up_ from `MyButton` into `MyApp`:

```


export default function MyApp() {

 const [count, setCount] = useState(0);

 function handleClick() {

  setCount(count + 1);

 }

 return (

  <div>

   <h1>Counters that update separately</h1>

   <MyButton />

   <MyButton />

  </div>

 );

}

function MyButton() {

 // ... we're moving code from here ...

}


```


Then, _pass the state down_ from `MyApp` to each `MyButton`, together with the shared click handler. You can pass information to `MyButton` using the JSX curly braces, just like you previously did with built-in tags like `<img>`:

```


export default function MyApp() {

 const [count, setCount] = useState(0);

 function handleClick() {

  setCount(count + 1);

 }

 return (

  <div>

   <h1>Counters that update together</h1>

   <MyButton count={count} onClick={handleClick} />

   <MyButton count={count} onClick={handleClick} />

  </div>

 );

}


```


The information you pass down like this is called _props_. Now the `MyApp` component contains the `count` state and the `handleClick` event handler, and _passes both of them down as props_ to each of the buttons.

Finally, change `MyButton` to _read_ the props you have passed from its parent component:

```


function MyButton({ count, onClick }) {

 return (

  <button onClick={onClick}>

   Clicked {count} times

  </button>

 );

}


```


When you click the button, the `onClick` handler fires. Each button’s `onClick` prop was set to the `handleClick` function inside `MyApp`, so the code inside of it runs. That code calls `setCount(count + 1)`, incrementing the `count` state variable. The new `count` value is passed as a prop to each button, so they all show the new value. This is called “lifting state up”. By moving state up, you’ve shared it between components.

App.js

App.js

Download ResetFork

```
import { useState } from 'react';
export default function MyApp() {
 const [count, setCount] = useState(0);
 function handleClick() {
  setCount(count + 1);
 }
 return (
  <div>
   <h1>Counters that update together</h1>
   <MyButton count={count} onClick={handleClick} />
   <MyButton count={count} onClick={handleClick} />
  </div>
 );
}
function MyButton({ count, onClick }) {
 return (
  <button onClick={onClick}>
   Clicked {count} times
  </button>
 );
}

```


Show more

## Next Steps [](#next-steps "Link for Next Steps ")

By now, you know the basics of how to write React code!

Check out the [Tutorial](/learn/tutorial-tic-tac-toe) to put them into practice and build your first mini-app with React.

[NextTutorial: Tic-Tac-Toe](/learn/tutorial-tic-tac-toe)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Creating and nesting components ](#components)
  * [Writing markup with JSX ](#writing-markup-with-jsx)
  * [Adding styles ](#adding-styles)
  * [Displaying data ](#displaying-data)
  * [Conditional rendering ](#conditional-rendering)
  * [Rendering lists ](#rendering-lists)
  * [Responding to events ](#responding-to-events)
  * [Updating the screen ](#updating-the-screen)
  * [Using Hooks ](#using-hooks)
  * [Sharing data between components ](#sharing-data-between-components)
  * [Next Steps ](#next-steps)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### react@19

  * [Overview ](/reference/react "Overview")
  * [Hooks ](/reference/react/hooks "Hooks")

    * [useActionState ](/reference/react/useActionState "useActionState")
    * [useCallback ](/reference/react/useCallback "useCallback")
    * [useContext ](/reference/react/useContext "useContext")
    * [useDebugValue ](/reference/react/useDebugValue "useDebugValue")
    * [useDeferredValue ](/reference/react/useDeferredValue "useDeferredValue")
    * [useEffect ](/reference/react/useEffect "useEffect")
    * [useId ](/reference/react/useId "useId")
    * [useImperativeHandle ](/reference/react/useImperativeHandle "useImperativeHandle")
    * [useInsertionEffect ](/reference/react/useInsertionEffect "useInsertionEffect")
    * [useLayoutEffect ](/reference/react/useLayoutEffect "useLayoutEffect")
    * [useMemo ](/reference/react/useMemo "useMemo")
    * [useOptimistic ](/reference/react/useOptimistic "useOptimistic")
    * [useReducer ](/reference/react/useReducer "useReducer")
    * [useRef ](/reference/react/useRef "useRef")
    * [useState ](/reference/react/useState "useState")
    * [useSyncExternalStore ](/reference/react/useSyncExternalStore "useSyncExternalStore")
    * [useTransition ](/reference/react/useTransition "useTransition")

  * [Components ](/reference/react/components "Components")

    * [<Fragment> (<>) ](/reference/react/Fragment "<Fragment> \(<>\)")
    * [<Profiler> ](/reference/react/Profiler "<Profiler>")
    * [<StrictMode> ](/reference/react/StrictMode "<StrictMode>")
    * [<Suspense> ](/reference/react/Suspense "<Suspense>")

  * [APIs ](/reference/react/apis "APIs")

    * [act ](/reference/react/act "act")
    * [cache ](/reference/react/cache "cache")
    * [createContext ](/reference/react/createContext "createContext")
    * [lazy ](/reference/react/lazy "lazy")
    * [memo ](/reference/react/memo "memo")
    * [startTransition ](/reference/react/startTransition "startTransition")
    * [use ](/reference/react/use "use")
    * [experimental_taintObjectReference  - This feature is available in the latest Canary](/reference/react/experimental_taintObjectReference "experimental_taintObjectReference")
    * [experimental_taintUniqueValue  - This feature is available in the latest Canary](/reference/react/experimental_taintUniqueValue "experimental_taintUniqueValue")

### react-dom@19

  * [Hooks ](/reference/react-dom/hooks "Hooks")

    * [useFormStatus ](/reference/react-dom/hooks/useFormStatus "useFormStatus")

  * [Components ](/reference/react-dom/components "Components")

    * [Common (e.g. <div>) ](/reference/react-dom/components/common "Common \(e.g. <div>\)")
    * [<form> ](/reference/react-dom/components/form "<form>")
    * [<input> ](/reference/react-dom/components/input "<input>")
    * [<option> ](/reference/react-dom/components/option "<option>")
    * [<progress> ](/reference/react-dom/components/progress "<progress>")
    * [<select> ](/reference/react-dom/components/select "<select>")
    * [<textarea> ](/reference/react-dom/components/textarea "<textarea>")
    * [<link> ](/reference/react-dom/components/link "<link>")
    * [<meta> ](/reference/react-dom/components/meta "<meta>")
    * [<script> ](/reference/react-dom/components/script "<script>")
    * [<style> ](/reference/react-dom/components/style "<style>")
    * [<title> ](/reference/react-dom/components/title "<title>")

  * [APIs ](/reference/react-dom "APIs")

    * [createPortal ](/reference/react-dom/createPortal "createPortal")
    * [flushSync ](/reference/react-dom/flushSync "flushSync")
    * [preconnect ](/reference/react-dom/preconnect "preconnect")
    * [prefetchDNS ](/reference/react-dom/prefetchDNS "prefetchDNS")
    * [preinit ](/reference/react-dom/preinit "preinit")
    * [preinitModule ](/reference/react-dom/preinitModule "preinitModule")
    * [preload ](/reference/react-dom/preload "preload")
    * [preloadModule ](/reference/react-dom/preloadModule "preloadModule")

  * [Client APIs ](/reference/react-dom/client "Client APIs")

    * [createRoot ](/reference/react-dom/client/createRoot "createRoot")
    * [hydrateRoot ](/reference/react-dom/client/hydrateRoot "hydrateRoot")

  * [Server APIs ](/reference/react-dom/server "Server APIs")

    * [renderToPipeableStream ](/reference/react-dom/server/renderToPipeableStream "renderToPipeableStream")
    * [renderToReadableStream ](/reference/react-dom/server/renderToReadableStream "renderToReadableStream")
    * [renderToStaticMarkup ](/reference/react-dom/server/renderToStaticMarkup "renderToStaticMarkup")
    * [renderToString ](/reference/react-dom/server/renderToString "renderToString")

  * [Static APIs ](/reference/react-dom/static "Static APIs")

    * [prerender ](/reference/react-dom/static/prerender "prerender")
    * [prerenderToNodeStream ](/reference/react-dom/static/prerenderToNodeStream "prerenderToNodeStream")

### Rules of React

  * [Overview ](/reference/rules "Overview")

    * [Components and Hooks must be pure ](/reference/rules/components-and-hooks-must-be-pure "Components and Hooks must be pure")
    * [React calls Components and Hooks ](/reference/rules/react-calls-components-and-hooks "React calls Components and Hooks")
    * [Rules of Hooks ](/reference/rules/rules-of-hooks "Rules of Hooks")

### React Server Components

  * [Server Components ](/reference/rsc/server-components "Server Components")
  * [Server Functions ](/reference/rsc/server-functions "Server Functions")
  * [Directives ](/reference/rsc/directives "Directives")

    * ['use client' ](/reference/rsc/use-client "'use client'")
    * ['use server' ](/reference/rsc/use-server "'use server'")

### Legacy APIs

  * [Legacy React APIs ](/reference/react/legacy "Legacy React APIs")

    * [Children ](/reference/react/Children "Children")
    * [cloneElement ](/reference/react/cloneElement "cloneElement")
    * [Component ](/reference/react/Component "Component")
    * [createElement ](/reference/react/createElement "createElement")
    * [createRef ](/reference/react/createRef "createRef")
    * [forwardRef ](/reference/react/forwardRef "forwardRef")
    * [isValidElement ](/reference/react/isValidElement "isValidElement")
    * [PureComponent ](/reference/react/PureComponent "PureComponent")




Is this page useful?

[API Reference](/reference/react)

# React Reference Overview[](#undefined "Link for this heading")

This section provides detailed reference documentation for working with React. For an introduction to React, please visit the [Learn](/learn) section.

The React reference documentation is broken down into functional subsections:

## React [](#react "Link for React ")

Programmatic React features:

  * [Hooks](/reference/react/hooks) - Use different React features from your components.
  * [Components](/reference/react/components) - Built-in components that you can use in your JSX.
  * [APIs](/reference/react/apis) - APIs that are useful for defining components.
  * [Directives](/reference/rsc/directives) - Provide instructions to bundlers compatible with React Server Components.



## React DOM [](#react-dom "Link for React DOM ")

React-dom contains features that are only supported for web applications (which run in the browser DOM environment). This section is broken into the following:

  * [Hooks](/reference/react-dom/hooks) - Hooks for web applications which run in the browser DOM environment.
  * [Components](/reference/react-dom/components) - React supports all of the browser built-in HTML and SVG components.
  * [APIs](/reference/react-dom) - The `react-dom` package contains methods supported only in web applications.
  * [Client APIs](/reference/react-dom/client) - The `react-dom/client` APIs let you render React components on the client (in the browser).
  * [Server APIs](/reference/react-dom/server) - The `react-dom/server` APIs let you render React components to HTML on the server.



## Rules of React [](#rules-of-react "Link for Rules of React ")

React has idioms — or rules — for how to express patterns in a way that is easy to understand and yields high-quality applications:

  * [Components and Hooks must be pure](/reference/rules/components-and-hooks-must-be-pure) – Purity makes your code easier to understand, debug, and allows React to automatically optimize your components and hooks correctly.
  * [React calls Components and Hooks](/reference/rules/react-calls-components-and-hooks) – React is responsible for rendering components and hooks when necessary to optimize the user experience.
  * [Rules of Hooks](/reference/rules/rules-of-hooks) – Hooks are defined using JavaScript functions, but they represent a special type of reusable UI logic with restrictions on where they can be called.



## Legacy APIs [](#legacy-apis "Link for Legacy APIs ")

  * [Legacy APIs](/reference/react/legacy) - Exported from the `react` package, but not recommended for use in newly written code.



[NextHooks](/reference/react/hooks)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [React ](#react)
  * [React DOM ](#react-dom)
  * [Rules of React ](#rules-of-react)
  * [Legacy APIs ](#legacy-apis)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# React Community[](#undefined "Link for this heading")

React has a community of millions of developers. On this page we’ve listed some React-related communities that you can be a part of; see the other pages in this section for additional online and in-person learning materials.

## Code of Conduct [](#code-of-conduct "Link for Code of Conduct ")

Before participating in React’s communities, [please read our Code of Conduct.](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md) We have adopted the [Contributor Covenant](https://www.contributor-covenant.org/) and we expect that all community members adhere to the guidelines within.

## Stack Overflow [](#stack-overflow "Link for Stack Overflow ")

Stack Overflow is a popular forum to ask code-level questions or if you’re stuck with a specific error. Read through the [existing questions](https://stackoverflow.com/questions/tagged/reactjs) tagged with **reactjs** or [ask your own](https://stackoverflow.com/questions/ask?tags=reactjs)!

## Popular Discussion Forums [](#popular-discussion-forums "Link for Popular Discussion Forums ")

There are many online forums which are a great place for discussion about best practices and application architecture as well as the future of React. If you have an answerable code-level question, Stack Overflow is usually a better fit.

Each community consists of many thousands of React users.

  * [DEV’s React community](https://dev.to/t/react)
  * [Hashnode’s React community](https://hashnode.com/n/reactjs)
  * [Reactiflux online chat](https://discord.gg/reactiflux)



## News [](#news "Link for News ")

For the latest news about React, and the [official React blog](/blog) on this website.

[NextReact Conferences](/community/conferences)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Code of Conduct ](#code-of-conduct)
  * [Stack Overflow ](#stack-overflow)
  * [Popular Discussion Forums ](#popular-discussion-forums)
  * [News ](#news)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React Blog[](#undefined "Link for this heading")

This blog is the official source for the updates from the React team. Anything important, including release notes or deprecation notices, will be posted here first. You can also follow the account on Twitter, but you won’t miss anything essential if you only read this blog.

## [React v19 December 5, 2024In the React 19 Upgrade Guide, we shared step-by-step instructions for upgrading your app to React 19. In this post, we’ll give an overview of the new features in React 19, and how you can adopt them …Read more](/blog/2024/12/05/react-19)## [React Compiler Beta ReleaseOctober 21, 2024We announced an experimental release of React Compiler at React Conf 2024. We’ve made a lot of progress since then, and in this post we want to share what’s next for React Compiler …Read more](/blog/2024/10/21/react-compiler-beta-release)## [React Conf 2024 RecapMay 22, 2024Last week we hosted React Conf 2024, a two-day conference in Henderson, Nevada where 700+ attendees gathered in-person to discuss the latest in UI engineering. This was our first in-person conference since 2019, and we were thrilled to be able to bring the community together again …Read more](/blog/2024/05/22/react-conf-2024-recap)## [React 19 Upgrade GuideApril 25, 2024The improvements added to React 19 require some breaking changes, but we’ve worked to make the upgrade as smooth as possible, and we don’t expect the changes to impact most apps. In this post, we will guide you through the steps for upgrading libraries to React 19 …Read more](/blog/2024/04/25/react-19-upgrade-guide)## [React Labs: What We've Been Working On – February 2024February 15, 2024In React Labs posts, we write about projects in active research and development. Since our last update, we’ve made significant progress on React Compiler, new features, and React 19, and we’d like to share what we learned.Read more](/blog/2024/02/15/react-labs-what-we-have-been-working-on-february-2024)## [React Canaries: Incremental Feature Rollout Outside MetaMay 3, 2023Traditionally, new React features used to only be available at Meta first, and land in the open source releases later. We’d like to offer the React community an option to adopt individual new features as soon as their design is close to final—similar to how Meta uses React internally. We are introducing a new officially supported Canary release channel. It lets curated setups like frameworks decouple adoption of individual React features from the React release schedule.Read more](/blog/2023/05/03/react-canaries)## [React Labs: What We've Been Working On – March 2023March 22, 2023In React Labs posts, we write about projects in active research and development. Since our last update, we’ve made significant progress on React Server Components, Asset Loading, Optimizing Compiler, Offscreen Rendering, and Transition Tracing, and we’d like to share what we learned.Read more](/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023)## [Introducing react.devMarch 16, 2023Today we are thrilled to launch react.dev, the new home for React and its documentation. In this post, we would like to give you a tour of the new site.Read more](/blog/2023/03/16/introducing-react-dev)## [React Labs: What We've Been Working On – June 2022June 15, 2022React 18 was years in the making, and with it brought valuable lessons for the React team. Its release was the result of many years of research and exploring many paths. Some of those paths were successful; many more were dead-ends that led to new insights. One lesson we’ve learned is that it’s frustrating for the community to wait for new features without having insight into these paths that we’re exploring…Read more](/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022)## [React v18.0March 29, 2022React 18 is now available on npm! In our last post, we shared step-by-step instructions for upgrading your app to React 18. In this post, we’ll give an overview of what’s new in React 18, and what it means for the future…Read more](/blog/2022/03/29/react-v18)## [How to Upgrade to React 18March 8, 2022As we shared in the release post, React 18 introduces features powered by our new concurrent renderer, with a gradual adoption strategy for existing applications. In this post, we will guide you through the steps for upgrading to React 18…Read more](/blog/2022/03/08/react-18-upgrade-guide)## [React Conf 2021 RecapDecember 17, 2021Last week we hosted our 6th React Conf. In previous years, we’ve used the React Conf stage to deliver industry changing announcements such as React Native and React Hooks. This year, we shared our multi-platform vision for React, starting with the release of React 18 and gradual adoption of concurrent features…Read more](/blog/2021/12/17/react-conf-2021-recap)## [The Plan for React 18June 8, 2021The React team is excited to share a few updates:

  * We’ve started work on the React 18 release, which will be our next major version.
  * We’ve created a Working Group to prepare the community for gradual adoption of new features in React 18.
  * We’ve published a React 18 Alpha so that library authors can try it and provide feedback…

Read more](/blog/2021/06/08/the-plan-for-react-18)## [Introducing Zero-Bundle-Size React Server ComponentsDecember 21, 20202020 has been a long year. As it comes to an end we wanted to share a special Holiday Update on our research into zero-bundle-size React Server Components. To introduce React Server Components, we have prepared a talk and a demo. If you want, you can check them out during the holidays, or later when work picks back up in the new year…Read more](/blog/2020/12/21/data-fetching-with-react-server-components)

### All release notes [](#all-release-notes "Link for All release notes ")

Not every React release deserves its own blog post, but you can find a detailed changelog for every release in the `CHANGELOG.md`[](https://github.com/facebook/react/blob/main/CHANGELOG.md) file in the React repository, as well as on the [Releases](https://github.com/facebook/react/releases) page.

### Older posts [](#older-posts "Link for Older posts ")

See the [older posts.](https://reactjs.org/blog/all.html)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Translations[](#undefined "Link for this heading")

React docs are translated by the global community into many languages all over the world.

## Source site [](#main-site "Link for Source site ")

All translations are provided from the canonical source docs:

  * [English](https://react.dev/) — [Contribute](https://github.com/reactjs/react.dev/)



## Full translations [](#full-translations "Link for Full translations ")

  * [French (Français)](https://fr.react.dev/) — [Contribute](https://github.com/reactjs/fr.react.dev)
  * [Japanese (日本語)](https://ja.react.dev/) — [Contribute](https://github.com/reactjs/ja.react.dev)
  * [Korean (한국어)](https://ko.react.dev/) — [Contribute](https://github.com/reactjs/ko.react.dev)
  * [Simplified Chinese (简体中文)](https://zh-hans.react.dev/) — [Contribute](https://github.com/reactjs/zh-hans.react.dev)
  * [Spanish (Español)](https://es.react.dev/) — [Contribute](https://github.com/reactjs/es.react.dev)
  * [Turkish (Türkçe)](https://tr.react.dev/) — [Contribute](https://github.com/reactjs/tr.react.dev)



## In-progress translations [](#in-progress-translations "Link for In-progress translations ")

For the progress of each translation, see: [Is React Translated Yet?](https://translations.react.dev/)

  * [Arabic (العربية)](https://ar.react.dev/) — [Contribute](https://github.com/reactjs/ar.react.dev)
  * [Azerbaijani (Azərbaycanca)](https://az.react.dev/) — [Contribute](https://github.com/reactjs/az.react.dev)
  * [Belarusian (Беларуская)](https://be.react.dev/) — [Contribute](https://github.com/reactjs/be.react.dev)
  * [Bengali (বাংলা)](https://bn.react.dev/) — [Contribute](https://github.com/reactjs/bn.react.dev)
  * [Czech (Čeština)](https://cs.react.dev/) — [Contribute](https://github.com/reactjs/cs.react.dev)
  * [Finnish (Suomi)](https://fi.react.dev/) — [Contribute](https://github.com/reactjs/fi.react.dev)
  * [German (Deutsch)](https://de.react.dev/) — [Contribute](https://github.com/reactjs/de.react.dev)
  * [Gujarati (ગુજરાતી)](https://gu.react.dev/) — [Contribute](https://github.com/reactjs/gu.react.dev)
  * [Hebrew (עברית)](https://he.react.dev/) — [Contribute](https://github.com/reactjs/he.react.dev)
  * [Hindi (हिन्दी)](https://hi.react.dev/) — [Contribute](https://github.com/reactjs/hi.react.dev)
  * [Hungarian (magyar)](https://hu.react.dev/) — [Contribute](https://github.com/reactjs/hu.react.dev)
  * [Icelandic (Íslenska)](https://is.react.dev/) — [Contribute](https://github.com/reactjs/is.react.dev)
  * [Indonesian (Bahasa Indonesia)](https://id.react.dev/) — [Contribute](https://github.com/reactjs/id.react.dev)
  * [Italian (Italiano)](https://it.react.dev/) — [Contribute](https://github.com/reactjs/it.react.dev)
  * [Kazakh (Қазақша)](https://kk.react.dev/) — [Contribute](https://github.com/reactjs/kk.react.dev)
  * [Lao (ພາສາລາວ)](https://lo.react.dev/) — [Contribute](https://github.com/reactjs/lo.react.dev)
  * [Macedonian (Македонски)](https://mk.react.dev/) — [Contribute](https://github.com/reactjs/mk.react.dev)
  * [Malayalam (മലയാളം)](https://ml.react.dev/) — [Contribute](https://github.com/reactjs/ml.react.dev)
  * [Mongolian (Монгол хэл)](https://mn.react.dev/) — [Contribute](https://github.com/reactjs/mn.react.dev)
  * [Persian (فارسی)](https://fa.react.dev/) — [Contribute](https://github.com/reactjs/fa.react.dev)
  * [Polish (Polski)](https://pl.react.dev/) — [Contribute](https://github.com/reactjs/pl.react.dev)
  * [Portuguese (Brazil) (Português do Brasil)](https://pt-br.react.dev/) — [Contribute](https://github.com/reactjs/pt-br.react.dev)
  * [Russian (Русский)](https://ru.react.dev/) — [Contribute](https://github.com/reactjs/ru.react.dev)
  * [Serbian (Srpski)](https://sr.react.dev/) — [Contribute](https://github.com/reactjs/sr.react.dev)
  * [Sinhala (සිංහල)](https://si.react.dev/) — [Contribute](https://github.com/reactjs/si.react.dev)
  * [Swahili (Kiswahili)](https://sw.react.dev/) — [Contribute](https://github.com/reactjs/sw.react.dev)
  * [Tamil (தமிழ்)](https://ta.react.dev/) — [Contribute](https://github.com/reactjs/ta.react.dev)
  * [Telugu (తెలుగు)](https://te.react.dev/) — [Contribute](https://github.com/reactjs/te.react.dev)
  * [Traditional Chinese (繁體中文)](https://zh-hant.react.dev/) — [Contribute](https://github.com/reactjs/zh-hant.react.dev)
  * [Ukrainian (Українська)](https://uk.react.dev/) — [Contribute](https://github.com/reactjs/uk.react.dev)
  * [Urdu (اردو)](https://ur.react.dev/) — [Contribute](https://github.com/reactjs/ur.react.dev)
  * [Vietnamese (Tiếng Việt)](https://vi.react.dev/) — [Contribute](https://github.com/reactjs/vi.react.dev)



## How to contribute [](#how-to-contribute "Link for How to contribute ")

You can contribute to the translation efforts!

The community conducts the translation work for the React docs on each language-specific fork of react.dev. Typical translation work involves directly translating a Markdown file and creating a pull request. Click the “contribute” link above to the GitHub repository for your language, and follow the instructions there to help with the translation effort.

If you want to start a new translation for your language, visit: [translations.react.dev](https://github.com/reactjs/translations.react.dev)

[PreviousDocs Contributors](/community/docs-contributors)[NextAcknowledgements](/community/acknowledgements)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Source site ](#main-site)
  * [Full translations ](#full-translations)
  * [In-progress translations ](#in-progress-translations)
  * [How to contribute ](#how-to-contribute)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

[Installation](/learn/installation)

# Add React to an Existing Project[](#undefined "Link for this heading")

If you want to add some interactivity to your existing project, you don’t have to rewrite it in React. Add React to your existing stack, and render interactive React components anywhere.

### Note

**You need to install[Node.js](https://nodejs.org/en/) for local development.** Although you can [try React](/learn/installation#try-react) online or with a simple HTML page, realistically most JavaScript tooling you’ll want to use for development requires Node.js.

## Using React for an entire subroute of your existing website [](#using-react-for-an-entire-subroute-of-your-existing-website "Link for Using React for an entire subroute of your existing website ")

Let’s say you have an existing web app at `example.com` built with another server technology (like Rails), and you want to implement all routes starting with `example.com/some-app/` fully with React.

Here’s how we recommend to set it up:

  1. **Build the React part of your app** using one of the [React-based frameworks](/learn/start-a-new-react-project).
  2. **Specify`/some-app` as the _base path_** in your framework’s configuration (here’s how: [Next.js](https://nextjs.org/docs/api-reference/next.config.js/basepath), [Gatsby](https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/path-prefix/)).
  3. **Configure your server or a proxy** so that all requests under `/some-app/` are handled by your React app.



This ensures the React part of your app can [benefit from the best practices](/learn/start-a-new-react-project#can-i-use-react-without-a-framework) baked into those frameworks.

Many React-based frameworks are full-stack and let your React app take advantage of the server. However, you can use the same approach even if you can’t or don’t want to run JavaScript on the server. In that case, serve the HTML/CSS/JS export (`next export`[ output](https://nextjs.org/docs/advanced-features/static-html-export) for Next.js, default for Gatsby) at `/some-app/` instead.

## Using React for a part of your existing page [](#using-react-for-a-part-of-your-existing-page "Link for Using React for a part of your existing page ")

Let’s say you have an existing page built with another technology (either a server one like Rails, or a client one like Backbone), and you want to render interactive React components somewhere on that page. That’s a common way to integrate React—in fact, it’s how most React usage looked at Meta for many years!

You can do this in two steps:

  1. **Set up a JavaScript environment** that lets you use the [JSX syntax](/learn/writing-markup-with-jsx), split your code into modules with the `import`[](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) / `export`[](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) syntax, and use packages (for example, React) from the [npm](https://www.npmjs.com/) package registry.
  2. **Render your React components** where you want to see them on the page.



The exact approach depends on your existing page setup, so let’s walk through some details.

### Step 1: Set up a modular JavaScript environment [](#step-1-set-up-a-modular-javascript-environment "Link for Step 1: Set up a modular JavaScript environment ")

A modular JavaScript environment lets you write your React components in individual files, as opposed to writing all of your code in a single file. It also lets you use all the wonderful packages published by other developers on the [npm](https://www.npmjs.com/) registry—including React itself! How you do this depends on your existing setup:

  * **If your app is already split into files that use`import` statements,** try to use the setup you already have. Check whether writing `<div />` in your JS code causes a syntax error. If it causes a syntax error, you might need to [transform your JavaScript code with Babel](https://babeljs.io/setup), and enable the [Babel React preset](https://babeljs.io/docs/babel-preset-react) to use JSX.

  * **If your app doesn’t have an existing setup for compiling JavaScript modules,** set it up with [Vite](https://vitejs.dev/). The Vite community maintains [many integrations with backend frameworks](https://github.com/vitejs/awesome-vite#integrations-with-backends), including Rails, Django, and Laravel. If your backend framework is not listed, [follow this guide](https://vitejs.dev/guide/backend-integration.html) to manually integrate Vite builds with your backend.




To check whether your setup works, run this command in your project folder:

Terminal

Copy

npm install react react-dom

Then add these lines of code at the top of your main JavaScript file (it might be called `index.js` or `main.js`):

index.js

index.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { createRoot } from 'react-dom/client';
// Clear the existing HTML content
document.body.innerHTML = '<div id="app"></div>';
// Render your React component instead
const root = createRoot(document.getElementById('app'));
root.render(<h1>Hello, world</h1>);

```


If the entire content of your page was replaced by a “Hello, world!”, everything worked! Keep reading.

### Note

Integrating a modular JavaScript environment into an existing project for the first time can feel intimidating, but it’s worth it! If you get stuck, try our [community resources](/community) or the [Vite Chat](https://chat.vitejs.dev/).

### Step 2: Render React components anywhere on the page [](#step-2-render-react-components-anywhere-on-the-page "Link for Step 2: Render React components anywhere on the page ")

In the previous step, you put this code at the top of your main file:

```


import { createRoot } from 'react-dom/client';

// Clear the existing HTML content

document.body.innerHTML = '<div id="app"></div>';

// Render your React component instead

const root = createRoot(document.getElementById('app'));

root.render(<h1>Hello, world</h1>);


```


Of course, you don’t actually want to clear the existing HTML content!

Delete this code.

Instead, you probably want to render your React components in specific places in your HTML. Open your HTML page (or the server templates that generate it) and add a unique `id`[](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id) attribute to any tag, for example:

```


<!-- ... somewhere in your html ... -->

<nav id="navigation"></nav>

<!-- ... more html ... -->


```


This lets you find that HTML element with `document.getElementById`[](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById) and pass it to `createRoot`[](/reference/react-dom/client/createRoot) so that you can render your own React component inside:

index.jsindex.html

index.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { createRoot } from 'react-dom/client';
function NavigationBar() {
 // TODO: Actually implement a navigation bar
 return <h1>Hello from React!</h1>;
}
const domNode = document.getElementById('navigation');
const root = createRoot(domNode);
root.render(<NavigationBar />);

```


Notice how the original HTML content from `index.html` is preserved, but your own `NavigationBar` React component now appears inside the `<nav id="navigation">` from your HTML. Read the `createRoot`[ usage documentation](/reference/react-dom/client/createRoot#rendering-a-page-partially-built-with-react) to learn more about rendering React components inside an existing HTML page.

When you adopt React in an existing project, it’s common to start with small interactive components (like buttons), and then gradually keep “moving upwards” until eventually your entire page is built with React. If you ever reach that point, we recommend migrating to [a React framework](/learn/start-a-new-react-project) right after to get the most out of React.

## Using React Native in an existing native mobile app [](#using-react-native-in-an-existing-native-mobile-app "Link for Using React Native in an existing native mobile app ")

[React Native](https://reactnative.dev/) can also be integrated into existing native apps incrementally. If you have an existing native app for Android (Java or Kotlin) or iOS (Objective-C or Swift), [follow this guide](https://reactnative.dev/docs/integration-with-existing-apps) to add a React Native screen to it.

[PreviousStart a New React Project](/learn/start-a-new-react-project)[NextEditor Setup](/learn/editor-setup)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Using React for an entire subroute of your existing website ](#using-react-for-an-entire-subroute-of-your-existing-website)
  * [Using React for a part of your existing page ](#using-react-for-a-part-of-your-existing-page)
  * [Step 1: Set up a modular JavaScript environment ](#step-1-set-up-a-modular-javascript-environment)
  * [Step 2: Render React components anywhere on the page ](#step-2-render-react-components-anywhere-on-the-page)
  * [Using React Native in an existing native mobile app ](#using-react-native-in-an-existing-native-mobile-app)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

[Installation](/learn/installation)

# Start a New React Project[](#undefined "Link for this heading")

If you want to build a new app or a new website fully with React, we recommend picking one of the React-powered frameworks popular in the community.

You can use React without a framework, however we’ve found that most apps and sites eventually build solutions to common problems such as code-splitting, routing, data fetching, and generating HTML. These problems are common to all UI libraries, not just React.

By starting with a framework, you can get started with React quickly, and avoid essentially building your own framework later.

##### Deep Dive

#### Can I use React without a framework? [](#can-i-use-react-without-a-framework "Link for Can I use React without a framework? ")

Show Details

You can definitely use React without a framework—that’s how you’d [use React for a part of your page.](/learn/add-react-to-an-existing-project#using-react-for-a-part-of-your-existing-page) **However, if you’re building a new app or a site fully with React, we recommend using a framework.**

Here’s why.

Even if you don’t need routing or data fetching at first, you’ll likely want to add some libraries for them. As your JavaScript bundle grows with every new feature, you might have to figure out how to split code for every route individually. As your data fetching needs get more complex, you are likely to encounter server-client network waterfalls that make your app feel very slow. As your audience includes more users with poor network conditions and low-end devices, you might need to generate HTML from your components to display content early—either on the server, or during the build time. Changing your setup to run some of your code on the server or during the build can be very tricky.

**These problems are not React-specific. This is why Svelte has SvelteKit, Vue has Nuxt, and so on.** To solve these problems on your own, you’ll need to integrate your bundler with your router and with your data fetching library. It’s not hard to get an initial setup working, but there are a lot of subtleties involved in making an app that loads quickly even as it grows over time. You’ll want to send down the minimal amount of app code but do so in a single client–server roundtrip, in parallel with any data required for the page. You’ll likely want the page to be interactive before your JavaScript code even runs, to support progressive enhancement. You may want to generate a folder of fully static HTML files for your marketing pages that can be hosted anywhere and still work with JavaScript disabled. Building these capabilities yourself takes real work.

**React frameworks on this page solve problems like these by default, with no extra work from your side.** They let you start very lean and then scale your app with your needs. Each React framework has a community, so finding answers to questions and upgrading tooling is easier. Frameworks also give structure to your code, helping you and others retain context and skills between different projects. Conversely, with a custom setup it’s easier to get stuck on unsupported dependency versions, and you’ll essentially end up creating your own framework—albeit one with no community or upgrade path (and if it’s anything like the ones we’ve made in the past, more haphazardly designed).

If your app has unusual constraints not served well by these frameworks, or you prefer to solve these problems yourself, you can roll your own custom setup with React. Grab `react` and `react-dom` from npm, set up your custom build process with a bundler like [Vite](https://vitejs.dev/) or [Parcel](https://parceljs.org/), and add other tools as you need them for routing, static generation or server-side rendering, and more.

## Production-grade React frameworks [](#production-grade-react-frameworks "Link for Production-grade React frameworks ")

These frameworks support all the features you need to deploy and scale your app in production and are working towards supporting our [full-stack architecture vision](#which-features-make-up-the-react-teams-full-stack-architecture-vision). All of the frameworks we recommend are open source with active communities for support, and can be deployed to your own server or a hosting provider. If you’re a framework author interested in being included on this list, [please let us know](https://github.com/reactjs/react.dev/issues/new?assignees=&labels=type%3A+framework&projects=&template=3-framework.yml&title=%5BFramework%5D%3A+).

### Next.js [](#nextjs-pages-router "Link for Next.js ")

**[Next.js’ Pages Router](https://nextjs.org/) is a full-stack React framework.** It’s versatile and lets you create React apps of any size—from a mostly static blog to a complex dynamic application. To create a new Next.js project, run in your terminal:

Terminal

Copy

npx create-next-app@latest

If you’re new to Next.js, check out the [learn Next.js course.](https://nextjs.org/learn)

Next.js is maintained by [Vercel](https://vercel.com/). You can [deploy a Next.js app](https://nextjs.org/docs/app/building-your-application/deploying) to any Node.js or serverless hosting, or to your own server. Next.js also supports a [static export](https://nextjs.org/docs/pages/building-your-application/deploying/static-exports) which doesn’t require a server.

### Remix [](#remix "Link for Remix ")

**[Remix](https://remix.run/) is a full-stack React framework with nested routing.** It lets you break your app into nested parts that can load data in parallel and refresh in response to the user actions. To create a new Remix project, run:

Terminal

Copy

npx create-remix

If you’re new to Remix, check out the Remix [blog tutorial](https://remix.run/docs/en/main/tutorials/blog) (short) and [app tutorial](https://remix.run/docs/en/main/tutorials/jokes) (long).

Remix is maintained by [Shopify](https://www.shopify.com/). When you create a Remix project, you need to [pick your deployment target](https://remix.run/docs/en/main/guides/deployment). You can deploy a Remix app to any Node.js or serverless hosting by using or writing an [adapter](https://remix.run/docs/en/main/other-api/adapter).

### Gatsby [](#gatsby "Link for Gatsby ")

**[Gatsby](https://www.gatsbyjs.com/) is a React framework for fast CMS-backed websites.** Its rich plugin ecosystem and its GraphQL data layer simplify integrating content, APIs, and services into one website. To create a new Gatsby project, run:

Terminal

Copy

npx create-gatsby

If you’re new to Gatsby, check out the [Gatsby tutorial.](https://www.gatsbyjs.com/docs/tutorial/)

Gatsby is maintained by [Netlify](https://www.netlify.com/). You can [deploy a fully static Gatsby site](https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting) to any static hosting. If you opt into using server-only features, make sure your hosting provider supports them for Gatsby.

### Expo (for native apps) [](#expo "Link for Expo \(for native apps\) ")

**[Expo](https://expo.dev/) is a React framework that lets you create universal Android, iOS, and web apps with truly native UIs.** It provides an SDK for [React Native](https://reactnative.dev/) that makes the native parts easier to use. To create a new Expo project, run:

Terminal

Copy

npx create-expo-app

If you’re new to Expo, check out the [Expo tutorial](https://docs.expo.dev/tutorial/introduction/).

Expo is maintained by [Expo (the company)](https://expo.dev/about). Building apps with Expo is free, and you can submit them to the Google and Apple app stores without restrictions. Expo additionally provides opt-in paid cloud services.

## Bleeding-edge React frameworks [](#bleeding-edge-react-frameworks "Link for Bleeding-edge React frameworks ")

As we’ve explored how to continue improving React, we realized that integrating React more closely with frameworks (specifically, with routing, bundling, and server technologies) is our biggest opportunity to help React users build better apps. The Next.js team has agreed to collaborate with us in researching, developing, integrating, and testing framework-agnostic bleeding-edge React features like [React Server Components.](/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023#react-server-components)

These features are getting closer to being production-ready every day, and we’ve been in talks with other bundler and framework developers about integrating them. Our hope is that in a year or two, all frameworks listed on this page will have full support for these features. (If you’re a framework author interested in partnering with us to experiment with these features, please let us know!)

### Next.js (App Router) [](#nextjs-app-router "Link for Next.js \(App Router\) ")

**[Next.js’s App Router](https://nextjs.org/docs) is a redesign of the Next.js APIs aiming to fulfill the React team’s full-stack architecture vision.** It lets you fetch data in asynchronous components that run on the server or even during the build.

Next.js is maintained by [Vercel](https://vercel.com/). You can [deploy a Next.js app](https://nextjs.org/docs/app/building-your-application/deploying) to any Node.js or serverless hosting, or to your own server. Next.js also supports [static export](https://nextjs.org/docs/app/building-your-application/deploying/static-exports) which doesn’t require a server.

##### Deep Dive

#### Which features make up the React team’s full-stack architecture vision? [](#which-features-make-up-the-react-teams-full-stack-architecture-vision "Link for Which features make up the React team’s full-stack architecture vision? ")

Show Details

Next.js’s App Router bundler fully implements the official [React Server Components specification](https://github.com/reactjs/rfcs/blob/main/text/0188-server-components.md). This lets you mix build-time, server-only, and interactive components in a single React tree.

For example, you can write a server-only React component as an `async` function that reads from a database or from a file. Then you can pass data down from it to your interactive components:

```


// This component runs *only* on the server (or during the build).

async function Talks({ confId }) {

 // 1. You're on the server, so you can talk to your data layer. API endpoint not required.

 const talks = await db.Talks.findAll({ confId });

 // 2. Add any amount of rendering logic. It won't make your JavaScript bundle larger.

 const videos = talks.map(talk => talk.video);

 // 3. Pass the data down to the components that will run in the browser.

 return <SearchableVideoList videos={videos} />;

}


```


Next.js’s App Router also integrates [data fetching with Suspense](/blog/2022/03/29/react-v18#suspense-in-data-frameworks). This lets you specify a loading state (like a skeleton placeholder) for different parts of your user interface directly in your React tree:

```


<Suspense fallback={<TalksLoading />}>

 <Talks confId={conf.id} />

</Suspense>


```


Server Components and Suspense are React features rather than Next.js features. However, adopting them at the framework level requires buy-in and non-trivial implementation work. At the moment, the Next.js App Router is the most complete implementation. The React team is working with bundler developers to make these features easier to implement in the next generation of frameworks.

[PreviousInstallation](/learn/installation)[NextAdd React to an Existing Project](/learn/add-react-to-an-existing-project)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Production-grade React frameworks ](#production-grade-react-frameworks)
  * [Next.js ](#nextjs-pages-router)
  * [Remix ](#remix)
  * [Gatsby ](#gatsby)
  * [Expo (for native apps) ](#expo)
  * [Bleeding-edge React frameworks ](#bleeding-edge-react-frameworks)
  * [Next.js (App Router) ](#nextjs-app-router)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React v19[](#undefined "Link for this heading")

December 05, 2024 by [The React Team](/community/team)

### Note

### React 19 is now stable! [](#react-19-is-now-stable "Link for React 19 is now stable! ")

Additions since this post was originally shared with the React 19 RC in April:

  * **Pre-warming for suspended trees** : see [Improvements to Suspense](/blog/2024/04/25/react-19-upgrade-guide#improvements-to-suspense).
  * **React DOM static APIs** : see [New React DOM Static APIs](#new-react-dom-static-apis).



_The date for this post has been updated to reflect the stable release date._

React v19 is now available on npm!

In our [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide), we shared step-by-step instructions for upgrading your app to React 19. In this post, we’ll give an overview of the new features in React 19, and how you can adopt them.

  * [What’s new in React 19](#whats-new-in-react-19)
  * [Improvements in React 19](#improvements-in-react-19)
  * [How to upgrade](#how-to-upgrade)



For a list of breaking changes, see the [Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide).

## What’s new in React 19 [](#whats-new-in-react-19 "Link for What’s new in React 19 ")

### Actions [](#actions "Link for Actions ")

A common use case in React apps is to perform a data mutation and then update state in response. For example, when a user submits a form to change their name, you will make an API request, and then handle the response. In the past, you would need to handle pending states, errors, optimistic updates, and sequential requests manually.

For example, you could handle the pending and error state in `useState`:

```


// Before Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, setIsPending] = useState(false);

 const handleSubmit = async () => {

  setIsPending(true);

  const error = await updateName(name);

  setIsPending(false);

  if (error) {

   setError(error);

   return;

  } 

  redirect("/path");

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


In React 19, we’re adding support for using async functions in transitions to handle pending states, errors, forms, and optimistic updates automatically.

For example, you can use `useTransition` to handle the pending state for you:

```


// Using pending state from Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, startTransition] = useTransition();

 const handleSubmit = () => {

  startTransition(async () => {

   const error = await updateName(name);

   if (error) {

    setError(error);

    return;

   } 

   redirect("/path");

  })

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


The async transition will immediately set the `isPending` state to true, make the async request(s), and switch `isPending` to false after any transitions. This allows you to keep the current UI responsive and interactive while the data is changing.

### Note

#### By convention, functions that use async transitions are called “Actions”. [](#by-convention-functions-that-use-async-transitions-are-called-actions "Link for By convention, functions that use async transitions are called “Actions”. ")

Actions automatically manage submitting data for you:

  * **Pending state** : Actions provide a pending state that starts at the beginning of a request and automatically resets when the final state update is committed.
  * **Optimistic updates** : Actions support the new `useOptimistic`[](#new-hook-optimistic-updates) hook so you can show users instant feedback while the requests are submitting.
  * **Error handling** : Actions provide error handling so you can display Error Boundaries when a request fails, and revert optimistic updates to their original value automatically.
  * **Forms** : `<form>` elements now support passing functions to the `action` and `formAction` props. Passing functions to the `action` props use Actions by default and reset the form automatically after submission.



Building on top of Actions, React 19 introduces `useOptimistic`[](#new-hook-optimistic-updates) to manage optimistic updates, and a new hook `React.useActionState`[](#new-hook-useactionstate) to handle common cases for Actions. In `react-dom` we’re adding `<form>`[ Actions](#form-actions) to manage forms automatically and `useFormStatus`[](#new-hook-useformstatus) to support the common cases for Actions in forms.

In React 19, the above example can be simplified to:

```


// Using <form> Actions and useActionState

function ChangeName({ name, setName }) {

 const [error, submitAction, isPending] = useActionState(

  async (previousState, formData) => {

   const error = await updateName(formData.get("name"));

   if (error) {

    return error;

   }

   redirect("/path");

   return null;

  },

  null,

 );

 return (

  <form action={submitAction}>

   <input type="text" name="name" />

   <button type="submit" disabled={isPending}>Update</button>

   {error && <p>{error}</p>}

  </form>

 );

}


```


In the next section, we’ll break down each of the new Action features in React 19.

### New hook: `useActionState` [](#new-hook-useactionstate "Link for this heading")

To make the common cases easier for Actions, we’ve added a new hook called `useActionState`:

```


const [error, submitAction, isPending] = useActionState(

 async (previousState, newName) => {

  const error = await updateName(newName);

  if (error) {

   // You can return any result of the action.

   // Here, we return only the error.

   return error;

  }

  // handle success

  return null;

 },

 null,

);


```


`useActionState` accepts a function (the “Action”), and returns a wrapped Action to call. This works because Actions compose. When the wrapped Action is called, `useActionState` will return the last result of the Action as `data`, and the pending state of the Action as `pending`.

### Note

`React.useActionState` was previously called `ReactDOM.useFormState` in the Canary releases, but we’ve renamed it and deprecated `useFormState`.

See [#28491](https://github.com/facebook/react/pull/28491) for more info.

For more information, see the docs for `useActionState`[](/reference/react/useActionState).

### React DOM: `<form>` Actions [](#form-actions "Link for this heading")

Actions are also integrated with React 19’s new `<form>` features for `react-dom`. We’ve added support for passing functions as the `action` and `formAction` props of `<form>`, `<input>`, and `<button>` elements to automatically submit forms with Actions:

```


<form action={actionFunction}>


```


When a `<form>` Action succeeds, React will automatically reset the form for uncontrolled components. If you need to reset the `<form>` manually, you can call the new `requestFormReset` React DOM API.

For more information, see the `react-dom` docs for `<form>`[](/reference/react-dom/components/form), `<input>`[](/reference/react-dom/components/input), and `<button>`.

### React DOM: New hook: `useFormStatus` [](#new-hook-useformstatus "Link for this heading")

In design systems, it’s common to write design components that need access to information about the `<form>` they’re in, without drilling props down to the component. This can be done via Context, but to make the common case easier, we’ve added a new hook `useFormStatus`:

```


import {useFormStatus} from 'react-dom';

function DesignButton() {

 const {pending} = useFormStatus();

 return <button type="submit" disabled={pending} />

}


```


`useFormStatus` reads the status of the parent `<form>` as if the form was a Context provider.

For more information, see the `react-dom` docs for `useFormStatus`[](/reference/react-dom/hooks/useFormStatus).

### New hook: `useOptimistic` [](#new-hook-optimistic-updates "Link for this heading")

Another common UI pattern when performing a data mutation is to show the final state optimistically while the async request is underway. In React 19, we’re adding a new hook called `useOptimistic` to make this easier:

```


function ChangeName({currentName, onUpdateName}) {

 const [optimisticName, setOptimisticName] = useOptimistic(currentName);

 const submitAction = async formData => {

  const newName = formData.get("name");

  setOptimisticName(newName);

  const updatedName = await updateName(newName);

  onUpdateName(updatedName);

 };

 return (

  <form action={submitAction}>

   <p>Your name is: {optimisticName}</p>

   <p>

    <label>Change Name:</label>

    <input

     type="text"

     name="name"

     disabled={currentName !== optimisticName}

    />

   </p>

  </form>

 );

}


```


The `useOptimistic` hook will immediately render the `optimisticName` while the `updateName` request is in progress. When the update finishes or errors, React will automatically switch back to the `currentName` value.

For more information, see the docs for `useOptimistic`[](/reference/react/useOptimistic).

### New API: `use` [](#new-feature-use "Link for this heading")

In React 19 we’re introducing a new API to read resources in render: `use`.

For example, you can read a promise with `use`, and React will Suspend until the promise resolves:

```


import {use} from 'react';

function Comments({commentsPromise}) {

 // `use` will suspend until the promise resolves.

 const comments = use(commentsPromise);

 return comments.map(comment => <p key={comment.id}>{comment}</p>);

}

function Page({commentsPromise}) {

 // When `use` suspends in Comments,

 // this Suspense boundary will be shown.

 return (

  <Suspense fallback={<div>Loading...</div>}>

   <Comments commentsPromise={commentsPromise} />

  </Suspense>

 )

}


```


### Note

#### `use` does not support promises created in render. [](#use-does-not-support-promises-created-in-render "Link for this heading")

If you try to pass a promise created in render to `use`, React will warn:

Console

A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework.

To fix, you need to pass a promise from a suspense powered library or framework that supports caching for promises. In the future we plan to ship features to make it easier to cache promises in render.

You can also read context with `use`, allowing you to read Context conditionally such as after early returns:

```


import {use} from 'react';

import ThemeContext from './ThemeContext'

function Heading({children}) {

 if (children == null) {

  return null;

 }

 // This would not work with useContext

 // because of the early return.

 const theme = use(ThemeContext);

 return (

  <h1 style={{color: theme.color}}>

   {children}

  </h1>

 );

}


```


The `use` API can only be called in render, similar to hooks. Unlike hooks, `use` can be called conditionally. In the future we plan to support more ways to consume resources in render with `use`.

For more information, see the docs for `use`[](/reference/react/use).

## New React DOM Static APIs [](#new-react-dom-static-apis "Link for New React DOM Static APIs ")

We’ve added two new APIs to `react-dom/static` for static site generation:

  * `prerender`[](/reference/react-dom/static/prerender)
  * `prerenderToNodeStream`[](/reference/react-dom/static/prerenderToNodeStream)



These new APIs improve on `renderToString` by waiting for data to load for static HTML generation. They are designed to work with streaming environments like Node.js Streams and Web Streams. For example, in a Web Stream environment, you can prerender a React tree to static HTML with `prerender`:

```


import { prerender } from 'react-dom/static';

async function handler(request) {

 const {prelude} = await prerender(<App />, {

  bootstrapScripts: ['/main.js']

 });

 return new Response(prelude, {

  headers: { 'content-type': 'text/html' },

 });

}


```


Prerender APIs will wait for all data to load before returning the static HTML stream. Streams can be converted to strings, or sent with a streaming response. They do not support streaming content as it loads, which is supported by the existing [React DOM server rendering APIs](/reference/react-dom/server).

For more information, see [React DOM Static APIs](/reference/react-dom/static).

## React Server Components [](#react-server-components "Link for React Server Components ")

### Server Components [](#server-components "Link for Server Components ")

Server Components are a new option that allows rendering components ahead of time, before bundling, in an environment separate from your client application or SSR server. This separate environment is the “server” in React Server Components. Server Components can run once at build time on your CI server, or they can be run for each request using a web server.

React 19 includes all of the React Server Components features included from the Canary channel. This means libraries that ship with Server Components can now target React 19 as a peer dependency with a `react-server` [export condition](https://github.com/reactjs/rfcs/blob/main/text/0227-server-module-conventions.md#react-server-conditional-exports) for use in frameworks that support the [Full-stack React Architecture](/learn/start-a-new-react-project#which-features-make-up-the-react-teams-full-stack-architecture-vision).

### Note

#### How do I build support for Server Components? [](#how-do-i-build-support-for-server-components "Link for How do I build support for Server Components? ")

While React Server Components in React 19 are stable and will not break between minor versions, the underlying APIs used to implement a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x.

To support React Server Components as a bundler or framework, we recommend pinning to a specific React version, or using the Canary release. We will continue working with bundlers and frameworks to stabilize the APIs used to implement React Server Components in the future.

For more, see the docs for [React Server Components](/reference/rsc/server-components).

### Server Actions [](#server-actions "Link for Server Actions ")

Server Actions allow Client Components to call async functions executed on the server.

When a Server Action is defined with the `"use server"` directive, your framework will automatically create a reference to the server function, and pass that reference to the Client Component. When that function is called on the client, React will send a request to the server to execute the function, and return the result.

### Note

#### There is no directive for Server Components. [](#there-is-no-directive-for-server-components "Link for There is no directive for Server Components. ")

A common misunderstanding is that Server Components are denoted by `"use server"`, but there is no directive for Server Components. The `"use server"` directive is used for Server Actions.

For more info, see the docs for [Directives](/reference/rsc/directives).

Server Actions can be created in Server Components and passed as props to Client Components, or they can be imported and used in Client Components.

For more, see the docs for [React Server Actions](/reference/rsc/server-actions).

## Improvements in React 19 [](#improvements-in-react-19 "Link for Improvements in React 19 ")

### `ref` as a prop [](#ref-as-a-prop "Link for this heading")

Starting in React 19, you can now access `ref` as a prop for function components:

```


function MyInput({placeholder, ref}) {

 return <input placeholder={placeholder} ref={ref} />

}

//...

<MyInput ref={ref} />


```


New function components will no longer need `forwardRef`, and we will be publishing a codemod to automatically update your components to use the new `ref` prop. In future versions we will deprecate and remove `forwardRef`.

### Note

`refs` passed to classes are not passed as props since they reference the component instance.

### Diffs for hydration errors [](#diffs-for-hydration-errors "Link for Diffs for hydration errors ")

We also improved error reporting for hydration errors in `react-dom`. For example, instead of logging multiple errors in DEV without any information about the mismatch:

Console

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Uncaught Error: Text content does not match server-rendered HTML. at checkForUnmatchedText …

We now log a single message with a diff of the mismatch:

Console

Uncaught Error: Hydration failed because the server rendered HTML didn’t match the client. As a result this tree will be regenerated on the client. This can happen if an SSR-ed Client Component used: - A server/client branch `if (typeof window !== 'undefined')`. - Variable input such as `Date.now()` or `Math.random()` which changes each time it’s called. - Date formatting in a user’s locale which doesn’t match the server. - External changing data without sending a snapshot of it along with the HTML. - Invalid HTML tag nesting. It can also happen if the client has a browser extension installed which messes with the HTML before React loaded. <https://react.dev/link/hydration-mismatch> <App> <span> + Client - Server at throwOnHydrationMismatch …

### `<Context>` as a provider [](#context-as-a-provider "Link for this heading")

In React 19, you can render `<Context>` as a provider instead of `<Context.Provider>`:

```


const ThemeContext = createContext('');

function App({children}) {

 return (

  <ThemeContext value="dark">

   {children}

  </ThemeContext>

 ); 

}


```


New Context providers can use `<Context>` and we will be publishing a codemod to convert existing providers. In future versions we will deprecate `<Context.Provider>`.

### Cleanup functions for refs [](#cleanup-functions-for-refs "Link for Cleanup functions for refs ")

We now support returning a cleanup function from `ref` callbacks:

```


<input

 ref={(ref) => {

  // ref created

  // NEW: return a cleanup function to reset

  // the ref when element is removed from DOM.

  return () => {

   // ref cleanup

  };

 }}

/>


```


When the component unmounts, React will call the cleanup function returned from the `ref` callback. This works for DOM refs, refs to class components, and `useImperativeHandle`.

### Note

Previously, React would call `ref` functions with `null` when unmounting the component. If your `ref` returns a cleanup function, React will now skip this step.

In future versions, we will deprecate calling refs with `null` when unmounting components.

Due to the introduction of ref cleanup functions, returning anything else from a `ref` callback will now be rejected by TypeScript. The fix is usually to stop using implicit returns, for example:

```


- <div ref={current => (instance = current)} />

+ <div ref={current => {instance = current}} />


```


The original code returned the instance of the `HTMLDivElement` and TypeScript wouldn’t know if this was _supposed_ to be a cleanup function or if you didn’t want to return a cleanup function.

You can codemod this pattern with `no-implicit-ref-callback-return`[](https://github.com/eps1lon/types-react-codemod/#no-implicit-ref-callback-return).

### `useDeferredValue` initial value [](#use-deferred-value-initial-value "Link for this heading")

We’ve added an `initialValue` option to `useDeferredValue`:

```


function Search({deferredValue}) {

 // On initial render the value is ''.

 // Then a re-render is scheduled with the deferredValue.

 const value = useDeferredValue(deferredValue, '');

 return (

  <Results query={value} />

 );

}


```


When initialValue is provided, `useDeferredValue` will return it as `value` for the initial render of the component, and schedules a re-render in the background with the deferredValue returned.

For more, see `useDeferredValue`[](/reference/react/useDeferredValue).

### Support for Document Metadata [](#support-for-metadata-tags "Link for Support for Document Metadata ")

In HTML, document metadata tags like `<title>`, `<link>`, and `<meta>` are reserved for placement in the `<head>` section of the document. In React, the component that decides what metadata is appropriate for the app may be very far from the place where you render the `<head>` or React does not render the `<head>` at all. In the past, these elements would need to be inserted manually in an effect, or by libraries like `react-helmet`[](https://github.com/nfl/react-helmet), and required careful handling when server rendering a React application.

In React 19, we’re adding support for rendering document metadata tags in components natively:

```


function BlogPost({post}) {

 return (

  <article>

   <h1>{post.title}</h1>

   <title>{post.title}</title>

   <meta name="author" content="Josh" />

   <link rel="author" href="https://twitter.com/joshcstory/" />

   <meta name="keywords" content={post.keywords} />

   <p>

    Eee equals em-see-squared...

   </p>

  </article>

 );

}


```


When React renders this component, it will see the `<title>` `<link>` and `<meta>` tags, and automatically hoist them to the `<head>` section of document. By supporting these metadata tags natively, we’re able to ensure they work with client-only apps, streaming SSR, and Server Components.

### Note

#### You may still want a Metadata library [](#you-may-still-want-a-metadata-library "Link for You may still want a Metadata library ")

For simple use cases, rendering Document Metadata as tags may be suitable, but libraries can offer more powerful features like overriding generic metadata with specific metadata based on the current route. These features make it easier for frameworks and libraries like `react-helmet`[](https://github.com/nfl/react-helmet) to support metadata tags, rather than replace them.

For more info, see the docs for `<title>`[](/reference/react-dom/components/title), `<link>`[](/reference/react-dom/components/link), and `<meta>`[](/reference/react-dom/components/meta).

### Support for stylesheets [](#support-for-stylesheets "Link for Support for stylesheets ")

Stylesheets, both externally linked (`<link rel="stylesheet" href="...">`) and inline (`<style>...</style>`), require careful positioning in the DOM due to style precedence rules. Building a stylesheet capability that allows for composability within components is hard, so users often end up either loading all of their styles far from the components that may depend on them, or they use a style library which encapsulates this complexity.

In React 19, we’re addressing this complexity and providing even deeper integration into Concurrent Rendering on the Client and Streaming Rendering on the Server with built in support for stylesheets. If you tell React the `precedence` of your stylesheet it will manage the insertion order of the stylesheet in the DOM and ensure that the stylesheet (if external) is loaded before revealing content that depends on those style rules.

```


function ComponentOne() {

 return (

  <Suspense fallback="loading...">

   <link rel="stylesheet" href="foo" precedence="default" />

   <link rel="stylesheet" href="bar" precedence="high" />

   <article class="foo-class bar-class">

    {...}

   </article>

  </Suspense>

 )

}

function ComponentTwo() {

 return (

  <div>

   <p>{...}</p>

   <link rel="stylesheet" href="baz" precedence="default" /> <-- will be inserted between foo & bar

  </div>

 )

}


```


During Server Side Rendering React will include the stylesheet in the `<head>`, which ensures that the browser will not paint until it has loaded. If the stylesheet is discovered late after we’ve already started streaming, React will ensure that the stylesheet is inserted into the `<head>` on the client before revealing the content of a Suspense boundary that depends on that stylesheet.

During Client Side Rendering React will wait for newly rendered stylesheets to load before committing the render. If you render this component from multiple places within your application React will only include the stylesheet once in the document:

```


function App() {

 return <>

  <ComponentOne />

  ...

  <ComponentOne /> // won't lead to a duplicate stylesheet link in the DOM

 </>

}


```


For users accustomed to loading stylesheets manually this is an opportunity to locate those stylesheets alongside the components that depend on them allowing for better local reasoning and an easier time ensuring you only load the stylesheets that you actually depend on.

Style libraries and style integrations with bundlers can also adopt this new capability so even if you don’t directly render your own stylesheets, you can still benefit as your tools are upgraded to use this feature.

For more details, read the docs for `<link>`[](/reference/react-dom/components/link) and `<style>`[](/reference/react-dom/components/style).

### Support for async scripts [](#support-for-async-scripts "Link for Support for async scripts ")

In HTML normal scripts (`<script src="...">`) and deferred scripts (`<script defer="" src="...">`) load in document order which makes rendering these kinds of scripts deep within your component tree challenging. Async scripts (`<script async="" src="...">`) however will load in arbitrary order.

In React 19 we’ve included better support for async scripts by allowing you to render them anywhere in your component tree, inside the components that actually depend on the script, without having to manage relocating and deduplicating script instances.

```


function MyComponent() {

 return (

  <div>

   <script async={true} src="..." />

   Hello World

  </div>

 )

}

function App() {

 <html>

  <body>

   <MyComponent>

   ...

   <MyComponent> // won't lead to duplicate script in the DOM

  </body>

 </html>

}


```


In all rendering environments, async scripts will be deduplicated so that React will only load and execute the script once even if it is rendered by multiple different components.

In Server Side Rendering, async scripts will be included in the `<head>` and prioritized behind more critical resources that block paint such as stylesheets, fonts, and image preloads.

For more details, read the docs for `<script>`[](/reference/react-dom/components/script).

### Support for preloading resources [](#support-for-preloading-resources "Link for Support for preloading resources ")

During initial document load and on client side updates, telling the Browser about resources that it will likely need to load as early as possible can have a dramatic effect on page performance.

React 19 includes a number of new APIs for loading and preloading Browser resources to make it as easy as possible to build great experiences that aren’t held back by inefficient resource loading.

```


import { prefetchDNS, preconnect, preload, preinit } from 'react-dom'

function MyComponent() {

 preinit('https://.../path/to/some/script.js', {as: 'script' }) // loads and executes this script eagerly

 preload('https://.../path/to/font.woff', { as: 'font' }) // preloads this font

 preload('https://.../path/to/stylesheet.css', { as: 'style' }) // preloads this stylesheet

 prefetchDNS('https://...') // when you may not actually request anything from this host

 preconnect('https://...') // when you will request something but aren't sure what

}


```


```


<!-- the above would result in the following DOM/HTML -->

<html>

 <head>

  <!-- links/scripts are prioritized by their utility to early loading, not call order -->

  <link rel="prefetch-dns" href="https://...">

  <link rel="preconnect" href="https://...">

  <link rel="preload" as="font" href="https://.../path/to/font.woff">

  <link rel="preload" as="style" href="https://.../path/to/stylesheet.css">

  <script async="" src="https://.../path/to/some/script.js"></script>

 </head>

 <body>

  ...

 </body>

</html>


```


These APIs can be used to optimize initial page loads by moving discovery of additional resources like fonts out of stylesheet loading. They can also make client updates faster by prefetching a list of resources used by an anticipated navigation and then eagerly preloading those resources on click or even on hover.

For more details see [Resource Preloading APIs](/reference/react-dom#resource-preloading-apis).

### Compatibility with third-party scripts and extensions [](#compatibility-with-third-party-scripts-and-extensions "Link for Compatibility with third-party scripts and extensions ")

We’ve improved hydration to account for third-party scripts and browser extensions.

When hydrating, if an element that renders on the client doesn’t match the element found in the HTML from the server, React will force a client re-render to fix up the content. Previously, if an element was inserted by third-party scripts or browser extensions, it would trigger a mismatch error and client render.

In React 19, unexpected tags in the `<head>` and `<body>` will be skipped over, avoiding the mismatch errors. If React needs to re-render the entire document due to an unrelated hydration mismatch, it will leave in place stylesheets inserted by third-party scripts and browser extensions.

### Better error reporting [](#error-handling "Link for Better error reporting ")

We improved error handling in React 19 to remove duplication and provide options for handling caught and uncaught errors. For example, when there’s an error in render caught by an Error Boundary, previously React would throw the error twice (once for the original error, then again after failing to automatically recover), and then call `console.error` with info about where the error occurred.

This resulted in three errors for every caught error:

Console

Uncaught Error: hit at Throws at renderWithHooks …

Uncaught Error: hit <-- Duplicate at Throws at renderWithHooks …

The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary.

In React 19, we log a single error with all the error information included:

Console

Error: hit at Throws at renderWithHooks … The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary. at ErrorBoundary at App

Additionally, we’ve added two new root options to complement `onRecoverableError`:

  * `onCaughtError`: called when React catches an error in an Error Boundary.
  * `onUncaughtError`: called when an error is thrown and not caught by an Error Boundary.
  * `onRecoverableError`: called when an error is thrown and automatically recovered.



For more info and examples, see the docs for `createRoot`[](/reference/react-dom/client/createRoot) and `hydrateRoot`[](/reference/react-dom/client/hydrateRoot).

### Support for Custom Elements [](#support-for-custom-elements "Link for Support for Custom Elements ")

React 19 adds full support for custom elements and passes all tests on [Custom Elements Everywhere](https://custom-elements-everywhere.com/).

In past versions, using Custom Elements in React has been difficult because React treated unrecognized props as attributes rather than properties. In React 19, we’ve added support for properties that works on the client and during SSR with the following strategy:

  * **Server Side Rendering** : props passed to a custom element will render as attributes if their type is a primitive value like `string`, `number`, or the value is `true`. Props with non-primitive types like `object`, `symbol`, `function`, or value `false` will be omitted.
  * **Client Side Rendering** : props that match a property on the Custom Element instance will be assigned as properties, otherwise they will be assigned as attributes.



Thanks to [Joey Arhar](https://github.com/josepharhar) for driving the design and implementation of Custom Element support in React.

#### How to upgrade [](#how-to-upgrade "Link for How to upgrade ")

See the [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide) for step-by-step instructions and a full list of breaking and notable changes.

_Note: this post was originally published 04/25/2024 and has been updated to 12/05/2024 with the stable release._

[ PreviousBlog](/blog)[NextReact Compiler Beta Release and Roadmap](/blog/2024/10/21/react-compiler-beta-release)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React Compiler Beta Release[](#undefined "Link for this heading")

October 21, 2024 by .

The React team is excited to share new updates:

  1. We’re publishing React Compiler Beta today, so that early adopters and library maintainers can try it and provide feedback.
  2. We’re officially supporting React Compiler for apps on React 17+, through an optional `react-compiler-runtime` package.
  3. We’re opening up public membership of the [React Compiler Working Group](https://github.com/reactwg/react-compiler) to prepare the community for gradual adoption of the compiler.



At [React Conf 2024](/blog/2024/05/22/react-conf-2024-recap), we announced the experimental release of React Compiler, a build-time tool that optimizes your React app through automatic memoization. [You can find an introduction to React Compiler here](/learn/react-compiler).

Since the first release, we’ve fixed numerous bugs reported by the React community, received several high quality bug fixes and contributions[1](#user-content-fn-1) to the compiler, made the compiler more resilient to the broad diversity of JavaScript patterns, and have continued to roll out the compiler more widely at Meta.

In this post, we want to share what’s next for React Compiler.

## Try React Compiler Beta today [](#try-react-compiler-beta-today "Link for Try React Compiler Beta today ")

At [React India 2024](https://www.youtube.com/watch?v=qd5yk2gxbtg), we shared an update on React Compiler. Today, we are excited to announce a new Beta release of React Compiler and ESLint plugin. New betas are published to npm using the `@beta` tag.

To install React Compiler Beta:

Terminal

Copy

npm install -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta

Or, if you’re using Yarn:

Terminal

Copy

yarn add -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta

You can watch talk at React India here:

## We recommend everyone use the React Compiler linter today [](#we-recommend-everyone-use-the-react-compiler-linter-today "Link for We recommend everyone use the React Compiler linter today ")

React Compiler’s ESLint plugin helps developers proactively identify and correct [Rules of React](/reference/rules) violations. **We strongly recommend everyone use the linter today**. The linter does not require that you have the compiler installed, so you can use it independently, even if you are not ready to try out the compiler.

To install the linter only:

Terminal

Copy

npm install -D eslint-plugin-react-compiler@beta

Or, if you’re using Yarn:

Terminal

Copy

yarn add -D eslint-plugin-react-compiler@beta

After installation you can enable the linter by [adding it to your ESLint config](/learn/react-compiler#installing-eslint-plugin-react-compiler). Using the linter helps identify Rules of React breakages, making it easier to adopt the compiler when it’s fully released.

## Backwards Compatibility [](#backwards-compatibility "Link for Backwards Compatibility ")

React Compiler produces code that depends on runtime APIs added in React 19, but we’ve since added support for the compiler to also work with React 17 and 18. If you are not on React 19 yet, in the Beta release you can now try out React Compiler by specifying a minimum `target` in your compiler config, and adding `react-compiler-runtime` as a dependency. [You can find docs on this here](/learn/react-compiler#using-react-compiler-with-react-17-or-18).

## Using React Compiler in libraries [](#using-react-compiler-in-libraries "Link for Using React Compiler in libraries ")

Our initial release was focused on identifying major issues with using the compiler in applications. We’ve gotten great feedback and have substantially improved the compiler since then. We’re now ready for broad feedback from the community, and for library authors to try out the compiler to improve performance and the developer experience of maintaining your library.

React Compiler can also be used to compile libraries. Because React Compiler needs to run on the original source code prior to any code transformations, it is not possible for an application’s build pipeline to compile the libraries they use. Hence, our recommendation is for library maintainers to independently compile and test their libraries with the compiler, and ship compiled code to npm.

Because your code is pre-compiled, users of your library will not need to have the compiler enabled in order to benefit from the automatic memoization applied to your library. If your library targets apps not yet on React 19, specify a minimum `target` and add `react-compiler-runtime` as a direct dependency. The runtime package will use the correct implementation of APIs depending on the application’s version, and polyfill the missing APIs if necessary.

[You can find more docs on this here.](/learn/react-compiler#using-the-compiler-on-libraries)

## Opening up React Compiler Working Group to everyone [](#opening-up-react-compiler-working-group-to-everyone "Link for Opening up React Compiler Working Group to everyone ")

We previously announced the invite-only [React Compiler Working Group](https://github.com/reactwg/react-compiler) at React Conf to provide feedback, ask questions, and collaborate on the compiler’s experimental release.

From today, together with the Beta release of React Compiler, we are opening up Working Group membership to everyone. The goal of the React Compiler Working Group is to prepare the ecosystem for a smooth, gradual adoption of React Compiler by existing applications and libraries. Please continue to file bug reports in the [React repo](https://github.com/facebook/react), but please leave feedback, ask questions, or share ideas in the [Working Group discussion forum](https://github.com/reactwg/react-compiler/discussions).

The core team will also use the discussions repo to share our research findings. As the Stable Release gets closer, any important information will also be posted on this forum.

## React Compiler at Meta [](#react-compiler-at-meta "Link for React Compiler at Meta ")

At [React Conf](/blog/2024/05/22/react-conf-2024-recap), we shared that our rollout of the compiler on Quest Store and Instagram were successful. Since then, we’ve deployed React Compiler across several more major web apps at Meta, including and [Threads](https://www.threads.net). That means if you’ve used any of these apps recently, you may have had your experience powered by the compiler. We were able to onboard these apps onto the compiler with few code changes required, in a monorepo with more than 100,000 React components.

We’ve seen notable performance improvements across all of these apps. As we’ve rolled out, we’re continuing to see results on the order of [the wins we shared previously at ReactConf](https://youtu.be/lyEKhv8-3n0?t=3223). These apps have already been heavily hand tuned and optimized by Meta engineers and React experts over the years, so even improvements on the order of a few percent are a huge win for us.

We also expected developer productivity wins from React Compiler. To measure this, we collaborated with our data science partners at Meta[2](#user-content-fn-2) to conduct a thorough statistical analysis of the impact of manual memoization on productivity. Before rolling out the compiler at Meta, we discovered that only about 8% of React pull requests used manual memoization and that these pull requests took 31-46% longer to author[3](#user-content-fn-3). This confirmed our intuition that manual memoization introduces cognitive overhead, and we anticipate that React Compiler will lead to more efficient code authoring and review. Notably, React Compiler also ensures that _all_ code is memoized by default, not just the (in our case) 8% where developers explicitly apply memoization.

## Roadmap to Stable [](#roadmap-to-stable "Link for Roadmap to Stable ")

_This is not a final roadmap, and is subject to change._

We intend to ship a Release Candidate of the compiler in the near future following the Beta release, when the majority of apps and libraries that follow the Rules of React have been proven to work well with the compiler. After a period of final feedback from the community, we plan on a Stable Release for the compiler. The Stable Release will mark the beginning of a new foundation for React, and all apps and libraries will be strongly recommended to use the compiler and ESLint plugin.

  * ✅ Experimental: Released at React Conf 2024, primarily for feedback from early adopters.
  * ✅ Public Beta: Available today, for feedback from the wider community.
  * 🚧 Release Candidate (RC): React Compiler works for the majority of rule-following apps and libraries without issue.
  * 🚧 General Availability: After final feedback period from the community.



These releases also include the compiler’s ESLint plugin, which surfaces diagnostics statically analyzed by the compiler. We plan to combine the existing eslint-plugin-react-hooks plugin with the compiler’s ESLint plugin, so only one plugin needs to be installed.

Post-Stable, we plan to add more compiler optimizations and improvements. This includes both continual improvements to automatic memoization, and new optimizations altogether, with minimal to no change of product code. Upgrading to each new release of the compiler is aimed to be straightforward, and each upgrade will continue to improve performance and add better handling of diverse JavaScript and React patterns.

Throughout this process, we also plan to prototype an IDE extension for React. It is still very early in research, so we expect to be able to share more of our findings with you in a future React Labs blog post.

Thanks to , , , [Alex Taylor](https://github.com/alexmckenley), , and for reviewing and editing this post.

## Footnotes[](#footnote-label "Link for Footnotes")

  1. Thanks [@nikeee](https://github.com/facebook/react/pulls?q=is%3Apr+author%3Anikeee), [@henryqdineen](https://github.com/facebook/react/pulls?q=is%3Apr+author%3Ahenryqdineen), [@TrickyPi](https://github.com/facebook/react/pulls?q=is%3Apr+author%3ATrickyPi), and several others for their contributions to the compiler. [↩](#user-content-fnref-1)

  2. Thanks for leading this study on React Compiler at Meta, and for reviewing this post. [↩](#user-content-fnref-2)

  3. After controlling on author tenure, diff length/complexity, and other potential confounding factors. [↩](#user-content-fnref-3)




[PreviousReact 19](/blog/2024/12/05/react-19)[NextReact Conf 2024 Recap](/blog/2024/05/22/react-conf-2024-recap)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React Conf 2024 Recap[](#undefined "Link for this heading")

May 22, 2024 by .

Last week we hosted React Conf 2024, a two-day conference in Henderson, Nevada where 700+ attendees gathered in-person to discuss the latest in UI engineering. This was our first in-person conference since 2019, and we were thrilled to be able to bring the community together again.

At React Conf 2024, we announced the [React 19 RC](/blog/2024/12/05/react-19), the [React Native New Architecture Beta](https://github.com/reactwg/react-native-new-architecture/discussions/189), and an experimental release of the [React Compiler](/learn/react-compiler). The community also took the stage to announce [React Router v7](https://remix.run/blog/merging-remix-and-react-router), [Universal Server Components](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=20765s) in Expo Router, React Server Components in [RedwoodJS](https://redwoodjs.com/blog/rsc-now-in-redwoodjs), and much more.

The entire [day 1](https://www.youtube.com/watch?v=T8TZQ6k4SLE) and [day 2](https://www.youtube.com/watch?v=0ckOUBiuxVY) streams are available online. In this post, we’ll summarize the talks and announcements from the event.

## Day 1 [](#day-1 "Link for Day 1 ")

_[Watch the full day 1 stream here.](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=973s)_

To kick off day 1, Meta CTO [Andrew “Boz” Bosworth](https://www.threads.net/@boztank) shared a welcome message followed by an introduction by , who manages the React Org at Meta, and our MC .

In the day 1 keynote, shared our goals and vision for React to make it easy for anyone to build great user experiences. followed with a State of React, where she shared that React was downloaded over 1 billion times in 2023, and that 37% of new developers learn to program with React. Finally, she highlighted the work of the React community to make React, React.

For more, check out these talks from the community later in the conference:

  * [Vanilla React](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=5542s) by 
  * [React Rhythm & Blues](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=12728s) by 
  * [RedwoodJS, now with React Server Components](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=26815s) by 
  * [Introducing Universal React Server Components in Expo Router](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=20765s) by 



Next in the keynote, and shared new features coming in React 19, and announced the React 19 RC which is ready for testing in production. Check out all the features in the [React 19 release post](/blog/2024/12/05/react-19), and see these talks for deep dives on the new features:

  * [What’s new in React 19](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=8880s) by 
  * [React Unpacked: A Roadmap to React 19](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=10112s) by 
  * [React 19 Deep Dive: Coordinating HTML](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=24916s) by 
  * [Enhancing Forms with React Server Components](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=25280s) by 
  * [React for Two Computers](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=18825s) by 
  * [And Now You Understand React Server Components](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=11256s) by 



Finally, we ended the keynote with , , and announcing that the React Compiler is now [Open Source](https://github.com/facebook/react/pull/29061), and sharing an experimental version of the React Compiler to try out.

For more information on using the Compiler and how it works, check out [the docs](/learn/react-compiler) and these talks:

  * [Forget About Memo](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=12020s) by 
  * [React Compiler Deep Dive](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=9313s) by and 



Watch the full day 1 keynote here:

## Day 2 [](#day-2 "Link for Day 2 ")

_[Watch the full day 2 stream here.](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=1720s)_

To kick off day 2, shared a welcome message, followed by a Thank You from and an introduction by our Chief Vibes Officer .

In the day 2 keynote, shared the State of React Native, including 78 million downloads in 2023. He also highlighted apps using React Native including 2000+ screens used inside of Meta; the product details page in Facebook Marketplace, which is visited more than 2 billion times per day; and part of the Microsoft Windows Start Menu and some features in almost every Microsoft Office product across mobile and desktop.

Nicola also highlighted all the work the community does to support React Native including libraries, frameworks, and multiple platforms. For more, check out these talks from the community:

  * [Extending React Native beyond Mobile and Desktop Apps](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=5798s) by and 
  * [Spatial computing with React](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=22525s) by 



continued the day 2 keynote by announcing that the React Native New Architecture is now in Beta and ready for apps to adopt in production. He shared new features and improvements in the new architecture, and shared the roadmap for the future of React Native. For more check out:

  * [Cross Platform React](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=26569s) by [Olga Zinoveva](https://github.com/SlyCaptainFlint) and 



Next in the keynote, Nicola announced that we are now recommending starting with a framework like Expo for all new apps created with React Native. With the change, he also announced a new React Native homepage and new Getting Started docs. You can view the new Getting Started guide in the [React Native docs](https://reactnative.dev/docs/next/environment-setup).

Finally, to end the keynote, shared the latest features and improvements in Expo, and how to get started developing with React Native using Expo.

Watch the full day 2 keynote here:

## Q&A [](#q-and-a "Link for Q&A ")

The React and React Native teams also ended each day with a Q&A session:

  * [React Q&A](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=27518s) hosted by 
  * [React Native Q&A](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=27935s) hosted by 



## And more… [](#and-more "Link for And more… ")

We also heard talks on accessibility, error reporting, css, and more:

  * [Demystifying accessibility in React apps](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=20655s) by 
  * [Pigment CSS, CSS in the server component age](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=21696s) by 
  * [Real-time React Server Components](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=24070s) by 
  * [Let’s break React Rules](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=25862s) by 
  * [Solve 100% of your errors](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=19881s) by [Ryan Albrecht](https://github.com/ryan953)



## Thank you [](#thank-you "Link for Thank you ")

Thank you to all the staff, speakers, and participants who made React Conf 2024 possible. There are too many to list, but we want to thank a few in particular.

Thank you to , the team at [Callstack](https://www.callstack.com/), and our React Team Developer Advocate for helping to plan the entire event; and to [Sunny Leggett](https://zeroslopeevents.com/about) and everyone from [Zero Slope](https://zeroslopeevents.com) for helping to organize the event.

Thank you for being our MC and Chief Vibes Officer; and to and for hosting the Q&A sessions.

Thank you and for welcoming us each day and providing direction on structure and content; and to for joining us with a special message during the after-party.

Thank you [Ricky Hanlon](https://www.youtube.com/watch?v=FxTZL2U-uKg&t=1263s) for providing detailed feedback on talks, working on slide designs, and generally filling in the gaps to sweat the details.

Thank you [Callstack](https://www.callstack.com/) for building the conference website; and to and the [Expo](https://expo.dev/) team for building the conference mobile app.

Thank you to all the sponsors who made the event possible: [Remix](https://remix.run/), [Amazon](https://developer.amazon.com/apps-and-games?cmp=US_2024_05_3P_React-Conf-2024&ch=prtnr&chlast=prtnr&pub=ref&publast=ref&type=org&typelast=org), [MUI](https://mui.com/), [Sentry](https://sentry.io/for/react/?utm_source=sponsored-conf&utm_medium=sponsored-event&utm_campaign=frontend-fy25q2-evergreen&utm_content=logo-reactconf2024-learnmore), [Abbott](https://www.jobs.abbott/software), [Expo](https://expo.dev/), [RedwoodJS](https://redwoodjs.com/), and [Vercel](https://vercel.com).

Thank you to the AV Team for the visuals, stage, and sound; and to the Westin Hotel for hosting us.

Thank you to all the speakers who shared their knowledge and experiences with the community.

Finally, thank you to everyone who attended in person and online to show what makes React, React. React is more than a library, it is a community, and it was inspiring to see everyone come together to share and learn together.

See you next time!

[PreviousReact Compiler Beta Release and Roadmap](/blog/2024/10/21/react-compiler-beta-release)[NextReact 19 RC](/blog/2024/04/25/react-19)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React v19[](#undefined "Link for this heading")

December 05, 2024 by [The React Team](/community/team)

### Note

### React 19 is now stable! [](#react-19-is-now-stable "Link for React 19 is now stable! ")

Additions since this post was originally shared with the React 19 RC in April:

  * **Pre-warming for suspended trees** : see [Improvements to Suspense](/blog/2024/04/25/react-19-upgrade-guide#improvements-to-suspense).
  * **React DOM static APIs** : see [New React DOM Static APIs](#new-react-dom-static-apis).



_The date for this post has been updated to reflect the stable release date._

React v19 is now available on npm!

In our [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide), we shared step-by-step instructions for upgrading your app to React 19. In this post, we’ll give an overview of the new features in React 19, and how you can adopt them.

  * [What’s new in React 19](#whats-new-in-react-19)
  * [Improvements in React 19](#improvements-in-react-19)
  * [How to upgrade](#how-to-upgrade)



For a list of breaking changes, see the [Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide).

## What’s new in React 19 [](#whats-new-in-react-19 "Link for What’s new in React 19 ")

### Actions [](#actions "Link for Actions ")

A common use case in React apps is to perform a data mutation and then update state in response. For example, when a user submits a form to change their name, you will make an API request, and then handle the response. In the past, you would need to handle pending states, errors, optimistic updates, and sequential requests manually.

For example, you could handle the pending and error state in `useState`:

```


// Before Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, setIsPending] = useState(false);

 const handleSubmit = async () => {

  setIsPending(true);

  const error = await updateName(name);

  setIsPending(false);

  if (error) {

   setError(error);

   return;

  } 

  redirect("/path");

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


In React 19, we’re adding support for using async functions in transitions to handle pending states, errors, forms, and optimistic updates automatically.

For example, you can use `useTransition` to handle the pending state for you:

```


// Using pending state from Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, startTransition] = useTransition();

 const handleSubmit = () => {

  startTransition(async () => {

   const error = await updateName(name);

   if (error) {

    setError(error);

    return;

   } 

   redirect("/path");

  })

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


The async transition will immediately set the `isPending` state to true, make the async request(s), and switch `isPending` to false after any transitions. This allows you to keep the current UI responsive and interactive while the data is changing.

### Note

#### By convention, functions that use async transitions are called “Actions”. [](#by-convention-functions-that-use-async-transitions-are-called-actions "Link for By convention, functions that use async transitions are called “Actions”. ")

Actions automatically manage submitting data for you:

  * **Pending state** : Actions provide a pending state that starts at the beginning of a request and automatically resets when the final state update is committed.
  * **Optimistic updates** : Actions support the new `useOptimistic`[](#new-hook-optimistic-updates) hook so you can show users instant feedback while the requests are submitting.
  * **Error handling** : Actions provide error handling so you can display Error Boundaries when a request fails, and revert optimistic updates to their original value automatically.
  * **Forms** : `<form>` elements now support passing functions to the `action` and `formAction` props. Passing functions to the `action` props use Actions by default and reset the form automatically after submission.



Building on top of Actions, React 19 introduces `useOptimistic`[](#new-hook-optimistic-updates) to manage optimistic updates, and a new hook `React.useActionState`[](#new-hook-useactionstate) to handle common cases for Actions. In `react-dom` we’re adding `<form>`[ Actions](#form-actions) to manage forms automatically and `useFormStatus`[](#new-hook-useformstatus) to support the common cases for Actions in forms.

In React 19, the above example can be simplified to:

```


// Using <form> Actions and useActionState

function ChangeName({ name, setName }) {

 const [error, submitAction, isPending] = useActionState(

  async (previousState, formData) => {

   const error = await updateName(formData.get("name"));

   if (error) {

    return error;

   }

   redirect("/path");

   return null;

  },

  null,

 );

 return (

  <form action={submitAction}>

   <input type="text" name="name" />

   <button type="submit" disabled={isPending}>Update</button>

   {error && <p>{error}</p>}

  </form>

 );

}


```


In the next section, we’ll break down each of the new Action features in React 19.

### New hook: `useActionState` [](#new-hook-useactionstate "Link for this heading")

To make the common cases easier for Actions, we’ve added a new hook called `useActionState`:

```


const [error, submitAction, isPending] = useActionState(

 async (previousState, newName) => {

  const error = await updateName(newName);

  if (error) {

   // You can return any result of the action.

   // Here, we return only the error.

   return error;

  }

  // handle success

  return null;

 },

 null,

);


```


`useActionState` accepts a function (the “Action”), and returns a wrapped Action to call. This works because Actions compose. When the wrapped Action is called, `useActionState` will return the last result of the Action as `data`, and the pending state of the Action as `pending`.

### Note

`React.useActionState` was previously called `ReactDOM.useFormState` in the Canary releases, but we’ve renamed it and deprecated `useFormState`.

See [#28491](https://github.com/facebook/react/pull/28491) for more info.

For more information, see the docs for `useActionState`[](/reference/react/useActionState).

### React DOM: `<form>` Actions [](#form-actions "Link for this heading")

Actions are also integrated with React 19’s new `<form>` features for `react-dom`. We’ve added support for passing functions as the `action` and `formAction` props of `<form>`, `<input>`, and `<button>` elements to automatically submit forms with Actions:

```


<form action={actionFunction}>


```


When a `<form>` Action succeeds, React will automatically reset the form for uncontrolled components. If you need to reset the `<form>` manually, you can call the new `requestFormReset` React DOM API.

For more information, see the `react-dom` docs for `<form>`[](/reference/react-dom/components/form), `<input>`[](/reference/react-dom/components/input), and `<button>`.

### React DOM: New hook: `useFormStatus` [](#new-hook-useformstatus "Link for this heading")

In design systems, it’s common to write design components that need access to information about the `<form>` they’re in, without drilling props down to the component. This can be done via Context, but to make the common case easier, we’ve added a new hook `useFormStatus`:

```


import {useFormStatus} from 'react-dom';

function DesignButton() {

 const {pending} = useFormStatus();

 return <button type="submit" disabled={pending} />

}


```


`useFormStatus` reads the status of the parent `<form>` as if the form was a Context provider.

For more information, see the `react-dom` docs for `useFormStatus`[](/reference/react-dom/hooks/useFormStatus).

### New hook: `useOptimistic` [](#new-hook-optimistic-updates "Link for this heading")

Another common UI pattern when performing a data mutation is to show the final state optimistically while the async request is underway. In React 19, we’re adding a new hook called `useOptimistic` to make this easier:

```


function ChangeName({currentName, onUpdateName}) {

 const [optimisticName, setOptimisticName] = useOptimistic(currentName);

 const submitAction = async formData => {

  const newName = formData.get("name");

  setOptimisticName(newName);

  const updatedName = await updateName(newName);

  onUpdateName(updatedName);

 };

 return (

  <form action={submitAction}>

   <p>Your name is: {optimisticName}</p>

   <p>

    <label>Change Name:</label>

    <input

     type="text"

     name="name"

     disabled={currentName !== optimisticName}

    />

   </p>

  </form>

 );

}


```


The `useOptimistic` hook will immediately render the `optimisticName` while the `updateName` request is in progress. When the update finishes or errors, React will automatically switch back to the `currentName` value.

For more information, see the docs for `useOptimistic`[](/reference/react/useOptimistic).

### New API: `use` [](#new-feature-use "Link for this heading")

In React 19 we’re introducing a new API to read resources in render: `use`.

For example, you can read a promise with `use`, and React will Suspend until the promise resolves:

```


import {use} from 'react';

function Comments({commentsPromise}) {

 // `use` will suspend until the promise resolves.

 const comments = use(commentsPromise);

 return comments.map(comment => <p key={comment.id}>{comment}</p>);

}

function Page({commentsPromise}) {

 // When `use` suspends in Comments,

 // this Suspense boundary will be shown.

 return (

  <Suspense fallback={<div>Loading...</div>}>

   <Comments commentsPromise={commentsPromise} />

  </Suspense>

 )

}


```


### Note

#### `use` does not support promises created in render. [](#use-does-not-support-promises-created-in-render "Link for this heading")

If you try to pass a promise created in render to `use`, React will warn:

Console

A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework.

To fix, you need to pass a promise from a suspense powered library or framework that supports caching for promises. In the future we plan to ship features to make it easier to cache promises in render.

You can also read context with `use`, allowing you to read Context conditionally such as after early returns:

```


import {use} from 'react';

import ThemeContext from './ThemeContext'

function Heading({children}) {

 if (children == null) {

  return null;

 }

 // This would not work with useContext

 // because of the early return.

 const theme = use(ThemeContext);

 return (

  <h1 style={{color: theme.color}}>

   {children}

  </h1>

 );

}


```


The `use` API can only be called in render, similar to hooks. Unlike hooks, `use` can be called conditionally. In the future we plan to support more ways to consume resources in render with `use`.

For more information, see the docs for `use`[](/reference/react/use).

## New React DOM Static APIs [](#new-react-dom-static-apis "Link for New React DOM Static APIs ")

We’ve added two new APIs to `react-dom/static` for static site generation:

  * `prerender`[](/reference/react-dom/static/prerender)
  * `prerenderToNodeStream`[](/reference/react-dom/static/prerenderToNodeStream)



These new APIs improve on `renderToString` by waiting for data to load for static HTML generation. They are designed to work with streaming environments like Node.js Streams and Web Streams. For example, in a Web Stream environment, you can prerender a React tree to static HTML with `prerender`:

```


import { prerender } from 'react-dom/static';

async function handler(request) {

 const {prelude} = await prerender(<App />, {

  bootstrapScripts: ['/main.js']

 });

 return new Response(prelude, {

  headers: { 'content-type': 'text/html' },

 });

}


```


Prerender APIs will wait for all data to load before returning the static HTML stream. Streams can be converted to strings, or sent with a streaming response. They do not support streaming content as it loads, which is supported by the existing [React DOM server rendering APIs](/reference/react-dom/server).

For more information, see [React DOM Static APIs](/reference/react-dom/static).

## React Server Components [](#react-server-components "Link for React Server Components ")

### Server Components [](#server-components "Link for Server Components ")

Server Components are a new option that allows rendering components ahead of time, before bundling, in an environment separate from your client application or SSR server. This separate environment is the “server” in React Server Components. Server Components can run once at build time on your CI server, or they can be run for each request using a web server.

React 19 includes all of the React Server Components features included from the Canary channel. This means libraries that ship with Server Components can now target React 19 as a peer dependency with a `react-server` [export condition](https://github.com/reactjs/rfcs/blob/main/text/0227-server-module-conventions.md#react-server-conditional-exports) for use in frameworks that support the [Full-stack React Architecture](/learn/start-a-new-react-project#which-features-make-up-the-react-teams-full-stack-architecture-vision).

### Note

#### How do I build support for Server Components? [](#how-do-i-build-support-for-server-components "Link for How do I build support for Server Components? ")

While React Server Components in React 19 are stable and will not break between minor versions, the underlying APIs used to implement a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x.

To support React Server Components as a bundler or framework, we recommend pinning to a specific React version, or using the Canary release. We will continue working with bundlers and frameworks to stabilize the APIs used to implement React Server Components in the future.

For more, see the docs for [React Server Components](/reference/rsc/server-components).

### Server Actions [](#server-actions "Link for Server Actions ")

Server Actions allow Client Components to call async functions executed on the server.

When a Server Action is defined with the `"use server"` directive, your framework will automatically create a reference to the server function, and pass that reference to the Client Component. When that function is called on the client, React will send a request to the server to execute the function, and return the result.

### Note

#### There is no directive for Server Components. [](#there-is-no-directive-for-server-components "Link for There is no directive for Server Components. ")

A common misunderstanding is that Server Components are denoted by `"use server"`, but there is no directive for Server Components. The `"use server"` directive is used for Server Actions.

For more info, see the docs for [Directives](/reference/rsc/directives).

Server Actions can be created in Server Components and passed as props to Client Components, or they can be imported and used in Client Components.

For more, see the docs for [React Server Actions](/reference/rsc/server-actions).

## Improvements in React 19 [](#improvements-in-react-19 "Link for Improvements in React 19 ")

### `ref` as a prop [](#ref-as-a-prop "Link for this heading")

Starting in React 19, you can now access `ref` as a prop for function components:

```


function MyInput({placeholder, ref}) {

 return <input placeholder={placeholder} ref={ref} />

}

//...

<MyInput ref={ref} />


```


New function components will no longer need `forwardRef`, and we will be publishing a codemod to automatically update your components to use the new `ref` prop. In future versions we will deprecate and remove `forwardRef`.

### Note

`refs` passed to classes are not passed as props since they reference the component instance.

### Diffs for hydration errors [](#diffs-for-hydration-errors "Link for Diffs for hydration errors ")

We also improved error reporting for hydration errors in `react-dom`. For example, instead of logging multiple errors in DEV without any information about the mismatch:

Console

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Uncaught Error: Text content does not match server-rendered HTML. at checkForUnmatchedText …

We now log a single message with a diff of the mismatch:

Console

Uncaught Error: Hydration failed because the server rendered HTML didn’t match the client. As a result this tree will be regenerated on the client. This can happen if an SSR-ed Client Component used: - A server/client branch `if (typeof window !== 'undefined')`. - Variable input such as `Date.now()` or `Math.random()` which changes each time it’s called. - Date formatting in a user’s locale which doesn’t match the server. - External changing data without sending a snapshot of it along with the HTML. - Invalid HTML tag nesting. It can also happen if the client has a browser extension installed which messes with the HTML before React loaded. <https://react.dev/link/hydration-mismatch> <App> <span> + Client - Server at throwOnHydrationMismatch …

### `<Context>` as a provider [](#context-as-a-provider "Link for this heading")

In React 19, you can render `<Context>` as a provider instead of `<Context.Provider>`:

```


const ThemeContext = createContext('');

function App({children}) {

 return (

  <ThemeContext value="dark">

   {children}

  </ThemeContext>

 ); 

}


```


New Context providers can use `<Context>` and we will be publishing a codemod to convert existing providers. In future versions we will deprecate `<Context.Provider>`.

### Cleanup functions for refs [](#cleanup-functions-for-refs "Link for Cleanup functions for refs ")

We now support returning a cleanup function from `ref` callbacks:

```


<input

 ref={(ref) => {

  // ref created

  // NEW: return a cleanup function to reset

  // the ref when element is removed from DOM.

  return () => {

   // ref cleanup

  };

 }}

/>


```


When the component unmounts, React will call the cleanup function returned from the `ref` callback. This works for DOM refs, refs to class components, and `useImperativeHandle`.

### Note

Previously, React would call `ref` functions with `null` when unmounting the component. If your `ref` returns a cleanup function, React will now skip this step.

In future versions, we will deprecate calling refs with `null` when unmounting components.

Due to the introduction of ref cleanup functions, returning anything else from a `ref` callback will now be rejected by TypeScript. The fix is usually to stop using implicit returns, for example:

```


- <div ref={current => (instance = current)} />

+ <div ref={current => {instance = current}} />


```


The original code returned the instance of the `HTMLDivElement` and TypeScript wouldn’t know if this was _supposed_ to be a cleanup function or if you didn’t want to return a cleanup function.

You can codemod this pattern with `no-implicit-ref-callback-return`[](https://github.com/eps1lon/types-react-codemod/#no-implicit-ref-callback-return).

### `useDeferredValue` initial value [](#use-deferred-value-initial-value "Link for this heading")

We’ve added an `initialValue` option to `useDeferredValue`:

```


function Search({deferredValue}) {

 // On initial render the value is ''.

 // Then a re-render is scheduled with the deferredValue.

 const value = useDeferredValue(deferredValue, '');

 return (

  <Results query={value} />

 );

}


```


When initialValue is provided, `useDeferredValue` will return it as `value` for the initial render of the component, and schedules a re-render in the background with the deferredValue returned.

For more, see `useDeferredValue`[](/reference/react/useDeferredValue).

### Support for Document Metadata [](#support-for-metadata-tags "Link for Support for Document Metadata ")

In HTML, document metadata tags like `<title>`, `<link>`, and `<meta>` are reserved for placement in the `<head>` section of the document. In React, the component that decides what metadata is appropriate for the app may be very far from the place where you render the `<head>` or React does not render the `<head>` at all. In the past, these elements would need to be inserted manually in an effect, or by libraries like `react-helmet`[](https://github.com/nfl/react-helmet), and required careful handling when server rendering a React application.

In React 19, we’re adding support for rendering document metadata tags in components natively:

```


function BlogPost({post}) {

 return (

  <article>

   <h1>{post.title}</h1>

   <title>{post.title}</title>

   <meta name="author" content="Josh" />

   <link rel="author" href="https://twitter.com/joshcstory/" />

   <meta name="keywords" content={post.keywords} />

   <p>

    Eee equals em-see-squared...

   </p>

  </article>

 );

}


```


When React renders this component, it will see the `<title>` `<link>` and `<meta>` tags, and automatically hoist them to the `<head>` section of document. By supporting these metadata tags natively, we’re able to ensure they work with client-only apps, streaming SSR, and Server Components.

### Note

#### You may still want a Metadata library [](#you-may-still-want-a-metadata-library "Link for You may still want a Metadata library ")

For simple use cases, rendering Document Metadata as tags may be suitable, but libraries can offer more powerful features like overriding generic metadata with specific metadata based on the current route. These features make it easier for frameworks and libraries like `react-helmet`[](https://github.com/nfl/react-helmet) to support metadata tags, rather than replace them.

For more info, see the docs for `<title>`[](/reference/react-dom/components/title), `<link>`[](/reference/react-dom/components/link), and `<meta>`[](/reference/react-dom/components/meta).

### Support for stylesheets [](#support-for-stylesheets "Link for Support for stylesheets ")

Stylesheets, both externally linked (`<link rel="stylesheet" href="...">`) and inline (`<style>...</style>`), require careful positioning in the DOM due to style precedence rules. Building a stylesheet capability that allows for composability within components is hard, so users often end up either loading all of their styles far from the components that may depend on them, or they use a style library which encapsulates this complexity.

In React 19, we’re addressing this complexity and providing even deeper integration into Concurrent Rendering on the Client and Streaming Rendering on the Server with built in support for stylesheets. If you tell React the `precedence` of your stylesheet it will manage the insertion order of the stylesheet in the DOM and ensure that the stylesheet (if external) is loaded before revealing content that depends on those style rules.

```


function ComponentOne() {

 return (

  <Suspense fallback="loading...">

   <link rel="stylesheet" href="foo" precedence="default" />

   <link rel="stylesheet" href="bar" precedence="high" />

   <article class="foo-class bar-class">

    {...}

   </article>

  </Suspense>

 )

}

function ComponentTwo() {

 return (

  <div>

   <p>{...}</p>

   <link rel="stylesheet" href="baz" precedence="default" /> <-- will be inserted between foo & bar

  </div>

 )

}


```


During Server Side Rendering React will include the stylesheet in the `<head>`, which ensures that the browser will not paint until it has loaded. If the stylesheet is discovered late after we’ve already started streaming, React will ensure that the stylesheet is inserted into the `<head>` on the client before revealing the content of a Suspense boundary that depends on that stylesheet.

During Client Side Rendering React will wait for newly rendered stylesheets to load before committing the render. If you render this component from multiple places within your application React will only include the stylesheet once in the document:

```


function App() {

 return <>

  <ComponentOne />

  ...

  <ComponentOne /> // won't lead to a duplicate stylesheet link in the DOM

 </>

}


```


For users accustomed to loading stylesheets manually this is an opportunity to locate those stylesheets alongside the components that depend on them allowing for better local reasoning and an easier time ensuring you only load the stylesheets that you actually depend on.

Style libraries and style integrations with bundlers can also adopt this new capability so even if you don’t directly render your own stylesheets, you can still benefit as your tools are upgraded to use this feature.

For more details, read the docs for `<link>`[](/reference/react-dom/components/link) and `<style>`[](/reference/react-dom/components/style).

### Support for async scripts [](#support-for-async-scripts "Link for Support for async scripts ")

In HTML normal scripts (`<script src="...">`) and deferred scripts (`<script defer="" src="...">`) load in document order which makes rendering these kinds of scripts deep within your component tree challenging. Async scripts (`<script async="" src="...">`) however will load in arbitrary order.

In React 19 we’ve included better support for async scripts by allowing you to render them anywhere in your component tree, inside the components that actually depend on the script, without having to manage relocating and deduplicating script instances.

```


function MyComponent() {

 return (

  <div>

   <script async={true} src="..." />

   Hello World

  </div>

 )

}

function App() {

 <html>

  <body>

   <MyComponent>

   ...

   <MyComponent> // won't lead to duplicate script in the DOM

  </body>

 </html>

}


```


In all rendering environments, async scripts will be deduplicated so that React will only load and execute the script once even if it is rendered by multiple different components.

In Server Side Rendering, async scripts will be included in the `<head>` and prioritized behind more critical resources that block paint such as stylesheets, fonts, and image preloads.

For more details, read the docs for `<script>`[](/reference/react-dom/components/script).

### Support for preloading resources [](#support-for-preloading-resources "Link for Support for preloading resources ")

During initial document load and on client side updates, telling the Browser about resources that it will likely need to load as early as possible can have a dramatic effect on page performance.

React 19 includes a number of new APIs for loading and preloading Browser resources to make it as easy as possible to build great experiences that aren’t held back by inefficient resource loading.

```


import { prefetchDNS, preconnect, preload, preinit } from 'react-dom'

function MyComponent() {

 preinit('https://.../path/to/some/script.js', {as: 'script' }) // loads and executes this script eagerly

 preload('https://.../path/to/font.woff', { as: 'font' }) // preloads this font

 preload('https://.../path/to/stylesheet.css', { as: 'style' }) // preloads this stylesheet

 prefetchDNS('https://...') // when you may not actually request anything from this host

 preconnect('https://...') // when you will request something but aren't sure what

}


```


```


<!-- the above would result in the following DOM/HTML -->

<html>

 <head>

  <!-- links/scripts are prioritized by their utility to early loading, not call order -->

  <link rel="prefetch-dns" href="https://...">

  <link rel="preconnect" href="https://...">

  <link rel="preload" as="font" href="https://.../path/to/font.woff">

  <link rel="preload" as="style" href="https://.../path/to/stylesheet.css">

  <script async="" src="https://.../path/to/some/script.js"></script>

 </head>

 <body>

  ...

 </body>

</html>


```


These APIs can be used to optimize initial page loads by moving discovery of additional resources like fonts out of stylesheet loading. They can also make client updates faster by prefetching a list of resources used by an anticipated navigation and then eagerly preloading those resources on click or even on hover.

For more details see [Resource Preloading APIs](/reference/react-dom#resource-preloading-apis).

### Compatibility with third-party scripts and extensions [](#compatibility-with-third-party-scripts-and-extensions "Link for Compatibility with third-party scripts and extensions ")

We’ve improved hydration to account for third-party scripts and browser extensions.

When hydrating, if an element that renders on the client doesn’t match the element found in the HTML from the server, React will force a client re-render to fix up the content. Previously, if an element was inserted by third-party scripts or browser extensions, it would trigger a mismatch error and client render.

In React 19, unexpected tags in the `<head>` and `<body>` will be skipped over, avoiding the mismatch errors. If React needs to re-render the entire document due to an unrelated hydration mismatch, it will leave in place stylesheets inserted by third-party scripts and browser extensions.

### Better error reporting [](#error-handling "Link for Better error reporting ")

We improved error handling in React 19 to remove duplication and provide options for handling caught and uncaught errors. For example, when there’s an error in render caught by an Error Boundary, previously React would throw the error twice (once for the original error, then again after failing to automatically recover), and then call `console.error` with info about where the error occurred.

This resulted in three errors for every caught error:

Console

Uncaught Error: hit at Throws at renderWithHooks …

Uncaught Error: hit <-- Duplicate at Throws at renderWithHooks …

The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary.

In React 19, we log a single error with all the error information included:

Console

Error: hit at Throws at renderWithHooks … The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary. at ErrorBoundary at App

Additionally, we’ve added two new root options to complement `onRecoverableError`:

  * `onCaughtError`: called when React catches an error in an Error Boundary.
  * `onUncaughtError`: called when an error is thrown and not caught by an Error Boundary.
  * `onRecoverableError`: called when an error is thrown and automatically recovered.



For more info and examples, see the docs for `createRoot`[](/reference/react-dom/client/createRoot) and `hydrateRoot`[](/reference/react-dom/client/hydrateRoot).

### Support for Custom Elements [](#support-for-custom-elements "Link for Support for Custom Elements ")

React 19 adds full support for custom elements and passes all tests on [Custom Elements Everywhere](https://custom-elements-everywhere.com/).

In past versions, using Custom Elements in React has been difficult because React treated unrecognized props as attributes rather than properties. In React 19, we’ve added support for properties that works on the client and during SSR with the following strategy:

  * **Server Side Rendering** : props passed to a custom element will render as attributes if their type is a primitive value like `string`, `number`, or the value is `true`. Props with non-primitive types like `object`, `symbol`, `function`, or value `false` will be omitted.
  * **Client Side Rendering** : props that match a property on the Custom Element instance will be assigned as properties, otherwise they will be assigned as attributes.



Thanks to [Joey Arhar](https://github.com/josepharhar) for driving the design and implementation of Custom Element support in React.

#### How to upgrade [](#how-to-upgrade "Link for How to upgrade ")

See the [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide) for step-by-step instructions and a full list of breaking and notable changes.

_Note: this post was originally published 04/25/2024 and has been updated to 12/05/2024 with the stable release._

[ PreviousBlog](/blog)[NextReact Compiler Beta Release and Roadmap](/blog/2024/10/21/react-compiler-beta-release)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Installation[](#undefined "Link for this heading")

React has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.

### In this chapter

  * [How to start a new React project](/learn/start-a-new-react-project)
  * [How to add React to an existing project](/learn/add-react-to-an-existing-project)
  * [How to set up your editor](/learn/editor-setup)
  * [How to install React Developer Tools](/learn/react-developer-tools)



## Try React [](#try-react "Link for Try React ")

You don’t need to install anything to play with React. Try editing this sandbox!

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

9

1

2

3

4

5

6

7

8

function Greeting({ name }) {

return <h1>Hello, {name}</h1>;

}

export default function App() {

return <Greeting name="world" />

}

You can edit it directly or open it in a new tab by pressing the “Fork” button in the upper right corner.

Most pages in the React documentation contain sandboxes like this. Outside of the React documentation, there are many online sandboxes that support React: for example, [CodeSandbox](https://codesandbox.io/s/new), [StackBlitz](https://stackblitz.com/fork/react), or [CodePen.](https://codepen.io/pen?template=QWYVwWN)

### Try React locally [](#try-react-locally "Link for Try React locally ")

To try React locally on your computer, [download this HTML page.](https://gist.githubusercontent.com/gaearon/0275b1e1518599bbeafcde4722e79ed1/raw/db72dcbf3384ee1708c4a07d3be79860db04bff0/example.html) Open it in your editor and in your browser!

## Start a new React project [](#start-a-new-react-project "Link for Start a new React project ")

If you want to build an app or a website fully with React, [start a new React project.](/learn/start-a-new-react-project)

## Add React to an existing project [](#add-react-to-an-existing-project "Link for Add React to an existing project ")

If want to try using React in your existing app or a website, [add React to an existing project.](/learn/add-react-to-an-existing-project)

## Next steps [](#next-steps "Link for Next steps ")

Head to the [Quick Start](/learn) guide for a tour of the most important React concepts you will encounter every day.

[PreviousThinking in React](/learn/thinking-in-react)[NextStart a New React Project](/learn/start-a-new-react-project)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Try React ](#try-react)
  * [Try React locally ](#try-react-locally)
  * [Start a new React project ](#start-a-new-react-project)
  * [Add React to an existing project ](#add-react-to-an-existing-project)
  * [Next steps ](#next-steps)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Describing the UI[](#undefined "Link for this heading")

React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable _components._ From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.

### In this chapter

  * [How to write your first React component](/learn/your-first-component)
  * [When and how to create multi-component files](/learn/importing-and-exporting-components)
  * [How to add markup to JavaScript with JSX](/learn/writing-markup-with-jsx)
  * [How to use curly braces with JSX to access JavaScript functionality from your components](/learn/javascript-in-jsx-with-curly-braces)
  * [How to configure components with props](/learn/passing-props-to-a-component)
  * [How to conditionally render components](/learn/conditional-rendering)
  * [How to render multiple components at a time](/learn/rendering-lists)
  * [How to avoid confusing bugs by keeping components pure](/learn/keeping-components-pure)
  * [Why understanding your UI as trees is useful](/learn/understanding-your-ui-as-a-tree)



## Your first component [](#your-first-component "Link for Your first component ")

React applications are built from isolated pieces of UI called _components_. A React component is a JavaScript function that you can sprinkle with markup. Components can be as small as a button, or as large as an entire page. Here is a `Gallery` component rendering three `Profile` components:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

99

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

function Profile() {

return (

<img

src="https://i.imgur.com/MK3eW3As.jpg"

alt="Katherine Johnson"

/>

);

}

export default function Gallery() {

return (

<section>

<h1>Amazing scientists</h1>

<Profile />

<Profile />

<Profile />

</section>

);

}

Show more

## Ready to learn this topic?

Read **[Your First Component](/learn/your-first-component)** to learn how to declare and use React components.

[Read More](/learn/your-first-component)

## Importing and exporting components [](#importing-and-exporting-components "Link for Importing and exporting components ")

You can declare many components in one file, but large files can get difficult to navigate. To solve this, you can _export_ a component into its own file, and then _import_ that component from another file:

Gallery.jsProfile.js

Gallery.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import Profile from './Profile.js';
export default function Gallery() {
 return (
  <section>
   <h1>Amazing scientists</h1>
   <Profile />
   <Profile />
   <Profile />
  </section>
 );
}

```


## Ready to learn this topic?

Read **[Importing and Exporting Components](/learn/importing-and-exporting-components)** to learn how to split components into their own files.

[Read More](/learn/importing-and-exporting-components)

## Writing markup with JSX [](#writing-markup-with-jsx "Link for Writing markup with JSX ")

Each React component is a JavaScript function that may contain some markup that React renders into the browser. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information.

If we paste existing HTML markup into a React component, it won’t always work:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
export default function TodoList() {
 return (
  // This doesn't quite work!
  <h1>Hedy Lamarr's Todos</h1>
  <img
   src="https://i.imgur.com/yXOvdOSs.jpg"
   alt="Hedy Lamarr"
   class="photo"
  >
  <ul>
   <li>Invent new traffic lights
   <li>Rehearse a movie scene
   <li>Improve spectrum technology
  </ul>

```


Show more

If you have existing HTML like this, you can fix it using a [converter](https://transform.tools/html-to-jsx):

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
export default function TodoList() {
 return (
  <>
   <h1>Hedy Lamarr's Todos</h1>
   <img
    src="https://i.imgur.com/yXOvdOSs.jpg"
    alt="Hedy Lamarr"
    className="photo"
   />
   <ul>
    <li>Invent new traffic lights</li>
    <li>Rehearse a movie scene</li>
    <li>Improve spectrum technology</li>
   </ul>
  </>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Writing Markup with JSX](/learn/writing-markup-with-jsx)** to learn how to write valid JSX.

[Read More](/learn/writing-markup-with-jsx)

## JavaScript in JSX with curly braces [](#javascript-in-jsx-with-curly-braces "Link for JavaScript in JSX with curly braces ")

JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to “open a window” to JavaScript:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
const person = {
 name: 'Gregorio Y. Zara',
 theme: {
  backgroundColor: 'black',
  color: 'pink'
 }
};
export default function TodoList() {
 return (
  <div style={person.theme}>
   <h1>{person.name}'s Todos</h1>
   <img
    className="avatar"
    src="https://i.imgur.com/7vQD0fPs.jpg"
    alt="Gregorio Y. Zara"
   />
   <ul>
    <li>Improve the videophone</li>
    <li>Prepare aeronautics lectures</li>
    <li>Work on the alcohol-fuelled engine</li>
   </ul>
  </div>
 );
}

```


Show more

## Ready to learn this topic?

Read **[JavaScript in JSX with Curly Braces](/learn/javascript-in-jsx-with-curly-braces)** to learn how to access JavaScript data from JSX.

[Read More](/learn/javascript-in-jsx-with-curly-braces)

## Passing props to a component [](#passing-props-to-a-component "Link for Passing props to a component ")

React components use _props_ to communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, functions, and even JSX!

App.jsutils.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { getImageUrl } from './utils.js'
export default function Profile() {
 return (
  <Card>
   <Avatar
    size={100}
    person={{
     name: 'Katsuko Saruhashi',
     imageId: 'YfeOqp2'
    }}
   />
  </Card>
 );
}
function Avatar({ person, size }) {
 return (
  <img
   className="avatar"
   src={getImageUrl(person)}
   alt={person.name}
   width={size}
   height={size}
  />
 );
}
function Card({ children }) {
 return (
  <div className="card">
   {children}
  </div>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Passing Props to a Component](/learn/passing-props-to-a-component)** to learn how to pass and read props.

[Read More](/learn/passing-props-to-a-component)

## Conditional rendering [](#conditional-rendering "Link for Conditional rendering ")

Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like `if` statements, `&&`, and `? :` operators.

In this example, the JavaScript `&&` operator is used to conditionally render a checkmark:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
function Item({ name, isPacked }) {
 return (
  <li className="item">
   {name} {isPacked && '✅'}
  </li>
 );
}
export default function PackingList() {
 return (
  <section>
   <h1>Sally Ride's Packing List</h1>
   <ul>
    <Item
     isPacked={true}
     name="Space suit"
    />
    <Item
     isPacked={true}
     name="Helmet with a golden leaf"
    />
    <Item
     isPacked={false}
     name="Photo of Tam"
    />
   </ul>
  </section>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Conditional Rendering](/learn/conditional-rendering)** to learn the different ways to render content conditionally.

[Read More](/learn/conditional-rendering)

## Rendering lists [](#rendering-lists "Link for Rendering lists ")

You will often want to display multiple similar components from a collection of data. You can use JavaScript’s `filter()` and `map()` with React to filter and transform your array of data into an array of components.

For each array item, you will need to specify a `key`. Usually, you will want to use an ID from the database as a `key`. Keys let React keep track of each item’s place in the list even if the list changes.

App.jsdata.jsutils.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { people } from './data.js';
import { getImageUrl } from './utils.js';
export default function List() {
 const listItems = people.map(person =>
  <li key={person.id}>
   <img
    src={getImageUrl(person)}
    alt={person.name}
   />
   <p>
    <b>{person.name}:</b>
    {' ' + person.profession + ' '}
    known for {person.accomplishment}
   </p>
  </li>
 );
 return (
  <article>
   <h1>Scientists</h1>
   <ul>{listItems}</ul>
  </article>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Rendering Lists](/learn/rendering-lists)** to learn how to render a list of components, and how to choose a key.

[Read More](/learn/rendering-lists)

## Keeping components pure [](#keeping-components-pure "Link for Keeping components pure ")

Some JavaScript functions are _pure._ A pure function:

  * **Minds its own business.** It does not change any objects or variables that existed before it was called.
  * **Same inputs, same output.** Given the same inputs, a pure function should always return the same result.



By strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. Here is an example of an impure component:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
let guest = 0;
function Cup() {
 // Bad: changing a preexisting variable!
 guest = guest + 1;
 return <h2>Tea cup for guest #{guest}</h2>;
}
export default function TeaSet() {
 return (
  <>
   <Cup />
   <Cup />
   <Cup />
  </>
 );
}

```


Show more

You can make this component pure by passing a prop instead of modifying a preexisting variable:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
function Cup({ guest }) {
 return <h2>Tea cup for guest #{guest}</h2>;
}
export default function TeaSet() {
 return (
  <>
   <Cup guest={1} />
   <Cup guest={2} />
   <Cup guest={3} />
  </>
 );
}

```


## Ready to learn this topic?

Read **[Keeping Components Pure](/learn/keeping-components-pure)** to learn how to write components as pure, predictable functions.

[Read More](/learn/keeping-components-pure)

## Your UI as a tree [](#your-ui-as-a-tree "Link for Your UI as a tree ")

React uses trees to model the relationships between components and modules.

A React render tree is a representation of the parent and child relationship between components.

An example React render tree.

Components near the top of the tree, near the root component, are considered top-level components. Components with no child components are leaf components. This categorization of components is useful for understanding data flow and rendering performance.

Modelling the relationship between JavaScript modules is another useful way to understand your app. We refer to it as a module dependency tree.

An example module dependency tree.

A dependency tree is often used by build tools to bundle all the relevant JavaScript code for the client to download and render. A large bundle size regresses user experience for React apps. Understanding the module dependency tree is helpful to debug such issues.

## Ready to learn this topic?

Read **[Your UI as a Tree](/learn/understanding-your-ui-as-a-tree)** to learn how to create a render and module dependency trees for a React app and how they’re useful mental models for improving user experience and performance.

[Read More](/learn/understanding-your-ui-as-a-tree)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Your First Component](/learn/your-first-component) to start reading this chapter page by page!

Or, if you’re already familiar with these topics, why not read about [Adding Interactivity](/learn/adding-interactivity)?

[NextYour First Component](/learn/your-first-component)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Your first component ](#your-first-component)
  * [Importing and exporting components ](#importing-and-exporting-components)
  * [Writing markup with JSX ](#writing-markup-with-jsx)
  * [JavaScript in JSX with curly braces ](#javascript-in-jsx-with-curly-braces)
  * [Passing props to a component ](#passing-props-to-a-component)
  * [Conditional rendering ](#conditional-rendering)
  * [Rendering lists ](#rendering-lists)
  * [Keeping components pure ](#keeping-components-pure)
  * [Your UI as a tree ](#your-ui-as-a-tree)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Adding Interactivity[](#undefined "Link for this heading")

Some things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is called _state._ You can add state to any component, and update it as needed. In this chapter, you’ll learn how to write components that handle interactions, update their state, and display different output over time.

### In this chapter

  * [How to handle user-initiated events](/learn/responding-to-events)
  * [How to make components “remember” information with state](/learn/state-a-components-memory)
  * [How React updates the UI in two phases](/learn/render-and-commit)
  * [Why state doesn’t update right after you change it](/learn/state-as-a-snapshot)
  * [How to queue multiple state updates](/learn/queueing-a-series-of-state-updates)
  * [How to update an object in state](/learn/updating-objects-in-state)
  * [How to update an array in state](/learn/updating-arrays-in-state)



## Responding to events [](#responding-to-events "Link for Responding to events ")

React lets you add _event handlers_ to your JSX. Event handlers are your own functions that will be triggered in response to user interactions like clicking, hovering, focusing on form inputs, and so on.

Built-in components like `<button>` only support built-in browser events like `onClick`. However, you can also create your own components, and give their event handler props any application-specific names that you like.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
export default function App() {
 return (
  <Toolbar
   onPlayMovie={() => alert('Playing!')}
   onUploadImage={() => alert('Uploading!')}
  />
 );
}
function Toolbar({ onPlayMovie, onUploadImage }) {
 return (
  <div>
   <Button onClick={onPlayMovie}>
    Play Movie
   </Button>
   <Button onClick={onUploadImage}>
    Upload Image
   </Button>
  </div>
 );
}
function Button({ onClick, children }) {
 return (
  <button onClick={onClick}>
   {children}
  </button>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Responding to Events](/learn/responding-to-events)** to learn how to add event handlers.

[Read More](/learn/responding-to-events)

## State: a component’s memory [](#state-a-components-memory "Link for State: a component’s memory ")

Components often need to change what’s on the screen as a result of an interaction. Typing into the form should update the input field, clicking “next” on an image carousel should change which image is displayed, clicking “buy” puts a product in the shopping cart. Components need to “remember” things: the current input value, the current image, the shopping cart. In React, this kind of component-specific memory is called _state._

You can add state to a component with a `useState`[](/reference/react/useState) Hook. _Hooks_ are special functions that let your components use React features (state is one of those features). The `useState` Hook lets you declare a state variable. It takes the initial state and returns a pair of values: the current state, and a state setter function that lets you update it.

```


const [index, setIndex] = useState(0);

const [showMore, setShowMore] = useState(false);


```


Here is how an image gallery uses and updates state on click:

App.jsdata.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
import { sculptureList } from './data.js';
export default function Gallery() {
 const [index, setIndex] = useState(0);
 const [showMore, setShowMore] = useState(false);
 const hasNext = index < sculptureList.length - 1;
 function handleNextClick() {
  if (hasNext) {
   setIndex(index + 1);
  } else {
   setIndex(0);
  }
 }
 function handleMoreClick() {
  setShowMore(!showMore);
 }
 let sculpture = sculptureList[index];
 return (
  <>
   <button onClick={handleNextClick}>
    Next
   </button>
   <h2>
    <i>{sculpture.name} </i>
    by {sculpture.artist}
   </h2>
   <h3>
    ({index + 1} of {sculptureList.length})
   </h3>
   <button onClick={handleMoreClick}>
    {showMore ? 'Hide' : 'Show'} details
   </button>
   {showMore && <p>{sculpture.description}</p>}
   <img
    src={sculpture.url}
    alt={sculpture.alt}
   />
  </>
 );
}

```


Show more

## Ready to learn this topic?

Read **[State: A Component’s Memory](/learn/state-a-components-memory)** to learn how to remember a value and update it on interaction.

[Read More](/learn/state-a-components-memory)

## Render and commit [](#render-and-commit "Link for Render and commit ")

Before your components are displayed on the screen, they must be rendered by React. Understanding the steps in this process will help you think about how your code executes and explain its behavior.

Imagine that your components are cooks in the kitchen, assembling tasty dishes from ingredients. In this scenario, React is the waiter who puts in requests from customers and brings them their orders. This process of requesting and serving UI has three steps:

  1. **Triggering** a render (delivering the diner’s order to the kitchen)
  2. **Rendering** the component (preparing the order in the kitchen)
  3. **Committing** to the DOM (placing the order on the table)



  1. Trigger
  2. Render
  3. Commit



Illustrated by [Rachel Lee Nabors](https://nearestnabors.com/)

## Ready to learn this topic?

Read **[Render and Commit](/learn/render-and-commit)** to learn the lifecycle of a UI update.

[Read More](/learn/render-and-commit)

## State as a snapshot [](#state-as-a-snapshot "Link for State as a snapshot ")

Unlike regular JavaScript variables, React state behaves more like a snapshot. Setting it does not change the state variable you already have, but instead triggers a re-render. This can be surprising at first!

```


console.log(count); // 0

setCount(count + 1); // Request a re-render with 1

console.log(count); // Still 0!


```


This behavior helps you avoid subtle bugs. Here is a little chat app. Try to guess what happens if you press “Send” first and _then_ change the recipient to Bob. Whose name will appear in the `alert` five seconds later?

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [to, setTo] = useState('Alice');
 const [message, setMessage] = useState('Hello');
 function handleSubmit(e) {
  e.preventDefault();
  setTimeout(() => {
   alert(`You said ${message} to ${to}`);
  }, 5000);
 }
 return (
  <form onSubmit={handleSubmit}>
   <label>
    To:{' '}
    <select
     value={to}
     onChange={e => setTo(e.target.value)}>
     <option value="Alice">Alice</option>
     <option value="Bob">Bob</option>
    </select>
   </label>
   <textarea
    placeholder="Message"
    value={message}
    onChange={e => setMessage(e.target.value)}
   />
   <button type="submit">Send</button>
  </form>
 );
}

```


Show more

## Ready to learn this topic?

Read **[State as a Snapshot](/learn/state-as-a-snapshot)** to learn why state appears “fixed” and unchanging inside the event handlers.

[Read More](/learn/state-as-a-snapshot)

## Queueing a series of state updates [](#queueing-a-series-of-state-updates "Link for Queueing a series of state updates ")

This component is buggy: clicking “+3” increments the score only once.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Counter() {
 const [score, setScore] = useState(0);
 function increment() {
  setScore(score + 1);
 }
 return (
  <>
   <button onClick={() => increment()}>+1</button>
   <button onClick={() => {
    increment();
    increment();
    increment();
   }}>+3</button>
   <h1>Score: {score}</h1>
  </>
 )
}

```


Show more

[State as a Snapshot](/learn/state-as-a-snapshot) explains why this is happening. Setting state requests a new re-render, but does not change it in the already running code. So `score` continues to be `0` right after you call `setScore(score + 1)`.

```


console.log(score); // 0

setScore(score + 1); // setScore(0 + 1);

console.log(score); // 0

setScore(score + 1); // setScore(0 + 1);

console.log(score); // 0

setScore(score + 1); // setScore(0 + 1);

console.log(score); // 0


```


You can fix this by passing an _updater function_ when setting state. Notice how replacing `setScore(score + 1)` with `setScore(s => s + 1)` fixes the “+3” button. This lets you queue multiple state updates.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Counter() {
 const [score, setScore] = useState(0);
 function increment() {
  setScore(s => s + 1);
 }
 return (
  <>
   <button onClick={() => increment()}>+1</button>
   <button onClick={() => {
    increment();
    increment();
    increment();
   }}>+3</button>
   <h1>Score: {score}</h1>
  </>
 )
}

```


Show more

## Ready to learn this topic?

Read **[Queueing a Series of State Updates](/learn/queueing-a-series-of-state-updates)** to learn how to queue a sequence of state updates.

[Read More](/learn/queueing-a-series-of-state-updates)

## Updating objects in state [](#updating-objects-in-state "Link for Updating objects in state ")

State can hold any kind of JavaScript value, including objects. But you shouldn’t change objects and arrays that you hold in the React state directly. Instead, when you want to update an object and array, you need to create a new one (or make a copy of an existing one), and then update the state to use that copy.

Usually, you will use the `...` spread syntax to copy objects and arrays that you want to change. For example, updating a nested object could look like this:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [person, setPerson] = useState({
  name: 'Niki de Saint Phalle',
  artwork: {
   title: 'Blue Nana',
   city: 'Hamburg',
   image: 'https://i.imgur.com/Sd1AgUOm.jpg',
  }
 });
 function handleNameChange(e) {
  setPerson({
   ...person,
   name: e.target.value
  });
 }
 function handleTitleChange(e) {
  setPerson({
   ...person,
   artwork: {
    ...person.artwork,
    title: e.target.value
   }
  });
 }
 function handleCityChange(e) {
  setPerson({
   ...person,
   artwork: {
    ...person.artwork,
    city: e.target.value
   }
  });
 }
 function handleImageChange(e) {
  setPerson({
   ...person,
   artwork: {
    ...person.artwork,
    image: e.target.value
   }
  });
 }
 return (
  <>
   <label>
    Name:
    <input
     value={person.name}
     onChange={handleNameChange}
    />
   </label>
   <label>
    Title:
    <input
     value={person.artwork.title}
     onChange={handleTitleChange}
    />
   </label>
   <label>
    City:
    <input
     value={person.artwork.city}
     onChange={handleCityChange}
    />
   </label>
   <label>
    Image:
    <input
     value={person.artwork.image}
     onChange={handleImageChange}
    />
   </label>
   <p>
    <i>{person.artwork.title}</i>
    {' by '}
    {person.name}
    <br />
    (located in {person.artwork.city})
   </p>
   <img
    src={person.artwork.image}
    alt={person.artwork.title}
   />
  </>
 );
}

```


Show more

If copying objects in code gets tedious, you can use a library like [Immer](https://github.com/immerjs/use-immer) to reduce repetitive code:

package.jsonApp.js

package.json

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
{
 "dependencies": {
  "immer": "1.7.3",
  "react": "latest",
  "react-dom": "latest",
  "react-scripts": "latest",
  "use-immer": "0.5.1"
 },
 "scripts": {
  "start": "react-scripts start",
  "build": "react-scripts build",
  "test": "react-scripts test --env=jsdom",
  "eject": "react-scripts eject"
 },
 "devDependencies": {}
}
```


## Ready to learn this topic?

Read **[Updating Objects in State](/learn/updating-objects-in-state)** to learn how to update objects correctly.

[Read More](/learn/updating-objects-in-state)

## Updating arrays in state [](#updating-arrays-in-state "Link for Updating arrays in state ")

Arrays are another type of mutable JavaScript objects you can store in state and should treat as read-only. Just like with objects, when you want to update an array stored in state, you need to create a new one (or make a copy of an existing one), and then set state to use the new array:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
const initialList = [
 { id: 0, title: 'Big Bellies', seen: false },
 { id: 1, title: 'Lunar Landscape', seen: false },
 { id: 2, title: 'Terracotta Army', seen: true },
];
export default function BucketList() {
 const [list, setList] = useState(
  initialList
 );
 function handleToggle(artworkId, nextSeen) {
  setList(list.map(artwork => {
   if (artwork.id === artworkId) {
    return { ...artwork, seen: nextSeen };
   } else {
    return artwork;
   }
  }));
 }
 return (
  <>
   <h1>Art Bucket List</h1>
   <h2>My list of art to see:</h2>
   <ItemList
    artworks={list}
    onToggle={handleToggle} />
  </>
 );
}
function ItemList({ artworks, onToggle }) {
 return (
  <ul>
   {artworks.map(artwork => (
    <li key={artwork.id}>
     <label>
      <input
       type="checkbox"
       checked={artwork.seen}
       onChange={e => {
        onToggle(
         artwork.id,
         e.target.checked
        );
       }}
      />
      {artwork.title}
     </label>
    </li>
   ))}
  </ul>
 );
}

```


Show more

If copying arrays in code gets tedious, you can use a library like [Immer](https://github.com/immerjs/use-immer) to reduce repetitive code:

package.jsonApp.js

package.json

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
{
 "dependencies": {
  "immer": "1.7.3",
  "react": "latest",
  "react-dom": "latest",
  "react-scripts": "latest",
  "use-immer": "0.5.1"
 },
 "scripts": {
  "start": "react-scripts start",
  "build": "react-scripts build",
  "test": "react-scripts test --env=jsdom",
  "eject": "react-scripts eject"
 },
 "devDependencies": {}
}
```


## Ready to learn this topic?

Read **[Updating Arrays in State](/learn/updating-arrays-in-state)** to learn how to update arrays correctly.

[Read More](/learn/updating-arrays-in-state)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Responding to Events](/learn/responding-to-events) to start reading this chapter page by page!

Or, if you’re already familiar with these topics, why not read about [Managing State](/learn/managing-state)?

[PreviousYour UI as a Tree](/learn/understanding-your-ui-as-a-tree)[NextResponding to Events](/learn/responding-to-events)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Responding to events ](#responding-to-events)
  * [State: a component’s memory ](#state-a-components-memory)
  * [Render and commit ](#render-and-commit)
  * [State as a snapshot ](#state-as-a-snapshot)
  * [Queueing a series of state updates ](#queueing-a-series-of-state-updates)
  * [Updating objects in state ](#updating-objects-in-state)
  * [Updating arrays in state ](#updating-arrays-in-state)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Managing State[](#undefined "Link for this heading")

Intermediate

As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you’ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.

### In this chapter

  * [How to think about UI changes as state changes](/learn/reacting-to-input-with-state)
  * [How to structure state well](/learn/choosing-the-state-structure)
  * [How to “lift state up” to share it between components](/learn/sharing-state-between-components)
  * [How to control whether the state gets preserved or reset](/learn/preserving-and-resetting-state)
  * [How to consolidate complex state logic in a function](/learn/extracting-state-logic-into-a-reducer)
  * [How to pass information without “prop drilling”](/learn/passing-data-deeply-with-context)
  * [How to scale state management as your app grows](/learn/scaling-up-with-reducer-and-context)



## Reacting to input with state [](#reacting-to-input-with-state "Link for Reacting to input with state ")

With React, you won’t modify the UI from code directly. For example, you won’t write commands like “disable the button”, “enable the button”, “show the success message”, etc. Instead, you will describe the UI you want to see for the different visual states of your component (“initial state”, “typing state”, “success state”), and then trigger the state changes in response to user input. This is similar to how designers think about UI.

Here is a quiz form built using React. Note how it uses the `status` state variable to determine whether to enable or disable the submit button, and whether to show the success message instead.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [answer, setAnswer] = useState('');
 const [error, setError] = useState(null);
 const [status, setStatus] = useState('typing');
 if (status === 'success') {
  return <h1>That's right!</h1>
 }
 async function handleSubmit(e) {
  e.preventDefault();
  setStatus('submitting');
  try {
   await submitForm(answer);
   setStatus('success');
  } catch (err) {
   setStatus('typing');
   setError(err);
  }
 }
 function handleTextareaChange(e) {
  setAnswer(e.target.value);
 }
 return (
  <>
   <h2>City quiz</h2>
   <p>
    In which city is there a billboard that turns air into drinkable water?
   </p>
   <form onSubmit={handleSubmit}>
    <textarea
     value={answer}
     onChange={handleTextareaChange}
     disabled={status === 'submitting'}
    />
    <br />
    <button disabled={
     answer.length === 0 ||
     status === 'submitting'
    }>
     Submit
    </button>
    {error !== null &&
     <p className="Error">
      {error.message}
     </p>
    }
   </form>
  </>
 );
}
function submitForm(answer) {
 // Pretend it's hitting the network.
 return new Promise((resolve, reject) => {
  setTimeout(() => {
   let shouldError = answer.toLowerCase() !== 'lima'
   if (shouldError) {
    reject(new Error('Good guess but a wrong answer. Try again!'));
   } else {
    resolve();
   }
  }, 1500);
 });
}

```


Show more

## Ready to learn this topic?

Read **[Reacting to Input with State](/learn/reacting-to-input-with-state)** to learn how to approach interactions with a state-driven mindset.

[Read More](/learn/reacting-to-input-with-state)

## Choosing the state structure [](#choosing-the-state-structure "Link for Choosing the state structure ")

Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. The most important principle is that state shouldn’t contain redundant or duplicated information. If there’s unnecessary state, it’s easy to forget to update it, and introduce bugs!

For example, this form has a **redundant** `fullName` state variable:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [firstName, setFirstName] = useState('');
 const [lastName, setLastName] = useState('');
 const [fullName, setFullName] = useState('');
 function handleFirstNameChange(e) {
  setFirstName(e.target.value);
  setFullName(e.target.value + ' ' + lastName);
 }
 function handleLastNameChange(e) {
  setLastName(e.target.value);
  setFullName(firstName + ' ' + e.target.value);
 }
 return (
  <>
   <h2>Let’s check you in</h2>
   <label>
    First name:{' '}
    <input
     value={firstName}
     onChange={handleFirstNameChange}
    />
   </label>
   <label>
    Last name:{' '}
    <input
     value={lastName}
     onChange={handleLastNameChange}
    />
   </label>
   <p>
    Your ticket will be issued to: <b>{fullName}</b>
   </p>
  </>
 );
}

```


Show more

You can remove it and simplify the code by calculating `fullName` while the component is rendering:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [firstName, setFirstName] = useState('');
 const [lastName, setLastName] = useState('');
 const fullName = firstName + ' ' + lastName;
 function handleFirstNameChange(e) {
  setFirstName(e.target.value);
 }
 function handleLastNameChange(e) {
  setLastName(e.target.value);
 }
 return (
  <>
   <h2>Let’s check you in</h2>
   <label>
    First name:{' '}
    <input
     value={firstName}
     onChange={handleFirstNameChange}
    />
   </label>
   <label>
    Last name:{' '}
    <input
     value={lastName}
     onChange={handleLastNameChange}
    />
   </label>
   <p>
    Your ticket will be issued to: <b>{fullName}</b>
   </p>
  </>
 );
}

```


Show more

This might seem like a small change, but many bugs in React apps are fixed this way.

## Ready to learn this topic?

Read **[Choosing the State Structure](/learn/choosing-the-state-structure)** to learn how to design the state shape to avoid bugs.

[Read More](/learn/choosing-the-state-structure)

## Sharing state between components [](#sharing-state-between-components "Link for Sharing state between components ")

Sometimes, you want the state of two components to always change together. To do it, remove state from both of them, move it to their closest common parent, and then pass it down to them via props. This is known as “lifting state up”, and it’s one of the most common things you will do writing React code.

In this example, only one panel should be active at a time. To achieve this, instead of keeping the active state inside each individual panel, the parent component holds the state and specifies the props for its children.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Accordion() {
 const [activeIndex, setActiveIndex] = useState(0);
 return (
  <>
   <h2>Almaty, Kazakhstan</h2>
   <Panel
    title="About"
    isActive={activeIndex === 0}
    onShow={() => setActiveIndex(0)}
   >
    With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.
   </Panel>
   <Panel
    title="Etymology"
    isActive={activeIndex === 1}
    onShow={() => setActiveIndex(1)}
   >
    The name comes from <span lang="kk-KZ">алма</span>, the Kazakh word for "apple" and is often translated as "full of apples". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang="la">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.
   </Panel>
  </>
 );
}
function Panel({
 title,
 children,
 isActive,
 onShow
}) {
 return (
  <section className="panel">
   <h3>{title}</h3>
   {isActive ? (
    <p>{children}</p>
   ) : (
    <button onClick={onShow}>
     Show
    </button>
   )}
  </section>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Sharing State Between Components](/learn/sharing-state-between-components)** to learn how to lift state up and keep components in sync.

[Read More](/learn/sharing-state-between-components)

## Preserving and resetting state [](#preserving-and-resetting-state "Link for Preserving and resetting state ")

When you re-render a component, React needs to decide which parts of the tree to keep (and update), and which parts to discard or re-create from scratch. In most cases, React’s automatic behavior works well enough. By default, React preserves the parts of the tree that “match up” with the previously rendered component tree.

However, sometimes this is not what you want. In this chat app, typing a message and then switching the recipient does not reset the input. This can make the user accidentally send a message to the wrong person:

App.jsContactList.jsChat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
import Chat from './Chat.js';
import ContactList from './ContactList.js';
export default function Messenger() {
 const [to, setTo] = useState(contacts[0]);
 return (
  <div>
   <ContactList
    contacts={contacts}
    selectedContact={to}
    onSelect={contact => setTo(contact)}
   />
   <Chat contact={to} />
  </div>
 )
}
const contacts = [
 { name: 'Taylor', email: 'taylor@mail.com' },
 { name: 'Alice', email: 'alice@mail.com' },
 { name: 'Bob', email: 'bob@mail.com' }
];

```


Show more

React lets you override the default behavior, and _force_ a component to reset its state by passing it a different `key`, like `<Chat key={email} />`. This tells React that if the recipient is different, it should be considered a _different_ `Chat` component that needs to be re-created from scratch with the new data (and UI like inputs). Now switching between the recipients resets the input field—even though you render the same component.

App.jsContactList.jsChat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
import Chat from './Chat.js';
import ContactList from './ContactList.js';
export default function Messenger() {
 const [to, setTo] = useState(contacts[0]);
 return (
  <div>
   <ContactList
    contacts={contacts}
    selectedContact={to}
    onSelect={contact => setTo(contact)}
   />
   <Chat key={to.email} contact={to} />
  </div>
 )
}
const contacts = [
 { name: 'Taylor', email: 'taylor@mail.com' },
 { name: 'Alice', email: 'alice@mail.com' },
 { name: 'Bob', email: 'bob@mail.com' }
];

```


Show more

## Ready to learn this topic?

Read **[Preserving and Resetting State](/learn/preserving-and-resetting-state)** to learn the lifetime of state and how to control it.

[Read More](/learn/preserving-and-resetting-state)

## Extracting state logic into a reducer [](#extracting-state-logic-into-a-reducer "Link for Extracting state logic into a reducer ")

Components with many state updates spread across many event handlers can get overwhelming. For these cases, you can consolidate all the state update logic outside your component in a single function, called “reducer”. Your event handlers become concise because they only specify the user “actions”. At the bottom of the file, the reducer function specifies how the state should update in response to each action!

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useReducer } from 'react';
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';
export default function TaskApp() {
 const [tasks, dispatch] = useReducer(
  tasksReducer,
  initialTasks
 );
 function handleAddTask(text) {
  dispatch({
   type: 'added',
   id: nextId++,
   text: text,
  });
 }
 function handleChangeTask(task) {
  dispatch({
   type: 'changed',
   task: task
  });
 }
 function handleDeleteTask(taskId) {
  dispatch({
   type: 'deleted',
   id: taskId
  });
 }
 return (
  <>
   <h1>Prague itinerary</h1>
   <AddTask
    onAddTask={handleAddTask}
   />
   <TaskList
    tasks={tasks}
    onChangeTask={handleChangeTask}
    onDeleteTask={handleDeleteTask}
   />
  </>
 );
}
function tasksReducer(tasks, action) {
 switch (action.type) {
  case 'added': {
   return [...tasks, {
    id: action.id,
    text: action.text,
    done: false
   }];
  }
  case 'changed': {
   return tasks.map(t => {
    if (t.id === action.task.id) {
     return action.task;
    } else {
     return t;
    }
   });
  }
  case 'deleted': {
   return tasks.filter(t => t.id !== action.id);
  }
  default: {
   throw Error('Unknown action: ' + action.type);
  }
 }
}
let nextId = 3;
const initialTasks = [
 { id: 0, text: 'Visit Kafka Museum', done: true },
 { id: 1, text: 'Watch a puppet show', done: false },
 { id: 2, text: 'Lennon Wall pic', done: false }
];

```


Show more

## Ready to learn this topic?

Read **[Extracting State Logic into a Reducer](/learn/extracting-state-logic-into-a-reducer)** to learn how to consolidate logic in the reducer function.

[Read More](/learn/extracting-state-logic-into-a-reducer)

## Passing data deeply with context [](#passing-data-deeply-with-context "Link for Passing data deeply with context ")

Usually, you will pass information from a parent component to a child component via props. But passing props can become inconvenient if you need to pass some prop through many components, or if many components need the same information. Context lets the parent component make some information available to any component in the tree below it—no matter how deep it is—without passing it explicitly through props.

Here, the `Heading` component determines its heading level by “asking” the closest `Section` for its level. Each `Section` tracks its own level by asking the parent `Section` and adding one to it. Every `Section` provides information to all components below it without passing props—it does that through context.

App.jsSection.jsHeading.jsLevelContext.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import Heading from './Heading.js';
import Section from './Section.js';
export default function Page() {
 return (
  <Section>
   <Heading>Title</Heading>
   <Section>
    <Heading>Heading</Heading>
    <Heading>Heading</Heading>
    <Heading>Heading</Heading>
    <Section>
     <Heading>Sub-heading</Heading>
     <Heading>Sub-heading</Heading>
     <Heading>Sub-heading</Heading>
     <Section>
      <Heading>Sub-sub-heading</Heading>
      <Heading>Sub-sub-heading</Heading>
      <Heading>Sub-sub-heading</Heading>
     </Section>
    </Section>
   </Section>
  </Section>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Passing Data Deeply with Context](/learn/passing-data-deeply-with-context)** to learn about using context as an alternative to passing props.

[Read More](/learn/passing-data-deeply-with-context)

## Scaling up with reducer and context [](#scaling-up-with-reducer-and-context "Link for Scaling up with reducer and context ")

Reducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.

With this approach, a parent component with complex state manages it with a reducer. Other components anywhere deep in the tree can read its state via context. They can also dispatch actions to update that state.

App.jsTasksContext.jsAddTask.jsTaskList.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';
import { TasksProvider } from './TasksContext.js';
export default function TaskApp() {
 return (
  <TasksProvider>
   <h1>Day off in Kyoto</h1>
   <AddTask />
   <TaskList />
  </TasksProvider>
 );
}

```


## Ready to learn this topic?

Read **[Scaling Up with Reducer and Context](/learn/scaling-up-with-reducer-and-context)** to learn how state management scales in a growing app.

[Read More](/learn/scaling-up-with-reducer-and-context)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Reacting to Input with State](/learn/reacting-to-input-with-state) to start reading this chapter page by page!

Or, if you’re already familiar with these topics, why not read about [Escape Hatches](/learn/escape-hatches)?

[PreviousUpdating Arrays in State](/learn/updating-arrays-in-state)[NextReacting to Input with State](/learn/reacting-to-input-with-state)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Reacting to input with state ](#reacting-to-input-with-state)
  * [Choosing the state structure ](#choosing-the-state-structure)
  * [Sharing state between components ](#sharing-state-between-components)
  * [Preserving and resetting state ](#preserving-and-resetting-state)
  * [Extracting state logic into a reducer ](#extracting-state-logic-into-a-reducer)
  * [Passing data deeply with context ](#passing-data-deeply-with-context)
  * [Scaling up with reducer and context ](#scaling-up-with-reducer-and-context)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Escape Hatches[](#undefined "Link for this heading")

Advanced

Some of your components may need to control and synchronize with systems outside of React. For example, you might need to focus an input using the browser API, play and pause a video player implemented without React, or connect and listen to messages from a remote server. In this chapter, you’ll learn the escape hatches that let you “step outside” React and connect to external systems. Most of your application logic and data flow should not rely on these features.

### In this chapter

  * [How to “remember” information without re-rendering](/learn/referencing-values-with-refs)
  * [How to access DOM elements managed by React](/learn/manipulating-the-dom-with-refs)
  * [How to synchronize components with external systems](/learn/synchronizing-with-effects)
  * [How to remove unnecessary Effects from your components](/learn/you-might-not-need-an-effect)
  * [How an Effect’s lifecycle is different from a component’s](/learn/lifecycle-of-reactive-effects)
  * [How to prevent some values from re-triggering Effects](/learn/separating-events-from-effects)
  * [How to make your Effect re-run less often](/learn/removing-effect-dependencies)
  * [How to share logic between components](/learn/reusing-logic-with-custom-hooks)



## Referencing values with refs [](#referencing-values-with-refs "Link for Referencing values with refs ")

When you want a component to “remember” some information, but you don’t want that information to [trigger new renders](/learn/render-and-commit), you can use a _ref_ :

```


const ref = useRef(0);


```


Like state, refs are retained by React between re-renders. However, setting state re-renders a component. Changing a ref does not! You can access the current value of that ref through the `ref.current` property.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useRef } from 'react';
export default function Counter() {
 let ref = useRef(0);
 function handleClick() {
  ref.current = ref.current + 1;
  alert('You clicked ' + ref.current + ' times!');
 }
 return (
  <button onClick={handleClick}>
   Click me!
  </button>
 );
}

```


Show more

A ref is like a secret pocket of your component that React doesn’t track. For example, you can use refs to store [timeout IDs](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#return_value), [DOM elements](https://developer.mozilla.org/en-US/docs/Web/API/Element), and other objects that don’t impact the component’s rendering output.

## Ready to learn this topic?

Read **[Referencing Values with Refs](/learn/referencing-values-with-refs)** to learn how to use refs to remember information.

[Read More](/learn/referencing-values-with-refs)

## Manipulating the DOM with refs [](#manipulating-the-dom-with-refs "Link for Manipulating the DOM with refs ")

React automatically updates the DOM to match your render output, so your components won’t often need to manipulate it. However, sometimes you might need access to the DOM elements managed by React—for example, to focus a node, scroll to it, or measure its size and position. There is no built-in way to do those things in React, so you will need a ref to the DOM node. For example, clicking the button will focus the input using a ref:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useRef } from 'react';
export default function Form() {
 const inputRef = useRef(null);
 function handleClick() {
  inputRef.current.focus();
 }
 return (
  <>
   <input ref={inputRef} />
   <button onClick={handleClick}>
    Focus the input
   </button>
  </>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Manipulating the DOM with Refs](/learn/manipulating-the-dom-with-refs)** to learn how to access DOM elements managed by React.

[Read More](/learn/manipulating-the-dom-with-refs)

## Synchronizing with Effects [](#synchronizing-with-effects "Link for Synchronizing with Effects ")

Some components need to synchronize with external systems. For example, you might want to control a non-React component based on the React state, set up a server connection, or send an analytics log when a component appears on the screen. Unlike event handlers, which let you handle particular events, _Effects_ let you run some code after rendering. Use them to synchronize your component with a system outside of React.

Press Play/Pause a few times and see how the video player stays synchronized to the `isPlaying` prop value:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useRef, useEffect } from 'react';
function VideoPlayer({ src, isPlaying }) {
 const ref = useRef(null);
 useEffect(() => {
  if (isPlaying) {
   ref.current.play();
  } else {
   ref.current.pause();
  }
 }, [isPlaying]);
 return <video ref={ref} src={src} loop playsInline />;
}
export default function App() {
 const [isPlaying, setIsPlaying] = useState(false);
 return (
  <>
   <button onClick={() => setIsPlaying(!isPlaying)}>
    {isPlaying ? 'Pause' : 'Play'}
   </button>
   <VideoPlayer
    isPlaying={isPlaying}
    src="https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4"
   />
  </>
 );
}

```


Show more

Many Effects also “clean up” after themselves. For example, an Effect that sets up a connection to a chat server should return a _cleanup function_ that tells React how to disconnect your component from that server:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
export default function ChatRoom() {
 useEffect(() => {
  const connection = createConnection();
  connection.connect();
  return () => connection.disconnect();
 }, []);
 return <h1>Welcome to the chat!</h1>;
}

```


In development, React will immediately run and clean up your Effect one extra time. This is why you see `"✅ Connecting..."` printed twice. This ensures that you don’t forget to implement the cleanup function.

## Ready to learn this topic?

Read **[Synchronizing with Effects](/learn/synchronizing-with-effects)** to learn how to synchronize components with external systems.

[Read More](/learn/synchronizing-with-effects)

## You Might Not Need An Effect [](#you-might-not-need-an-effect "Link for You Might Not Need An Effect ")

Effects are an escape hatch from the React paradigm. They let you “step outside” of React and synchronize your components with some external system. If there is no external system involved (for example, if you want to update a component’s state when some props or state change), you shouldn’t need an Effect. Removing unnecessary Effects will make your code easier to follow, faster to run, and less error-prone.

There are two common cases in which you don’t need Effects:

  * **You don’t need Effects to transform data for rendering.**
  * **You don’t need Effects to handle user events.**



For example, you don’t need an Effect to adjust some state based on other state:

```


function Form() {

 const [firstName, setFirstName] = useState('Taylor');

 const [lastName, setLastName] = useState('Swift');

 // 🔴 Avoid: redundant state and unnecessary Effect

 const [fullName, setFullName] = useState('');

 useEffect(() => {

  setFullName(firstName + ' ' + lastName);

 }, [firstName, lastName]);

 // ...

}


```


Instead, calculate as much as you can while rendering:

```


function Form() {

 const [firstName, setFirstName] = useState('Taylor');

 const [lastName, setLastName] = useState('Swift');

 // ✅ Good: calculated during rendering

 const fullName = firstName + ' ' + lastName;

 // ...

}


```


However, you _do_ need Effects to synchronize with external systems.

## Ready to learn this topic?

Read **[You Might Not Need an Effect](/learn/you-might-not-need-an-effect)** to learn how to remove unnecessary Effects.

[Read More](/learn/you-might-not-need-an-effect)

## Lifecycle of reactive effects [](#lifecycle-of-reactive-effects "Link for Lifecycle of reactive effects ")

Effects have a different lifecycle from components. Components may mount, update, or unmount. An Effect can only do two things: to start synchronizing something, and later to stop synchronizing it. This cycle can happen multiple times if your Effect depends on props and state that change over time.

This Effect depends on the value of the `roomId` prop. Props are _reactive values,_ which means they can change on a re-render. Notice that the Effect _re-synchronizes_ (and re-connects to the server) if `roomId` changes:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId }) {
 useEffect(() => {
  const connection = createConnection(serverUrl, roomId);
  connection.connect();
  return () => connection.disconnect();
 }, [roomId]);
 return <h1>Welcome to the {roomId} room!</h1>;
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <hr />
   <ChatRoom roomId={roomId} />
  </>
 );
}

```


Show more

React provides a linter rule to check that you’ve specified your Effect’s dependencies correctly. If you forget to specify `roomId` in the list of dependencies in the above example, the linter will find that bug automatically.

## Ready to learn this topic?

Read **[Lifecycle of Reactive Events](/learn/lifecycle-of-reactive-effects)** to learn how an Effect’s lifecycle is different from a component’s.

[Read More](/learn/lifecycle-of-reactive-effects)

## Separating events from Effects [](#separating-events-from-effects "Link for Separating events from Effects ")

### Under Construction

This section describes an **experimental API that has not yet been released** in a stable version of React.

Event handlers only re-run when you perform the same interaction again. Unlike event handlers, Effects re-synchronize if any of the values they read, like props or state, are different than during last render. Sometimes, you want a mix of both behaviors: an Effect that re-runs in response to some values but not others.

All code inside Effects is _reactive._ It will run again if some reactive value it reads has changed due to a re-render. For example, this Effect will re-connect to the chat if either `roomId` or `theme` have changed:

App.jschat.jsnotifications.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection, sendMessage } from './chat.js';
import { showNotification } from './notifications.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId, theme }) {
 useEffect(() => {
  const connection = createConnection(serverUrl, roomId);
  connection.on('connected', () => {
   showNotification('Connected!', theme);
  });
  connection.connect();
  return () => connection.disconnect();
 }, [roomId, theme]);
 return <h1>Welcome to the {roomId} room!</h1>
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 const [isDark, setIsDark] = useState(false);
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <label>
    <input
     type="checkbox"
     checked={isDark}
     onChange={e => setIsDark(e.target.checked)}
    />
    Use dark theme
   </label>
   <hr />
   <ChatRoom
    roomId={roomId}
    theme={isDark ? 'dark' : 'light'} 
   />
  </>
 );
}

```


Show more

This is not ideal. You want to re-connect to the chat only if the `roomId` has changed. Switching the `theme` shouldn’t re-connect to the chat! Move the code reading `theme` out of your Effect into an _Effect Event_ :

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { experimental_useEffectEvent as useEffectEvent } from 'react';
import { createConnection, sendMessage } from './chat.js';
import { showNotification } from './notifications.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId, theme }) {
 const onConnected = useEffectEvent(() => {
  showNotification('Connected!', theme);
 });
 useEffect(() => {
  const connection = createConnection(serverUrl, roomId);
  connection.on('connected', () => {
   onConnected();
  });
  connection.connect();
  return () => connection.disconnect();
 }, [roomId]);
 return <h1>Welcome to the {roomId} room!</h1>
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 const [isDark, setIsDark] = useState(false);
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <label>
    <input
     type="checkbox"
     checked={isDark}
     onChange={e => setIsDark(e.target.checked)}
    />
    Use dark theme
   </label>
   <hr />
   <ChatRoom
    roomId={roomId}
    theme={isDark ? 'dark' : 'light'} 
   />
  </>
 );
}

```


Show more

Code inside Effect Events isn’t reactive, so changing the `theme` no longer makes your Effect re-connect.

## Ready to learn this topic?

Read **[Separating Events from Effects](/learn/separating-events-from-effects)** to learn how to prevent some values from re-triggering Effects.

[Read More](/learn/separating-events-from-effects)

## Removing Effect dependencies [](#removing-effect-dependencies "Link for Removing Effect dependencies ")

When you write an Effect, the linter will verify that you’ve included every reactive value (like props and state) that the Effect reads in the list of your Effect’s dependencies. This ensures that your Effect remains synchronized with the latest props and state of your component. Unnecessary dependencies may cause your Effect to run too often, or even create an infinite loop. The way you remove them depends on the case.

For example, this Effect depends on the `options` object which gets re-created every time you edit the input:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId }) {
 const [message, setMessage] = useState('');
 const options = {
  serverUrl: serverUrl,
  roomId: roomId
 };
 useEffect(() => {
  const connection = createConnection(options);
  connection.connect();
  return () => connection.disconnect();
 }, [options]);
 return (
  <>
   <h1>Welcome to the {roomId} room!</h1>
   <input value={message} onChange={e => setMessage(e.target.value)} />
  </>
 );
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <hr />
   <ChatRoom roomId={roomId} />
  </>
 );
}

```


Show more

You don’t want the chat to re-connect every time you start typing a message in that chat. To fix this problem, move creation of the `options` object inside the Effect so that the Effect only depends on the `roomId` string:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId }) {
 const [message, setMessage] = useState('');
 useEffect(() => {
  const options = {
   serverUrl: serverUrl,
   roomId: roomId
  };
  const connection = createConnection(options);
  connection.connect();
  return () => connection.disconnect();
 }, [roomId]);
 return (
  <>
   <h1>Welcome to the {roomId} room!</h1>
   <input value={message} onChange={e => setMessage(e.target.value)} />
  </>
 );
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <hr />
   <ChatRoom roomId={roomId} />
  </>
 );
}

```


Show more

Notice that you didn’t start by editing the dependency list to remove the `options` dependency. That would be wrong. Instead, you changed the surrounding code so that the dependency became _unnecessary._ Think of the dependency list as a list of all the reactive values used by your Effect’s code. You don’t intentionally choose what to put on that list. The list describes your code. To change the dependency list, change the code.

## Ready to learn this topic?

Read **[Removing Effect Dependencies](/learn/removing-effect-dependencies)** to learn how to make your Effect re-run less often.

[Read More](/learn/removing-effect-dependencies)

## Reusing logic with custom Hooks [](#reusing-logic-with-custom-hooks "Link for Reusing logic with custom Hooks ")

React comes with built-in Hooks like `useState`, `useContext`, and `useEffect`. Sometimes, you’ll wish that there was a Hook for some more specific purpose: for example, to fetch data, to keep track of whether the user is online, or to connect to a chat room. To do this, you can create your own Hooks for your application’s needs.

In this example, the `usePointerPosition` custom Hook tracks the cursor position, while `useDelayedValue` custom Hook returns a value that’s “lagging behind” the value you passed by a certain number of milliseconds. Move the cursor over the sandbox preview area to see a moving trail of dots following the cursor:

App.jsusePointerPosition.jsuseDelayedValue.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { usePointerPosition } from './usePointerPosition.js';
import { useDelayedValue } from './useDelayedValue.js';
export default function Canvas() {
 const pos1 = usePointerPosition();
 const pos2 = useDelayedValue(pos1, 100);
 const pos3 = useDelayedValue(pos2, 200);
 const pos4 = useDelayedValue(pos3, 100);
 const pos5 = useDelayedValue(pos4, 50);
 return (
  <>
   <Dot position={pos1} opacity={1} />
   <Dot position={pos2} opacity={0.8} />
   <Dot position={pos3} opacity={0.6} />
   <Dot position={pos4} opacity={0.4} />
   <Dot position={pos5} opacity={0.2} />
  </>
 );
}
function Dot({ position, opacity }) {
 return (
  <div style={{
   position: 'absolute',
   backgroundColor: 'pink',
   borderRadius: '50%',
   opacity,
   transform: `translate(${position.x}px, ${position.y}px)`,
   pointerEvents: 'none',
   left: -20,
   top: -20,
   width: 40,
   height: 40,
  }} />
 );
}

```


Show more

You can create custom Hooks, compose them together, pass data between them, and reuse them between components. As your app grows, you will write fewer Effects by hand because you’ll be able to reuse custom Hooks you already wrote. There are also many excellent custom Hooks maintained by the React community.

## Ready to learn this topic?

Read **[Reusing Logic with Custom Hooks](/learn/reusing-logic-with-custom-hooks)** to learn how to share logic between components.

[Read More](/learn/reusing-logic-with-custom-hooks)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Referencing Values with Refs](/learn/referencing-values-with-refs) to start reading this chapter page by page!

[PreviousScaling Up with Reducer and Context](/learn/scaling-up-with-reducer-and-context)[NextReferencing Values with Refs](/learn/referencing-values-with-refs)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Referencing values with refs ](#referencing-values-with-refs)
  * [Manipulating the DOM with refs ](#manipulating-the-dom-with-refs)
  * [Synchronizing with Effects ](#synchronizing-with-effects)
  * [You Might Not Need An Effect ](#you-might-not-need-an-effect)
  * [Lifecycle of reactive effects ](#lifecycle-of-reactive-effects)
  * [Separating events from Effects ](#separating-events-from-effects)
  * [Removing Effect dependencies ](#removing-effect-dependencies)
  * [Reusing logic with custom Hooks ](#reusing-logic-with-custom-hooks)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### react@19

  * [Overview ](/reference/react "Overview")
  * [Hooks ](/reference/react/hooks "Hooks")

    * [useActionState ](/reference/react/useActionState "useActionState")
    * [useCallback ](/reference/react/useCallback "useCallback")
    * [useContext ](/reference/react/useContext "useContext")
    * [useDebugValue ](/reference/react/useDebugValue "useDebugValue")
    * [useDeferredValue ](/reference/react/useDeferredValue "useDeferredValue")
    * [useEffect ](/reference/react/useEffect "useEffect")
    * [useId ](/reference/react/useId "useId")
    * [useImperativeHandle ](/reference/react/useImperativeHandle "useImperativeHandle")
    * [useInsertionEffect ](/reference/react/useInsertionEffect "useInsertionEffect")
    * [useLayoutEffect ](/reference/react/useLayoutEffect "useLayoutEffect")
    * [useMemo ](/reference/react/useMemo "useMemo")
    * [useOptimistic ](/reference/react/useOptimistic "useOptimistic")
    * [useReducer ](/reference/react/useReducer "useReducer")
    * [useRef ](/reference/react/useRef "useRef")
    * [useState ](/reference/react/useState "useState")
    * [useSyncExternalStore ](/reference/react/useSyncExternalStore "useSyncExternalStore")
    * [useTransition ](/reference/react/useTransition "useTransition")

  * [Components ](/reference/react/components "Components")

    * [<Fragment> (<>) ](/reference/react/Fragment "<Fragment> \(<>\)")
    * [<Profiler> ](/reference/react/Profiler "<Profiler>")
    * [<StrictMode> ](/reference/react/StrictMode "<StrictMode>")
    * [<Suspense> ](/reference/react/Suspense "<Suspense>")

  * [APIs ](/reference/react/apis "APIs")

    * [act ](/reference/react/act "act")
    * [cache ](/reference/react/cache "cache")
    * [createContext ](/reference/react/createContext "createContext")
    * [lazy ](/reference/react/lazy "lazy")
    * [memo ](/reference/react/memo "memo")
    * [startTransition ](/reference/react/startTransition "startTransition")
    * [use ](/reference/react/use "use")
    * [experimental_taintObjectReference  - This feature is available in the latest Canary](/reference/react/experimental_taintObjectReference "experimental_taintObjectReference")
    * [experimental_taintUniqueValue  - This feature is available in the latest Canary](/reference/react/experimental_taintUniqueValue "experimental_taintUniqueValue")

### react-dom@19

  * [Hooks ](/reference/react-dom/hooks "Hooks")

    * [useFormStatus ](/reference/react-dom/hooks/useFormStatus "useFormStatus")

  * [Components ](/reference/react-dom/components "Components")

    * [Common (e.g. <div>) ](/reference/react-dom/components/common "Common \(e.g. <div>\)")
    * [<form> ](/reference/react-dom/components/form "<form>")
    * [<input> ](/reference/react-dom/components/input "<input>")
    * [<option> ](/reference/react-dom/components/option "<option>")
    * [<progress> ](/reference/react-dom/components/progress "<progress>")
    * [<select> ](/reference/react-dom/components/select "<select>")
    * [<textarea> ](/reference/react-dom/components/textarea "<textarea>")
    * [<link> ](/reference/react-dom/components/link "<link>")
    * [<meta> ](/reference/react-dom/components/meta "<meta>")
    * [<script> ](/reference/react-dom/components/script "<script>")
    * [<style> ](/reference/react-dom/components/style "<style>")
    * [<title> ](/reference/react-dom/components/title "<title>")

  * [APIs ](/reference/react-dom "APIs")

    * [createPortal ](/reference/react-dom/createPortal "createPortal")
    * [flushSync ](/reference/react-dom/flushSync "flushSync")
    * [preconnect ](/reference/react-dom/preconnect "preconnect")
    * [prefetchDNS ](/reference/react-dom/prefetchDNS "prefetchDNS")
    * [preinit ](/reference/react-dom/preinit "preinit")
    * [preinitModule ](/reference/react-dom/preinitModule "preinitModule")
    * [preload ](/reference/react-dom/preload "preload")
    * [preloadModule ](/reference/react-dom/preloadModule "preloadModule")

  * [Client APIs ](/reference/react-dom/client "Client APIs")

    * [createRoot ](/reference/react-dom/client/createRoot "createRoot")
    * [hydrateRoot ](/reference/react-dom/client/hydrateRoot "hydrateRoot")

  * [Server APIs ](/reference/react-dom/server "Server APIs")

    * [renderToPipeableStream ](/reference/react-dom/server/renderToPipeableStream "renderToPipeableStream")
    * [renderToReadableStream ](/reference/react-dom/server/renderToReadableStream "renderToReadableStream")
    * [renderToStaticMarkup ](/reference/react-dom/server/renderToStaticMarkup "renderToStaticMarkup")
    * [renderToString ](/reference/react-dom/server/renderToString "renderToString")

  * [Static APIs ](/reference/react-dom/static "Static APIs")

    * [prerender ](/reference/react-dom/static/prerender "prerender")
    * [prerenderToNodeStream ](/reference/react-dom/static/prerenderToNodeStream "prerenderToNodeStream")

### Rules of React

  * [Overview ](/reference/rules "Overview")

    * [Components and Hooks must be pure ](/reference/rules/components-and-hooks-must-be-pure "Components and Hooks must be pure")
    * [React calls Components and Hooks ](/reference/rules/react-calls-components-and-hooks "React calls Components and Hooks")
    * [Rules of Hooks ](/reference/rules/rules-of-hooks "Rules of Hooks")

### React Server Components

  * [Server Components ](/reference/rsc/server-components "Server Components")
  * [Server Functions ](/reference/rsc/server-functions "Server Functions")
  * [Directives ](/reference/rsc/directives "Directives")

    * ['use client' ](/reference/rsc/use-client "'use client'")
    * ['use server' ](/reference/rsc/use-server "'use server'")

### Legacy APIs

  * [Legacy React APIs ](/reference/react/legacy "Legacy React APIs")

    * [Children ](/reference/react/Children "Children")
    * [cloneElement ](/reference/react/cloneElement "cloneElement")
    * [Component ](/reference/react/Component "Component")
    * [createElement ](/reference/react/createElement "createElement")
    * [createRef ](/reference/react/createRef "createRef")
    * [forwardRef ](/reference/react/forwardRef "forwardRef")
    * [isValidElement ](/reference/react/isValidElement "isValidElement")
    * [PureComponent ](/reference/react/PureComponent "PureComponent")




Is this page useful?

[API Reference](/reference/react)

# React DOM APIs[](#undefined "Link for this heading")

The `react-dom` package contains methods that are only supported for the web applications (which run in the browser DOM environment). They are not supported for React Native.

## APIs [](#apis "Link for APIs ")

These APIs can be imported from your components. They are rarely used:

  * `createPortal`[](/reference/react-dom/createPortal) lets you render child components in a different part of the DOM tree.
  * `flushSync`[](/reference/react-dom/flushSync) lets you force React to flush a state update and update the DOM synchronously.



## Resource Preloading APIs [](#resource-preloading-apis "Link for Resource Preloading APIs ")

These APIs can be used to make apps faster by pre-loading resources such as scripts, stylesheets, and fonts as soon as you know you need them, for example before navigating to another page where the resources will be used.

[React-based frameworks](/learn/start-a-new-react-project) frequently handle resource loading for you, so you might not have to call these APIs yourself. Consult your framework’s documentation for details.

  * `prefetchDNS`[](/reference/react-dom/prefetchDNS) lets you prefetch the IP address of a DNS domain name that you expect to connect to.
  * `preconnect`[](/reference/react-dom/preconnect) lets you connect to a server you expect to request resources from, even if you don’t know what resources you’ll need yet.
  * `preload`[](/reference/react-dom/preload) lets you fetch a stylesheet, font, image, or external script that you expect to use.
  * `preloadModule`[](/reference/react-dom/preloadModule) lets you fetch an ESM module that you expect to use.
  * `preinit`[](/reference/react-dom/preinit) lets you fetch and evaluate an external script or fetch and insert a stylesheet.
  * `preinitModule`[](/reference/react-dom/preinitModule) lets you fetch and evaluate an ESM module.



## Entry points [](#entry-points "Link for Entry points ")

The `react-dom` package provides two additional entry points:

  * `react-dom/client`[](/reference/react-dom/client) contains APIs to render React components on the client (in the browser).
  * `react-dom/server`[](/reference/react-dom/server) contains APIs to render React components on the server.



## Removed APIs [](#removed-apis "Link for Removed APIs ")

These APIs were removed in React 19:

  * `findDOMNode`[](https://18.react.dev/reference/react-dom/findDOMNode): see [alternatives](https://18.react.dev/reference/react-dom/findDOMNode#alternatives).
  * `hydrate`[](https://18.react.dev/reference/react-dom/hydrate): use `hydrateRoot`[](/reference/react-dom/client/hydrateRoot) instead.
  * `render`[](https://18.react.dev/reference/react-dom/render): use `createRoot`[](/reference/react-dom/client/createRoot) instead.
  * `unmountComponentAtNode`[](/reference/react-dom/unmountComponentAtNode): use `root.unmount()`[](/reference/react-dom/client/createRoot#root-unmount) instead.
  * `renderToNodeStream`[](https://18.react.dev/reference/react-dom/server/renderToNodeStream): use `react-dom/server`[](/reference/react-dom/server) APIs instead.
  * `renderToStaticNodeStream`[](https://18.react.dev/reference/react-dom/server/renderToStaticNodeStream): use `react-dom/server`[](/reference/react-dom/server) APIs instead.



[Previous<title>](/reference/react-dom/components/title)[NextcreatePortal](/reference/react-dom/createPortal)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [APIs ](#apis)
  * [Resource Preloading APIs ](#resource-preloading-apis)
  * [Entry points ](#entry-points)
  * [Removed APIs ](#removed-apis)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Meet the Team[](#undefined "Link for this heading")

React development is led by a dedicated team working full time at Meta. It also receives contributions from people all over the world.

## React Core [](#react-core "Link for React Core ")

The React Core team members work full time on the core component APIs, the engine that powers React DOM and React Native, React DevTools, and the React documentation website.

Current members of the React team are listed in alphabetical order below.

### Andrew Clark[](#andrew-clark "Link for Andrew Clark")

Engineer at Vercel

Andrew got started with web development by making sites with WordPress, and eventually tricked himself into doing JavaScript. His favorite pastime is karaoke. Andrew is either a Disney villain or a Disney princess, depending on the day.

[acdlite](https://threads.net/acdlite)

[ acdlite](https://github.com/acdlite)

### Dan Abramov[](#dan-abramov "Link for Dan Abramov")

Independent Engineer

Dan got into programming after he accidentally discovered Visual Basic inside Microsoft PowerPoint. He has found his true calling in turning [Sebastian](#sebastian-markb%C3%A5ge)’s tweets into long-form blog posts. Dan occasionally wins at Fortnite by hiding in a bush until the game ends.

[danabra.mov](https://bsky.app/profile/danabra.mov)

[ gaearon](https://github.com/gaearon)

### Eli White[](#eli-white "Link for Eli White")

Engineering Manager at Meta

Eli got into programming after he got suspended from middle school for hacking. He has been working on React and React Native since 2017. He enjoys eating treats, especially ice cream and apple pie. You can find Eli trying quirky activities like parkour, indoor skydiving, and aerial silks.

[elicwhite](https://threads.net/elicwhite)

[ TheSavior](https://github.com/TheSavior)

### Jack Pope[](#jack-pope "Link for Jack Pope")

Engineer at Meta

Shortly after being introduced to AutoHotkey, Jack had written scripts to automate everything he could think of. When reaching limitations there, he dove headfirst into web app development and hasn’t looked back. Most recently, Jack worked on the web platform at Instagram before moving to React. His favorite programming language is JSX.

[ jackpope](https://github.com/jackpope)

[ jackpope.me](https://jackpope.me)

### Jason Bonta[](#jason-bonta "Link for Jason Bonta")

Engineering Manager at Meta

Jason abandoned embedded C for a career in front-end engineering and never looked back. Armed with esoteric CSS knowledge and a passion for beautiful UI, Jason joined Facebook in 2010, where he now feels privileged to have seen JavaScript development come of age. Though he may not understand how `for...of` loops work, he loves getting to work with brilliant people on projects that enable amazing UX.

[someextent](https://threads.net/someextent)

### Joe Savona[](#joe-savona "Link for Joe Savona")

Engineer at Meta

Joe was planning to major in math and philosophy but got into computer science after writing physics simulations in Matlab. Prior to React, he worked on Relay, RSocket.js, and the Skip programming language. While he’s not building some sort of reactive system he enjoys running, studying Japanese, and spending time with his family.

[joesavona](https://threads.net/joesavona)

[ josephsavona](https://github.com/josephsavona)

### Josh Story[](#josh-story "Link for Josh Story")

Engineer at Vercel

Josh majored in Mathematics and discovered programming while in college. His first professional developer job was to program insurance rate calculations in Microsoft Excel, the paragon of Reactive Programming which must be why he now works on React. In between that time Josh has been an IC, Manager, and Executive at a few startups. outside of work he likes to push his limits with cooking.

[storyhb.com](https://bsky.app/profile/storyhb.com)

[ gnoff](https://github.com/gnoff)

### Lauren Tan[](#lauren-tan "Link for Lauren Tan")

Engineer at Meta

Lauren’s programming career peaked when she first discovered the `<marquee>` tag. She’s been chasing that high ever since. She studied Finance instead of CS in college, so she learned to code using Excel. Lauren enjoys dropping cheeky memes in chat, playing video games with her partner, learning Korean, and petting her dog Zelda.

[potetotes](https://threads.net/potetotes)

[no.lol](https://bsky.app/profile/no.lol)

[ poteto](https://github.com/poteto)

### Luna Wei[](#luna-wei "Link for Luna Wei")

Engineer at Meta

Luna first learnt the fundamentals of python at the age of 6 from her father. Since then, she has been unstoppable. Luna aspires to be a gen z, and the road to success is paved with environmental advocacy, urban gardening and lots of quality time with her Voo-Doo’d (as pictured).

[lunaleaps](https://threads.net/lunaleaps)

[ lunaleaps](https://github.com/lunaleaps)

### Matt Carroll[](#matt-carroll "Link for Matt Carroll")

Developer Advocate at Meta

Matt stumbled into coding, and since then, has become enamored with creating things in communities that can’t be created alone. Prior to React, he worked on YouTube, the Google Assistant, Fuchsia, and Google Cloud AI and Evernote. When he’s not trying to make better developer tools he enjoys the mountains, jazz, and spending time with his family.

[mattcarrollcode](https://threads.net/mattcarrollcode)

[ mattcarrollcode](https://github.com/mattcarrollcode)

### Mofei Zhang[](#mofei-zhang "Link for Mofei Zhang")

Engineer at Meta

Mofei started programming when she realized it can help her cheat in video games. She focused on operating systems in undergrad / grad school, but now finds herself happily tinkering on React. Outside of work, she enjoys debugging bouldering problems and planning her next backpacking trip(s).

[z_mofei](https://threads.net/z_mofei)

[ mofeiZ](https://github.com/mofeiZ)

### Noah Lemen[](#noah-lemen "Link for Noah Lemen")

Engineer at Meta

Noah’s interest in UI programming sparked during his education in music technology at NYU. At Meta, he’s worked on internal tools, browsers, web performance, and is currently focused on React. Outside of work, Noah can be found tinkering with synthesizers or spending time with his cat.

[noahlemen](https://threads.net/noahlemen)

[ noahlemen](https://github.com/noahlemen)

[ noahle.men](https://noahle.men)

### Rick Hanlon[](#rick-hanlon "Link for Rick Hanlon")

Engineer at Meta

Ricky majored in theoretical math and somehow found himself on the React Native team for a couple years before joining the React team. When he’s not programming you can find him snowboarding, biking, climbing, golfing, or closing GitHub issues that do not match the issue template.

[rickhanlonii](https://threads.net/rickhanlonii)

[ricky.fm](https://bsky.app/profile/ricky.fm)

[ rickhanlonii](https://github.com/rickhanlonii)

### Ruslan Lesiutin[](#ruslan-lesiutin "Link for Ruslan Lesiutin")

Engineer at Meta

Ruslan’s introduction to UI programming started when he was a kid by manually editing HTML templates for his custom gaming forums. Somehow, he ended up majoring in Computer Science. He enjoys music, games, and memes. Mostly memes.

[lesiutin](https://threads.net/lesiutin)

[ hoxyq](https://github.com/hoxyq)

### Sathya Gunasekaran [](#sathya-gunasekaran "Link for Sathya Gunasekaran ")

Engineer at Meta

Sathya hated the Dragon Book in school but somehow ended up working on compilers all his career. When he’s not compiling React components, he’s either drinking coffee or eating yet another Dosa.

[gsathya.03](https://threads.net/gsathya.03)

[ gsathya](https://github.com/gsathya)

### Sebastian Markbåge[](#sebastian-markbåge "Link for Sebastian Markbåge")

Engineer at Vercel

Sebastian majored in psychology. He’s usually quiet. Even when he says something, it often doesn’t make sense to the rest of us until a few months later. The correct way to pronounce his surname is “mark-boa-geh” but he settled for “mark-beige” out of pragmatism — and that’s how he approaches React.

[sebmarkbage](https://threads.net/sebmarkbage)

[ sebmarkbage](https://github.com/sebmarkbage)

### Sebastian Silbermann[](#sebastian-silbermann "Link for Sebastian Silbermann")

Engineer at Vercel

Sebastian learned programming to make the browser games he played during class more enjoyable. Eventually this lead to contributing to as much open source code as possible. Outside of coding he’s busy making sure people don’t confuse him with the other Sebastians and Zilberman of the React community.

[sebsilbermann](https://threads.net/sebsilbermann)

[ eps1lon](https://github.com/eps1lon)

### Seth Webster[](#seth-webster "Link for Seth Webster")

Engineering Manager at Meta

Seth started programming as a kid growing up in Tucson, AZ. After school, he was bitten by the music bug and was a touring musician for about 10 years before returning to _work_ , starting with Intuit. In his spare time, he loves [taking pictures](https://www.sethwebster.com) and flying for animal rescues in the northeastern United States.

[sethwebster](https://threads.net/sethwebster)

[ sethwebster](https://github.com/sethwebster)

[ sethwebster.com](https://sethwebster.com)

### Sophie Alpert[](#sophie-alpert "Link for Sophie Alpert")

Independent Engineer

Four days after React was released, Sophie rewrote the entirety of her then-current project to use it, which she now realizes was perhaps a bit reckless. After she became the project’s #1 committer, she wondered why she wasn’t getting paid by Facebook like everyone else was and joined the team officially to lead React through its adolescent years. Though she quit that job years ago, somehow she’s still in the team’s group chats and “providing value”.

[sophiebits](https://threads.net/sophiebits)

[ sophiebits](https://github.com/sophiebits)

[ sophiebits.com](https://sophiebits.com)

### Tianyu Yao[](#tianyu-yao "Link for Tianyu Yao")

Engineer at Meta

Tianyu’s interest in computers started as a kid because he loves video games. So he majored in computer science and still plays childish games like League of Legends. When he is not in front of a computer, he enjoys playing with his two kittens, hiking and kayaking.

[ tyao1](https://github.com/tyao1)

### Yuzhi Zheng[](#yuzhi-zheng "Link for Yuzhi Zheng")

Engineering Manager at Meta

Yuzhi studied Computer Science in school. She liked the instant gratification of seeing code come to life without having to physically be in a laboratory. Now she’s a manager in the React org. Before management, she used to work on the Relay data fetching framework. In her spare time, Yuzhi enjoys optimizing her life via gardening and home improvement projects.

[yuzhiz](https://threads.net/yuzhiz)

[ yuzhi](https://github.com/yuzhi)

## Past contributors [](#past-contributors "Link for Past contributors ")

You can find the past team members and other people who significantly contributed to React over the years on the [acknowledgements](/community/acknowledgements) page.

[PreviousReact Videos](/community/videos)[NextDocs Contributors](/community/docs-contributors)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [React Core ](#react-core)
  * [Andrew Clark](#andrew-clark)
  * [Dan Abramov](#dan-abramov)
  * [Eli White](#eli-white)
  * [Jack Pope](#jack-pope)
  * [Jason Bonta](#jason-bonta)
  * [Joe Savona](#joe-savona)
  * [Josh Story](#josh-story)
  * [Lauren Tan](#lauren-tan)
  * [Luna Wei](#luna-wei)
  * [Matt Carroll](#matt-carroll)
  * [Mofei Zhang](#mofei-zhang)
  * [Noah Lemen](#noah-lemen)
  * [Rick Hanlon](#rick-hanlon)
  * [Ruslan Lesiutin](#ruslan-lesiutin)
  * [Sathya Gunasekaran ](#sathya-gunasekaran)
  * [Sebastian Markbåge](#sebastian-markbåge)
  * [Sebastian Silbermann](#sebastian-silbermann)
  * [Seth Webster](#seth-webster)
  * [Sophie Alpert](#sophie-alpert)
  * [Tianyu Yao](#tianyu-yao)
  * [Yuzhi Zheng](#yuzhi-zheng)
  * [Past contributors ](#past-contributors)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Docs Contributors[](#undefined "Link for this heading")

React documentation is written and maintained by the [React team](/community/team) and [external contributors.](https://github.com/reactjs/react.dev/graphs/contributors) On this page, we’d like to thank a few people who’ve made significant contributions to this site.

## Content [](#content "Link for Content ")

  * : editing, writing, illustrating
  * : writing, curriculum design
  * : example code
  * : writing
  * : writing
  * : writing
  * : writing
  * : writing
  * : editing, writing
  * : reviews, advice
  * : feedback



## Design [](#design "Link for Design ")

  * : site design
  * [Razvan Gradinar](https://dribbble.com/GradinarRazvan): sandbox design
  * [Maggie Appleton](https://maggieappleton.com/): diagram system
  * : color-coded explanations



## Development [](#development "Link for Development ")

  * : site development
  * [ThisDotLabs](https://www.thisdot.co/) (, ): site development
  * [CodeSandbox](https://codesandbox.io/) (, , , ): sandbox integration
  * : site development
  * : site development
  * [Harish Kumar](https://www.strek.in/): development and maintenance
  * : sandbox improvements



We’d also like to thank countless alpha testers and community members who gave us feedback along the way.

[PreviousMeet the Team](/community/team)[NextTranslations](/community/translations)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Content ](#content)
  * [Design ](#design)
  * [Development ](#development)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Acknowledgements[](#undefined "Link for this heading")

React was originally created by [Jordan Walke.](https://github.com/jordwalke) Today, React has a [dedicated full-time team working on it](/community/team), as well as over a thousand [open source contributors.](https://github.com/facebook/react/graphs/contributors)

## Past contributors [](#past-contributors "Link for Past contributors ")

We’d like to recognize a few people who have made significant contributions to React and its documentation in the past and have helped maintain them over the years:

  * [Almero Steyn](https://github.com/AlmeroSteyn)
  * [Andreas Svensson](https://github.com/syranide)
  * [Alex Krolick](https://github.com/alexkrolick)
  * [Alexey Pyltsyn](https://github.com/lex111)
  * [Andrey Lunyov](https://github.com/alunyov)
  * [Brandon Dail](https://github.com/aweary)
  * [Brian Vaughn](https://github.com/bvaughn)
  * [Caleb Meredith](https://github.com/calebmer)
  * [Chang Yan](https://github.com/cyan33)
  * [Cheng Lou](https://github.com/chenglou)
  * [Christoph Nakazawa](https://github.com/cpojer)
  * [Christopher Chedeau](https://github.com/vjeux)
  * [Clement Hoang](https://github.com/clemmy)
  * [Dave McCabe](https://github.com/davidmccabe)
  * [Dominic Gannaway](https://github.com/trueadm)
  * [Flarnie Marchan](https://github.com/flarnie)
  * [Jason Quense](https://github.com/jquense)
  * [Jesse Beach](https://github.com/jessebeach)
  * [Jessica Franco](https://github.com/Jessidhia)
  * [Jim Sproch](https://github.com/jimfb)
  * [Josh Duck](https://github.com/joshduck)
  * [Joe Critchley](https://github.com/joecritch)
  * [Jeff Morrison](https://github.com/jeffmo)
  * [Luna Ruan](https://github.com/lunaruan)
  * [Kathryn Middleton](https://github.com/kmiddleton14)
  * [Keyan Zhang](https://github.com/keyz)
  * [Marco Salazar](https://github.com/salazarm)
  * [Mengdi Chen](https://github.com/mondaychen)
  * [Nat Alison](https://github.com/tesseralis)
  * [Nathan Hunzaker](https://github.com/nhunzaker)
  * [Nicolas Gallagher](https://github.com/necolas)
  * [Paul O’Shannessy](https://github.com/zpao)
  * [Pete Hunt](https://github.com/petehunt)
  * [Philipp Spiess](https://github.com/philipp-spiess)
  * [Rachel Nabors](https://github.com/rachelnabors)
  * [Robert Zhang](https://github.com/robertzhidealx)
  * [Samuel Susla](https://github.com/sammy-SC)
  * [Sander Spies](https://github.com/sanderspies)
  * [Sasha Aickin](https://github.com/aickin)
  * [Sean Keegan](https://github.com/seanryankeegan)
  * [Sophia Shoemaker](https://github.com/mrscobbler)
  * [Sunil Pai](https://github.com/threepointone)
  * [Tim Yung](https://github.com/yungsters)
  * [Xuan Huang](https://github.com/huxpro)



This list is not exhaustive.

We’d like to give special thanks to [Tom Occhino](https://github.com/tomocchino) and [Adam Wolff](https://github.com/wolffiex) for their guidance and support over the years. We are also thankful to all the volunteers who [translated React into other languages.](https://translations.react.dev/)

## Additional Thanks [](#additional-thanks "Link for Additional Thanks ")

Additionally, we’re grateful to:

  * [Jeff Barczewski](https://github.com/jeffbski) for allowing us to use the `react` package name on npm
  * [Christopher Aue](https://christopheraue.net/) for letting us use the reactjs.com domain name and the username on Twitter
  * [ProjectMoon](https://github.com/ProjectMoon) for letting us use the [flux](https://www.npmjs.com/package/flux) package name on npm
  * Shane Anderson for allowing us to use the [react](https://github.com/react) org on GitHub



[PreviousTranslations](/community/translations)[NextVersioning Policy](/community/versioning-policy)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Past contributors ](#past-contributors)
  * [Additional Thanks ](#additional-thanks)


[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact%2Freleases)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact%2Freleases)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Freleases%2Findex&source=header-repo&source_repo=facebook%2Freact) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ facebook ](/facebook) / **[react](/facebook/react) ** Public

  * [ Notifications ](/login?return_to=%2Ffacebook%2Freact) You must be signed in to change notification settings
  * [ Fork 47.2k ](/login?return_to=%2Ffacebook%2Freact)
  * [ Star  231k ](/login?return_to=%2Ffacebook%2Freact)




  * [ Code ](/facebook/react)
  * [ Issues 758 ](/facebook/react/issues)
  * [ Pull requests 168 ](/facebook/react/pulls)
  * [ Actions ](/facebook/react/actions)
  * [ Projects 0 ](/facebook/react/projects)
  * [ Wiki ](/facebook/react/wiki)
  * [ Security ](/facebook/react/security)
  * [ Insights ](/facebook/react/pulse)



Additional navigation options

  * [ Code  ](/facebook/react)
  * [ Issues  ](/facebook/react/issues)
  * [ Pull requests  ](/facebook/react/pulls)
  * [ Actions  ](/facebook/react/actions)
  * [ Projects  ](/facebook/react/projects)
  * [ Wiki  ](/facebook/react/wiki)
  * [ Security  ](/facebook/react/security)
  * [ Insights  ](/facebook/react/pulse)



# Releases: facebook/react

[Releases](/facebook/react/releases) [Tags](/facebook/react/tags)

Releases · facebook/react

## 19.0.0 (December 5, 2024)

05 Dec 21:05 

[jackpope](/jackpope)

[ v19.0.0  ](/facebook/react/tree/v19.0.0)

[ `7aa5dda`](/facebook/react/commit/7aa5dda3b3e4c2baa905a59b922ae7ec14734b24)

This commit was created on GitHub.com and signed with GitHub’s **verified signature**. 

GPG key ID: B5690EEEBB952194 [Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v19.0.0)

Loading

[View all tags](/facebook/react/tags)

[19.0.0 (December 5, 2024)](/facebook/react/releases/tag/v19.0.0) [Latest](/facebook/react/releases/latest)

[Latest](/facebook/react/releases/latest)

Below is a list of all new features, APIs, deprecations, and breaking changes. Read [React 19 release post](https://react.dev/blog/2024/04/25/react-19) and [React 19 upgrade guide](https://react.dev/blog/2024/04/25/react-19-upgrade-guide) for more information.

> Note: To help make the upgrade to React 19 easier, we’ve published a react@18.3 release that is identical to 18.2 but adds warnings for deprecated APIs and other changes that are needed for React 19. We recommend upgrading to React 18.3.1 first to help identify any issues before upgrading to React 19.

## New Features

### React

  * Actions: `startTransition` can now accept async functions. Functions passed to `startTransition` are called “Actions”. A given Transition can include one or more Actions which update state in the background and update the UI with one commit. In addition to updating state, Actions can now perform side effects including async requests, and the Action will wait for the work to finish before finishing the Transition. This feature allows Transitions to include side effects like `fetch()` in the pending state, and provides support for error handling, and optimistic updates.
  * `useActionState`: is a new hook to order Actions inside of a Transition with access to the state of the action, and the pending state. It accepts a reducer that can call Actions, and the initial state used for first render. It also accepts an optional string that is used if the action is passed to a form `action` prop to support progressive enhancement in forms.
  * `useOptimistic`: is a new hook to update state while a Transition is in progress. It returns the state, and a set function that can be called inside a transition to “optimistically” update the state to expected final value immediately while the Transition completes in the background. When the transition finishes, the state is updated to the new value.
  * `use`: is a new API that allows reading resources in render. In React 19, `use` accepts a promise or Context. If provided a promise, `use` will suspend until a value is resolved. `use` can only be used in render but can be called conditionally.
  * `ref` as a prop: Refs can now be used as props, removing the need for `forwardRef`.
  * **Suspense sibling pre-warming** : When a component suspends, React will immediately commit the fallback of the nearest Suspense boundary, without waiting for the entire sibling tree to render. After the fallback commits, React will schedule another render for the suspended siblings to “pre-warm” lazy requests.



### React DOM Client

  * `<form> action` prop: Form Actions allow you to manage forms automatically and integrate with `useFormStatus`. When a `<form> action` succeeds, React will automatically reset the form for uncontrolled components. The form can be reset manually with the new `requestFormReset` API.
  * `<button> and <input> formAction` prop: Actions can be passed to the `formAction` prop to configure form submission behavior. This allows using different Actions depending on the input.
  * `useFormStatus`: is a new hook that provides the status of the parent `<form> action`, as if the form was a Context provider. The hook returns the values: `pending`, `data`, `method`, and `action`.
  * Support for Document Metadata: We’ve added support for rendering document metadata tags in components natively. React will automatically hoist them into the `<head>` section of the document.
  * Support for Stylesheets: React 19 will ensure stylesheets are inserted into the `<head>` on the client before revealing the content of a Suspense boundary that depends on that stylesheet.
  * Support for async scripts: Async scripts can be rendered anywhere in the component tree and React will handle ordering and deduplication.
  * Support for preloading resources: React 19 ships with `preinit`, `preload`, `prefetchDNS`, and `preconnect` APIs to optimize initial page loads by moving discovery of additional resources like fonts out of stylesheet loading. They can also be used to prefetch resources used by an anticipated navigation.



### React DOM Server

  * Added `prerender` and `prerenderToNodeStream` APIs for static site generation. They are designed to work with streaming environments like Node.js Streams and Web Streams. Unlike `renderToString`, they wait for data to load for HTML generation.



### React Server Components

  * RSC features such as directives, server components, and server functions are now stable. This means libraries that ship with Server Components can now target React 19 as a peer dependency with a react-server export condition for use in frameworks that support the Full-stack React Architecture. The underlying APIs used to implement a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x. See [docs](https://19.react.dev/reference/rsc/server-components) for how to support React Server Components.



## Deprecations

  * Deprecated: `element.ref` access: React 19 supports ref as a prop, so we’re deprecating `element.ref` in favor of `element.props.ref`. Accessing will result in a warning.
  * `react-test-renderer`: In React 19, react-test-renderer logs a deprecation warning and has switched to concurrent rendering for web usage. We recommend migrating your tests to @testinglibrary.com/docs/react-testing-library/intro/) or @testingesting-library.com/docs/react-native-testing-library/intro)



## Breaking Changes

React 19 brings in a number of breaking changes, including the removals of long-deprecated APIs. We recommend first upgrading to `18.3.1`, where we've added additional deprecation warnings. Check out the [upgrade guide](https://19.react.dev/blog/2024/04/25/react-19-upgrade-guide) for more details and guidance on codemodding.

### React

  * New JSX Transform is now required: We introduced [a new JSX transform](https://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html) in 2020 to improve bundle size and use JSX without importing React. In React 19, we’re adding additional improvements like using ref as a prop and JSX speed improvements that require the new transform.
  * Errors in render are not re-thrown: Errors that are not caught by an Error Boundary are now reported to window.reportError. Errors that are caught by an Error Boundary are reported to console.error. We’ve introduced `onUncaughtError` and `onCaughtError` methods to `createRoot` and `hydrateRoot` to customize this error handling.
  * Removed: `propTypes`: Using `propTypes` will now be silently ignored. If required, we recommend migrating to TypeScript or another type-checking solution.
  * Removed: `defaultProps` for functions: ES6 default parameters can be used in place. Class components continue to support `defaultProps` since there is no ES6 alternative.
  * Removed: `contextTypes` and `getChildContext`: Legacy Context for class components has been removed in favor of the `contextType` API.
  * Removed: string refs: Any usage of string refs need to be migrated to ref callbacks.
  * Removed: Module pattern factories: A rarely used pattern that can be migrated to regular functions.
  * Removed: `React.createFactory`: Now that JSX is broadly supported, all `createFactory` usage can be migrated to JSX components.
  * Removed: `react-test-renderer/shallow`: This has been a re-export of [react-shallow-renderer](https://github.com/enzymejs/react-shallow-renderer) since React 18. If needed, you can continue to use the third-party package directly. We recommend using @testinglibrary.com/docs/react-testing-library/intro/) or @testingesting-library.com/docs/react-native-testing-library/intro) instead.



### React DOM

  * Removed: `react-dom/test-utils`: We’ve moved `act` from `react-dom/test-utils` to react. All other utilities have been removed.
  * Removed: `ReactDOM`.`render`, `ReactDOM`.`hydrate`: These have been removed in favor of the concurrent equivalents: `ReactDOM`.`createRoot` and `ReactDOM.hydrateRoot`.
  * Removed: `unmountComponentAtNode`: Removed in favor of `root.unmount()`.
  * Removed: `ReactDOM`.`findDOMNode`: You can replace `ReactDOM`.`findDOMNode` with DOM Refs.



## Notable Changes

### React

  * `<Context>` as a provider: You can now render `<Context>` as a provider instead of `<Context.Provider>`.
  * Cleanup functions for refs: When the component unmounts, React will call the cleanup function returned from the ref callback.
  * `useDeferredValue` initial value argument: When provided, `useDeferredValue` will return the initial value for the initial render of a component, then schedule a re-render in the background with the `deferredValue` returned.
  * Support for Custom Elements: React 19 now passes all tests on [Custom Elements Everywhere](https://custom-elements-everywhere.com/).
  * StrictMode changes: `useMemo` and `useCallback` will now reuse the memoized results from the first render, during the second render. Additionally, StrictMode will now double-invoke ref callback functions on initial mount.
  * UMD builds removed: To load React 19 with a script tag, we recommend using an ESM-based CDN such as [esm.sh](http://esm.sh).



### React DOM

  * Diffs for hydration errors: In the case of a mismatch, React 19 logs a single error with a diff of the mismatched content.
  * Compatibility with third-party scripts and extensions: React will now force a client re-render to fix up any mismatched content caused by elements inserted by third-party JS.



## TypeScript Changes

The most common changes can be codemodded with `npx types-react-codemod@latest preset-19 ./path-to-your-react-ts-files`.

  * Removed deprecated TypeScript types: 
    * `ReactChild` (replacement: `React.ReactElement | number | string)`
    * `ReactFragment` (replacement: `Iterable<React.ReactNode>`)
    * `ReactNodeArray` (replacement: `ReadonlyArray<React.ReactNode>`)
    * `ReactText` (replacement:...



[Read more](/facebook/react/releases/tag/v19.0.0)

### Contributors

  * [ ](https://github.com/sophiebits)
  * [ ](https://github.com/kassens)
  * [ ](https://github.com/devongovett)
  * [ ](https://github.com/bvaughn)
  * [ ](https://github.com/sebmarkbage)
  * [ ](https://github.com/styfle)
  * [ ](https://github.com/danieltott)
  * [ ](https://github.com/unstubbable)
  * [ ](https://github.com/jupapios)
  * [ ](https://github.com/gaearon)
  * [ ](https://github.com/markerikson)
  * [ ](https://github.com/sokra)
  * [ ](https://github.com/JonnyBurger)
  * [ ](https://github.com/sammy-SC)
  * [ ](https://github.com/pandaiolo)
  * [ ](https://github.com/HenriqueLimas)
  * [ ](https://github.com/rickhanlonii)
  * [ ](https://github.com/gnoff)
  * [ ](https://github.com/colinhacks)
  * [ ](https://github.com/acdlite)
  * [ ](https://github.com/phryneas)
  * [ ](https://github.com/KarimP)
  * [ ](https://github.com/hansottowirtz)
  * [ ](https://github.com/tyao1)
  * [ ](https://github.com/timneutkens)
  * [ ](https://github.com/liuyenwei)
  * [ ](https://github.com/josepharhar)
  * [ ](https://github.com/jackpope)
  * [ ](https://github.com/feedthejim)
  * [ ](https://github.com/eps1lon)
  * [ ](https://github.com/lubieowoce)
  * [ ](https://github.com/himself65)
  * [ ](https://github.com/jellevoost)
  * [ ](https://github.com/sweetliquid)
  * [ ](https://github.com/ling1726)
  * [ ](https://github.com/mofeiZ)
  * [ ](https://github.com/yujunjung)
  * [ ](https://github.com/SouSingh)



sophiebits, kassens, and 36 other contributors 

Assets 2

Loading

👍 285 hhrrr, lbeckman314, matheuspergoli, raix, jonz94, Foshati, nikischin, 4ndrs, zach-betz-hln, diego-aquino, and 275 more reacted with thumbs up emoji 😄 45 Dmitriy-Frostoff, M21H, dBianchii, li-jia-nan, chemistwang, yisen91, haegeon-kim, th2205, ChiaJune, Entropy-10, and 35 more reacted with laugh emoji 🎉 216 cherniavskii, webbertakken, reichhartd, lbeckman314, camiloan, ArtKullashi, matheuspergoli, raix, jonz94, esvyridov, and 206 more reacted with hooray emoji ❤️ 95 4ndrs, dwalker93, diego-aquino, breadadams, kachkaev, tgmarinho, dylanjmcdonald, hongbo-miao, zweimach, HamoBoker, and 85 more reacted with heart emoji 🚀 123 marcosbotene, lbeckman314, ArtKullashi, fawzii0x3, matheuspergoli, raix, skyfrk, jonz94, MatthewHerbst, Foshati, and 113 more reacted with rocket emoji 👀 40 Dmitriy-Frostoff, M21H, avindra, dBianchii, yisen91, huongdevvn, staaky, haegeon-kim, Kin-Xemer, coder-hxl, and 30 more reacted with eyes emoji

All reactions

  * 👍 285 reactions
  * 😄 45 reactions
  * 🎉 216 reactions
  * ❤️ 95 reactions
  * 🚀 123 reactions
  * 👀 40 reactions



464 people reacted

## eslint-plugin-react-hooks@5.0.0 (Oct 11, 2024)

11 Oct 13:32 

[eps1lon](/eps1lon)

[ eslint-plugin-react-hooks@5.0.0  ](/facebook/react/tree/eslint-plugin-react-hooks%405.0.0)

[ `0911120`](/facebook/react/commit/09111202d617477b63507b41e8b6c3101b4afd87)

This commit was created on GitHub.com and signed with GitHub’s **verified signature**. 

GPG key ID: B5690EEEBB952194 [Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...eslint-plugin-react-hooks%405.0.0)

Loading

[View all tags](/facebook/react/tags)

[eslint-plugin-react-hooks@5.0.0 (Oct 11, 2024)](/facebook/react/releases/tag/eslint-plugin-react-hooks%405.0.0)

This release only contains `eslint-plugin-react-hooks`. Notably, new violations and support for ESLint v9 were added.

## `eslint-plugin-react-hooks`

  * **New Violations:** Component names now need to start with an uppercase letter instead of a non-lowercase letter. This means `_Button` or `_component` are no longer valid. ([@kassens](https://github.com/kassens)) in [#25162](https://github.com/facebook/react/pull/25162) For example, in 

```
function _Component() {
 useState()
 ^^^^^^^^ A React Hook "useState" is called in function "_Component" which is neither a Component nor a custom React Hook function.
}
```


`_Component` should be renamed to `Component`.


  * Add support for ESLint v9. ([@eps1lon](https://github.com/eps1lon) in [#28773](https://github.com/facebook/react/pull/28773))
  * Consider dispatch from `useActionState` stable. ([@eps1lon](https://github.com/eps1lon) in [#29665](https://github.com/facebook/react/pull/29665))
  * Accept `as` expression in callback. ([@StyleShit](https://github.com/StyleShit) in [#28202](https://github.com/facebook/react/pull/28202))
  * Accept `as` expressions in deps array. ([@StyleShit](https://github.com/StyleShit) in [#28189](https://github.com/facebook/react/pull/28189))
  * Treat `React.use()` the same as `use()`. ([@kassens](https://github.com/kassens) in [#27769](https://github.com/facebook/react/pull/27769))
  * Move `use()` lint to non-experimental. ([@kassens](https://github.com/kassens) in [#27768](https://github.com/facebook/react/pull/27768))
  * Support Flow `as` expressions. ([@cpojer](https://github.com/cpojer) in [#27590](https://github.com/facebook/react/pull/27590))
  * Allow `useEffect(fn, undefined)`. ([@kassens](https://github.com/kassens) in [#27525](https://github.com/facebook/react/pull/27525))
  * Disallow hooks in async functions. ([@acdlite](https://github.com/acdlite) in [#27045](https://github.com/facebook/react/pull/27045))
  * Rename experimental `useEvent` to `useEffectEvent`. ([@sebmarkbage](https://github.com/sebmarkbage) in [#25881](https://github.com/facebook/react/pull/25881))
  * Lint for presence of `useEvent` functions in dependency lists. ([@poteto](https://github.com/poteto) in [#25512](https://github.com/facebook/react/pull/25512))
  * Check `useEvent` references instead. ([@poteto](https://github.com/poteto) in [#25319](https://github.com/facebook/react/pull/25319))
  * Update `RulesOfHooks` with `useEvent` rules. ([@poteto](https://github.com/poteto) in [#25285](https://github.com/facebook/react/pull/25285))



Assets 2

Loading

👍 177 mkosir, Amoz19, nilsingwersen, gunters63, kevinpainchaud, fiskryeziu, aryaemami59, re-taro, Shakeskeyboarde, m3thom, and 167 more reacted with thumbs up emoji 😄 3 aalmanasir, GeorgeDzvengwe, and ScriptKnight-Master reacted with laugh emoji 🎉 74 mkosir, Amoz19, QuantumChemist, kevinpainchaud, daniellmiranda, aryaemami59, re-taro, Shakeskeyboarde, alinnert, haodaking, and 64 more reacted with hooray emoji ❤️ 60 mkosir, QuantumChemist, kevinpainchaud, aryaemami59, re-taro, Shakeskeyboarde, slk333, 4ndrs, ShobhitShah1, DavidGDA, and 50 more reacted with heart emoji 🚀 50 mkosir, Amoz19, QuantumChemist, LeunensMichiel, kevinpainchaud, aryaemami59, re-taro, monkey0722, Shakeskeyboarde, rodamaral, and 40 more reacted with rocket emoji 👀 20 Dmitriy-Frostoff, MidlajYH, rodrigomoyano11, Denisskas, lucipas, JamBalaya56562, fadrian06, warmachine028, zdu-strong, Talaxy009, and 10 more reacted with eyes emoji

All reactions

  * 👍 177 reactions
  * 😄 3 reactions
  * 🎉 74 reactions
  * ❤️ 60 reactions
  * 🚀 50 reactions
  * 👀 20 reactions



247 people reacted

## 18.3.1 (April 26, 2024)

26 Apr 19:53 

[rickhanlonii](/rickhanlonii)

[ v18.3.1  ](/facebook/react/tree/v18.3.1)

[ `f1338f8`](/facebook/react/commit/f1338f8080abd1386454a10bbf93d67bfe37ce85)

This commit was signed with the committer’s **verified signature**. 

[ ](/acdlite) [acdlite](/acdlite) Andrew Clark 

SSH Key Fingerprint: kMgJy+7AI/mxxpuyx1Qgc7NZY55dREBRubChEAYfi7I [Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v18.3.1)

Loading

[View all tags](/facebook/react/tags)

[18.3.1 (April 26, 2024)](/facebook/react/releases/tag/v18.3.1)

  * Export `act` from `react` [f1338f](https://github.com/facebook/react/commit/f1338f8080abd1386454a10bbf93d67bfe37ce85)



Assets 2

Loading

👍 293 franz-bendezu, rockyzhang24, IVLIU, jhosep98, golamrabbiazad, manyeyes, undesicimo, doooss, einer20, IntelligentSynthesis, and 283 more reacted with thumbs up emoji 😄 84 jafar-jabr, 1zilc, sergiocarneiro, lin72h, MuhamedAyoub, pwbriggs, undesicimo, silkyland, Marukome0743, MeherabSamir, and 74 more reacted with laugh emoji 🎉 79 hendriknielaender, advanceddev, marcio-grecio, Rel1cx, dbstratta, poteto, ZachLegros, clemstoquart, mkosir, ykzts, and 69 more reacted with hooray emoji ❤️ 96 4ndrs, batosai, marcio-grecio, dbstratta, hrasoa, poteto, mkosir, 1zilc, lin72h, xxrjun, and 86 more reacted with heart emoji 🚀 88 hendriknielaender, KirianCaumes, sampain, xxrjun, marcio-grecio, dbstratta, poteto, esau-morais, mkosir, lin72h, and 78 more reacted with rocket emoji 👀 14 mtayyebdeveloper, CapitanArdeshir, subham007-coder, codewithnathan97, jaimin-bariya, youne-elma, Rucellmai61, trungle33, Quanzhitong, Sudharsan0727, and 4 more reacted with eyes emoji

All reactions

  * 👍 293 reactions
  * 😄 84 reactions
  * 🎉 79 reactions
  * ❤️ 96 reactions
  * 🚀 88 reactions
  * 👀 14 reactions



441 people reacted

## 18.3.0 (April 25, 2024)

26 Apr 19:48 

[rickhanlonii](/rickhanlonii)

[ v18.3.0  ](/facebook/react/tree/v18.3.0)

[ `8a015b6`](/facebook/react/commit/8a015b68cc060079878e426610e64e86fb328f8d)

This commit was signed with the committer’s **verified signature**. 

[ ](/acdlite) [acdlite](/acdlite) Andrew Clark 

SSH Key Fingerprint: kMgJy+7AI/mxxpuyx1Qgc7NZY55dREBRubChEAYfi7I [Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v18.3.0)

Loading

[View all tags](/facebook/react/tags)

[18.3.0 (April 25, 2024)](/facebook/react/releases/tag/v18.3.0)

This release is identical to 18.2 but adds warnings for deprecated APIs and other changes that are needed for React 19.

Read the [React 19 Upgrade Guide](https://react.dev/blog/2024/04/25/react-19-upgrade-guide) for more info.

### React

  * Allow writing to `this.refs` to support string ref codemod [909071](https://github.com/facebook/react/commit/9090712fd3ca4e1099e1f92e67933c2cb4f32552)
  * Warn for deprecated `findDOMNode` outside StrictMode [c3b283](https://github.com/facebook/react/commit/c3b283964108b0e8dbcf1f9eb2e7e67815e39dfb)
  * Warn for deprecated `test-utils` methods [d4ea75](https://github.com/facebook/react/commit/d4ea75dc4258095593b6ac764289f42bddeb835c)
  * Warn for deprecated Legacy Context outside StrictMode [415ee0](https://github.com/facebook/react/commit/415ee0e6ea0fe3e288e65868df2e3241143d5f7f)
  * Warn for deprecated string refs outside StrictMode [#25383](https://github.com/facebook/react/pull/25383)
  * Warn for deprecated `defaultProps` for function components [#25699](https://github.com/facebook/react/pull/25699)
  * Warn when spreading `key` [#25697](https://github.com/facebook/react/pull/25697)
  * Warn when using `act` from `test-utils` [d4ea75](https://github.com/facebook/react/commit/d4ea75dc4258095593b6ac764289f42bddeb835c)



### React DOM

  * Warn for deprecated `unmountComponentAtNode` [8a015b](https://github.com/facebook/react/commit/8a015b68cc060079878e426610e64e86fb328f8d)
  * Warn for deprecated `renderToStaticNodeStream` [#28874](https://github.com/facebook/react/pull/28874)



Assets 2

Loading

👍 115 ChrisWiles, eifr, poteto, clemstoquart, zdu-strong, lin72h, golamrabbiazad, makoto14, ParasSolanki, ramunecroft, and 105 more reacted with thumbs up emoji 😄 24 vozaldi, fadrian06, vikiboss, 1weiho, MidlajYH, lnhrdt, zudydy, gmerwan, oy-itstedpark, w00khyung, and 14 more reacted with laugh emoji 🎉 39 ChrisWiles, Arechii, poteto, ykzts, zdu-strong, lin72h, golamrabbiazad, pwbriggs, syahrizaldev, fadrian06, and 29 more reacted with hooray emoji ❤️ 48 4ndrs, ChrisWiles, poteto, controversial, Bikossor, rendrom, zdu-strong, lin72h, AhmedBaset, golamrabbiazad, and 38 more reacted with heart emoji 🚀 61 mzaien, llegomark, KirianCaumes, dbstratta, Abhiek187, 87xie, 4ndrs, ChrisWiles, rivajunior, poteto, and 51 more reacted with rocket emoji 👀 4 ixsamar, thisisengineer, kronos456, and MagdyKishk reacted with eyes emoji

All reactions

  * 👍 115 reactions
  * 😄 24 reactions
  * 🎉 39 reactions
  * ❤️ 48 reactions
  * 🚀 61 reactions
  * 👀 4 reactions



179 people reacted

## 18.2.0 (June 14, 2022)

14 Jun 19:54 

[gnoff](/gnoff)

[ v18.2.0  ](/facebook/react/tree/v18.2.0)

[ `9e3b772`](/facebook/react/commit/9e3b772b8cabbd8cadc7522ebe3dde3279e79d9e)

This commit was created on GitHub.com and signed with GitHub’s **verified signature**. The key has expired. 

GPG key ID: 4AEE18F83AFDEB23

Expired

[Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v18.2.0)

Loading

[View all tags](/facebook/react/tags)

[18.2.0 (June 14, 2022)](/facebook/react/releases/tag/v18.2.0)

### React DOM

  * Provide a component stack as a second argument to `onRecoverableError`. ([@gnoff](https://github.com/gnoff) in [#24591](https://github.com/facebook/react/pull/24591))
  * Fix hydrating into `document` causing a blank page on mismatch. ([@gnoff](https://github.com/gnoff) in [#24523](https://github.com/facebook/react/pull/24523))
  * Fix false positive hydration errors with Suspense. ([@gnoff](https://github.com/gnoff) in [#24480](https://github.com/facebook/react/pull/24480) and [@acdlite](https://github.com/acdlite) in [#24532](https://github.com/facebook/react/pull/24532))
  * Fix ignored `setState` in Safari when adding an iframe. ([@gaearon](https://github.com/gaearon) in [#24459](https://github.com/facebook/react/pull/24459))



### React DOM Server

  * Pass information about server errors to the client. ([@salazarm](https://github.com/salazarm) and [@gnoff](https://github.com/gnoff) in [#24551](https://github.com/facebook/react/pull/24551) and [#24591](https://github.com/facebook/react/pull/24591))
  * Allow to provide a reason when aborting the HTML stream. ([@gnoff](https://github.com/gnoff) in [#24680](https://github.com/facebook/react/pull/24680))
  * Eliminate extraneous text separators in the HTML where possible. ([@gnoff](https://github.com/gnoff) in [#24630](https://github.com/facebook/react/pull/24630))
  * Disallow complex children inside `<title>` elements to match the browser constraints. ([@gnoff](https://github.com/gnoff) in [#24679](https://github.com/facebook/react/pull/24679))
  * Fix buffering in some worker environments by explicitly setting `highWaterMark` to `0`. ([@jplhomer](https://github.com/jplhomer) in [#24641](https://github.com/facebook/react/pull/24641))



### Server Components (Experimental)

  * Add support for `useId()` inside Server Components. ([@gnoff](https://github.com/gnoff)) in [#24172](https://github.com/facebook/react/pull/24172)



Assets 2

Loading

👍 498 apostolos, morellodev, marcotterra, chanan, dillingham, dcsaszar, davbrito, salvoravida, Resetnak, unrealapex, and 488 more reacted with thumbs up emoji 😄 71 wajeshubham, Huinno-YoonJaeYoon, leonardssh, anaslaham, mhndev, gregarega1993, Ahmedgkanria, lin72h, huynhdev24, Zinoujoker, and 61 more reacted with laugh emoji 🎉 120 mkosir, kazuhitonakayama, rvitaliy, ivanov-v, fatihcandev, aramnazaryan, OmerWow, outbackStack, xiel, tronikelis, and 110 more reacted with hooray emoji ❤️ 178 LakhderAmine99, pavinthan, RazvanRauta, morellodev, jplhomer, blittle, Berrones-Edwin, salvoravida, unrealapex, electron-space, and 168 more reacted with heart emoji 🚀 148 svengreb, unigazer, morellodev, blittle, kachkaev, jakejarvis, brneor, lmachens, salvoravida, unrealapex, and 138 more reacted with rocket emoji 👀 76 MrDanOak, adiezdev, outbackStack, tronikelis, MertHaddad, rivailruiz, andreLDias, EarlGeorge, jamieshark, libeyondea, and 66 more reacted with eyes emoji

All reactions

  * 👍 498 reactions
  * 😄 71 reactions
  * 🎉 120 reactions
  * ❤️ 178 reactions
  * 🚀 148 reactions
  * 👀 76 reactions



696 people reacted

## 18.1.0 (April 26, 2022)

26 Apr 21:15 

[acdlite](/acdlite)

[ v18.1.0  ](/facebook/react/tree/v18.1.0)

[ `22edb9f`](/facebook/react/commit/22edb9f777d27369fd2c1fad378f74e237b6dfd3)

This commit was created on GitHub.com and signed with GitHub’s **verified signature**. The key has expired. 

GPG key ID: 4AEE18F83AFDEB23

Expired

[Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v18.1.0)

Loading

[View all tags](/facebook/react/tags)

[18.1.0 (April 26, 2022)](/facebook/react/releases/tag/v18.1.0)

### React DOM

  * Fix the false positive warning about `react-dom/client` when using UMD bundle. ([@alireza-molaee](https://github.com/alireza-molaee) in [#24274](https://github.com/facebook/react/pull/24274))
  * Fix `suppressHydrationWarning` to work in production too. ([@gaearon](https://github.com/gaearon) in [#24271](https://github.com/facebook/react/pull/24271))
  * Fix `componentWillUnmount` firing twice inside of Suspense. ([@acdlite](https://github.com/acdlite) in [#24308](https://github.com/facebook/react/pull/24308))
  * Fix some transition updates being ignored. ([@acdlite](https://github.com/acdlite) in [#24353](https://github.com/facebook/react/pull/24353))
  * Fix `useDeferredValue` causing an infinite loop when passed an unmemoized value. ([@acdlite](https://github.com/acdlite) in [#24247](https://github.com/facebook/react/pull/24247))
  * Fix throttling of revealing Suspense fallbacks. ([@sunderls](https://github.com/sunderls) in [#24253](https://github.com/facebook/react/pull/24253))
  * Fix an inconsistency in whether the props object is the same between renders. ([@Andarist](https://github.com/Andarist) and [@acdlite](https://github.com/acdlite) in [#24421](https://github.com/facebook/react/pull/24421))
  * Fix a missing warning about a `setState` loop in `useEffect`. ([@gaearon](https://github.com/gaearon) in [#24298](https://github.com/facebook/react/pull/24298))
  * Fix a spurious hydration error. ([@gnoff](https://github.com/gnoff) in [#24404](https://github.com/facebook/react/pull/24404))
  * Warn when calling `setState` in `useInsertionEffect`. ([@gaearon](https://github.com/gaearon) in [#24295](https://github.com/facebook/react/pull/24295))
  * Ensure the reason for hydration errors is always displayed. ([@gaearon](https://github.com/gaearon) in [#24276](https://github.com/facebook/react/pull/24276))



### React DOM Server

  * Fix escaping for the `bootstrapScriptContent` contents. ([@gnoff](https://github.com/gnoff) in [#24385](https://github.com/facebook/react/pull/24385))
  * Significantly improve performance of `renderToPipeableStream`. ([@gnoff](https://github.com/gnoff) in [#24291](https://github.com/facebook/react/pull/24291))



### ESLint Plugin: React Hooks

  * Fix false positive errors with a large number of branches. ([@scyron6](https://github.com/scyron6) in [#24287](https://github.com/facebook/react/pull/24287))
  * Don't consider a known dependency stable when the variable is reassigned. ([@afzalsayed96](https://github.com/afzalsayed96) in [#24343](https://github.com/facebook/react/pull/24343))



### Use Subscription

  * Replace the implementation with the `use-sync-external-store` shim. ([@gaearon](https://github.com/gaearon) in [#24289](https://github.com/facebook/react/pull/24289))



Assets 2

Loading

👍 250 natewu, yusufneeson, rockchalkwushock, liu-yihong, NetLancer, jkoon90, devrsi0n, songjianet, gaby, donguks, and 240 more reacted with thumbs up emoji 😄 53 dimaMachina, hundehausen, nathan3boss, sajadevo, naji0329, alexander-grube, yairdyule, HillLiu, thevuong, zhuangya, and 43 more reacted with laugh emoji 🎉 98 dimaMachina, whoisjordangarcia, hundehausen, akamfoad, ecreeth, nathan3boss, sajadevo, naji0329, alexander-grube, import-brain, and 88 more reacted with hooray emoji ❤️ 72 eideard-hm, thevuong, lucasgdb, phobal, imjordanxd, beetcb, NoMoreViolence, raix, kasipavankumar, mkosir, and 62 more reacted with heart emoji 🚀 84 dimaMachina, hundehausen, svengreb, nathan3boss, sajadevo, naji0329, alexander-grube, import-brain, duzitug, TIMMLOPK, and 74 more reacted with rocket emoji 👀 46 ahsouza, thepmsquare, 3lang3, rodamaral, world56, charlie043, NoMoreViolence, U-C-S, tobyleye, oliverloops, and 36 more reacted with eyes emoji

All reactions

  * 👍 250 reactions
  * 😄 53 reactions
  * 🎉 98 reactions
  * ❤️ 72 reactions
  * 🚀 84 reactions
  * 👀 46 reactions



371 people reacted

## 18.0.0 (March 29, 2022)

29 Mar 17:22 

[acdlite](/acdlite)

[ v18.0.0  ](/facebook/react/tree/v18.0.0)

[ `34aa5cf`](/facebook/react/commit/34aa5cfe0d9b6ec4667e02bf46ab34d83dfb2d6d)

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v18.0.0)

Loading

[View all tags](/facebook/react/tags)

[18.0.0 (March 29, 2022)](/facebook/react/releases/tag/v18.0.0)

Below is a list of all new features, APIs, deprecations, and breaking changes. Read [React 18 release post](https://reactjs.org/blog/2022/03/29/react-v18.html) and [React 18 upgrade guide](https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html) for more information.

### New Features

### React

  * `useId` is a new hook for generating unique IDs on both the client and server, while avoiding hydration mismatches. It is primarily useful for component libraries integrating with accessibility APIs that require unique IDs. This solves an issue that already exists in React 17 and below, but it’s even more important in React 18 because of how the new streaming server renderer delivers HTML out-of-order.
  * `startTransition` and `useTransition` let you mark some state updates as not urgent. Other state updates are considered urgent by default. React will allow urgent state updates (for example, updating a text input) to interrupt non-urgent state updates (for example, rendering a list of search results).
  * `useDeferredValue` lets you defer re-rendering a non-urgent part of the tree. It is similar to debouncing, but has a few advantages compared to it. There is no fixed time delay, so React will attempt the deferred render right after the first render is reflected on the screen. The deferred render is interruptible and doesn't block user input.
  * `useSyncExternalStore` is a new hook that allows external stores to support concurrent reads by forcing updates to the store to be synchronous. It removes the need for `useEffect` when implementing subscriptions to external data sources, and is recommended for any library that integrates with state external to React.
  * `useInsertionEffect` is a new hook that allows CSS-in-JS libraries to address performance issues of injecting styles in render. Unless you’ve already built a CSS-in-JS library we don’t expect you to ever use this. This hook will run after the DOM is mutated, but before layout effects read the new layout. This solves an issue that already exists in React 17 and below, but is even more important in React 18 because React yields to the browser during concurrent rendering, giving it a chance to recalculate layout.



### React DOM Client

These new APIs are now exported from `react-dom/client`:

  * `createRoot`: New method to create a root to `render` or `unmount`. Use it instead of `ReactDOM.render`. New features in React 18 don't work without it.
  * `hydrateRoot`: New method to hydrate a server rendered application. Use it instead of `ReactDOM.hydrate` in conjunction with the new React DOM Server APIs. New features in React 18 don't work without it.



Both `createRoot` and `hydrateRoot` accept a new option called `onRecoverableError` in case you want to be notified when React recovers from errors during rendering or hydration for logging. By default, React will use `reportError`[](https://developer.mozilla.org/en-US/docs/Web/API/reportError), or `console.error` in the older browsers.

### React DOM Server

These new APIs are now exported from `react-dom/server` and have full support for streaming Suspense on the server:

  * `renderToPipeableStream`: for streaming in Node environments.
  * `renderToReadableStream`: for modern edge runtime environments, such as Deno and Cloudflare workers.



The existing `renderToString` method keeps working but is discouraged.

## Deprecations

  * `react-dom`: `ReactDOM.render` has been deprecated. Using it will warn and run your app in React 17 mode.
  * `react-dom`: `ReactDOM.hydrate` has been deprecated. Using it will warn and run your app in React 17 mode.
  * `react-dom`: `ReactDOM.unmountComponentAtNode` has been deprecated.
  * `react-dom`: `ReactDOM.renderSubtreeIntoContainer` has been deprecated.
  * `react-dom/server`: `ReactDOMServer.renderToNodeStream` has been deprecated.



## Breaking Changes

### React

  * **Automatic batching:** This release introduces a performance improvement that changes to the way React batches updates to do more batching automatically. See [Automatic batching for fewer renders in React 18](https://github.com/reactwg/react-18/discussions/21) for more info. In the rare case that you need to opt out, wrap the state update in `flushSync`.
  * **Stricter Strict Mode** : In the future, React will provide a feature that lets components preserve state between unmounts. To prepare for it, React 18 introduces a new development-only check to Strict Mode. React will automatically unmount and remount every component, whenever a component mounts for the first time, restoring the previous state on the second mount. If this breaks your app, consider removing Strict Mode until you can fix the components to be resilient to remounting with existing state.
  * **Consistent useEffect timing** : React now always synchronously flushes effect functions if the update was triggered during a discrete user input event such as a click or a keydown event. Previously, the behavior wasn't always predictable or consistent.
  * **Stricter hydration errors** : Hydration mismatches due to missing or extra text content are now treated like errors instead of warnings. React will no longer attempt to "patch up" individual nodes by inserting or deleting a node on the client in an attempt to match the server markup, and will revert to client rendering up to the closest `<Suspense>` boundary in the tree. This ensures the hydrated tree is consistent and avoids potential privacy and security holes that can be caused by hydration mismatches.
  * **Suspense trees are always consistent:** If a component suspends before it's fully added to the tree, React will not add it to the tree in an incomplete state or fire its effects. Instead, React will throw away the new tree completely, wait for the asynchronous operation to finish, and then retry rendering again from scratch. React will render the retry attempt concurrently, and without blocking the browser.
  * **Layout Effects with Suspense** : When a tree re-suspends and reverts to a fallback, React will now clean up layout effects, and then re-create them when the content inside the boundary is shown again. This fixes an issue which prevented component libraries from correctly measuring layout when used with Suspense.
  * **New JS Environment Requirements** : React now depends on modern browsers features including `Promise`, `Symbol`, and `Object.assign`. If you support older browsers and devices such as Internet Explorer which do not provide modern browser features natively or have non-compliant implementations, consider including a global polyfill in your bundled application.



### Scheduler (Experimental)

  * Remove unstable `scheduler/tracing` API



## Notable Changes

### React

  * **Components can now render`undefined` :** React no longer throws if you return `undefined` from a component. This makes the allowed component return values consistent with values that are allowed in the middle of a component tree. We suggest to use a linter to prevent mistakes like forgetting a `return` statement before JSX.
  * **In tests,`act` warnings are now opt-in:** If you're running end-to-end tests, the `act` warnings are unnecessary. We've introduced an [opt-in](https://github.com/reactwg/react-18/discussions/102) mechanism so you can enable them only for unit tests where they are useful and beneficial.
  * **No warning about`setState` on unmounted components:** Previously, React warned about memory leaks when you call `setState` on an unmounted component. This warning was added for subscriptions, but people primarily run into it in scenarios where setting state is fine, and workarounds make the code worse. We've [removed](https://github.com/facebook/react/pull/22114) this warning.
  * **No suppression of console logs:** When you use Strict Mode, React renders each component twice to help you find unexpected side effects. In React 17, we've suppressed console logs for one of the two renders to make the logs easier to read. In response to [community feedback](https://github.com/facebook/react/issues/21783) about this being confusing, we've removed the suppression. Instead, if you have React DevTools installed, the second log's renders will be displayed in grey, and there will be an option (off by default) to suppress them completely.
  * **Improved memory usage:** React now cleans up more internal fields on unmount, making the impact from unfixed memory leaks that may exist in your application code less severe.



### React DOM Server

  * **`renderToString`:** Will no longer error when suspending on the server. Instead, it will emit the fallback HTML for the closest `<Suspense>` boundary and then retry rendering the same content on the client. It is still recommended that you switch to a streaming API like `renderToPipeableStream` or `renderToReadableStream` instead.
  * **`renderToStaticMarkup`:** Will no longer error when suspending on the server. Instead, it will emit the fallback HTML for the closest `<Suspense>` boundary and retry rendering on the client.



## All Changes

## React

  * Add `useTransition` and `useDeferredValue` to separate urgent updates from transitions. ([#10426](https://github.com/facebook/react/pull/10426), [#10715](https://github.com/facebook/react/pull/10715), [#15593](https://github.com/facebook/react/pull/15593), [#15272](https://github.com/facebook/react/pull/15272), [#15578](https://github.com/facebook/react/pull/15578), [#15769](https://github.com/facebook/react/pull/15769), [#17058](https://github.com/facebook/react/pull/17058), [#18796](https://github.com/facebook/react/pull/18796), [#19121](https://github.com/facebook/react/pull/19121), [#19703](https://github.com/facebook/react/pull/19703), [#19719](https://github.com/facebook/react/pull/19719), [#19724](https://github.com/facebook/react/pull/19724), [#20672](https://github.com/facebook/react/pull/20672), [#20976](https://github.com/facebook/react/pull/20976) by [[@acdlite](https://github.com/acdlite)](<https://git>...



[Read more](/facebook/react/releases/tag/v18.0.0)

Assets 2

Loading

👍 711 aabuhijleh, chayeoi, medanat, yezz123, targos, ricardocanelas, hundehausen, lin72h, andreasnilssondev, AlekseiAndriushin, and 701 more reacted with thumbs up emoji 😄 123 ricardocanelas, lin72h, reichhartd, birdview-HongKi, must479, kytosai, tronikelis, JulesPatry, xxxxue, pedro-lb, and 113 more reacted with laugh emoji 🎉 313 ricardocanelas, hundehausen, lin72h, reichhartd, mario-jerkovic, mahmoudkandeel, RemyMachado, A1101101IR, saitergun, joulev, and 303 more reacted with hooray emoji ❤️ 242 ricardocanelas, lin72h, reichhartd, matuzalemsteles, mario-jerkovic, mahmoudkandeel, birdview-HongKi, josuazurbruegg, fpiaggio-optiwe, sshquack, and 232 more reacted with heart emoji 🚀 256 Danieltf100, medanat, leonardopliski, luoxuhai, aslupin, andipaetzold, RafaelBahiense, ricardocanelas, hundehausen, lin72h, and 246 more reacted with rocket emoji 👀 109 luoxuhai, yezz123, ricardocanelas, reichhartd, sudovijay, tronikelis, JulesPatry, Illu, xxxxue, pedro-lb, and 99 more reacted with eyes emoji

All reactions

  * 👍 711 reactions
  * 😄 123 reactions
  * 🎉 313 reactions
  * ❤️ 242 reactions
  * 🚀 256 reactions
  * 👀 109 reactions



960 people reacted

## 17.0.2 (March 22, 2021)

22 Mar 22:00 

[gaearon](/gaearon)

[ v17.0.2  ](/facebook/react/tree/v17.0.2)

[ `12adaff`](/facebook/react/commit/12adaffef7105e2714f82651ea51936c563fe15c)

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v17.0.2)

Loading

[View all tags](/facebook/react/tags)

[17.0.2 (March 22, 2021)](/facebook/react/releases/tag/v17.0.2)

### React DOM

  * Remove an unused dependency to address the `SharedArrayBuffer`[ cross-origin isolation warning](https://developer.chrome.com/blog/enabling-shared-array-buffer/). ([@koba04](https://github.com/koba04) and [@bvaughn](https://github.com/bvaughn) in [#20831](https://github.com/facebook/react/pull/20831), [#20832](https://github.com/facebook/react/pull/20832), and [#20840](https://github.com/facebook/react/pull/20840))



## Artifacts

  * react: <https://unpkg.com/react@17.0.2/umd/>
  * react-art: <https://unpkg.com/react-art@17.0.2/umd/>
  * react-dom: <https://unpkg.com/react-dom@17.0.2/umd/>
  * react-is: <https://unpkg.com/react-is@17.0.2/umd/>
  * react-test-renderer: <https://unpkg.com/react-test-renderer@17.0.2/umd/>
  * scheduler: <https://unpkg.com/scheduler@0.20.2/umd/>



Assets 2

Loading

👍 148 asumaran, moongue, niubaba63, ogawaryu, lkzwc, cdslily, Mayandev, cococov, Nikolozi-Code, luvagu, and 138 more reacted with thumbs up emoji 😄 42 asumaran, cococov, sungkwangkim, leandrowilliam, shourysharma, andrey1997acer, zeayal, NavidMansuri5155, pH-7, 365kim, and 32 more reacted with laugh emoji 🎉 51 asumaran, cococov, sungkwangkim, shourysharma, raysubham, andrey1997acer, zeayal, imaksp, NavidMansuri5155, pH-7, and 41 more reacted with hooray emoji ❤️ 53 asumaran, mohitsinhchavda, shourysharma, raysubham, andrey1997acer, zeayal, NavidMansuri5155, 365kim, masudparvezsajjad, zereight, and 43 more reacted with heart emoji 🚀 55 asumaran, maxpou, cococov, sungkwangkim, leandrowilliam, crazy-grizzly, mohitsinhchavda, shourysharma, raysubham, theory-of-soul, and 45 more reacted with rocket emoji 👀 40 asumaran, cococov, shourysharma, andrey1997acer, zeayal, NavidMansuri5155, jettandres, DJLuis97, 365kim, rodamaral, and 30 more reacted with eyes emoji

All reactions

  * 👍 148 reactions
  * 😄 42 reactions
  * 🎉 51 reactions
  * ❤️ 53 reactions
  * 🚀 55 reactions
  * 👀 40 reactions



187 people reacted

## 17.0.1 (October 22, 2020)

22 Mar 21:59 

[gaearon](/gaearon)

[ v17.0.1  ](/facebook/react/tree/v17.0.1)

[ `8e5adfb`](/facebook/react/commit/8e5adfbd7e605bda9c5e96c10e015b3dc0df688e)

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v17.0.1)

Loading

[View all tags](/facebook/react/tags)

[17.0.1 (October 22, 2020)](/facebook/react/releases/tag/v17.0.1)

### React DOM

  * Fix a crash in IE11. ([@gaearon](https://github.com/gaearon) in [#20071](https://github.com/facebook/react/pull/20071))



Assets 2

Loading

👍 2 chris6090 and ikhtearalamshawonmollah54321 reacted with thumbs up emoji 😄 14 hoa00, farm16, ArthurIanb, joshkautz, vituchini, liuhaiyang1997, Schweinepriester, theoludwig, huynhdev24, njosueofficol, and 4 more reacted with laugh emoji 🎉 2 chris6090 and ikhtearalamshawonmollah54321 reacted with hooray emoji ❤️ 14 SonNg2k, farzadrastgar, rex11458, sadeghbarati, Jmenache, 010265mohamadazat, jose1937JS, vahidalvandi, njosueofficol, krishangopalgupta, and 4 more reacted with heart emoji 🚀 3 dream2023, chris6090, and ikhtearalamshawonmollah54321 reacted with rocket emoji 👀 5 zereight, sadeghbarati, kstejas, vkzkvkzk, and chris6090 reacted with eyes emoji

All reactions

  * 👍 2 reactions
  * 😄 14 reactions
  * 🎉 2 reactions
  * ❤️ 14 reactions
  * 🚀 3 reactions
  * 👀 5 reactions



29 people reacted

## 17.0.0 (October 20, 2020)

20 Oct 20:45 

[gaearon](/gaearon)

[ v17.0.0  ](/facebook/react/tree/v17.0.0)

[ `89b6109`](/facebook/react/commit/89b610969d70d788f8c9769e3fa5b0044f5737ab)

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v17.0.0)

Loading

[View all tags](/facebook/react/tags)

[17.0.0 (October 20, 2020)](/facebook/react/releases/tag/v17.0.0)

Today, we are releasing React 17!

**[Learn more about React 17 and how to update to it on the official React blog.](https://reactjs.org/blog/2020/10/20/react-v17.html)**

### React

  * Add `react/jsx-runtime` and `react/jsx-dev-runtime` for the [new JSX transform](https://babeljs.io/blog/2020/03/16/7.9.0#a-new-jsx-transform-11154-https-githubcom-babel-babel-pull-11154). ([@lunaruan](https://github.com/lunaruan) in [#18299](https://github.com/facebook/react/pull/18299))
  * Build component stacks from native error frames. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18561](https://github.com/facebook/react/pull/18561))
  * Allow to specify `displayName` on context for improved stacks. ([@eps1lon](https://github.com/eps1lon) in [#18224](https://github.com/facebook/react/pull/18224))
  * Prevent `'use strict'` from leaking in the UMD bundles. ([@koba04](https://github.com/koba04) in [#19614](https://github.com/facebook/react/pull/19614))
  * Stop using `fb.me` for redirects. ([@cylim](https://github.com/cylim) in [#19598](https://github.com/facebook/react/pull/19598))



### React DOM

  * Delegate events to roots instead of `document`. ([@trueadm](https://github.com/trueadm) in [#18195](https://github.com/facebook/react/pull/18195) and [others](https://github.com/facebook/react/pulls?q=is%3Apr+author%3Atrueadm+modern+event+is%3Amerged))
  * Clean up all effects before running any next effects. ([@bvaughn](https://github.com/bvaughn) in [#17947](https://github.com/facebook/react/pull/17947))
  * Run `useEffect` cleanup functions asynchronously. ([@bvaughn](https://github.com/bvaughn) in [#17925](https://github.com/facebook/react/pull/17925))
  * Use browser `focusin` and `focusout` for `onFocus` and `onBlur`. ([@trueadm](https://github.com/trueadm) in [#19186](https://github.com/facebook/react/pull/19186))
  * Make all `Capture` events use the browser capture phase. ([@trueadm](https://github.com/trueadm) in [#19221](https://github.com/facebook/react/pull/19221))
  * Don't emulate bubbling of the `onScroll` event. ([@gaearon](https://github.com/gaearon) in [#19464](https://github.com/facebook/react/pull/19464))
  * Throw if `forwardRef` or `memo` component returns `undefined`. ([@gaearon](https://github.com/gaearon) in [#19550](https://github.com/facebook/react/pull/19550))
  * Remove event pooling. ([@trueadm](https://github.com/trueadm) in [#18969](https://github.com/facebook/react/pull/18969))
  * Stop exposing internals that won’t be needed by React Native Web. ([@necolas](https://github.com/necolas) in [#18483](https://github.com/facebook/react/pull/18483))
  * Attach all known event listeners when the root mounts. ([@gaearon](https://github.com/gaearon) in [#19659](https://github.com/facebook/react/pull/19659))
  * Disable `console` in the second render pass of DEV mode double render. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18547](https://github.com/facebook/react/pull/18547))
  * Deprecate the undocumented and misleading `ReactTestUtils.SimulateNative` API. ([@gaearon](https://github.com/gaearon) in [#13407](https://github.com/facebook/react/pull/13407))
  * Rename private field names used in the internals. ([@gaearon](https://github.com/gaearon) in [#18377](https://github.com/facebook/react/pull/18377))
  * Don't call User Timing API in development. ([@gaearon](https://github.com/gaearon) in [#18417](https://github.com/facebook/react/pull/18417))
  * Disable console during the repeated render in Strict Mode. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18547](https://github.com/facebook/react/pull/18547))
  * In Strict Mode, double-render components without Hooks too. ([@eps1lon](https://github.com/eps1lon) in [#18430](https://github.com/facebook/react/pull/18430))
  * Allow calling `ReactDOM.flushSync` during lifecycle methods (but warn). ([@sebmarkbage](https://github.com/sebmarkbage) in [#18759](https://github.com/facebook/react/pull/18759))
  * Add the `code` property to the keyboard event objects. ([@bl00mber](https://github.com/bl00mber) in [#18287](https://github.com/facebook/react/pull/18287))
  * Add the `disableRemotePlayback` property for `video` elements. ([@tombrowndev](https://github.com/tombrowndev) in [#18619](https://github.com/facebook/react/pull/18619))
  * Add the `enterKeyHint` property for `input` elements. ([@eps1lon](https://github.com/eps1lon) in [#18634](https://github.com/facebook/react/pull/18634))
  * Warn when no `value` is provided to `<Context.Provider>`. ([@charlie1404](https://github.com/charlie1404) in [#19054](https://github.com/facebook/react/pull/19054))
  * Warn when `memo` or `forwardRef` components return `undefined`. ([@bvaughn](https://github.com/bvaughn) in [#19550](https://github.com/facebook/react/pull/19550))
  * Improve the error message for invalid updates. ([@JoviDeCroock](https://github.com/JoviDeCroock) in [#18316](https://github.com/facebook/react/pull/18316))
  * Exclude forwardRef and memo from stack frames. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18559](https://github.com/facebook/react/pull/18559))
  * Improve the error message when switching between controlled and uncontrolled inputs. ([@vcarl](https://github.com/vcarl) in [#17070](https://github.com/facebook/react/pull/17070))
  * Keep `onTouchStart`, `onTouchMove`, and `onWheel` passive. ([@gaearon](https://github.com/gaearon) in [#19654](https://github.com/facebook/react/pull/19654))
  * Fix `setState` hanging in development inside a closed iframe. ([@gaearon](https://github.com/gaearon) in [#19220](https://github.com/facebook/react/pull/19220))
  * Fix rendering bailout for lazy components with `defaultProps`. ([@jddxf](https://github.com/jddxf) in [#18539](https://github.com/facebook/react/pull/18539))
  * Fix a false positive warning when `dangerouslySetInnerHTML` is `undefined`. ([@eps1lon](https://github.com/eps1lon) in [#18676](https://github.com/facebook/react/pull/18676))
  * Fix Test Utils with non-standard `require` implementation. ([@just-boris](https://github.com/just-boris) in [#18632](https://github.com/facebook/react/pull/18632))
  * Fix `onBeforeInput` reporting an incorrect `event.type`. ([@eps1lon](https://github.com/eps1lon) in [#19561](https://github.com/facebook/react/pull/19561))
  * Fix `event.relatedTarget` reported as `undefined` in Firefox. ([@claytercek](https://github.com/claytercek) in [#19607](https://github.com/facebook/react/pull/19607))
  * Fix "unspecified error" in IE11. ([@hemakshis](https://github.com/hemakshis) in [#19664](https://github.com/facebook/react/pull/19664))
  * Fix rendering into a shadow root. ([@Jack-Works](https://github.com/Jack-Works) in [#15894](https://github.com/facebook/react/pull/15894))
  * Fix `movementX/Y` polyfill with capture events. ([@gaearon](https://github.com/gaearon) in [#19672](https://github.com/facebook/react/pull/19672))
  * Use delegation for `onSubmit` and `onReset` events. ([@gaearon](https://github.com/gaearon) in [#19333](https://github.com/facebook/react/pull/19333))
  * Improve memory usage. ([@trueadm](https://github.com/trueadm) in [#18970](https://github.com/facebook/react/pull/18970))



### React DOM Server

  * Make `useCallback` behavior consistent with `useMemo` for the server renderer. ([@alexmckenley](https://github.com/alexmckenley) in [#18783](https://github.com/facebook/react/pull/18783))
  * Fix state leaking when a function component throws. ([@pmaccart](https://github.com/pmaccart) in [#19212](https://github.com/facebook/react/pull/19212))



### React Test Renderer

  * Improve `findByType` error message. ([@henryqdineen](https://github.com/henryqdineen) in [#17439](https://github.com/facebook/react/pull/17439))



### Concurrent Mode (Experimental)

  * Revamp the priority batching heuristics. ([@acdlite](https://github.com/acdlite) in [#18796](https://github.com/facebook/react/pull/18796))
  * Add the `unstable_` prefix before the experimental APIs. ([@acdlite](https://github.com/acdlite) in [#18825](https://github.com/facebook/react/pull/18825))
  * Remove `unstable_discreteUpdates` and `unstable_flushDiscreteUpdates`. ([@trueadm](https://github.com/trueadm) in [#18825](https://github.com/facebook/react/pull/18825))
  * Remove the `timeoutMs` argument. ([@acdlite](https://github.com/acdlite) in [#19703](https://github.com/facebook/react/pull/19703))
  * Disable `<div hidden />` prerendering in favor of a different future API. ([@acdlite](https://github.com/acdlite) in [#18917](https://github.com/facebook/react/pull/18917))
  * Add `unstable_expectedLoadTime` to Suspense for CPU-bound trees. ([@acdlite](https://github.com/acdlite) in [#19936](https://github.com/facebook/react/pull/19936))
  * Add an experimental `unstable_useOpaqueIdentifier` Hook. ([@lunaruan](https://github.com/lunaruan) in [#17322](https://github.com/facebook/react/pull/17322))
  * Add an experimental `unstable_startTransition` API. ([@rickhanlonii](https://github.com/rickhanlonii) in [#19696](https://github.com/facebook/react/pull/19696))
  * Using `act` in the test renderer no longer flushes Suspense fallbacks. ([@acdlite](https://github.com/acdlite) in [#18596](https://github.com/facebook/react/pull/18596))
  * Use global render timeout for CPU Suspense. ([@sebmarkbage](https://github.com/sebmarkbage) in [#19643](https://github.com/facebook/react/pull/19643))
  * Clear the existing root content before mounting. ([@bvaughn](https://github.com/bvaughn) in [#18730](https://github.com/facebook/react/pull/18730))
  * Fix a bug with error boundaries. ([@acdlite](https://github.com/acdlite) in [#18265](https://github.com/facebook/react/pull/18265))
  * Fix a bug causing dropped updates in a suspended tree. ([@acdlite](https://github.com/acdlite) in [#18384](https://github.com/facebook/react/pull/18384) and [#18457](https://github.com/facebook/react/pull/18457))
  * Fix a bug causing dropped render phase updates. ([@acdlite](https://github.com/acdlite) in [#18537](https://github.com/facebook/react/pull/18537))
  * Fix a bug in Suspens...



[Read more](/facebook/react/releases/tag/v17.0.0)

Assets 2

Loading

👍 22 kwiniarski97, eduardo-fernandes-marques, andriyor, sadeghbarati, bulabulaka, Jmenache, lucas-dolsan, yusoofsh, HazemKhaled, jamesalmeida, and 12 more reacted with thumbs up emoji 😄 2 subham007-coder and lin72h reacted with laugh emoji 🎉 7 perseus98, hansfpc, Shubhamsharma585, kyuhyunIm, chris6090, lin72h, and ikhtearalamshawonmollah54321 reacted with hooray emoji ❤️ 9 0xping, gonzalovazquez, theenadayalan-byjus, hansfpc, Shubhamsharma585, kyuhyunIm, chris6090, lin72h, and ikhtearalamshawonmollah54321 reacted with heart emoji 🚀 8 duzitug, hansfpc, gokul-pathak, Shubhamsharma585, kyuhyunIm, chris6090, lin72h, and ikhtearalamshawonmollah54321 reacted with rocket emoji 👀 5 huynhdev24, Shubhamsharma585, kyuhyunIm, Arnavdons, and chris6090 reacted with eyes emoji

All reactions

  * 👍 22 reactions
  * 😄 2 reactions
  * 🎉 7 reactions
  * ❤️ 9 reactions
  * 🚀 8 reactions
  * 👀 5 reactions



30 people reacted

Previous _1_ [2](/facebook/react/releases?page=2) [3](/facebook/react/releases?page=3) [4](/facebook/react/releases?page=4) [5](/facebook/react/releases?page=5) … [10](/facebook/react/releases?page=10) [11](/facebook/react/releases?page=11) [Next](/facebook/react/releases?page=2)

Previous [Next](/facebook/react/releases?page=2)

## Footer

[ ](https://github.com "GitHub") © 2024 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You can’t perform that action at this time. 
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

How A Small Team of Developers Created React at Facebook | React.js: The Documentary

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

95%

•

Up next

LiveUpcoming

CancelPlay Now

[From Node.js to Deno: How It All Began9:12](https://www.youtube.com/watch?v=zxitJn9MwYs)

[Node.js: The Documentary [OFFICIAL TRAILER]1:51](https://www.youtube.com/watch?v=SfWPqr04srM)

Honeypot | Europe's Developer-Focused Job Platform

honeypot.io

[Sign up](https://www.youtube.com/redirect?event=endscreen&redir_token=QUFFLUhqbFpTaVZORGtqUFBRcWlrVTdKanhoWDdwTTFWZ3xBQ3Jtc0ttVHl2THFBZ2J3NUFnUHJqbkVmQnBodThRNG9fZE1ncXdqdDJrdFo1NkdsWkFkVnJaQWxKRWhNNlc0MTI4b2lmeFIwS2ppUzgza1dFZFJGQVh5dzAzdDBjZzBIQkEtQkpRYVJBd2pYWnVUS0VjVEVoWQ&q=honeypot.io)

Honeypot

Subscribe

Subscribed

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?v=LB8KwiiUGy0 "Next \(SHIFT+n\)")

0:00 / 1:18:14•Watch full videoLive

•

•

Scroll for details

#  How A Small Team of Developers Created React at Facebook | React.js: The Documentary

[](/@Honeypotio)

[Honeypot](/@Honeypotio)

Honeypot 

238K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

37K

Share

Download

Download 

Save

1.4M views1 year ago

1,422,617 views • Premiered Feb 10, 2023 

Show less 

React is easily one of the single most popular libraries in use today. Given that it was made within a juggernaut like Facebook, you might have assumed it was always destined for success.…...more 

...more 

Transcript

Follow along using the transcript.

Show transcript

### [Honeypot 238K subscribers  ](/@Honeypotio)

[Videos](/channel/UCsUalyRg43M8D60mtHe6YcA/videos)

[About](/channel/UCsUalyRg43M8D60mtHe6YcA/about)

[Videos](/channel/UCsUalyRg43M8D60mtHe6YcA/videos)[About](/channel/UCsUalyRg43M8D60mtHe6YcA/about)[Twitter](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqazlNRDJPZWJORXJ3WW9tcEhxUjR5blJzUmpad3xBQ3Jtc0tuOFlNV1NTNnJicVY0REV4SjBjQkRxcmxrRGxCZm5lMFpwV01vOVQyc0pReHp2end1Z1J2dll1WlRLR3dQUGR6SzhjNzg3Q1pMQXhVNGNUVnpsZlpaTWpuR1hmTThNUzlZNUlQOFRrT01zcWpvcmdrbw&q=https%3A%2F%2Ftwitter.com%2Fhoneypotio)[Linkedin](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbmVEMF9aV0pIQXNfeEtmQ0ZDcW5IeVdNa2hQQXxBQ3Jtc0tsU0txTFZiYUJOcG9sM1pwVmlqUWNpS2ZJWlZDZFZRUHQ1VlpTQ3dnb0hFXzNnVm1XVUdMc3pGbXRNWFczbVowLU9FUk1TMkNFb3FuRjh1NS05ZWFwNmQyOHJOdXBTMElmOVhLNE05cVdMZjlsRndIaw&q=https%3A%2F%2Fwww.linkedin.com%2Fcompany%2F10210811%2F)[Instagram](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa18xSHVNUnFuZmxZb1RwTU4tcDhFY1UtNjBJUXxBQ3Jtc0tsMWtZSzZrY2pMMExadkU4TEh0N3dQYjE0WlktMDNNZjZwVVBKUkx6ekNNQzZYSURIR2hiVERKTkZkWGhiMEZfakpQd0g0MzQxbEY1QV82UHVQVTBlUWxlMlUtTlZkQ3JIbWQtczJqanBoUlhBWHVFdw&q=https%3A%2F%2Fwww.instagram.com%2Fhoneypot.cult%2F)[Facebook](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbVQ5cmJvVE5KczdOdkk1T2Z3aXpQa1E1cThEd3xBQ3Jtc0ttR0EwMWk4d0RKNU9FOUtaeUxoNGlkNFFrVmV5ZUxGMno4NGRMYnFNZ1dGQ2pHQVBxbk5FVTZBdFZCTnlnUXpYYlhzU0FXR2hLR3pqV2NHLXVvM0ZUTmFhWmhlQnRrTmxjYjEwUExfVnBUa1ptbkxPQQ&q=https%3A%2F%2Fwww.facebook.com%2FHoneypotio%2F)

[ 7:14 7:14  ](/watch?v=WvRcZkuXmpo) [ Andrew Clark on the Creation of Redux by Honeypot ](/watch?v=WvRcZkuXmpo)

Show less 

## Live chat replay

See what others said about this video while it was live.

Open panel

# How A Small Team of Developers Created React at Facebook | React.js: The Documentary

1,422,617 views1.4M views

Premiered Feb 10, 2023

37K

Share

Download

Download 

Save

##  Comments 1.1K

Top comments  Newest first 

##  Description

How A Small Team of Developers Created React at Facebook | React.js: The Documentary

React is easily one of the single most popular libraries in use today. Given that it was made within a juggernaut like Facebook, you might have assumed it was always destined for success. But what if we told you that React’s first brush with the public sphere was anything but glamorous? React.js: The Documentary brings you the full story behind the early days of React, focusing on the dedicated group of developers who helped bring it to the world stage. This story is told by an all-star cast of developers like Tom Occhino, Christopher Chedeau, Pete Hunt, Sebastian Markbåge, Dan Abramov, and many more. Check out the home for untold developer stories around open source, careers and all the other cool stuff developers are doing at cult.honeypot.io. Honeypot is a developer-focused job platform, on a mission to get developers great jobs. Wanna see what we're all about? Visit honeypot.io to find a job you love. To learn more about Honeypot: [https://bit.ly/3OGoDjG](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbkRtdVV3QWVSUTNiSFp0VDMxRV8ycWV0NjFFQXxBQ3Jtc0tuQVZ4bGJRZ0NmOWprWUxaR0dlNlh3VlpwRTN4MzJKa0hDckM0ZGxkY1pZMVdBeXMzVFVTM3ZScU1VMF9sbDRIVUdzVXgxZnFyTGF6RlFOWDNpdDl1Q04wRmcyZWpELXU3SzVaOUg1b1FxSDlNRnRFNA&q=https%3A%2F%2Fbit.ly%2F3OGoDjG&v=8pDqJVdNa44) Follow the cast: Adam Wolff: [ / dmwlff ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnF4Y2I0ZV9yT0o2M2lGWk9QOEpMcGRwbVU4QXxBQ3Jtc0tsbS0yRHFIbWhGenhHZFg4Zm83Z3VzVlBoeTVmcDQ0SElRM2Y3dTBZbDVfVUxlcEN4VDljNjZwVWF2QXNDTzdnVVRhY3J5QnZPc25JZFg1aDhUNElCMGtlSkQ4NVNRMkt5M2I2VUQ0X2JickZWVWp4TQ&q=https%3A%2F%2Ftwitter.com%2Fdmwlff&v=8pDqJVdNa44) Andrew Clark: [ / acdlite ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbTJnTmNZanhWNWNXSkp0QVIyWk1tS2JvS3dYd3xBQ3Jtc0trSmticXFZY3BQQVNDdlRmcnRDa0l5cFNfTzczaXZOVmJjWnFQWlpTeUJMM1UwRVlYRXBianhwNDhmYTFidURhQnBZSGlXQUJUR1o0LXBUenphOFFXSVFJQzhmUHZacWlEVHRGNVZnWGxaYld2T1czYw&q=https%3A%2F%2Ftwitter.com%2Facdlite&v=8pDqJVdNa44) Christopher Chedeau: [ / vjeux ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbVBOaTQ1TGE0Y1BZd0F3UU5nYlR0bVByN2xiQXxBQ3Jtc0trWGVCbldXbl9NZHRxajFVOU9ZUjN1azlOMzFQcmkxSWNZZ0dxV2ZSNWtnQU5lZkR1SXl5Z0ZrelFfR3FzaXlmeXZkWnBINUYtRDBLcVM1U1lzbldmUUQwQnBGQV9rWVlGNmgtOWU1NEZCUWw1b0Z3cw&q=https%3A%2F%2Ftwitter.com%2FVjeux&v=8pDqJVdNa44) Dan Abramov: [ / dan_abramov ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbVpEMnMxdUFmSWQ3cElFcWJuSllxWmpPbEo0d3xBQ3Jtc0traGFiQTdJcnlqSTEyZkJlMG9xeHdrYzM3dXprZGhDa0FuSy1rempHdGkySE8xME5hbjkyTHpOdGtOMmR3cDczNU85VlhnZU12bWdiQXIyYTUzQ1k3Q095YWdTUHpVQUp4cklhOG53NHFJR1Z4YkcxMA&q=https%3A%2F%2Ftwitter.com%2Fdan_abramov&v=8pDqJVdNa44) David Nolen: [ / swannodette ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2NldF90LWdicTdVNVJvLUYzYTcxMFcwN200UXxBQ3Jtc0trS05WZ1N1bmVnUUxSZlhoVmhGZk41YUM2MVRKSVEteDRRLTZiUHpDQXFKZGc4ZnJ2UjFTM3I3dE5sRkJ0aHdtVHFHSHJKci1HRFFJcnpVVllNUmVMWDdKWV9FYTFMWUpwR1VIaFJ0MEVrMlJ3OFM0OA&q=https%3A%2F%2Ftwitter.com%2Fswannodette&v=8pDqJVdNa44) Lee Byron: [ / leeb ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqazE5dWFPNWlONmZRNTBmR2Z4bUJ3aXg5SUtrZ3xBQ3Jtc0tsc09YMksyNlp5Q2c4WFBXb25LcWNxaUlNcWpiQTRvVjVnMklZTWZMT3RBSURvemJkcm0xNHZVU25BOG9kZ1VaREdESnBpZEJ3Y0hhVC0yQzFSdmNpZDhWeC1FQjRPOHdzM3VwX2g3VW5OTURLclBJVQ&q=https%3A%2F%2Ftwitter.com%2Fleeb&v=8pDqJVdNa44) Michael Chan: [ / chantastic ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2hvOTdXMU1kSVJUbXZBbGNsa2p1ZWltSEpOQXxBQ3Jtc0tsRXFoaHJRQ05EUXhRbTRUNDZ0akRvUF82ZjBZOTR6WlFSUFdlOWgzNkFvVVIyelFJMFhXTDNzcTFXYUlsRFVxVEtqaUhvV3NCMEVkc2s5RTNNdzFfcUJQTXllWmo0UGJhWWZwT0xiZi1waG9ER0Y1cw&q=https%3A%2F%2Ftwitter.com%2Fchantastic&v=8pDqJVdNa44) Pete Hunt: [ / floydophone ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbmFwSEtuQkxzX0hLLWxrSWRCZDNwVk1uMVVZQXxBQ3Jtc0trMVJLNWpEbVJjSDNzV2UwNFZ3Ylh5SnYwWFAzSzRDYUEtWjZ0TVRJWF83RDdvNFdzV2p5cnJURUdiSnpDMlIzXzgxZ2RnUWpIcFdXeUJZbzJrY0R0M01FZVRVRFZCQmFva3hWMVo3bkJOTENBaGJoWQ&q=https%3A%2F%2Ftwitter.com%2Ffloydophone&v=8pDqJVdNa44) Sebastian Markbåge: [ / sebmarkbage ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnhqdzZTYnRjNy1xbGZ6MDlUOXFndTRuUHlPUXxBQ3Jtc0ttRmhpMl9kd1M0STJHd01UTWJ1d2xQMV9mRWpCUVp4Yk5GbkdyMjl2ZVZkX1Y5Rzh1aDVWVWtNMksyelI2ZWVpWklITk1DSExWbEcxWnI0ZHE2Y3hnTS1kZ2kzSzFPQjBYSjBWbVE4aEtPcmNBaUN4Yw&q=https%3A%2F%2Ftwitter.com%2Fsebmarkbage&v=8pDqJVdNa44) Shane O'Sullivan: [ / chofter ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2taQTVUdEhaQmdXNGdVQ2VHTlNPU2FsM2h0d3xBQ3Jtc0tsWmtnWGZHa0U3eE5LeDZsV05hUE9BazVEX0pVVHFJeThpc3dIYjBkQ3FNTEZzdlRCRzBpVHVzZ01PZHJOb3ZxTkRBaXRUc2ZIRHptdncwRVFCSkNEWWx5ZnY3Q3V1a1VHX3AybndhWE55M1ZhSUZJMA&q=https%3A%2F%2Ftwitter.com%2FChofter&v=8pDqJVdNa44) and [https://chofter.com/](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbERWUWI5X3lLbGNUNlMwRGVxSEdlZXE5REFYd3xBQ3Jtc0ttUUcxWTFBTllOWFpYNThSb1FFa3ljOFhoQVRheVRDM0lQcmtESDdkUGV1by1UZVpFMmpjUEEzaHlmUjZTVXdFcF9PUlFJLUR5NVNTWnkyazJXcEoxQjlRYTZZTFFzbXJueW8xWDl6azBfbXE5aEJORQ&q=https%3A%2F%2Fchofter.com%2F&v=8pDqJVdNa44) Sophie Alpert: [ / sophiebits ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbFlxampVMGRnSVJtaGoySmZEbDJtRHhpbVh4QXxBQ3Jtc0tsNE1vREpxQ09OdzlGb1J3a1JXaE1xc0FvUUEwWk9yeTZYUDU5QWp3WV9vVkRldm9sWW9EeUtKRUpudUdUbmtIeHNyVTRBcnpGNXdwTEd4SlBnbzg1elE3U3JnTmlraFVBVXVVTHI3YWU2WDVyRHRFTQ&q=https%3A%2F%2Ftwitter.com%2Fsophiebits&v=8pDqJVdNa44) and [https://sophiebits.com/](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa0JjdjA3SVVuNFpFN2x5bjVsb09iTERmSUUzUXxBQ3Jtc0treVdSY00yb2taQlZ2MnFXUFNyTW9YcE5OcHZicS1ZdUdJaktPUi1JSWpwZjFDMTRPTHRiNkN0MFhjT3VTaWYyOFFwT1plMUdCWXJTclhJdlhScGtQV0FZSk1BUk0xQmRRZW5JRzhMSHBnM1F4MHBydw&q=https%3A%2F%2Fsophiebits.com%2F&v=8pDqJVdNa44) Tom Occhino: [ / tomocchino ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbm1hWjBRSTd5cHZxbWUwVDZ5bWtkNWFnV294d3xBQ3Jtc0tuNWR4RWZuT2dGaEVqZlJIM2VqcE91LWVIVzdjSkJGcE05U21xaFZuSjJYUmh6T242RnRnemdHMXZaa2xSWGk1UWEwWkNUQzI4bVNILXFqMEJxaGJ1Z3RfdzVfNlRvUkc2YmpSNzJJRjhRcE1BZXd2WQ&q=https%3A%2F%2Ftwitter.com%2Ftomocchino&v=8pDqJVdNa44) Tony Casparro: [ / iamtonyc ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbHpHdnYzeVU3ejRwQWgzdHQyYmxxXzZRYWFDZ3xBQ3Jtc0ttOFdUblpiTlNSTVlKc0N5SWgxazBxczRWaGFvMEZ3alVZYzVpekk2dWh2Rk94Z05PbXRGeFRrNTVGRGVvZE0yQi1rS204QnUzcU9hN3A3NUU1MXZFT1J0VmRaNmpWYUl6MHptN0xyMlZSRTJ1aEFuSQ&q=https%3A%2F%2Ftwitter.com%2FIamTonyC&v=8pDqJVdNa44) Many people contributed to React throughout the years and this documentary is just a little slice of that history. You can find full acknowledgements here: [https://reactjs.org/acknowledgements....](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnF3MmJJcHV3NV9BWklhNWJqSmxvZktueUROQXxBQ3Jtc0ttNVVuOVFnc1FWcW5sXzBGbVhjd1JQbzJyNXpHYldnMTk5VXdhTmx1ck1vRXdqcWxCODJrYVg4a0dINUlSU19pUTdERGNHRHBrclozdnVRb0lOVE9nYVo4cl9KVjFscjJqYVNWa2xFZ21oWHZIRHFKWQ&q=https%3A%2F%2Freactjs.org%2Facknowledgements.html&v=8pDqJVdNa44) Thanks to these amazing people for translating subtitles: Charlie: [ / charliesbot ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa3JQYUJxemI4UC1fWGFjbHpvRVY0aVZsaHRpUXxBQ3Jtc0tsV3V0Zkg0Z1RKWkhSN040Q3BieE1nZEpzTFR2OVdjLWp5UjM0T1VvTndKSFJHOVVEUFJyT3BkTHh3OEVmTEo2d2dpbHowUEZqVlZrYmxmU29scDg5VTVrTENrcFd2SERwblZxU25UUE5CMTNpbWFHdw&q=https%3A%2F%2Ftwitter.com%2Fcharliesbot&v=8pDqJVdNa44) Jose: [ / jbetosalinas ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa0ljdnZfOHpqd3I4cWVKZ1Nic1NkQlRtWDc1QXxBQ3Jtc0trVldLc0hleThQYlNub3pnalg1QkZxLUlLRlA5a2JoWTN1WW40V29XcEJBelRPdm12NzZtYzlFWE5WZHZnSVNQd2RTai1xdXRSM0pGWkowRnhpMUVhMWdRVlVnazFhSUdiN2l2TEVFZkM4UHNkVGM1cw&q=https%3A%2F%2Ftwitter.com%2Fjbetosalinas&v=8pDqJVdNa44) Gustavo Gonçalves Follow us: Twitter: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2lqQWNUVGpmaXNFc2trOEkwOV9zNTNSTkFYQXxBQ3Jtc0trNVR1QU5aaURDZWp0WXI0UUNlQkNyRlQxQUN0N2FBZzBDXzE3M29GbWpkaVJnTnh3OHFkMDhrbzZ5dWljcHFZQ2x5bzFiazQ0a2hfekF1N3c5RERJUFJDM3JZVmFZTTRJcmQ3X2VFQnU5SktFMzdEaw&q=https%3A%2F%2Ftwitter.com%2Fhoneypotio&v=8pDqJVdNa44) Facebook: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbUpQSkNvV0d0dkZXYVFJbllNT01Yc3dZQUwzUXxBQ3Jtc0tuQnEwaUdEa1BtRlIzd2FSSTV4bW03dEwwOGFRZnVTdk4ybTNSdzBVcHAtd0JXbDZwS2djMXJ2cTFzZUZHQmx3OFR4U0tnZFlrNzJlMlQxa3A5S3czeHlFSWVoUWM0bGlzTk41cWJNMDJzM0tROEdZbw&q=https%3A%2F%2Fwww.facebook.com%2FHoneypotio%2F&v=8pDqJVdNa44) LinkedIn: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2dFcmRaWWtWN0c4d1Mxd0RjUTNjMDFXWXNuUXxBQ3Jtc0tsNk00RHFMU2NMSl8yWUZEcDNvaFViZ2p2aDNqR3hiaHlNNWotdUNfWEprT0tlY2hhUFN5Vk5SOGE0OWRjRUZHVXlqMF9NcUhGSjBVbWFnenc5YS1IdTJHc0Q0YWJEY0YtQmFnZDRhMkp1eDlCU29nQQ&q=https%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fhoneypotio%2F&v=8pDqJVdNa44) Instagram: [ / honeypot.cult ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbS1iQ1FGeEhpanNkTHpSVVNOdzlDQ2VVaU9VUXxBQ3Jtc0tuUDJqYy1Rbk16am1IOHZGWTZrUUlsWWVKYXoyYk9VS29FeGZ0MjJBQlZhRHRia3owaWdiWUFtd0FfQmVSZVh3a2ZwczNxek9mMm9KcXdSV2U3SHpNeDZhNTU0X3lZdkJmemxTblhFZHM0d25kWGpNNA&q=https%3A%2F%2Fwww.instagram.com%2Fhoneypot.cult%2F&v=8pDqJVdNa44)

Show less ...more

React is easily one of the single most popular libraries in use today. Given that it was made within a juggernaut like Facebook, you might have assumed it was always destined for success. But what if we told you that React’s first brush with the public sphere was anything but glamorous? React.js: The Documentary brings you the full story behind the early days of React, focusing on the dedicated group of developers who helped bring it to the world stage. This story is told by an all-star cast of developers like Tom Occhino, Christopher Chedeau, Pete Hunt, Sebastian Markbåge, Dan Abramov, and many more. Check out the home for untold developer stories around open source, careers and all the other cool stuff developers are doing at cult.honeypot.io. Honeypot is a developer-focused job platform, on a mission to get developers great jobs. Wanna see what we're all about? Visit honeypot.io to find a job you love. To learn more about Honeypot: [https://bit.ly/3OGoDjG](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbkRtdVV3QWVSUTNiSFp0VDMxRV8ycWV0NjFFQXxBQ3Jtc0tuQVZ4bGJRZ0NmOWprWUxaR0dlNlh3VlpwRTN4MzJKa0hDckM0ZGxkY1pZMVdBeXMzVFVTM3ZScU1VMF9sbDRIVUdzVXgxZnFyTGF6RlFOWDNpdDl1Q04wRmcyZWpELXU3SzVaOUg1b1FxSDlNRnRFNA&q=https%3A%2F%2Fbit.ly%2F3OGoDjG&v=8pDqJVdNa44) Follow the cast: Adam Wolff: [ / dmwlff ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnF4Y2I0ZV9yT0o2M2lGWk9QOEpMcGRwbVU4QXxBQ3Jtc0tsbS0yRHFIbWhGenhHZFg4Zm83Z3VzVlBoeTVmcDQ0SElRM2Y3dTBZbDVfVUxlcEN4VDljNjZwVWF2QXNDTzdnVVRhY3J5QnZPc25JZFg1aDhUNElCMGtlSkQ4NVNRMkt5M2I2VUQ0X2JickZWVWp4TQ&q=https%3A%2F%2Ftwitter.com%2Fdmwlff&v=8pDqJVdNa44) Andrew Clark: [ / acdlite ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbTJnTmNZanhWNWNXSkp0QVIyWk1tS2JvS3dYd3xBQ3Jtc0trSmticXFZY3BQQVNDdlRmcnRDa0l5cFNfTzczaXZOVmJjWnFQWlpTeUJMM1UwRVlYRXBianhwNDhmYTFidURhQnBZSGlXQUJUR1o0LXBUenphOFFXSVFJQzhmUHZacWlEVHRGNVZnWGxaYld2T1czYw&q=https%3A%2F%2Ftwitter.com%2Facdlite&v=8pDqJVdNa44) Christopher Chedeau: [ / vjeux ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbVBOaTQ1TGE0Y1BZd0F3UU5nYlR0bVByN2xiQXxBQ3Jtc0trWGVCbldXbl9NZHRxajFVOU9ZUjN1azlOMzFQcmkxSWNZZ0dxV2ZSNWtnQU5lZkR1SXl5Z0ZrelFfR3FzaXlmeXZkWnBINUYtRDBLcVM1U1lzbldmUUQwQnBGQV9rWVlGNmgtOWU1NEZCUWw1b0Z3cw&q=https%3A%2F%2Ftwitter.com%2FVjeux&v=8pDqJVdNa44) Dan Abramov: [ / dan_abramov ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbVpEMnMxdUFmSWQ3cElFcWJuSllxWmpPbEo0d3xBQ3Jtc0traGFiQTdJcnlqSTEyZkJlMG9xeHdrYzM3dXprZGhDa0FuSy1rempHdGkySE8xME5hbjkyTHpOdGtOMmR3cDczNU85VlhnZU12bWdiQXIyYTUzQ1k3Q095YWdTUHpVQUp4cklhOG53NHFJR1Z4YkcxMA&q=https%3A%2F%2Ftwitter.com%2Fdan_abramov&v=8pDqJVdNa44) David Nolen: [ / swannodette ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2NldF90LWdicTdVNVJvLUYzYTcxMFcwN200UXxBQ3Jtc0trS05WZ1N1bmVnUUxSZlhoVmhGZk41YUM2MVRKSVEteDRRLTZiUHpDQXFKZGc4ZnJ2UjFTM3I3dE5sRkJ0aHdtVHFHSHJKci1HRFFJcnpVVllNUmVMWDdKWV9FYTFMWUpwR1VIaFJ0MEVrMlJ3OFM0OA&q=https%3A%2F%2Ftwitter.com%2Fswannodette&v=8pDqJVdNa44) Lee Byron: [ / leeb ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqazE5dWFPNWlONmZRNTBmR2Z4bUJ3aXg5SUtrZ3xBQ3Jtc0tsc09YMksyNlp5Q2c4WFBXb25LcWNxaUlNcWpiQTRvVjVnMklZTWZMT3RBSURvemJkcm0xNHZVU25BOG9kZ1VaREdESnBpZEJ3Y0hhVC0yQzFSdmNpZDhWeC1FQjRPOHdzM3VwX2g3VW5OTURLclBJVQ&q=https%3A%2F%2Ftwitter.com%2Fleeb&v=8pDqJVdNa44) Michael Chan: [ / chantastic ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2hvOTdXMU1kSVJUbXZBbGNsa2p1ZWltSEpOQXxBQ3Jtc0tsRXFoaHJRQ05EUXhRbTRUNDZ0akRvUF82ZjBZOTR6WlFSUFdlOWgzNkFvVVIyelFJMFhXTDNzcTFXYUlsRFVxVEtqaUhvV3NCMEVkc2s5RTNNdzFfcUJQTXllWmo0UGJhWWZwT0xiZi1waG9ER0Y1cw&q=https%3A%2F%2Ftwitter.com%2Fchantastic&v=8pDqJVdNa44) Pete Hunt: [ / floydophone ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbmFwSEtuQkxzX0hLLWxrSWRCZDNwVk1uMVVZQXxBQ3Jtc0trMVJLNWpEbVJjSDNzV2UwNFZ3Ylh5SnYwWFAzSzRDYUEtWjZ0TVRJWF83RDdvNFdzV2p5cnJURUdiSnpDMlIzXzgxZ2RnUWpIcFdXeUJZbzJrY0R0M01FZVRVRFZCQmFva3hWMVo3bkJOTENBaGJoWQ&q=https%3A%2F%2Ftwitter.com%2Ffloydophone&v=8pDqJVdNa44) Sebastian Markbåge: [ / sebmarkbage ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnhqdzZTYnRjNy1xbGZ6MDlUOXFndTRuUHlPUXxBQ3Jtc0ttRmhpMl9kd1M0STJHd01UTWJ1d2xQMV9mRWpCUVp4Yk5GbkdyMjl2ZVZkX1Y5Rzh1aDVWVWtNMksyelI2ZWVpWklITk1DSExWbEcxWnI0ZHE2Y3hnTS1kZ2kzSzFPQjBYSjBWbVE4aEtPcmNBaUN4Yw&q=https%3A%2F%2Ftwitter.com%2Fsebmarkbage&v=8pDqJVdNa44) Shane O'Sullivan: [ / chofter ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2taQTVUdEhaQmdXNGdVQ2VHTlNPU2FsM2h0d3xBQ3Jtc0tsWmtnWGZHa0U3eE5LeDZsV05hUE9BazVEX0pVVHFJeThpc3dIYjBkQ3FNTEZzdlRCRzBpVHVzZ01PZHJOb3ZxTkRBaXRUc2ZIRHptdncwRVFCSkNEWWx5ZnY3Q3V1a1VHX3AybndhWE55M1ZhSUZJMA&q=https%3A%2F%2Ftwitter.com%2FChofter&v=8pDqJVdNa44) and [https://chofter.com/](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbERWUWI5X3lLbGNUNlMwRGVxSEdlZXE5REFYd3xBQ3Jtc0ttUUcxWTFBTllOWFpYNThSb1FFa3ljOFhoQVRheVRDM0lQcmtESDdkUGV1by1UZVpFMmpjUEEzaHlmUjZTVXdFcF9PUlFJLUR5NVNTWnkyazJXcEoxQjlRYTZZTFFzbXJueW8xWDl6azBfbXE5aEJORQ&q=https%3A%2F%2Fchofter.com%2F&v=8pDqJVdNa44) Sophie Alpert: [ / sophiebits ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbFlxampVMGRnSVJtaGoySmZEbDJtRHhpbVh4QXxBQ3Jtc0tsNE1vREpxQ09OdzlGb1J3a1JXaE1xc0FvUUEwWk9yeTZYUDU5QWp3WV9vVkRldm9sWW9EeUtKRUpudUdUbmtIeHNyVTRBcnpGNXdwTEd4SlBnbzg1elE3U3JnTmlraFVBVXVVTHI3YWU2WDVyRHRFTQ&q=https%3A%2F%2Ftwitter.com%2Fsophiebits&v=8pDqJVdNa44) and [https://sophiebits.com/](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa0JjdjA3SVVuNFpFN2x5bjVsb09iTERmSUUzUXxBQ3Jtc0treVdSY00yb2taQlZ2MnFXUFNyTW9YcE5OcHZicS1ZdUdJaktPUi1JSWpwZjFDMTRPTHRiNkN0MFhjT3VTaWYyOFFwT1plMUdCWXJTclhJdlhScGtQV0FZSk1BUk0xQmRRZW5JRzhMSHBnM1F4MHBydw&q=https%3A%2F%2Fsophiebits.com%2F&v=8pDqJVdNa44) Tom Occhino: [ / tomocchino ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbm1hWjBRSTd5cHZxbWUwVDZ5bWtkNWFnV294d3xBQ3Jtc0tuNWR4RWZuT2dGaEVqZlJIM2VqcE91LWVIVzdjSkJGcE05U21xaFZuSjJYUmh6T242RnRnemdHMXZaa2xSWGk1UWEwWkNUQzI4bVNILXFqMEJxaGJ1Z3RfdzVfNlRvUkc2YmpSNzJJRjhRcE1BZXd2WQ&q=https%3A%2F%2Ftwitter.com%2Ftomocchino&v=8pDqJVdNa44) Tony Casparro: [ / iamtonyc ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbHpHdnYzeVU3ejRwQWgzdHQyYmxxXzZRYWFDZ3xBQ3Jtc0ttOFdUblpiTlNSTVlKc0N5SWgxazBxczRWaGFvMEZ3alVZYzVpekk2dWh2Rk94Z05PbXRGeFRrNTVGRGVvZE0yQi1rS204QnUzcU9hN3A3NUU1MXZFT1J0VmRaNmpWYUl6MHptN0xyMlZSRTJ1aEFuSQ&q=https%3A%2F%2Ftwitter.com%2FIamTonyC&v=8pDqJVdNa44) Many people contributed to React throughout the years and this documentary is just a little slice of that history. You can find full acknowledgements here: [https://reactjs.org/acknowledgements....](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnF3MmJJcHV3NV9BWklhNWJqSmxvZktueUROQXxBQ3Jtc0ttNVVuOVFnc1FWcW5sXzBGbVhjd1JQbzJyNXpHYldnMTk5VXdhTmx1ck1vRXdqcWxCODJrYVg4a0dINUlSU19pUTdERGNHRHBrclozdnVRb0lOVE9nYVo4cl9KVjFscjJqYVNWa2xFZ21oWHZIRHFKWQ&q=https%3A%2F%2Freactjs.org%2Facknowledgements.html&v=8pDqJVdNa44) Thanks to these amazing people for translating subtitles: Charlie: [ / charliesbot ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa3JQYUJxemI4UC1fWGFjbHpvRVY0aVZsaHRpUXxBQ3Jtc0tsV3V0Zkg0Z1RKWkhSN040Q3BieE1nZEpzTFR2OVdjLWp5UjM0T1VvTndKSFJHOVVEUFJyT3BkTHh3OEVmTEo2d2dpbHowUEZqVlZrYmxmU29scDg5VTVrTENrcFd2SERwblZxU25UUE5CMTNpbWFHdw&q=https%3A%2F%2Ftwitter.com%2Fcharliesbot&v=8pDqJVdNa44) Jose: [ / jbetosalinas ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa0ljdnZfOHpqd3I4cWVKZ1Nic1NkQlRtWDc1QXxBQ3Jtc0trVldLc0hleThQYlNub3pnalg1QkZxLUlLRlA5a2JoWTN1WW40V29XcEJBelRPdm12NzZtYzlFWE5WZHZnSVNQd2RTai1xdXRSM0pGWkowRnhpMUVhMWdRVlVnazFhSUdiN2l2TEVFZkM4UHNkVGM1cw&q=https%3A%2F%2Ftwitter.com%2Fjbetosalinas&v=8pDqJVdNa44) Gustavo Gonçalves Follow us: Twitter: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2lqQWNUVGpmaXNFc2trOEkwOV9zNTNSTkFYQXxBQ3Jtc0trNVR1QU5aaURDZWp0WXI0UUNlQkNyRlQxQUN0N2FBZzBDXzE3M29GbWpkaVJnTnh3OHFkMDhrbzZ5dWljcHFZQ2x5bzFiazQ0a2hfekF1N3c5RERJUFJDM3JZVmFZTTRJcmQ3X2VFQnU5SktFMzdEaw&q=https%3A%2F%2Ftwitter.com%2Fhoneypotio&v=8pDqJVdNa44) Facebook: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbUpQSkNvV0d0dkZXYVFJbllNT01Yc3dZQUwzUXxBQ3Jtc0tuQnEwaUdEa1BtRlIzd2FSSTV4bW03dEwwOGFRZnVTdk4ybTNSdzBVcHAtd0JXbDZwS2djMXJ2cTFzZUZHQmx3OFR4U0tnZFlrNzJlMlQxa3A5S3czeHlFSWVoUWM0bGlzTk41cWJNMDJzM0tROEdZbw&q=https%3A%2F%2Fwww.facebook.com%2FHoneypotio%2F&v=8pDqJVdNa44) LinkedIn: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2dFcmRaWWtWN0c4d1Mxd0RjUTNjMDFXWXNuUXxBQ3Jtc0tsNk00RHFMU2NMSl8yWUZEcDNvaFViZ2p2aDNqR3hiaHlNNWotdUNfWEprT0tlY2hhUFN5Vk5SOGE0OWRjRUZHVXlqMF9NcUhGSjBVbWFnenc5YS1IdTJHc0Q0YWJEY0YtQmFnZDRhMkp1eDlCU29nQQ&q=https%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fhoneypotio%2F&v=8pDqJVdNa44) Instagram: [ / honeypot.cult ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbS1iQ1FGeEhpanNkTHpSVVNOdzlDQ2VVaU9VUXxBQ3Jtc0tuUDJqYy1Rbk16am1IOHZGWTZrUUlsWWVKYXoyYk9VS29FeGZ0MjJBQlZhRHRia3owaWdiWUFtd0FfQmVSZVh3a2ZwczNxek9mMm9KcXdSV2U3SHpNeDZhNTU0X3lZdkJmemxTblhFZHM0d25kWGpNNA&q=https%3A%2F%2Fwww.instagram.com%2Fhoneypot.cult%2F&v=8pDqJVdNa44)…...more 

...more Show less 

Transcript

Follow along using the transcript.

Show transcript

### [Honeypot 238K subscribers  ](/@Honeypotio)

[Videos](/channel/UCsUalyRg43M8D60mtHe6YcA/videos)

[About](/channel/UCsUalyRg43M8D60mtHe6YcA/about)

[Videos](/channel/UCsUalyRg43M8D60mtHe6YcA/videos)[About](/channel/UCsUalyRg43M8D60mtHe6YcA/about)[Twitter](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqazlNRDJPZWJORXJ3WW9tcEhxUjR5blJzUmpad3xBQ3Jtc0tuOFlNV1NTNnJicVY0REV4SjBjQkRxcmxrRGxCZm5lMFpwV01vOVQyc0pReHp2end1Z1J2dll1WlRLR3dQUGR6SzhjNzg3Q1pMQXhVNGNUVnpsZlpaTWpuR1hmTThNUzlZNUlQOFRrT01zcWpvcmdrbw&q=https%3A%2F%2Ftwitter.com%2Fhoneypotio)[Linkedin](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbmVEMF9aV0pIQXNfeEtmQ0ZDcW5IeVdNa2hQQXxBQ3Jtc0tsU0txTFZiYUJOcG9sM1pwVmlqUWNpS2ZJWlZDZFZRUHQ1VlpTQ3dnb0hFXzNnVm1XVUdMc3pGbXRNWFczbVowLU9FUk1TMkNFb3FuRjh1NS05ZWFwNmQyOHJOdXBTMElmOVhLNE05cVdMZjlsRndIaw&q=https%3A%2F%2Fwww.linkedin.com%2Fcompany%2F10210811%2F)[Instagram](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa18xSHVNUnFuZmxZb1RwTU4tcDhFY1UtNjBJUXxBQ3Jtc0tsMWtZSzZrY2pMMExadkU4TEh0N3dQYjE0WlktMDNNZjZwVVBKUkx6ekNNQzZYSURIR2hiVERKTkZkWGhiMEZfakpQd0g0MzQxbEY1QV82UHVQVTBlUWxlMlUtTlZkQ3JIbWQtczJqanBoUlhBWHVFdw&q=https%3A%2F%2Fwww.instagram.com%2Fhoneypot.cult%2F)[Facebook](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbVQ5cmJvVE5KczdOdkk1T2Z3aXpQa1E1cThEd3xBQ3Jtc0ttR0EwMWk4d0RKNU9FOUtaeUxoNGlkNFFrVmV5ZUxGMno4NGRMYnFNZ1dGQ2pHQVBxbk5FVTZBdFZCTnlnUXpYYlhzU0FXR2hLR3pqV2NHLXVvM0ZUTmFhWmhlQnRrTmxjYjEwUExfVnBUa1ptbkxPQQ&q=https%3A%2F%2Fwww.facebook.com%2FHoneypotio%2F)

[ 7:14 7:14  ](/watch?v=WvRcZkuXmpo) [ Andrew Clark on the Creation of Redux by Honeypot ](/watch?v=WvRcZkuXmpo)

##  Transcript

NaN / NaN

Show chat replay

[ 1:02:49 1:02:49 Now playing ](/watch?v=LB8KwiiUGy0)

### [ Node.js: The Documentary | An origin story  Honeypot Honeypot  • • 680K views 8 months ago ](/watch?v=LB8KwiiUGy0)

[ ](/watch?v=SqcY0GlETPk)

### [ React Tutorial for Beginners  Programming with Mosh Programming with Mosh  • • 3.6M views 1 year ago ](/watch?v=SqcY0GlETPk)

[ ](/watch?v=783ccP__No8)

### [ GraphQL: The Documentary  Honeypot Honeypot  • • 578K views 5 years ago ](/watch?v=783ccP__No8)

[ ](/watch?v=WXuK6gekU1Y)

### [ AlphaGo - The Movie | Full award-winning documentary  Google DeepMind Google DeepMind  • • 36M views 4 years ago ](/watch?v=WXuK6gekU1Y)

[ ](/watch?v=PaQkIoTrSLY)

### [ From Nerd Olympics to Tech Entrepreneurship: Mike Serbinis' Story  Mark MacLeod Mark MacLeod  • • 34 views 2 days ago New ](/watch?v=PaQkIoTrSLY)

[ ](/watch?v=U6s2pdxebSo)

### [ TypeScript Origins: The Documentary  OfferZen Origins OfferZen Origins  • • 298K views 1 year ago ](/watch?v=U6s2pdxebSo)

[ ](/watch?v=OrxmtDw4pVI)

### [ Vue.js: The Documentary  Honeypot Honeypot  • • 1.5M views 4 years ago ](/watch?v=OrxmtDw4pVI)
Tap to unmute

[Open App](vnd.youtube://m.youtube.com/watch?v=x7cQ3mrcKaY&feature=mweb_c3_open_app_11268432&itc_campaign=mweb_c3_open_app_11268432&redirect_app_store_ios=1&app=desktop)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[Sign in](https://accounts.google.com/ServiceLogin?service=youtube&uilel=3&passive=true&continue=https%3A%2F%2Fwww.youtube.com%2Fsignin%3Faction_handle_signin%3Dtrue%26app%3Ddesktop%26hl%3Den%26next%3Dhttps%253A%252F%252Fwww.youtube.com%252Fwatch%253Fv%253DKVZ-P-ZI6W4&hl=en&ec=65620)

[ ](/ "YouTube Home") IN 

React.js Conf 2015 Keynote - Introducing React Native

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Up next

LiveUpcoming

CancelPlay Now

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?v=7rDsRXj9-cU "Next \(SHIFT+n\)")

0:00 / 31:46•Watch full videoLive

•

•

Scroll for details

#  React.js Conf 2015 Keynote - Introducing React Native

[](/@MetaDevelopers)

[Meta Developers](/@MetaDevelopers)

Meta Developers 

173K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

2.5K

Share

Download

Download 

Save

306K views9 years ago

306,342 views • Jan 28, 2015 

Show less 

Tom Occhino reviews the past and present of React in 2015, and teases where it's going next.…...more 

...more 

## 

Key moments

View all

#### [Facebook Ads Org Facebook Ads Org 1:54 ](/watch?v=KVZ-P-ZI6W4&t=114s)

#### [Facebook Ads Org ](/watch?v=KVZ-P-ZI6W4&t=114s)

1:54

#### [Complicated Apps Complicated Apps 2:26 ](/watch?v=KVZ-P-ZI6W4&t=146s)

#### [Complicated Apps ](/watch?v=KVZ-P-ZI6W4&t=146s)

2:26

#### [Cascading Updates Cascading Updates 3:05 ](/watch?v=KVZ-P-ZI6W4&t=185s)

#### [Cascading Updates ](/watch?v=KVZ-P-ZI6W4&t=185s)

3:05

#### [Unpredictable Code Unpredictable Code 3:33 ](/watch?v=KVZ-P-ZI6W4&t=213s)

#### [Unpredictable Code ](/watch?v=KVZ-P-ZI6W4&t=213s)

3:33

#### [Huge step backwards Huge step backwards 9:07 ](/watch?v=KVZ-P-ZI6W4&t=547s)

#### [Huge step backwards ](/watch?v=KVZ-P-ZI6W4&t=547s)

9:07

#### [What makes React so powerful? What makes React so powerful? 12:54 ](/watch?v=KVZ-P-ZI6W4&t=774s)

#### [What makes React so powerful? ](/watch?v=KVZ-P-ZI6W4&t=774s)

12:54

#### [Server rendering? Server rendering? 13:16 ](/watch?v=KVZ-P-ZI6W4&t=796s)

#### [Server rendering? ](/watch?v=KVZ-P-ZI6W4&t=796s)

13:16

#### [React wraps an imperative API with a declarative one React wraps an imperative API with a declarative one 14:00 ](/watch?v=KVZ-P-ZI6W4&t=840s)

#### [React wraps an imperative API with a declarative one ](/watch?v=KVZ-P-ZI6W4&t=840s)

14:00

Transcript

Follow along using the transcript.

Show transcript

### [Meta Developers 173K subscribers  ](/@MetaDevelopers)

[Videos](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/videos)

[About](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/about)

[Videos](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/videos)[About](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/about)[Website](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa3NZWjJkV29XeDMtT3d6UloySlNoeVBjUUZxUXxBQ3Jtc0trVmU5YmRTdTk5RDVHaWZuZFhaMWhFQW1ZYkczMGtlSVlvamFXb2Y0NHRza2tvQkpuNEVrVGdlQnBCWXFfaDktcnJWV001cnV1aGFZVWdLdjlVTEhVSnZkeFlMdG9OTHFWMGdLNHNhUmJYX3BremtSOA&q=https%3A%2F%2Fdevelopers.facebook.com%2F)[Facebook](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbVBNNHdSdHJ3UUdFbjQzdndiUlp6TGhuU2M5QXxBQ3Jtc0tueFZxLWVxMzZpNG5xcG5TQThJbVczUVRmem80cGRJSkpOQnlVUWIyYnRIVjZLbGpkbGY2b0dZaGFkcThaZ3UwTGt6c3ZXVkc0SG1tTnNIUWpNaU5CSGFKMDhRV2w5NGEyZDl5NXJuMzczb2c0RE02NA&q=https%3A%2F%2Fwww.facebook.com%2FMetaforDevelopers)[Instagram](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbE1sRFlkWUU5S3kxY3NFV1U5X2hjdVJSVWYzUXxBQ3Jtc0tuSWhmMjlDeWJZTGJrTmZnaEJyN21RU3Bka3hVNFhWUTk4aXBuU1ZPSW9LcldNXzRxcUNNR25xMXRsS2VTR0lrWVdTWWJQdUtGVjQzOXFFSXYxVHJad29UZW8tTVRTZXpyNmp4YWRYNGRzUUphQjl4MA&q=https%3A%2F%2Fwww.instagram.com%2Fmetafordevelopers%2F)[LinkedIn](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa21EOVc3Sk5qWTJPYzFqNC1VczRNc05pck42QXxBQ3Jtc0trSDhHR2IwaXBFcEpQbVZ3Vk52cUVLYURGaFQzN0FRdk9oZ09LUHU0T18xcTJqQXBmVXdEZ1ctSGdNbU9PSTV5R2pjYWtQNUVjdWprTERpNjJNcGpxUHItYXhsOXhzZ1F3enJxcGllRmNTdXNhU3ZMRQ&q=https%3A%2F%2Fwww.linkedin.com%2Fshowcase%2F6647805%2F)

Show less 

# React.js Conf 2015 Keynote - Introducing React Native

306,342 views306K views

Jan 28, 2015

2.5K

Share

Download

Download 

Save

##  Comments 74

Top comments  Newest first 

##  Key moments

#### [Facebook Ads Org Facebook Ads Org 1:54 ](/watch?v=KVZ-P-ZI6W4&t=114s)

#### [Facebook Ads Org ](/watch?v=KVZ-P-ZI6W4&t=114s)

1:54

#### [Complicated Apps Complicated Apps 2:26 ](/watch?v=KVZ-P-ZI6W4&t=146s)

#### [Complicated Apps ](/watch?v=KVZ-P-ZI6W4&t=146s)

2:26

#### [Cascading Updates Cascading Updates 3:05 ](/watch?v=KVZ-P-ZI6W4&t=185s)

#### [Cascading Updates ](/watch?v=KVZ-P-ZI6W4&t=185s)

3:05

#### [Unpredictable Code Unpredictable Code 3:33 ](/watch?v=KVZ-P-ZI6W4&t=213s)

#### [Unpredictable Code ](/watch?v=KVZ-P-ZI6W4&t=213s)

3:33

#### [Huge step backwards Huge step backwards 9:07 ](/watch?v=KVZ-P-ZI6W4&t=547s)

#### [Huge step backwards ](/watch?v=KVZ-P-ZI6W4&t=547s)

9:07

#### [What makes React so powerful? What makes React so powerful? 12:54 ](/watch?v=KVZ-P-ZI6W4&t=774s)

#### [What makes React so powerful? ](/watch?v=KVZ-P-ZI6W4&t=774s)

12:54

#### [Server rendering? Server rendering? 13:16 ](/watch?v=KVZ-P-ZI6W4&t=796s)

#### [Server rendering? ](/watch?v=KVZ-P-ZI6W4&t=796s)

13:16

#### [React wraps an imperative API with a declarative one React wraps an imperative API with a declarative one 14:00 ](/watch?v=KVZ-P-ZI6W4&t=840s)

#### [React wraps an imperative API with a declarative one ](/watch?v=KVZ-P-ZI6W4&t=840s)

14:00

#### [declarative - predictable declarative - predictable 14:35 ](/watch?v=KVZ-P-ZI6W4&t=875s)

#### [declarative - predictable ](/watch?v=KVZ-P-ZI6W4&t=875s)

14:35

#### [predictable -- confidence predictable -- confidence 14:55 ](/watch?v=KVZ-P-ZI6W4&t=895s)

#### [predictable -- confidence ](/watch?v=KVZ-P-ZI6W4&t=895s)

14:55

#### [confidence – reliability confidence – reliability 15:34 ](/watch?v=KVZ-P-ZI6W4&t=934s)

#### [confidence – reliability ](/watch?v=KVZ-P-ZI6W4&t=934s)

15:34

#### [React's real power lies in how it makes you to write your code React's real power lies in how it makes you to write your code 16:07 ](/watch?v=KVZ-P-ZI6W4&t=967s)

#### [React's real power lies in how it makes you to write your code ](/watch?v=KVZ-P-ZI6W4&t=967s)

16:07

#### [Sophisticated gesture handling Sophisticated gesture handling 19:16 ](/watch?v=KVZ-P-ZI6W4&t=1156s)

#### [Sophisticated gesture handling ](/watch?v=KVZ-P-ZI6W4&t=1156s)

19:16

#### [Native environment Native environment 20:45 ](/watch?v=KVZ-P-ZI6W4&t=1245s)

#### [Native environment ](/watch?v=KVZ-P-ZI6W4&t=1245s)

20:45

#### [React Native React Native 22:55 ](/watch?v=KVZ-P-ZI6W4&t=1375s)

#### [React Native ](/watch?v=KVZ-P-ZI6W4&t=1375s)

22:55

#### [demo demo 23:08 ](/watch?v=KVZ-P-ZI6W4&t=1388s)

#### [demo ](/watch?v=KVZ-P-ZI6W4&t=1388s)

23:08

#### [What was that? What was that? 25:15 ](/watch?v=KVZ-P-ZI6W4&t=1515s)

#### [What was that? ](/watch?v=KVZ-P-ZI6W4&t=1515s)

25:15

#### [Everything on screen was native Everything on screen was native 25:20 ](/watch?v=KVZ-P-ZI6W4&t=1520s)

#### [Everything on screen was native ](/watch?v=KVZ-P-ZI6W4&t=1520s)

25:20

#### [No WebView No WebView 25:34 ](/watch?v=KVZ-P-ZI6W4&t=1534s)

#### [No WebView ](/watch?v=KVZ-P-ZI6W4&t=1534s)

25:34

#### [Completely powered by JavaScript Completely powered by JavaScript 25:37 ](/watch?v=KVZ-P-ZI6W4&t=1537s)

#### [Completely powered by JavaScript ](/watch?v=KVZ-P-ZI6W4&t=1537s)

25:37

#### [This is working This is working 28:33 ](/watch?v=KVZ-P-ZI6W4&t=1713s)

#### [This is working ](/watch?v=KVZ-P-ZI6W4&t=1713s)

28:33

#### [Write once run anywhere Write once run anywhere 28:56 ](/watch?v=KVZ-P-ZI6W4&t=1736s)

#### [Write once run anywhere ](/watch?v=KVZ-P-ZI6W4&t=1736s)

28:56

#### [Learn once, write anywhere Learn once, write anywhere 29:14 ](/watch?v=KVZ-P-ZI6W4&t=1754s)

#### [Learn once, write anywhere ](/watch?v=KVZ-P-ZI6W4&t=1754s)

29:14

#### [Tomorrow Morning Tomorrow Morning 29:52 ](/watch?v=KVZ-P-ZI6W4&t=1792s)

#### [Tomorrow Morning ](/watch?v=KVZ-P-ZI6W4&t=1792s)

29:52

#### [Where's the code? Where's the code? 30:03 ](/watch?v=KVZ-P-ZI6W4&t=1803s)

#### [Where's the code? ](/watch?v=KVZ-P-ZI6W4&t=1803s)

30:03

#### [What happens next? What happens next? 30:48 ](/watch?v=KVZ-P-ZI6W4&t=1848s)

#### [What happens next? ](/watch?v=KVZ-P-ZI6W4&t=1848s)

30:48

#### [Existing Frameworks Influenced: All of them Existing Frameworks Influenced: All of them 31:12 ](/watch?v=KVZ-P-ZI6W4&t=1872s)

#### [Existing Frameworks Influenced: All of them ](/watch?v=KVZ-P-ZI6W4&t=1872s)

31:12

Sync to video time 

Sync to video time

##  Description

React.js Conf 2015 Keynote - Introducing React Native

2.5KLikes

306,342Views

2015Jan 28

Tom Occhino reviews the past and present of React in 2015, and teases where it's going next.

Show less ...more

Tom Occhino reviews the past and present of React in 2015, and teases where it's going next.…...more 

...more Show less 

## 

Key moments

View all

#### [Facebook Ads Org Facebook Ads Org 1:54 ](/watch?v=KVZ-P-ZI6W4&t=114s)

#### [Facebook Ads Org ](/watch?v=KVZ-P-ZI6W4&t=114s)

1:54

#### [Complicated Apps Complicated Apps 2:26 ](/watch?v=KVZ-P-ZI6W4&t=146s)

#### [Complicated Apps ](/watch?v=KVZ-P-ZI6W4&t=146s)

2:26

#### [Cascading Updates Cascading Updates 3:05 ](/watch?v=KVZ-P-ZI6W4&t=185s)

#### [Cascading Updates ](/watch?v=KVZ-P-ZI6W4&t=185s)

3:05

#### [Unpredictable Code Unpredictable Code 3:33 ](/watch?v=KVZ-P-ZI6W4&t=213s)

#### [Unpredictable Code ](/watch?v=KVZ-P-ZI6W4&t=213s)

3:33

Transcript

Follow along using the transcript.

Show transcript

### [Meta Developers 173K subscribers  ](/@MetaDevelopers)

[Videos](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/videos)

[About](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/about)

[Videos](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/videos)[About](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/about)[Website](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa3NZWjJkV29XeDMtT3d6UloySlNoeVBjUUZxUXxBQ3Jtc0trVmU5YmRTdTk5RDVHaWZuZFhaMWhFQW1ZYkczMGtlSVlvamFXb2Y0NHRza2tvQkpuNEVrVGdlQnBCWXFfaDktcnJWV001cnV1aGFZVWdLdjlVTEhVSnZkeFlMdG9OTHFWMGdLNHNhUmJYX3BremtSOA&q=https%3A%2F%2Fdevelopers.facebook.com%2F)[Facebook](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbVBNNHdSdHJ3UUdFbjQzdndiUlp6TGhuU2M5QXxBQ3Jtc0tueFZxLWVxMzZpNG5xcG5TQThJbVczUVRmem80cGRJSkpOQnlVUWIyYnRIVjZLbGpkbGY2b0dZaGFkcThaZ3UwTGt6c3ZXVkc0SG1tTnNIUWpNaU5CSGFKMDhRV2w5NGEyZDl5NXJuMzczb2c0RE02NA&q=https%3A%2F%2Fwww.facebook.com%2FMetaforDevelopers)[Instagram](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbE1sRFlkWUU5S3kxY3NFV1U5X2hjdVJSVWYzUXxBQ3Jtc0tuSWhmMjlDeWJZTGJrTmZnaEJyN21RU3Bka3hVNFhWUTk4aXBuU1ZPSW9LcldNXzRxcUNNR25xMXRsS2VTR0lrWVdTWWJQdUtGVjQzOXFFSXYxVHJad29UZW8tTVRTZXpyNmp4YWRYNGRzUUphQjl4MA&q=https%3A%2F%2Fwww.instagram.com%2Fmetafordevelopers%2F)[LinkedIn](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa21EOVc3Sk5qWTJPYzFqNC1VczRNc05pck42QXxBQ3Jtc0trSDhHR2IwaXBFcEpQbVZ3Vk52cUVLYURGaFQzN0FRdk9oZ09LUHU0T18xcTJqQXBmVXdEZ1ctSGdNbU9PSTV5R2pjYWtQNUVjdWprTERpNjJNcGpxUHItYXhsOXhzZ1F3enJxcGllRmNTdXNhU3ZMRQ&q=https%3A%2F%2Fwww.linkedin.com%2Fshowcase%2F6647805%2F)

##  Transcript

NaN / NaN

[ 30:14 30:14 Now playing ](/watch?v=7rDsRXj9-cU)

### [ React.js Conf 2015 Keynote 2 - A Deep Dive into React Native  Meta Developers Meta Developers  • • 149K views 9 years ago ](/watch?v=7rDsRXj9-cU)

[ ](/watch?v=8pDqJVdNa44)

### [ How A Small Team of Developers Created React at Facebook | React.js: The Documentary  Honeypot Honeypot  • • 1.4M views 1 year ago ](/watch?v=8pDqJVdNa44)

[ ](/watch?v=vwgmBsMSwmo)

### [ Introducing Agentforce 2.0 with Marc Benioff | Salesforce  Salesforce Salesforce  • • 20K views 10 hours ago New ](/watch?v=vwgmBsMSwmo)

[ ](/watch?v=Q5SMmKb7qVI)

### [ React Conf Keynote (Day 2)  React Conf React Conf  • • 14K views 4 months ago ](/watch?v=Q5SMmKb7qVI)

[ ](/watch?v=6aQgiJHReCI)

### [ React 19 is finally out!  Theo - t3․gg Theo - t3․gg  • • 64K views 8 days ago ](/watch?v=6aQgiJHReCI)

[ ](/watch?v=MGuKhcnrqGA)

### [ React.js Conf 2016 - Nick Schrock - Keynote  Meta Developers Meta Developers  • • 69K views 8 years ago ](/watch?v=MGuKhcnrqGA)

[ ](/watch?v=19g66ezsKAg)

### [ Next.js Conf 2024 Opening Keynote  Vercel Vercel  • • 17K views 1 month ago ](/watch?v=19g66ezsKAg)
Tap to unmute
[Data Fetching with React Server Components](https://m.youtube.com/watch?v=TQQPAU21ZUw)

Search

Share

Copy link

Info

Shopping

Tap to unmute

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.
[Skip to content](#geist-skip-nav)

[](https://vercel.com/home?utm_source=next-site&utm_medium=banner&utm_campaign=home "Go to Vercel homepage")

[](/?uwu=true "Go to the homepage")

[](/ "Go to the homepage")

Search documentation...`CtrlK`Search...`⌘K`

[](https://vercel.com/home?utm_source=next-site&utm_medium=banner&utm_campaign=home "Go to Vercel homepage")

[](/?uwu=true "Go to the homepage")

[](/ "Go to the homepage")

[Showcase](/showcase)[Docs](/docs "Documentation")[Blog](/blog)[Templates](https://vercel.com/templates/next.js?utm_source=next-site&utm_medium=navbar&utm_campaign=next_site_nav_templates)[Enterprise](https://vercel.com/contact/sales/nextjs?utm_source=next-site&utm_medium=navbar&utm_campaign=next_site_nav_enterprise)

Search documentation...`CtrlK`Search...`⌘K`[Deploy](https://vercel.com/new/clone?utm_source=next-site&utm_medium=banner&b=main&s=https%3A%2F%2Fgithub.com%2Fvercel%2Fvercel%2Ftree%2Fmain%2Fexamples%2Fnextjs&showOptionalTeamCreation=false&template=nextjs&teamCreateStatus=hidden&utm_campaign=home)[Learn](/learn)

# The React Framework for the Web

Used by some of the world's largest companies, Next.js enables you to create **high-quality web applications** with the power of React components.

[Get Started](/docs)[Learn Next.js](/learn?utm_source=next-site&utm_medium=homepage-cta&utm_campaign=home)

▲ ~ npx create-next-app@latest

## What's in Next.js?

Everything you need to build great products on the web.

[Original1440px375pxBuilt-in OptimizationsAutomatic Image, Font, and Script Optimizations for improved UX and Core Web Vitals.](/docs/app/building-your-application/optimizing/images)[Data FetchingMake your React component async and await your data. Next.js supports both server and client data fetching.](/docs/app/building-your-application/data-fetching)[Server ActionsRun server code by calling a function. Skip the API. Then, easily revalidate cached data and update your UI in one network roundtrip.](/docs/app/building-your-application/data-fetching/forms-and-mutations)[Advanced Routing & Nested LayoutsCreate routes using the file system, including support for more advanced routing patterns and UI layouts.](/docs/app/building-your-application/routing)

[Dynamic HTML StreamingInstantly stream UI from the server, integrated with the App Router and React Suspense.](/docs/app/building-your-application/routing/loading-ui-and-streaming)[CSS SupportStyle your application with your favorite tools, including support for CSS Modules, Tailwind CSS, and popular community libraries.](/docs/app/building-your-application/styling)[Route HandlersBuild API endpoints to securely connect with third-party services for handling auth or listening for webhooks.](/docs/app/building-your-application/routing/router-handlers)[MiddlewareTake control of the incoming request. Use code to define routing and access rules for authentication, experimentation, and internationalization.](/docs/app/building-your-application/routing/middleware)

[React Server ComponentsAdd components without sending additional client-side JavaScript. Built on the latest React features.](/docs/app/building-your-application/rendering/server-components)[Client and Server RenderingFlexible rendering and caching options, including Incremental Static Regeneration (ISR), on a per-page level.](/docs/app/building-your-application/rendering)[Next.js 15The power of full-stack to the frontend. Read the release notes.](/blog/next-15)

[Built-in OptimizationsAutomatic Image, Font, and Script Optimizations for improved UX and Core Web Vitals.](/docs/app/building-your-application/optimizing/images)[React Server ComponentsAdd components without sending additional client-side JavaScript. Built on the latest React features.](/docs/app/building-your-application/rendering/server-components)[Data FetchingMake your React component async and await your data. Next.js supports both server and client data fetching.](/docs/app/building-your-application/data-fetching)[Server ActionsRun server code by calling a function. Skip the API. Then, easily revalidate cached data and update your UI in one network roundtrip.](/docs/app/building-your-application/data-fetching/forms-and-mutations)[Advanced Routing & Nested LayoutsCreate routes using the file system, including support for more advanced routing patterns and UI layouts.](/docs/app/building-your-application/routing)

[Dynamic HTML StreamingInstantly stream UI from the server, integrated with the App Router and React Suspense.](/docs/app/building-your-application/routing/loading-ui-and-streaming)[CSS SupportStyle your application with your favorite tools, including support for CSS Modules, Tailwind CSS, and popular community libraries.](/docs/app/building-your-application/styling)[Route HandlersBuild API endpoints to securely connect with third-party services for handling auth or listening for webhooks.](/docs/app/building-your-application/routing/router-handlers)[MiddlewareTake control of the incoming request. Use code to define routing and access rules for authentication, experimentation, and internationalization.](/docs/app/building-your-application/routing/middleware)[Client and Server RenderingFlexible rendering and caching options, including Incremental Static Regeneration (ISR), on a per-page level.](/docs/app/building-your-application/rendering)[Next.js 15The power of full-stack to the frontend. Read the release notes.](/blog/next-15)

[Built-in OptimizationsAutomatic Image, Font, and Script Optimizations for improved UX and Core Web Vitals.](/docs/app/building-your-application/optimizing/images)[Dynamic HTML StreamingInstantly stream UI from the server, integrated with the App Router and React Suspense.](/docs/app/building-your-application/routing/loading-ui-and-streaming)[React Server ComponentsAdd components without sending additional client-side JavaScript. Built on the latest React features.](/docs/app/building-your-application/rendering/server-components)

[Data FetchingMake your React component async and await your data. Next.js supports both server and client data fetching.](/docs/app/building-your-application/data-fetching)[Server ActionsRun server code by calling a function. Skip the API. Then, easily revalidate cached data and update your UI in one network roundtrip.](/docs/app/building-your-application/data-fetching/forms-and-mutations)[Advanced Routing & Nested LayoutsCreate routes using the file system, including support for more advanced routing patterns and UI layouts.](/docs/app/building-your-application/routing)[CSS SupportStyle your application with your favorite tools, including support for CSS Modules, Tailwind CSS, and popular community libraries.](/docs/app/building-your-application/styling)[Route HandlersBuild API endpoints to securely connect with third-party services for handling auth or listening for webhooks.](/docs/app/building-your-application/routing/router-handlers)[MiddlewareTake control of the incoming request. Use code to define routing and access rules for authentication, experimentation, and internationalization.](/docs/app/building-your-application/routing/middleware)[Client and Server RenderingFlexible rendering and caching options, including Incremental Static Regeneration (ISR), on a per-page level.](/docs/app/building-your-application/rendering)

[Next.js 15The power of full-stack to the frontend. Read the release notes.](/blog/next-15)

## Built on a foundation of fast, production-grade tooling

Powered By

[ReactThe library for web and native user interfaces. Next.js is built on the latest React features, including Server Components and Actions.](https://react.dev)[TurbopackAn incremental bundler optimized for JavaScript and TypeScript, written in Rust , and built into Next.js.](https://turbo.build)[Speedy Web CompilerAn extensible Rust based platform for the next generation of fast developer tools, and can be used for both compilation and minification.](https://swc.rs)

## Get started in seconds

Deploy Next.js to Vercel

StarterEcommerceBlogAIPortfolioSaaSMulti-tenant AppsRealtime AppsDocumentationVirtual EventWeb3

Vercel is a frontend cloud from the creators of Next.js, making it easy to get started with Next.js quickly.

Jumpstart your Next.js development with pre-built solutions from Vercel and our community.

[Deploy a Template on Vercel](https://vercel.com/templates/next.js?utm_source=next-site&utm_medium=deploy-template-on-vercel-cta&utm_campaign=homepage-new)

Next.js Boilerplate

A Next.js starter from create-next-app.

Image Gallery Starter

An image gallery built on Next.js and Cloudinary.

Next.js Commerce

An all-in-one starter kit for high-performance ecommerce sites.

## The framework of choice when it matters

[Audible](/showcase)[Sonos](/showcase)

[Dice](/showcase)

[Notion](/showcase)

[Today](/showcase)[ProductHunt](/showcase)

[Nike](/showcase)[Washington Post](/showcase)

[Sonos](/showcase)[Audible](/showcase)[Nike](/showcase)

[Notion](/showcase)[ProductHunt](/showcase)[Washington Post](/showcase)

For **performance** , **efficiency** and **developer experience**. Next.js is trusted by some of the biggest names on the web.

[View the Next.js Showcase](/showcase)

## Customer Testimonials

> ### “With Next.js, we now consistently average 0.09 or lower for Cumulative Layout Shift, placing our site in the top tier for user experience and Core Web Vitals.”

Senior Software Engineer, Frontend

> ### “Our UI for Frame.io responds to user input within 100ms and all animations run at a consistent 60fps with Next.js.”

Charlton Roberts, Product Engineering

> ### “Next.js has been a game-changer for our agency work and team collaboration. Its powerful features have allowed us to build high-performance websites quickly and efficiently like never before.”

Daniel Lopes, Frontend Developer

[](https://vercel.com/home?utm_source=next-site&utm_medium=footer&utm_campaign=next-website "Go to the Vercel website")

[](https://github.com/vercel/next.js)[](https://bsky.app/profile/nextjs.org)

#### Resources

[Docs](/docs)[Learn](/learn)[Showcase](/showcase)[Blog](/blog)[Analytics](https://vercel.com/analytics?utm_source=next-site&utm_medium=footer&utm_campaign=home)[Next.js Conf](/conf)[Previews](https://vercel.com/products/previews?utm_source=next-site&utm_medium=footer&utm_campaign=home)

#### More

[Next.js Commerce](https://vercel.com/templates/next.js/nextjs-commerce?utm_source=next-site&utm_medium=footer&utm_campaign=home)[Contact Sales](https://vercel.com/contact/sales?utm_source=next-site&utm_medium=footer&utm_campaign=home)[GitHub](https://github.com/vercel/next.js)[Releases](https://github.com/vercel/next.js/releases)[Telemetry](/telemetry)[Governance](/governance)

#### About Vercel

[Next.js + Vercel](https://vercel.com/solutions/nextjs?utm_source=next-site&utm_medium=footer&utm_campaign=home)[Open Source Software](https://vercel.com/oss?utm_source=next-site&utm_medium=footer&utm_campaign=home)[GitHub](https://github.com/vercel)[Bluesky](https://bsky.app/profile/vercel.com)

#### Legal

[Privacy Policy](https://vercel.com/legal/privacy-policy)Cookie Preferences

#### Subscribe to our newsletter

Stay updated on new releases and features, guides, and case studies.

Subscribe

© 2024 Vercel, Inc.

[](https://github.com/vercel/next.js)[](https://bsky.app/profile/nextjs.org)
[](/)[Docs](/docs/en/main)[Blog](/blog)[Showcase](/showcase)[Resources](/resources)

[Docs](/docs/en/main)[Blog](/blog)[Showcase](/showcase)[Resources](/resources)

# Welcome to Remix

## Focused on web standards and modern web app UX, you’re simply going to build better websites

Remix is a full stack web framework that lets you focus on the user interface and work back through web standards to deliver a fast, slick, and resilient user experience. People are gonna love using your stuff.

[Get Started](/docs/start/quickstart)[Read the Docs](/docs)

```
export async function loader({ request }) {
 return getProjects();
}
export async function action({ request }) {
 const form = await request.formData();
 return createProject({
  title: form.get("title"),
 });
}
export default function Projects() {
 const projects = useLoaderData();
 const { state } = useNavigation();
 const busy = state === "submitting";
 return (
  <div>
   {projects.map((project) => (
    <Link to={project.slug}>
     {project.title}
    </Link>
   ))}
   <Form method="post">
    <input name="title" />
    <button type="submit" disabled={busy}>
     {busy
      ? "Creating..."
      : "Create New Project"}
    </button>
   </Form>
  </div>
 );
}

```


```
export async function loader({ request }) {
 return getProjects();
}
export async function action({ request }) {
 const form = await request.formData();
 return createProject({ title: form.get("title") });
}
export default function Projects() {
 const projects = useLoaderData();
 const { state } = useNavigation();
 const busy = state === "submitting";
 return (
  <div>
   {projects.map((project) => (
    <Link to={project.slug}>{project.title}</Link>
   ))}
   <Form method="post">
    <input name="title" />
    <button type="submit" disabled={busy}>
     {busy ? "Creating..." : "Create New Project"}
    </button>
   </Form>
  </div>
 );
}

```


## Testimonials

Twitter Logo

, 

Radix UI

> I've been waiting for something to encourage progressive enhancement in the React space *forever* and Remix truly is so much more. Proving we don't need to sacrifice React or choose SSG for a lightning fast, accessible UI, and the DX makes it all too easy 🤤

Cloudflare

> holy 💩 Remix is good

Discord, prev React Core

> I just rewrote my first Remix app on top of Cloudflare Workers and Supabase and it’s so damn good

Software Developer

> My mind is still blown away with Remix! So easy and elegant 😩. I love how it also focuses on Accessibility (Progressive Enhancement...) 🤯, A few days ago I was like wazzup with remix, we got Next.js and Svelte 😴 ... and now I'm fired up like crazy 😂. This is so good 🤤

Daffy, prev Vercel

> What’s really cool with Remix loaders is that you can do most of your data transformation and calculations there, like check if a list is empty, limit the number of records, only send specific attributes, so your React component just receives the data and renders it, no logic needed

Fullstack Dev, Frontside

> Remix is going to put developers on the Hot Path to build accessible, scaleable, and performant apps, that have stellar user experiences and amazing developer ergonomics. It's not only going to be a win for developers, but also a big win for the end-users!

Fullstack Developer

> In my opinion @remix_run will be game changer for corporate teams hesitant to adopt full stack JavaScript. The core concepts are so intuitive you can pick it up in a day, and it will even integrate into your existing stack.

Software Engineer, Box

> I love what @mjackson and @ryanflorence are doing with Remix! Deploying to AWS Lambda in under 30 seconds 🤯

Web Developer

> Building with @remix_run has been awesome so far. Having used Next.js for applications for years, the nested layouts are a wonderful feature. I also haven't learned this much about the web in years.

Web Developer

> I love using @remix_run for my website. Remix has improved my productivity as a front-end developer by empowering me to seamlessly switch between front-end and back-end code.

App Developer

> If you're doing #webdevelopment you should check out Remix 🔥 It's a new (old) paradigm for web dev, which simplifies our code, especially state management😅, speeds up our page loads, and gives us a mental model and framework we can rely on to create our best work

![](/wave.png)![](/loading.gif)

## While you were waiting for your static site to build, distributed web infra­structure got really good. Break through the static.

Remix is a seamless server and browser runtime that provides snappy page loads and instant transitions by leveraging distributed systems and native browser features instead of clunky static builds. Built on the Web Fetch API (instead of Node) **it can run anywhere**. It already runs natively on Cloudflare Workers, and of course supports serverless and traditional Node.js environments, so you can come as you are.

Page speed is only one aspect of our true goal though. We're after **better user experiences**. As you’ve pushed the boundaries of the web, your tools haven’t caught up to your appetite. **Remix is ready** to serve you from the initial request to the fanciest UX your designers can think up. Check it out 👀

## Remix has a cheat code:Nested Routes.

↑↑↓↓←→←→BA↵

Websites usually have levels of navigation that control child views.

Not only are these components pretty much always coupled to URL segments...

...they’re also the semantic boundary of data loading and code splitting.

Hover or tap the buttons to see how they’re all related

👇

<Root><Sales><Invoices><Invoice id={id}>

example.com/sales/invoices/102000

Fakebooks

Dashboard

Accounts

Sales

Expenses

Reports

Sales

Overview

Subscriptions

Invoices

Customers

Deposits

Overdue

$10,800

Due Soon

$62,000

Invoice List

Santa Monica

$10,800

1995

Overdue

Stankonia

$8,000

2000

Due Today

Ocean Avenue

$9,500

2003

Paid

Tubthumper

$14,000

1997

Due in 10 Days

Wide Open Sp...

$4,600

1998

Due in 8 Days

Stankonia

$8,000

Due Today • Invoiced 10/31/2000

Pro Plan

$6,000

Custom

$2,000

Net Total

$8,000

## What about loading states?

Through nested routes, Remix can eliminate nearly every loading state.

Most web apps fetch inside of components, creating request waterfalls, slower loads, and jank.

Remix loads data in parallel on the server and sends a fully formed HTML document. Way faster, jank free.

Without Remix

about:blank

document

root.js

user.json

sales.js

sales/nav.json

invoices.js

invoice.js

invoice/{id}.json

With Remix

about:blank

document

root.js

sales.js

invoices.js

invoice.js

(Keep scrolling to compare)

Say good­bye to Spinnageddon

Say good­bye to Spinnageddon

## Pre-fetching Everything

Nested routes allow Remix to make your app as fast as instant.

Remix can prefetch everything in parallel before the user clicks a link.

Public Data. User Data. Modules. Heck, even CSS.

Zero loading states. Zero skeleton UI. Zero jank.

Alright, you caught us, they’re just prefetch link tags, #useThePlatform

example.com/dashboard

Fakebooks

Dashboard

Accounts

Sales

Expenses

Reports

Dashboard

Recent Activity

Alerts

Messages

New Invoice

Customer

Stankonia

Net Total

$8,000

New Invoice

Customer

Ocean Avenue

Net Total

$9,500

## Data loading

... ![](/yawn.png)

You ever notice most of the code in your app is for changing data?

Imagine if React only had props and no way to set state. What’s the point? If a web framework helps you load data but doesn’t help you update it, what’s the point? Remix doesn’t drop you off at the `<form onSubmit>` cliff. (What the heck does `event.preventDefault` do anyway?)

Resilient, progressively enhanced data updates are built in.

It’s so simple it’s kind of silly. Just make a form...

...and an action on a route module. It looks like traditional HTML forms but enables fully dynamic web experiences you're after.

Remix runs the action server side, revalidates data client side, and even handles race conditions from resubmissions.

Get fancy with transition hooks and make some pending UI. Remix handles all the state, you simply ask for it.

Or get jiggy with some optimistic UI. Remix provides the data being sent to the server so you can skip the busy spinners for mutations, too.

HTML forms for mutations. Who knew?

```
export default function NewInvoice() {
 return (
  <Form method="post">
   <input type="text" name="company" />
   <input type="text" name="amount" />
   <button type="submit">Create</button>
  </Form>
 );
}

```


## Error Handling

:)

Your websites run into problems, but with Remix they don’t need to be refreshed. Error handling is hard to remember and hard to do. That’s why it’s built in.

Remix handles errors while Server Rendering. Errors while Client Rendering. Even errors in your server side data handling.

![](/qrcode.png)

## Route Error Boundaries keep the happy path happy.

Each route module can export an error boundary next to the default route component.

If an error is thrown, client or server side, users see the boundary instead of the default component.

Routes w/o trouble render normally, so users have more options than slamming refresh.

If a route has no boundary, errors bubble up. Just put one at the top and chill out about errors in code review, yeah?

```
export default function InvoiceRoute() {
 const invoice = useLoaderData();
 return <Invoice data={invoice} />;
}

```


That's probably enough for now. What are you waiting for?

[Go Play!](/docs)

[GitHub Logo](https://github.com/remix-run)[YouTube logo](https://youtube.com/remix_run)[](https://rmx.as/discord)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

1/19

React 18 Keynote

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=HS6vIYkSNks "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=ytudH8je5ko "Next \(SHIFT+n\)")

0:00 / 33:48•Watch full videoLive

•

•

Scroll for details

#  React 18 Keynote

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

1.9K

Share

Download

Download 

Save

128K views3 years ago

128,024 views • Dec 9, 2021 

Show less 

Andrew Clark, Lauren Tan, Juan Tejada & Ricky Hanlon…...more 

...more 

## 

Key moments

View all

#### [React's APIs are rooted primarily in design principles, not programming React's APIs are rooted primarily in design principles, not programming 2:06 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

#### [React's APIs are rooted primarily in design principles, not programming ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

2:06

#### [When you use React, it feels like you're directly authoring the user experience When you use React, it feels like you're directly authoring the user experience 3:50 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

#### [When you use React, it feels like you're directly authoring the user experience ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

3:50

#### [Specifying the loading state Specifying the loading state 12:27 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

#### [Specifying the loading state ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

12:27

#### [Day 1 improvements Automatic batching Day 1 improvements Automatic batching 18:36 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

#### [Day 1 improvements Automatic batching ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

18:36

#### [Concurrent rendering...? Concurrent rendering...? 19:24 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1164s)

#### [Concurrent rendering...? ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1164s)

19:24

#### [A behind-the-scenes capability in React that powers features like Suspense A behind-the-scenes capability in React that powers features like Suspense 19:40 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1180s)

#### [A behind-the-scenes capability in React that powers features like Suspense ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1180s)

19:40

#### ["Concurrent mode" Abandoned adoption strategy "Concurrent mode" Abandoned adoption strategy 21:14 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1274s)

#### ["Concurrent mode" Abandoned adoption strategy ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1274s)

21:14

#### [Concurrent features New adoption strategy Concurrent features New adoption strategy 21:38 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1298s)

#### [Concurrent features New adoption strategy ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1298s)

21:38

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# React 18 Keynote

128,024 views128K views

Dec 9, 2021

1.9K

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [React's APIs are rooted primarily in design principles, not programming React's APIs are rooted primarily in design principles, not programming 2:06 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

#### [React's APIs are rooted primarily in design principles, not programming ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

2:06

#### [When you use React, it feels like you're directly authoring the user experience When you use React, it feels like you're directly authoring the user experience 3:50 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

#### [When you use React, it feels like you're directly authoring the user experience ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

3:50

#### [Specifying the loading state Specifying the loading state 12:27 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

#### [Specifying the loading state ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

12:27

#### [Day 1 improvements Automatic batching Day 1 improvements Automatic batching 18:36 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

#### [Day 1 improvements Automatic batching ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

18:36

#### [Concurrent rendering...? Concurrent rendering...? 19:24 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1164s)

#### [Concurrent rendering...? ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1164s)

19:24

#### [A behind-the-scenes capability in React that powers features like Suspense A behind-the-scenes capability in React that powers features like Suspense 19:40 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1180s)

#### [A behind-the-scenes capability in React that powers features like Suspense ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1180s)

19:40

#### ["Concurrent mode" Abandoned adoption strategy "Concurrent mode" Abandoned adoption strategy 21:14 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1274s)

#### ["Concurrent mode" Abandoned adoption strategy ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1274s)

21:14

#### [Concurrent features New adoption strategy Concurrent features New adoption strategy 21:38 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1298s)

#### [Concurrent features New adoption strategy ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1298s)

21:38

#### [React 18 Beta React 18 Beta 22:22 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1342s)

#### [React 18 Beta ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1342s)

22:22

#### [React 18 RC React 18 RC 22:38 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1358s)

#### [React 18 RC ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1358s)

22:38

#### [Final round of public testing Final round of public testing 22:47 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1367s)

#### [Final round of public testing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1367s)

22:47

#### [Server Components Server Components 23:37 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1417s)

#### [Server Components ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1417s)

23:37

#### [Concurrent rendering was originally inspired by problems found in React Native Concurrent rendering was originally inspired by problems found in React Native 26:18 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1578s)

#### [Concurrent rendering was originally inspired by problems found in React Native ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1578s)

26:18

#### [Where is React Native today? Where is React Native today? 30:47 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1847s)

#### [Where is React Native today? ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1847s)

30:47

Sync to video time 

Sync to video time

##  Description

React 18 Keynote

1.9KLikes

128,024Views

2021Dec 9

Andrew Clark, Lauren Tan, Juan Tejada & Ricky Hanlon

Show less ...more

Andrew Clark, Lauren Tan, Juan Tejada & Ricky Hanlon…...more 

...more Show less 

## 

Key moments

View all

#### [React's APIs are rooted primarily in design principles, not programming React's APIs are rooted primarily in design principles, not programming 2:06 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

#### [React's APIs are rooted primarily in design principles, not programming ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

2:06

#### [When you use React, it feels like you're directly authoring the user experience When you use React, it feels like you're directly authoring the user experience 3:50 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

#### [When you use React, it feels like you're directly authoring the user experience ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

3:50

#### [Specifying the loading state Specifying the loading state 12:27 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

#### [Specifying the loading state ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

12:27

#### [Day 1 improvements Automatic batching Day 1 improvements Automatic batching 18:36 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

#### [Day 1 improvements Automatic batching ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

18:36

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:React 18 for app developers

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

1 / 191 / 19

Loop playlist 

Shuffle playlist 

[ ▶ [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=ytudH8je5ko)

### [ React 18 for app developers  React Conf React Conf  • • 65K views 3 years ago ](/watch?v=ytudH8je5ko)

[ ](/watch?v=lyEKhv8-3n0)

### [ React Conf Keynote (Day 1)  React Conf React Conf  • • 7.7K views 4 months ago ](/watch?v=lyEKhv8-3n0)

[ ](/watch?v=ByBPyMBTzM0)

### [ Concurrent Rendering in React - Andrew Clark and Brian Vaughn - React Conf 2018  React Conf React Conf  • • 79K views 6 years ago ](/watch?v=ByBPyMBTzM0)

[ ](/watch?v=gfU1iZnjRZM)

### [ Next.js Conf Keynote (Next.js 14)  Vercel Vercel  • • 58K views 1 year ago ](/watch?v=gfU1iZnjRZM)

[ ](/watch?v=NZoRlVi3MjQ)

### [ The Story of Concurrent React  uidotdev uidotdev  • • 161K views 2 years ago ](/watch?v=NZoRlVi3MjQ)

[ ](/watch?v=pj5N-Khihgc)

### [ Streaming Server Rendering with Suspense  React Conf React Conf  • • 48K views 3 years ago ](/watch?v=pj5N-Khihgc)

[ ](/watch?v=R0B2HsSM78s)

### [ React Unpacked: A Roadmap to React 19 | Sam Selikoff  React Conf React Conf  • • 6.3K views 4 months ago ](/watch?v=R0B2HsSM78s)

[ ](/watch?v=TQQPAU21ZUw)

### [ Data Fetching with React Server Components  Meta Open Source Meta Open Source  • • 264K views 3 years ago ](/watch?v=TQQPAU21ZUw)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

2/19

React 18 for app developers

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=FZ0cG47msEk "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=pj5N-Khihgc "Next \(SHIFT+n\)")

0:00 / 19:08•Watch full videoLive

•

•

Scroll for details

#  React 18 for app developers

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

961

Share

Download

Download 

Save

65K views3 years ago

65,767 views • Dec 9, 2021 

Show less 

Shruti Kapoor…...more 

...more 

## 

Key moments

View all

#### [Before React 18: not batched Before React 18: not batched 1:58 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

#### [Before React 18: not batched ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

1:58

#### [Automatic batching in React 18 Automatic batching in React 18 2:16 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

#### [Automatic batching in React 18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

2:16

#### [Server rendering Server rendering 3:18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

#### [Server rendering ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

3:18

#### [Suspense on the server Suspense on the server 3:54 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

#### [Suspense on the server ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

3:54

#### [New APls (concurrent features) New APls (concurrent features) 5:44 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=344s)

#### [New APls (concurrent features) ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=344s)

5:44

#### [How to upgrade to React 18 How to upgrade to React 18 7:24 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=444s)

#### [How to upgrade to React 18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=444s)

7:24

#### [Edge cases to watch out for Edge cases to watch out for 17:42 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=1062s)

#### [Edge cases to watch out for ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=1062s)

17:42

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# React 18 for app developers

65,767 views65K views

Dec 9, 2021

961

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [Before React 18: not batched Before React 18: not batched 1:58 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

#### [Before React 18: not batched ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

1:58

#### [Automatic batching in React 18 Automatic batching in React 18 2:16 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

#### [Automatic batching in React 18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

2:16

#### [Server rendering Server rendering 3:18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

#### [Server rendering ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

3:18

#### [Suspense on the server Suspense on the server 3:54 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

#### [Suspense on the server ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

3:54

#### [New APls (concurrent features) New APls (concurrent features) 5:44 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=344s)

#### [New APls (concurrent features) ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=344s)

5:44

#### [How to upgrade to React 18 How to upgrade to React 18 7:24 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=444s)

#### [How to upgrade to React 18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=444s)

7:24

#### [Edge cases to watch out for Edge cases to watch out for 17:42 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=1062s)

#### [Edge cases to watch out for ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=1062s)

17:42

Sync to video time 

Sync to video time

##  Description

React 18 for app developers

961Likes

65,767Views

2021Dec 9

Shruti Kapoor

Show less ...more

Shruti Kapoor…...more 

...more Show less 

## 

Key moments

View all

#### [Before React 18: not batched Before React 18: not batched 1:58 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

#### [Before React 18: not batched ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

1:58

#### [Automatic batching in React 18 Automatic batching in React 18 2:16 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

#### [Automatic batching in React 18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

2:16

#### [Server rendering Server rendering 3:18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

#### [Server rendering ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

3:18

#### [Suspense on the server Suspense on the server 3:54 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

#### [Suspense on the server ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

3:54

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Streaming Server Rendering with Suspense

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

2 / 192 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ ▶ [ ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=pj5N-Khihgc)

### [ Streaming Server Rendering with Suspense  React Conf React Conf  • • 48K views 3 years ago ](/watch?v=pj5N-Khihgc)

[ ](/watch?v=FZ0cG47msEk)

### [ React 18 Keynote  React Conf React Conf  • • 128K views 3 years ago ](/watch?v=FZ0cG47msEk)

[ ](/watch?v=lhVGdErZuN4)

### [ Re-introducing Relay  React Conf React Conf  • • 22K views 3 years ago ](/watch?v=lhVGdErZuN4)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=lGEMwh32soc)

### [ React without memo  React Conf React Conf  • • 140K views 3 years ago ](/watch?v=lGEMwh32soc)

[ ](/watch?v=oxDfrke8rZg)

### [ React Developer Tooling  React Conf React Conf  • • 19K views 3 years ago ](/watch?v=oxDfrke8rZg)

[ ](/watch?v=lvhPq5chokM)

### [ Forget About Memo | Lauren Tan  React Conf React Conf  • • 3.7K views 4 months ago ](/watch?v=lvhPq5chokM)
Tap to unmute

[Open App](vnd.youtube://m.youtube.com/watch?v=pj5N-Khihgc&feature=mweb_c3_open_app_11268432&itc_campaign=mweb_c3_open_app_11268432&redirect_app_store_ios=1&app=desktop)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

4/19

The first React Working Group

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=pj5N-Khihgc "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=oxDfrke8rZg "Next \(SHIFT+n\)")

0:00 / 14:41•Watch full videoLive

•

•

Scroll for details

#  The first React Working Group

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

84

Share

Download

Download 

Save

12K views3 years ago

12,473 views • Dec 9, 2021 

Show less 

Aakansha Doshi…...more 

...more 

## 

Key moments

View all

#### [Meeting between React & Redux Team Meeting between React & Redux Team 5:13 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

#### [Meeting between React & Redux Team ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

5:13

#### [Internals of Concurrent Scheduling Internals of Concurrent Scheduling 9:53 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

#### [Internals of Concurrent Scheduling ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

9:53

#### [How React keeps browser interactive during hydration? How React keeps browser interactive during hydration? 10:15 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

#### [How React keeps browser interactive during hydration? ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

10:15

#### [Prepare libraries for concurrent support. Prepare libraries for concurrent support. 10:46 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

#### [Prepare libraries for concurrent support. ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

10:46

#### [Beginner friendly Questions Beginner friendly Questions 12:32 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=752s)

#### [Beginner friendly Questions ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=752s)

12:32

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# The first React Working Group

12,473 views12K views

Dec 9, 2021

84

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [Meeting between React & Redux Team Meeting between React & Redux Team 5:13 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

#### [Meeting between React & Redux Team ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

5:13

#### [Internals of Concurrent Scheduling Internals of Concurrent Scheduling 9:53 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

#### [Internals of Concurrent Scheduling ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

9:53

#### [How React keeps browser interactive during hydration? How React keeps browser interactive during hydration? 10:15 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

#### [How React keeps browser interactive during hydration? ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

10:15

#### [Prepare libraries for concurrent support. Prepare libraries for concurrent support. 10:46 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

#### [Prepare libraries for concurrent support. ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

10:46

#### [Beginner friendly Questions Beginner friendly Questions 12:32 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=752s)

#### [Beginner friendly Questions ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=752s)

12:32

Sync to video time 

Sync to video time

##  Description

The first React Working Group

84Likes

12,473Views

2021Dec 9

Aakansha Doshi

Show less ...more

Aakansha Doshi…...more 

...more Show less 

## 

Key moments

View all

#### [Meeting between React & Redux Team Meeting between React & Redux Team 5:13 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

#### [Meeting between React & Redux Team ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

5:13

#### [Internals of Concurrent Scheduling Internals of Concurrent Scheduling 9:53 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

#### [Internals of Concurrent Scheduling ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

9:53

#### [How React keeps browser interactive during hydration? How React keeps browser interactive during hydration? 10:15 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

#### [How React keeps browser interactive during hydration? ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

10:15

#### [Prepare libraries for concurrent support. Prepare libraries for concurrent support. 10:46 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

#### [Prepare libraries for concurrent support. ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

10:46

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:React Developer Tooling

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

4 / 194 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ ▶ [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

25 videos

### [React Conf 2024](/watch?v=p6auCiVoa3c&list=PLNG_1j3cPCaapCRvpsyQ2CrNtnTtLf2jz)

[React Conf](/@ReactConfOfficial) • [Playlist](/@ReactConfOfficial)

[View full playlist](/playlist?list=PLNG_1j3cPCaapCRvpsyQ2CrNtnTtLf2jz)

[ ](/watch?v=cxbVN1F-aag)

### [ Let’s break React’s rules | Charlotte Isambert  React Conf React Conf  • • 2K views 4 months ago ](/watch?v=cxbVN1F-aag)

[ ](/watch?v=pOo7x8OiAec)

### [ And Now You Understand React Server Components | Kent C. Dodds  React Conf React Conf  • • 13K views 4 months ago ](/watch?v=pOo7x8OiAec)

[ ](/watch?v=oxDfrke8rZg)

### [ React Developer Tooling  React Conf React Conf  • • 19K views 3 years ago ](/watch?v=oxDfrke8rZg)

[ ](/watch?v=AJOGzVygGcY)

### [ What's new in React 19 | Lydia Hallie  React Conf React Conf  • • 51K views 4 months ago ](/watch?v=AJOGzVygGcY)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=iCkPaE4nxaw)

### [ React team Q&A  React Conf React Conf  • • 1.2K views 4 months ago ](/watch?v=iCkPaE4nxaw)
Tap to unmute

[Open App](intent://m.youtube.com/watch?v=oxDfrke8rZg&feature=mweb_c3_open_app_11268432&itc_campaign=mweb_c3_open_app_11268432&redirect_app_store_ios=1&app=desktop#Intent;package=com.google.android.youtube;scheme=vnd.youtube;launchFlags=268435456;end)
React without memo

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Up next

LiveUpcoming

CancelPlay Now

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

0:00 / 12:00•Watch full videoLive

•

•

Scroll for details

•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/)

Search 

Search 

[ ](/)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

7/19

React Docs Keynote

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=lGEMwh32soc "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=-7odLW_hG7s "Next \(SHIFT+n\)")

0:00 / 10:06•Watch full videoLive

•

•

Scroll for details

#  React Docs Keynote

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

221

Share

Download

Download 

Save

12K views3 years ago

12,268 views • Dec 9, 2021 

Show less 

Rachel Nabors…...more 

...more 

## 

Key moments

View all

#### [React Docs Keynote React Docs Keynote 0:35 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

#### [React Docs Keynote ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

0:35

#### [Illustrations Illustrations 6:01 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

#### [Illustrations ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

6:01

#### [Diagrams Diagrams 6:13 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

#### [Diagrams ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

6:13

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# React Docs Keynote

12,268 views12K views

Dec 9, 2021

221

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [React Docs Keynote React Docs Keynote 0:35 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

#### [React Docs Keynote ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

0:35

#### [Illustrations Illustrations 6:01 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

#### [Illustrations ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

6:01

#### [Diagrams Diagrams 6:13 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

#### [Diagrams ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

6:13

Sync to video time 

Sync to video time

##  Description

React Docs Keynote

221Likes

12,268Views

2021Dec 9

Rachel Nabors

Show less ...more

Rachel Nabors…...more 

...more Show less 

## 

Key moments

View all

#### [React Docs Keynote React Docs Keynote 0:35 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

#### [React Docs Keynote ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

0:35

#### [Illustrations Illustrations 6:01 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

#### [Illustrations ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

6:01

#### [Diagrams Diagrams 6:13 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

#### [Diagrams ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

6:13

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Things I learnt from the new React docs

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

7 / 197 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ 12:52 12:52 Now playing ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ 12:01 12:01 Now playing ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ ▶ [ 10:07 10:07 Now playing ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ 9:20 9:20 Now playing ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=lyEKhv8-3n0)

### [ React Conf Keynote (Day 1)  React Conf React Conf  • • 7.7K views 4 months ago ](/watch?v=lyEKhv8-3n0)

[ ](/watch?v=pj5N-Khihgc)

### [ Streaming Server Rendering with Suspense  React Conf React Conf  • • 48K views 3 years ago ](/watch?v=pj5N-Khihgc)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=-7odLW_hG7s)

### [ Things I learnt from the new React docs  React Conf React Conf  • • 7.6K views 3 years ago ](/watch?v=-7odLW_hG7s)

[ ](/watch?v=FZ0cG47msEk)

### [ React 18 Keynote  React Conf React Conf  • • 128K views 3 years ago ](/watch?v=FZ0cG47msEk)

[ ](/watch?v=ytudH8je5ko)

### [ React 18 for app developers  React Conf React Conf  • • 65K views 3 years ago ](/watch?v=ytudH8je5ko)

[ ](/watch?v=KMjVTYmWnW0)

### [ Webinar: Learn the basics of Nextflow Tower Cloud (June 2023)  Seqera Seqera  • • 173 views 2 weeks ago ](/watch?v=KMjVTYmWnW0)

[ ](/watch?v=Ul3y1LXxzdU)

### [ Learn React Router v6 In 45 Minutes  Web Dev Simplified Web Dev Simplified  • • 574K views 2 years ago ](/watch?v=Ul3y1LXxzdU)

[ ](/watch?v=HPoC-k7Rxwo)

### [ Goodbye, useEffect: David Khourshid  Real World React Real World React  • • 235K views 2 years ago ](/watch?v=HPoC-k7Rxwo)
[Things I learnt from the new React docs](https://m.youtube.com/watch?v=-7odLW_hG7s)

Search

Share

Copy link

Info

Shopping

Tap to unmute

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.
Tap to unmute

[Open App](vnd.youtube://m.youtube.com/watch?v=5X-WEQflCL0&feature=mweb_c3_open_app_11268432&itc_campaign=mweb_c3_open_app_11268432&redirect_app_store_ios=1&app=desktop)
Tap to unmute

[Open App](intent://m.youtube.com/watch?v=7cPWmID5XAk&feature=mweb_c3_open_app_11268432&itc_campaign=mweb_c3_open_app_11268432&redirect_app_store_ios=1&app=desktop#Intent;package=com.google.android.youtube;scheme=vnd.youtube;launchFlags=268435456;end)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

11/19

Interactive playgrounds with React

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=7cPWmID5XAk "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=lhVGdErZuN4 "Next \(SHIFT+n\)")

0:00 / 9:00•Watch full videoLive

•

•

Scroll for details

#  Interactive playgrounds with React

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

330

Share

Download

Download 

Save

14K views3 years ago

14,492 views • Dec 9, 2021 

Show less 

Delba De Oliveira…...more 

...more 

## 

Key moments

View all

#### [An interactive, learning experience with a tight feedback loop. An interactive, learning experience with a tight feedback loop. 1:37 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

#### [An interactive, learning experience with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

1:37

#### [USER INTERFACE COMPLEX TOPIC USER INTERFACE COMPLEX TOPIC 3:15 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

#### [USER INTERFACE COMPLEX TOPIC ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

3:15

#### [Interactive, learning experiences with a tight feedback loop. Interactive, learning experiences with a tight feedback loop. 3:32 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

#### [Interactive, learning experiences with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

3:32

#### [Static & Dynamic Static & Dynamic 5:47 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

#### [Static & Dynamic ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

5:47

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# Interactive playgrounds with React

14,492 views14K views

Dec 9, 2021

330

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [An interactive, learning experience with a tight feedback loop. An interactive, learning experience with a tight feedback loop. 1:37 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

#### [An interactive, learning experience with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

1:37

#### [USER INTERFACE COMPLEX TOPIC USER INTERFACE COMPLEX TOPIC 3:15 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

#### [USER INTERFACE COMPLEX TOPIC ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

3:15

#### [Interactive, learning experiences with a tight feedback loop. Interactive, learning experiences with a tight feedback loop. 3:32 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

#### [Interactive, learning experiences with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

3:32

#### [Static & Dynamic Static & Dynamic 5:47 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

#### [Static & Dynamic ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

5:47

Sync to video time 

Sync to video time

##  Description

Interactive playgrounds with React

330Likes

14,492Views

2021Dec 9

Delba De Oliveira

Show less ...more

Delba De Oliveira…...more 

...more Show less 

## 

Key moments

View all

#### [An interactive, learning experience with a tight feedback loop. An interactive, learning experience with a tight feedback loop. 1:37 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

#### [An interactive, learning experience with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

1:37

#### [USER INTERFACE COMPLEX TOPIC USER INTERFACE COMPLEX TOPIC 3:15 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

#### [USER INTERFACE COMPLEX TOPIC ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

3:15

#### [Interactive, learning experiences with a tight feedback loop. Interactive, learning experiences with a tight feedback loop. 3:32 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

#### [Interactive, learning experiences with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

3:32

#### [Static & Dynamic Static & Dynamic 5:47 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

#### [Static & Dynamic ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

5:47

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Re-introducing Relay

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

11 / 1911 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ ▶ [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=lhVGdErZuN4)

### [ Re-introducing Relay  React Conf React Conf  • • 22K views 3 years ago ](/watch?v=lhVGdErZuN4)

[ ](/watch?v=DFwLGLmLuFg)

### [ Caching in NextJs ft Delba Oliveira from Vercel  Hamed Bahram Hamed Bahram  • • 20K views 5 months ago ](/watch?v=DFwLGLmLuFg)

[ ](/watch?v=ytudH8je5ko)

### [ React 18 for app developers  React Conf React Conf  • • 65K views 3 years ago ](/watch?v=ytudH8je5ko)

[ ](/watch?v=z1F6Dv5Pw4M)

### [ Perplexity AI: A Game-Changer for Teacher Research  Teacher's Tech Teacher's Tech  • • 4.1K views 7 months ago ](/watch?v=z1F6Dv5Pw4M)

[ ](/watch?v=AJOGzVygGcY)

### [ What's new in React 19 | Lydia Hallie  React Conf React Conf  • • 51K views 4 months ago ](/watch?v=AJOGzVygGcY)

[ ](/watch?v=pOo7x8OiAec)

### [ And Now You Understand React Server Components | Kent C. Dodds  React Conf React Conf  • • 13K views 4 months ago ](/watch?v=pOo7x8OiAec)

[ ](/watch?v=sPM2WiwA1us)

### [ GSoC 2025 Complete Roadmap | Google Summer of Code  Apna College Apna College  • • 335K views 2 weeks ago ](/watch?v=sPM2WiwA1us)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

12/19

Re-introducing Relay

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=zL8cz2W0z34 "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=9L4FFrvwJwY "Next \(SHIFT+n\)")

0:00 / 19:34•Watch full videoLive

•

•

Scroll for details

#  Re-introducing Relay

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

620

Share

Download

Download 

Save

22K views3 years ago

22,710 views • Dec 9, 2021 

Show less 

Robert Balicki…...more 

...more 

## 

Key moments

View all

#### [Implicit dependency between query declaration and subcomponents Implicit dependency between query declaration and subcomponents 4:05 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

#### [Implicit dependency between query declaration and subcomponents ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

4:05

#### [Every component can be reasoned about in isolation Every component can be reasoned about in isolation 6:41 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

#### [Every component can be reasoned about in isolation ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

6:41

#### [Slow-to-calculate fields Slow-to-calculate fields 8:04 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

#### [Slow-to-calculate fields ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

8:04

#### [Components and loading states are separate concerns Components and loading states are separate concerns 10:20 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

#### [Components and loading states are separate concerns ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

10:20

#### [Pre-generated instructions Pre-generated instructions 15:12 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=912s)

#### [Pre-generated instructions ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=912s)

15:12

#### [5x on average 7x at p95 5x on average 7x at p95 17:03 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=1023s)

#### [5x on average 7x at p95 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=1023s)

17:03

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# Re-introducing Relay

22,710 views22K views

Dec 9, 2021

620

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [Implicit dependency between query declaration and subcomponents Implicit dependency between query declaration and subcomponents 4:05 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

#### [Implicit dependency between query declaration and subcomponents ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

4:05

#### [Every component can be reasoned about in isolation Every component can be reasoned about in isolation 6:41 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

#### [Every component can be reasoned about in isolation ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

6:41

#### [Slow-to-calculate fields Slow-to-calculate fields 8:04 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

#### [Slow-to-calculate fields ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

8:04

#### [Components and loading states are separate concerns Components and loading states are separate concerns 10:20 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

#### [Components and loading states are separate concerns ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

10:20

#### [Pre-generated instructions Pre-generated instructions 15:12 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=912s)

#### [Pre-generated instructions ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=912s)

15:12

#### [5x on average 7x at p95 5x on average 7x at p95 17:03 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=1023s)

#### [5x on average 7x at p95 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=1023s)

17:03

Sync to video time 

Sync to video time

##  Description

Re-introducing Relay

620Likes

22,710Views

2021Dec 9

Robert Balicki

Show less ...more

Robert Balicki…...more 

...more Show less 

## 

Key moments

View all

#### [Implicit dependency between query declaration and subcomponents Implicit dependency between query declaration and subcomponents 4:05 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

#### [Implicit dependency between query declaration and subcomponents ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

4:05

#### [Every component can be reasoned about in isolation Every component can be reasoned about in isolation 6:41 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

#### [Every component can be reasoned about in isolation ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

6:41

#### [Slow-to-calculate fields Slow-to-calculate fields 8:04 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

#### [Slow-to-calculate fields ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

8:04

#### [Components and loading states are separate concerns Components and loading states are separate concerns 10:20 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

#### [Components and loading states are separate concerns ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

10:20

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:React Native Desktop

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

12 / 1912 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ 12:52 12:52 Now playing ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ 12:01 12:01 Now playing ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ 10:07 10:07 Now playing ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ 9:20 9:20 Now playing ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ ▶ [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=FZ0cG47msEk)

### [ React 18 Keynote  React Conf React Conf  • • 128K views 3 years ago ](/watch?v=FZ0cG47msEk)

[ ](/watch?v=Tl0S7QkxFE4)

### [ Data Fetching With Suspense In Relay | Joe Savona  React Conf React Conf  • • 30K views 5 years ago ](/watch?v=Tl0S7QkxFE4)

[ ](/watch?v=xnvzz7Z658I)

### [ Deep dive on Relay GraphQL client for React  Hasura Hasura  • • 14K views 4 years ago ](/watch?v=xnvzz7Z658I)

[ ](/watch?v=lyEKhv8-3n0)

### [ React Conf Keynote (Day 1)  React Conf React Conf  • • 7.7K views 4 months ago ](/watch?v=lyEKhv8-3n0)

[ ](/watch?v=ytudH8je5ko)

### [ React 18 for app developers  React Conf React Conf  • • 65K views 3 years ago ](/watch?v=ytudH8je5ko)

[ ](/watch?v=WxPtYJRjLL0)

### [ F8 2019: Building the New Facebook.com with React, GraphQL and Relay  Meta Developers Meta Developers  • • 31K views 5 years ago ](/watch?v=WxPtYJRjLL0)

[ ](/watch?v=9L4FFrvwJwY)

### [ React Native Desktop  React Conf React Conf  • • 19K views 3 years ago ](/watch?v=9L4FFrvwJwY)

[ ](/watch?v=NdWTDZ7dg-8)

### [ Design Representation  Hardware Modeling Using Verilog Hardware Modeling Using Verilog  • • 105K views 7 years ago ](/watch?v=NdWTDZ7dg-8)

[ ](/watch?v=If1Lw4pLLEo)

### [ Spring Framework Tutorial | Full Course  Telusko Telusko  • • 2.2M views 5 years ago ](/watch?v=If1Lw4pLLEo)

[ ](/watch?v=1_dLaSjzOMY)

### [ Write Clean Code with React Suspense | React Error Boundaries Explained  Dave Gray Dave Gray  • • 28K views 1 year ago ](/watch?v=1_dLaSjzOMY)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[Sign in](https://accounts.google.com/ServiceLogin?service=youtube&uilel=3&passive=true&continue=https%3A%2F%2Fwww.youtube.com%2Fsignin%3Faction_handle_signin%3Dtrue%26app%3Ddesktop%26hl%3Den%26next%3Dhttps%253A%252F%252Fwww.youtube.com%252Fwatch%253Fv%253D9L4FFrvwJwY%2526list%253DPLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa%2526index%253D13&hl=en&ec=65620)

[ ](/ "YouTube Home") IN 

13/19

React Native Desktop

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=lhVGdErZuN4 "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=NLj73vrc2I8 "Next \(SHIFT+n\)")

0:00 / 15:32•Watch full videoLive

•

•

Scroll for details

#  React Native Desktop

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

306

Share

Download

Download 

Save

19K views3 years ago

19,398 views • Dec 9, 2021 

Show less 

Eric Rozell & Steven Moyes…...more 

...more 

## 

Key moments

View all

#### [React Native Desktop React Native Desktop 0:36 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

#### [React Native Desktop ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

0:36

#### [Miniview Miniview 3:46 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

#### [Miniview ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

3:46

#### [Participant Reordering Participant Reordering 4:14 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

#### [Participant Reordering ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

4:14

#### [How and Why Is Microsoft Using React Native How and Why Is Microsoft Using React Native 7:50 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

#### [How and Why Is Microsoft Using React Native ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

7:50

#### [Xbox Apps Xbox Apps 8:43 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=523s)

#### [Xbox Apps ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=523s)

8:43

#### [Powerapps Player Powerapps Player 9:21 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=561s)

#### [Powerapps Player ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=561s)

9:21

#### [Demo Demo 10:52 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=652s)

#### [Demo ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=652s)

10:52

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# React Native Desktop

19,398 views19K views

Dec 9, 2021

306

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [React Native Desktop React Native Desktop 0:36 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

#### [React Native Desktop ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

0:36

#### [Miniview Miniview 3:46 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

#### [Miniview ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

3:46

#### [Participant Reordering Participant Reordering 4:14 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

#### [Participant Reordering ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

4:14

#### [How and Why Is Microsoft Using React Native How and Why Is Microsoft Using React Native 7:50 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

#### [How and Why Is Microsoft Using React Native ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

7:50

#### [Xbox Apps Xbox Apps 8:43 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=523s)

#### [Xbox Apps ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=523s)

8:43

#### [Powerapps Player Powerapps Player 9:21 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=561s)

#### [Powerapps Player ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=561s)

9:21

#### [Demo Demo 10:52 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=652s)

#### [Demo ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=652s)

10:52

Sync to video time 

Sync to video time

##  Description

React Native Desktop

306Likes

19,398Views

2021Dec 9

Eric Rozell & Steven Moyes

Show less ...more

Eric Rozell & Steven Moyes…...more 

...more Show less 

## 

Key moments

View all

#### [React Native Desktop React Native Desktop 0:36 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

#### [React Native Desktop ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

0:36

#### [Miniview Miniview 3:46 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

#### [Miniview ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

3:46

#### [Participant Reordering Participant Reordering 4:14 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

#### [Participant Reordering ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

4:14

#### [How and Why Is Microsoft Using React Native How and Why Is Microsoft Using React Native 7:50 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

#### [How and Why Is Microsoft Using React Native ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

7:50

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:On-device Machine Learning for React Native

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

13 / 1913 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ 12:52 12:52 Now playing ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ 12:01 12:01 Now playing ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ 10:07 10:07 Now playing ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ 9:20 9:20 Now playing ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ 10:44 10:44 Now playing ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ 11:09 11:09 Now playing ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ 9:01 9:01 Now playing ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ 19:35 19:35 Now playing ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ ▶ [ 15:33 15:33 Now playing ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ 14:01 14:01 Now playing ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ 19:23 19:23 Now playing ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ 8:32 8:32 Now playing ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ 10:33 10:33 Now playing ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ 10:15 10:15 Now playing ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ 9:38 9:38 Now playing ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

24:40

### [From Gaming to Productivity: how Microsoft is using React Native across a portfolio of experiences](/watch?v=EgpHCLCwebU)

[Callstack Engineers](/@CallstackEngineers)

2.8K views • 1 year ago

17:19

### [ELECTRON: why people HATE it, why devs USE it](/watch?v=G1K0Mb-rLBU)

[The Linux Experiment](/@TheLinuxEXP)

195K views • 2 years ago

22:54

### [What’s next for React Native for Desktop? — Saad Najmi, Steven Moyes | React Universe Conf 2024](/watch?v=1leGdmEse9Y)

[Callstack Engineers](/@CallstackEngineers)

292 views • 2 months ago

19:35

### [Re-introducing Relay](/watch?v=lhVGdErZuN4)

[React Conf](/@ReactConfOfficial)

22K views • 3 years ago

40:20

### [MS Build SK119 React Native: Build cross platform apps that target Windows, Mac, and more!](/watch?v=QMFbrHZnvvw)

[Microsoft 365 Developer](/@Microsoft365Developer)

24K views • 4 years ago

59:26

### [Is your business ready for AI? We can help!](/watch?v=wd4jgaHaZh0)

[The I.T. Company Ltd.](/@thei.t.companyltd.5368)

25 views • 7 days ago

8:15

### [Australia v India 2024-25 | Third Test | Day Five](/watch?v=pGvp5Q-1Yag)

[cricket.com.au](/@cricketcomau)

2.5M views • 4 hours ago

New

18:12

### [Gabriel Donadel – Launching Desktop Apps to Orbit with React Native | App.js Conf 2024](/watch?v=K7yC3JKfWYU)

[Software Mansion](/@SoftwareMansion)

2.7K views • 6 months ago

1:11:48

### [Create a Desktop App With JavaScript & Electron](/watch?v=ML743nrkMHw)

[Traversy Media](/@TraversyMedia)

382K views • 2 years ago
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

14/19

On-device Machine Learning for React Native

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Up next

LiveUpcoming

CancelPlay Now

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=9L4FFrvwJwY "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=oPfSC5bQPR8 "Next \(SHIFT+n\)")

0:00 / 14:00•Watch full videoLive

•

•

Scroll for details

#  On-device Machine Learning for React Native

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

195

Share

Download

Download 

Save

12K views3 years ago

12,132 views • Dec 9, 2021 

Show less 

Roman Rädle…...more 

...more 

## 

Key moments

View all

#### [Image Classification Model Image Classification Model 3:57 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

#### [Image Classification Model ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

3:57

#### [Image Classification Image Classification 4:12 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

#### [Image Classification ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

4:12

#### [Type Safety Type Safety 7:33 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

#### [Type Safety ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

7:33

#### [React Hooks React Hooks 8:54 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

#### [React Hooks ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

8:54

#### [Camera Component Camera Component 11:52 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=712s)

#### [Camera Component ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=712s)

11:52

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# On-device Machine Learning for React Native

12,132 views12K views

Dec 9, 2021

195

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [Image Classification Model Image Classification Model 3:57 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

#### [Image Classification Model ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

3:57

#### [Image Classification Image Classification 4:12 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

#### [Image Classification ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

4:12

#### [Type Safety Type Safety 7:33 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

#### [Type Safety ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

7:33

#### [React Hooks React Hooks 8:54 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

#### [React Hooks ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

8:54

#### [Camera Component Camera Component 11:52 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=712s)

#### [Camera Component ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=712s)

11:52

Sync to video time 

Sync to video time

##  Description

On-device Machine Learning for React Native

195Likes

12,132Views

2021Dec 9

Roman Rädle

Show less ...more

Roman Rädle…...more 

...more Show less 

## 

Key moments

View all

#### [Image Classification Model Image Classification Model 3:57 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

#### [Image Classification Model ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

3:57

#### [Image Classification Image Classification 4:12 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

#### [Image Classification ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

4:12

#### [Type Safety Type Safety 7:33 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

#### [Type Safety ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

7:33

#### [React Hooks React Hooks 8:54 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

#### [React Hooks ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

8:54

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:React 18 for External Store Libraries

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

14 / 1914 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ 12:52 12:52 Now playing ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ 12:01 12:01 Now playing ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ 10:07 10:07 Now playing ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ 9:20 9:20 Now playing ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ 10:44 10:44 Now playing ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ ▶ [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=0-S5a0eXPoc)

### [ React Native Tutorial for Beginners - Build a React Native App  Programming with Mosh Programming with Mosh  • • 3.2M views 4 years ago ](/watch?v=0-S5a0eXPoc)

[ ](/watch?v=oPfSC5bQPR8)

### [ React 18 for External Store Libraries  React Conf React Conf  • • 19K views 3 years ago ](/watch?v=oPfSC5bQPR8)

[ ](/watch?v=2LqrfEzuIMk)

### [ How to Deploy Machine Learning Model using Flask (Iris Dataset) | Python  Hackers Realm Hackers Realm  • • 20K views 2 years ago ](/watch?v=2LqrfEzuIMk)

[ ](/watch?v=Ij5MoUnLQ0E)

### [ ONNX and ONNX Runtime  Microsoft Research Microsoft Research  • • 26K views 5 years ago ](/watch?v=Ij5MoUnLQ0E)

[ ](/watch?v=tFnNBhr0WTw)

### [ Build your own AI Shopping App with React Native and Supabase Vector  Simon Grimm Simon Grimm  • • 7.7K views 1 year ago ](/watch?v=tFnNBhr0WTw)

[ ](/watch?v=lhVGdErZuN4)

### [ Re-introducing Relay  React Conf React Conf  • • 22K views 3 years ago ](/watch?v=lhVGdErZuN4)

[ ](/watch?v=S--SD4QbGps)

### [ Build a Machine Learning App From Scratch with Flask & Docker  Patrick Loeber Patrick Loeber  • • 55K views 2 years ago ](/watch?v=S--SD4QbGps)

[ ](/watch?v=-ovliZG617g)

### [ Redux Toolkit - Complete Tutorial ( with Project ) 🔥🔥  RoadsideCoder RoadsideCoder  • • 23K views 3 months ago ](/watch?v=-ovliZG617g)

[ ](/watch?v=2FeymQoKvrk)

### [ Build and Deploy Your Own ChatGPT AI App in JavaScript | OpenAI, Machine Learning  JavaScript Mastery JavaScript Mastery  • • 861K views 1 year ago ](/watch?v=2FeymQoKvrk)

[ ](/watch?v=pC7mCEHiYQw)

### [ How to deploy your custom tensorflow model to react native  Oh Yicong Oh Yicong  • • 25K views 4 years ago ](/watch?v=pC7mCEHiYQw)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

15/19

React 18 for External Store Libraries

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=NLj73vrc2I8 "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=dcm8fjBfro8 "Next \(SHIFT+n\)")

0:00 / 19:22•Watch full videoLive

•

•

Scroll for details

#  React 18 for External Store Libraries

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

377

Share

Download

Download 

Save

19K views3 years ago

19,815 views • Dec 9, 2021 

Show less 

Daishi Kato…...more 

...more 

## 

Key moments

View all

#### [About the Speaker About the Speaker 0:35 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

#### [About the Speaker ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

0:35

#### [Concurrent Rendering and Libraries Concurrent Rendering and Libraries 2:10 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

#### [Concurrent Rendering and Libraries ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

2:10

#### [Tearing with Concurrent Rendering Tearing with Concurrent Rendering 3:04 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

#### [Tearing with Concurrent Rendering ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

3:04

#### [What are External Stores? What are External Stores? 3:34 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

#### [What are External Stores? ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

3:34

#### [Package: use-sync-external-store Package: use-sync-external-store 6:52 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=412s)

#### [Package: use-sync-external-store ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=412s)

6:52

#### [What Are External Stores Again? What Are External Stores Again? 16:30 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=990s)

#### [What Are External Stores Again? ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=990s)

16:30

#### [Get Ready for React 18 Get Ready for React 18 18:33 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=1113s)

#### [Get Ready for React 18 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=1113s)

18:33

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# React 18 for External Store Libraries

19,815 views19K views

Dec 9, 2021

377

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [About the Speaker About the Speaker 0:35 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

#### [About the Speaker ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

0:35

#### [Concurrent Rendering and Libraries Concurrent Rendering and Libraries 2:10 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

#### [Concurrent Rendering and Libraries ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

2:10

#### [Tearing with Concurrent Rendering Tearing with Concurrent Rendering 3:04 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

#### [Tearing with Concurrent Rendering ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

3:04

#### [What are External Stores? What are External Stores? 3:34 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

#### [What are External Stores? ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

3:34

#### [Package: use-sync-external-store Package: use-sync-external-store 6:52 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=412s)

#### [Package: use-sync-external-store ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=412s)

6:52

#### [What Are External Stores Again? What Are External Stores Again? 16:30 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=990s)

#### [What Are External Stores Again? ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=990s)

16:30

#### [Get Ready for React 18 Get Ready for React 18 18:33 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=1113s)

#### [Get Ready for React 18 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=1113s)

18:33

Sync to video time 

Sync to video time

##  Description

React 18 for External Store Libraries

377Likes

19,815Views

2021Dec 9

Daishi Kato

Show less ...more

Daishi Kato…...more 

...more Show less 

## 

Key moments

View all

#### [About the Speaker About the Speaker 0:35 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

#### [About the Speaker ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

0:35

#### [Concurrent Rendering and Libraries Concurrent Rendering and Libraries 2:10 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

#### [Concurrent Rendering and Libraries ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

2:10

#### [Tearing with Concurrent Rendering Tearing with Concurrent Rendering 3:04 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

#### [Tearing with Concurrent Rendering ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

3:04

#### [What are External Stores? What are External Stores? 3:34 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

#### [What are External Stores? ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

3:34

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Building accessible components with React 18

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

15 / 1915 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ ▶ [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=ytudH8je5ko)

### [ React 18 for app developers  React Conf React Conf  • • 65K views 3 years ago ](/watch?v=ytudH8je5ko)

[ ](/watch?v=FZ0cG47msEk)

### [ React 18 Keynote  React Conf React Conf  • • 128K views 3 years ago ](/watch?v=FZ0cG47msEk)

[ ](/watch?v=pj5N-Khihgc)

### [ Streaming Server Rendering with Suspense  React Conf React Conf  • • 48K views 3 years ago ](/watch?v=pj5N-Khihgc)

[ ](/watch?v=LOH1l-MP_9k)

### [ ALL React Hooks Explained in 12 Minutes  Code Bootcamp Code Bootcamp  • • 169K views 8 months ago ](/watch?v=LOH1l-MP_9k)

[ ](/watch?v=zL8cz2W0z34)

### [ Interactive playgrounds with React  React Conf React Conf  • • 14K views 3 years ago ](/watch?v=zL8cz2W0z34)

[ ](/watch?v=r8Dg0KVnfMA)

### [ Learn React Query In 50 Minutes  Web Dev Simplified Web Dev Simplified  • • 315K views 1 year ago ](/watch?v=r8Dg0KVnfMA)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

16/19

Building accessible components with React 18

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Up next

LiveUpcoming

CancelPlay Now

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=oPfSC5bQPR8 "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=S4a0QlsH0pU "Next \(SHIFT+n\)")

0:00 / 8:31•Watch full videoLive

•

Intro

•

Scroll for details

#  Building accessible components with React 18

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

480

Share

Download

Download 

Save

14K views3 years ago

14,977 views • Dec 9, 2021 

Show less 

Diego Haz…...more 

...more 

## 

Chapters

View all

#### [Intro Intro 0:00 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

#### [Intro ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

0:00

#### [Overview Overview 0:27 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

#### [Overview ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

0:27

#### [Problems Problems 0:56 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

#### [Problems ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

0:56

#### [NVDA NVDA 2:15 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

#### [NVDA ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

2:15

#### [Arcade Arcade 2:43 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=163s)

#### [Arcade ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=163s)

2:43

#### [Combo Box Combo Box 4:20 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=260s)

#### [Combo Box ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=260s)

4:20

#### [Dynamic Component Dynamic Component 5:12 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=312s)

#### [Dynamic Component ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=312s)

5:12

#### [Improvements Improvements 6:21 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=381s)

#### [Improvements ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=381s)

6:21

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# Building accessible components with React 18

14,977 views14K views

Dec 9, 2021

480

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Chapters

These chapters are auto-generated #### [Intro Intro 0:00 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

#### [Intro ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

0:00

#### [Overview Overview 0:27 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

#### [Overview ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

0:27

#### [Problems Problems 0:56 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

#### [Problems ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

0:56

#### [NVDA NVDA 2:15 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

#### [NVDA ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

2:15

#### [Arcade Arcade 2:43 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=163s)

#### [Arcade ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=163s)

2:43

#### [Combo Box Combo Box 4:20 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=260s)

#### [Combo Box ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=260s)

4:20

#### [Dynamic Component Dynamic Component 5:12 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=312s)

#### [Dynamic Component ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=312s)

5:12

#### [Improvements Improvements 6:21 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=381s)

#### [Improvements ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=381s)

6:21

Sync to video time 

Sync to video time

##  Description

Building accessible components with React 18

480Likes

14,977Views

2021Dec 9

Diego Haz

Show less ...more

Diego Haz…...more 

...more Show less 

## 

Chapters

View all

#### [Intro Intro 0:00 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

#### [Intro ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

0:00

#### [Overview Overview 0:27 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

#### [Overview ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

0:27

#### [Problems Problems 0:56 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

#### [Problems ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

0:56

#### [NVDA NVDA 2:15 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

#### [NVDA ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

2:15

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Accessible Japanese Form Components with React

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

16 / 1916 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ ▶ [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=lhVGdErZuN4)

### [ Re-introducing Relay  React Conf React Conf  • • 22K views 3 years ago ](/watch?v=lhVGdErZuN4)

[ ](/watch?v=lGEMwh32soc)

### [ React without memo  React Conf React Conf  • • 140K views 3 years ago ](/watch?v=lGEMwh32soc)

[ ](/watch?v=QuLfCUh-iwI)

### [ 3 React Mistakes, 1 App Killer  Jack Herrington Jack Herrington  • • 116K views 1 year ago ](/watch?v=QuLfCUh-iwI)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=eXRlVpw1SIQ)

### [ Creating High-Quality React Components: Best Practices for Reusability  Josh tried coding Josh tried coding  • • 112K views 1 year ago ](/watch?v=eXRlVpw1SIQ)

[ ](/watch?v=lTPh6NGLAmk)

### [ Why You Should Use React Aria Components...  Jolly Coding Jolly Coding  • • 16K views 6 months ago ](/watch?v=lTPh6NGLAmk)

[ ](/watch?v=lkFeFzhOEoc)

### [ React accessibility essentials for developers  LogRocket LogRocket  • • 4.5K views 2 years ago ](/watch?v=lkFeFzhOEoc)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

17/19

Accessible Japanese Form Components with React

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=dcm8fjBfro8 "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=b3l4WxipFsE "Next \(SHIFT+n\)")

0:00 / 10:32•Watch full videoLive

•

Introduction

•

Scroll for details

#  Accessible Japanese Form Components with React

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

68

Share

Download

Download 

Save

4.4K views3 years ago

4,485 views • Dec 9, 2021 

Show less 

Tafu Nakazaki…...more 

...more 

## 

Chapters

View all

#### [Introduction Introduction 0:00 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

#### [Introduction ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

0:00

#### [Problematic administrative procedures Problematic administrative procedures 0:47 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

#### [Problematic administrative procedures ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

0:47

#### [Challenges in human resource and management Challenges in human resource and management 2:29 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

#### [Challenges in human resource and management ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

2:29

#### [Challenges complexity Challenges complexity 4:27 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

#### [Challenges complexity ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

4:27

#### [Challenges user diversity Challenges user diversity 5:46 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=346s)

#### [Challenges user diversity ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=346s)

5:46

#### [Conclusion Conclusion 10:17 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=617s)

#### [Conclusion ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=617s)

10:17

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# Accessible Japanese Form Components with React

4,485 views4.4K views

Dec 9, 2021

68

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Chapters

These chapters are auto-generated #### [Introduction Introduction 0:00 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

#### [Introduction ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

0:00

#### [Problematic administrative procedures Problematic administrative procedures 0:47 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

#### [Problematic administrative procedures ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

0:47

#### [Challenges in human resource and management Challenges in human resource and management 2:29 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

#### [Challenges in human resource and management ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

2:29

#### [Challenges complexity Challenges complexity 4:27 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

#### [Challenges complexity ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

4:27

#### [Challenges user diversity Challenges user diversity 5:46 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=346s)

#### [Challenges user diversity ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=346s)

5:46

#### [Conclusion Conclusion 10:17 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=617s)

#### [Conclusion ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=617s)

10:17

Sync to video time 

Sync to video time

##  Description

Accessible Japanese Form Components with React

68Likes

4,485Views

2021Dec 9

Tafu Nakazaki

Show less ...more

Tafu Nakazaki…...more 

...more Show less 

## 

Chapters

View all

#### [Introduction Introduction 0:00 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

#### [Introduction ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

0:00

#### [Problematic administrative procedures Problematic administrative procedures 0:47 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

#### [Problematic administrative procedures ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

0:47

#### [Challenges in human resource and management Challenges in human resource and management 2:29 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

#### [Challenges in human resource and management ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

2:29

#### [Challenges complexity Challenges complexity 4:27 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

#### [Challenges complexity ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

4:27

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:UI Tools for artists

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

17 / 1917 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ ▶ [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=lkFeFzhOEoc)

### [ React accessibility essentials for developers  LogRocket LogRocket  • • 4.5K views 2 years ago ](/watch?v=lkFeFzhOEoc)

[ ](/watch?v=lyEKhv8-3n0)

### [ React Conf Keynote (Day 1)  React Conf React Conf  • • 7.7K views 4 months ago ](/watch?v=lyEKhv8-3n0)

[ ](/watch?v=z8xUCzToff8)

### [ Accessibility Fundamentals with Rob Dodson  SFHTML5 SFHTML5  • • 104K views 6 years ago ](/watch?v=z8xUCzToff8)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=b3l4WxipFsE)

### [ UI Tools for artists  React Conf React Conf  • • 5.7K views 3 years ago ](/watch?v=b3l4WxipFsE)

[ ](/watch?v=AJOGzVygGcY)

### [ What's new in React 19 | Lydia Hallie  React Conf React Conf  • • 51K views 4 months ago ](/watch?v=AJOGzVygGcY)

[ ](/watch?v=pGvp5Q-1Yag)

### [ Australia v India 2024-25 | Third Test | Day Five  cricket.com.au cricket.com.au  • • 2.5M views 4 hours ago New ](/watch?v=pGvp5Q-1Yag)

[ ](/watch?v=e2nkq3h1P68)

### [ Learn Accessibility - Full a11y Tutorial  freeCodeCamp.org freeCodeCamp.org  • • 76K views 10 months ago ](/watch?v=e2nkq3h1P68)

[ ](/watch?v=lTPh6NGLAmk)

### [ Why You Should Use React Aria Components...  Jolly Coding Jolly Coding  • • 16K views 6 months ago ](/watch?v=lTPh6NGLAmk)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

18/19

UI Tools for artists

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=S4a0QlsH0pU "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=HS6vIYkSNks "Next \(SHIFT+n\)")

0:00 / 10:14•Watch full videoLive

•

•

Scroll for details

#  UI Tools for artists

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

83

Share

Download

Download 

Save

5.7K views3 years ago

5,718 views • Dec 9, 2021 

Show less 

Lyle Troxell…...more 

...more 

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# UI Tools for artists

5,718 views5.7K views

Dec 9, 2021

83

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Description

UI Tools for artists

83Likes

5,718Views

2021Dec 9

Lyle Troxell

Show less ...more

Lyle Troxell…...more 

...more Show less 

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Hydrogen + React 18

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

18 / 1918 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ 12:52 12:52 Now playing ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ 12:01 12:01 Now playing ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ 10:07 10:07 Now playing ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ 9:20 9:20 Now playing ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ 10:44 10:44 Now playing ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ ▶ [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=lhVGdErZuN4)

### [ Re-introducing Relay  React Conf React Conf  • • 22K views 3 years ago ](/watch?v=lhVGdErZuN4)

[ ](/watch?v=pj5N-Khihgc)

### [ Streaming Server Rendering with Suspense  React Conf React Conf  • • 48K views 3 years ago ](/watch?v=pj5N-Khihgc)

[ ](/watch?v=5X-WEQflCL0)

### [ Learning in the Browser  React Conf React Conf  • • 5.7K views 3 years ago ](/watch?v=5X-WEQflCL0)

[ ](/watch?v=CS2hxS9MdSo)

### [ Manipur: Police Seize Starlink Device Made by Elon Musk’s SpaceX | Vantage with Palki Sharma  Firstpost Firstpost  • • 263K views 18 hours ago New ](/watch?v=CS2hxS9MdSo)

[ ](/watch?v=YLo6g58vUm0)

### [ Welcome to design systems - Lesson 1 : Introduction to design systems  Figma Figma  • • 247K views 1 year ago ](/watch?v=YLo6g58vUm0)

[ ](/watch?v=pGvp5Q-1Yag)

### [ Australia v India 2024-25 | Third Test | Day Five  cricket.com.au cricket.com.au  • • 2.5M views 4 hours ago New ](/watch?v=pGvp5Q-1Yag)

[ ](/watch?v=oJA1CXmVtgE)

### [ Nirmala Sitharaman VS Priyanka Gandhi🔥 : War Of Words Between Them | Lok Sabha | News Buzz  News Buzz News Buzz  • • 288K views 21 hours ago New ](/watch?v=oJA1CXmVtgE)

[ ](/watch?v=n2waUD7hXbM)

### [ ஒரே நாடு ஒரே தேர்தல்.. ``நேற்றே முடிவு தெரிந்துவிட்டது'' - பாஜகவுக்கு காத்திருந்த அதிர்ச்சி  Thanthi TV Thanthi TV  • • 33K views 6 hours ago New ](/watch?v=n2waUD7hXbM)

[ ](/watch?v=Ivwn0zN8y-4)

### [ 3D Art for 2D Artists: How to stop worrying, and begin to play in the 3rd dimension  Cave Darr Cave Darr  • • 331 views 2 weeks ago ](/watch?v=Ivwn0zN8y-4)
Tap to unmute
[Skip to main content](#__docusaurus_skipToContent_fallback)

The New Architecture has arrived - [learn more](/blog/2024/10/23/the-new-architecture-is-here)

[**React Native**](/)

[Development](#)

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



[Contributing](/contributing/overview)[Community](/community/overview)[Showcase](/showcase)[Blog](/blog)[](https://github.com/facebook/react-native)

Search

[Star](https://github.com/facebook/react-native)

# React Native

## Learn once, write anywhere.

[Get Started](/docs/environment-setup)[Learn the Basics](/docs/getting-started)

# Create native apps for Android, iOS, and more using React

### React Native brings the best parts of developing with React to native development. It's a best-in-class JavaScript library for building user interfaces.

index.js

```
function HomeScreen() {  return (   <View>    <Text> Hello World 👋 🌍!</Text>  </View>  ); }
```


**Written in JavaScript, rendered with native code.** React primitives render to native platform UI, meaning your app uses the same native platform APIs other apps do.

# Native development for everyone

### React Native lets you create truly native apps and doesn't compromise your users' experiences. It provides a core set of platform agnostic native components like `View`, `Text`, and `Image` that map directly to the platform's native UI building blocks.

# Get a head start with a framework

### React Native brings the React programming paradigm to platforms like Android and iOS. It doesn’t prescribe how to do routing, or how to access each of the numerous platform APIs. To build a new app with React Native, we recommend a framework like [Expo](https://expo.dev).

#### File-based routing

Create stack, modal, drawer, and tab screens with minimal boilerplate using your filesystem.

#### Use any library, SDK, or native code

Generate native changes or write your own native code. Use over 50 modules to create your app.

#### Developer tools

Get started quickly with Expo Go, then continue with expo-dev-client: a module that adds Expo’s tools to apps that require native changes.

# Watch and learn

### Watch talks by the React team and learn how to get the most out of React Native. Find the latest on .

#### FB 2019: Mobile innovation with React Native

45:29

#### Why React Native?

1:42

# Meta supported. Community driven.

Meta released React Native in 2015 and has been maintaining it ever since.

In 2018, React Native had the [2nd highest](https://octoverse.github.com/2018/projects#repositories) number of contributors for any repository in GitHub. Today, React Native is supported by contributions from individuals and companies around the world including [Callstack](https://callstack.com/), [Expo](https://expo.io/), [Infinite Red](https://infinite.red/), [Microsoft](https://www.microsoft.com/) and [Software Mansion](https://swmansion.com/).

Our community is always shipping exciting new projects and exploring platforms beyond Android and iOS with repos like [React Native Windows](https://github.com/microsoft/react-native-windows#readme), [React Native macOS](https://github.com/microsoft/react-native-macos#readme) and [React Native Web](https://github.com/necolas/react-native-web#readme).

React Native is being used in thousands of apps, but it's likely you've already used it in one of these apps:

  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://blog.coinbase.com/optimizing-react-native-7e7bf7ac3a34)
  * [](https://formidable.com/work/puma-scaling-across-the-globe/)
  * [](https://github.com/wordpress-mobile/gutenberg-mobile)
  * [](https://engineering.tableau.com/react-native-at-tableau-3-years-in-89d43c38354c)
  * [](https://blog.flipkart.tech/the-journey-of-react-native-flipkart-47dcd0c3d1c6)
  * [](https://medium.com/mercari-engineering/why-we-decided-to-rewrite-our-ios-android-apps-from-scratch-in-react-native-9f1737558299)
  * [](https://discord.com/blog/how-discord-achieves-native-ios-performance-with-react-native)
  * [](https://www.techatbloomberg.com/blog/bloomberg-used-react-native-develop-new-consumer-app/)
  * [](https://medium.com/@Pinterest_Engineering/supporting-react-native-at-pinterest-f8c2233f90e6)
  * [](https://www.tesla.com/blog)
  * [](https://medium.com/walmartlabs/react-native-at-walmartlabs-cdd140589560#.ueonqqloc)
  * [](https://www.tencent.com/en-us/business.html)
  * [](https://github.com/mattermost/mattermost-mobile)



and [many more](/showcase).

# Welcome to the React Native community

[Get Started](/docs/environment-setup)

Develop

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



Participate

  * [Showcase](/showcase)
  * [Contributing](/contributing/overview)
  * [Community](/community/overview)
  * [Directory](https://reactnative.directory/)
  * [Stack Overflow](https://stackoverflow.com/questions/tagged/react-native)



Find us

  * [Blog](/blog)
  * [GitHub](https://github.com/facebook/react-native)



Explore More

  * [ReactJS](https://react.dev/)
  * [Privacy Policy](https://opensource.fb.com/legal/privacy/)
  * [Terms of Service](https://opensource.fb.com/legal/terms/)



[](https://opensource.fb.com/)

Copyright © 2024 Meta Platforms, Inc.
[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Fexpo%2Fexpo)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Fexpo%2Fexpo)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=expo%2Fexpo) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ expo ](/expo) / **[expo](/expo/expo) ** Public

  * [ Notifications ](/login?return_to=%2Fexpo%2Fexpo) You must be signed in to change notification settings
  * [ Fork 5.7k ](/login?return_to=%2Fexpo%2Fexpo)
  * [ Star  35.5k ](/login?return_to=%2Fexpo%2Fexpo)




An open-source framework for making universal native apps with React. Expo runs on Android, iOS, and the web. 

[docs.expo.dev](https://docs.expo.dev "https://docs.expo.dev")

### License

[ MIT license ](/expo/expo/blob/main/LICENSE)

[ 35.5k stars ](/expo/expo/stargazers) [ 5.7k forks ](/expo/expo/forks) [ Branches ](/expo/expo/branches) [ Tags ](/expo/expo/tags) [ Activity ](/expo/expo/activity)

[ Star  ](/login?return_to=%2Fexpo%2Fexpo)

[ Notifications ](/login?return_to=%2Fexpo%2Fexpo) You must be signed in to change notification settings

  * [ Code ](/expo/expo)
  * [ Issues 446 ](/expo/expo/issues)
  * [ Pull requests 225 ](/expo/expo/pulls)
  * [ Discussions ](/expo/expo/discussions)
  * [ Actions ](/expo/expo/actions)
  * [ Projects 0 ](/expo/expo/projects)
  * [ Wiki ](/expo/expo/wiki)
  * [ Security ](/expo/expo/security)
  * [ Insights ](/expo/expo/pulse)



Additional navigation options

  * [ Code  ](/expo/expo)
  * [ Issues  ](/expo/expo/issues)
  * [ Pull requests  ](/expo/expo/pulls)
  * [ Discussions  ](/expo/expo/discussions)
  * [ Actions  ](/expo/expo/actions)
  * [ Projects  ](/expo/expo/projects)
  * [ Wiki  ](/expo/expo/wiki)
  * [ Security  ](/expo/expo/security)
  * [ Insights  ](/expo/expo/pulse)



# expo/expo

main

[**618** Branches](/expo/expo/branches)[**0** Tags](/expo/expo/tags)

[](/expo/expo/branches)[](/expo/expo/tags)

Go to file

Code

## Folders and files

Name| Name| Last commit message| Last commit date  
---|---|---|---  
  
## Latest commit

[](/Kudo)[Kudo](/expo/expo/commits?author=Kudo)[[dev-menu][dev-launcher] fix broken local development on android (](/expo/expo/commit/d9b65b28e55d0e223b51ea4164a173696931e4af)[#33714](https://github.com/expo/expo/pull/33714)Dec 18, 2024[d9b65b2](/expo/expo/commit/d9b65b28e55d0e223b51ea4164a173696931e4af) · Dec 18, 2024

## History

[24,776 Commits](/expo/expo/commits/main/)[](/expo/expo/commits/main/)  
[.github](/expo/expo/tree/main/.github ".github")| [.github](/expo/expo/tree/main/.github ".github")  
[.vscode](/expo/expo/tree/main/.vscode ".vscode")| [.vscode](/expo/expo/tree/main/.vscode ".vscode")  
[apps](/expo/expo/tree/main/apps "apps")| [apps](/expo/expo/tree/main/apps "apps")  
[bin](/expo/expo/tree/main/bin "bin")| [bin](/expo/expo/tree/main/bin "bin")  
[docs](/expo/expo/tree/main/docs "docs")| [docs](/expo/expo/tree/main/docs "docs")  
[fastlane](/expo/expo/tree/main/fastlane "fastlane")| [fastlane](/expo/expo/tree/main/fastlane "fastlane")  
[guides](/expo/expo/tree/main/guides "guides")| [guides](/expo/expo/tree/main/guides "guides")  
[packages](/expo/expo/tree/main/packages "packages")| [packages](/expo/expo/tree/main/packages "packages")  
[patches](/expo/expo/tree/main/patches "patches")| [patches](/expo/expo/tree/main/patches "patches")  
[react-native-lab](/expo/expo/tree/main/react-native-lab "react-native-lab")| [react-native-lab](/expo/expo/tree/main/react-native-lab "react-native-lab")  
[scripts](/expo/expo/tree/main/scripts "scripts")| [scripts](/expo/expo/tree/main/scripts "scripts")  
[secrets](/expo/expo/tree/main/secrets "secrets")| [secrets](/expo/expo/tree/main/secrets "secrets")  
[template-files](/expo/expo/tree/main/template-files "template-files")| [template-files](/expo/expo/tree/main/template-files "template-files")  
[templates](/expo/expo/tree/main/templates "templates")| [templates](/expo/expo/tree/main/templates "templates")  
[tools](/expo/expo/tree/main/tools "tools")| [tools](/expo/expo/tree/main/tools "tools")  
[.dockerignore](/expo/expo/blob/main/.dockerignore ".dockerignore")| [.dockerignore](/expo/expo/blob/main/.dockerignore ".dockerignore")  
[.envrc](/expo/expo/blob/main/.envrc ".envrc")| [.envrc](/expo/expo/blob/main/.envrc ".envrc")  
[.eslintignore](/expo/expo/blob/main/.eslintignore ".eslintignore")| [.eslintignore](/expo/expo/blob/main/.eslintignore ".eslintignore")  
[.eslintrc.js](/expo/expo/blob/main/.eslintrc.js ".eslintrc.js")| [.eslintrc.js](/expo/expo/blob/main/.eslintrc.js ".eslintrc.js")  
[.gitattributes](/expo/expo/blob/main/.gitattributes ".gitattributes")| [.gitattributes](/expo/expo/blob/main/.gitattributes ".gitattributes")  
[.gitignore](/expo/expo/blob/main/.gitignore ".gitignore")| [.gitignore](/expo/expo/blob/main/.gitignore ".gitignore")  
[.gitmodules](/expo/expo/blob/main/.gitmodules ".gitmodules")| [.gitmodules](/expo/expo/blob/main/.gitmodules ".gitmodules")  
[.lfsconfig](/expo/expo/blob/main/.lfsconfig ".lfsconfig")| [.lfsconfig](/expo/expo/blob/main/.lfsconfig ".lfsconfig")  
[.prettierignore](/expo/expo/blob/main/.prettierignore ".prettierignore")| [.prettierignore](/expo/expo/blob/main/.prettierignore ".prettierignore")  
[.prettierrc](/expo/expo/blob/main/.prettierrc ".prettierrc")| [.prettierrc](/expo/expo/blob/main/.prettierrc ".prettierrc")  
[.swiftlint.yml](/expo/expo/blob/main/.swiftlint.yml ".swiftlint.yml")| [.swiftlint.yml](/expo/expo/blob/main/.swiftlint.yml ".swiftlint.yml")  
[.watchmanconfig](/expo/expo/blob/main/.watchmanconfig ".watchmanconfig")| [.watchmanconfig](/expo/expo/blob/main/.watchmanconfig ".watchmanconfig")  
[CHANGELOG.md](/expo/expo/blob/main/CHANGELOG.md "CHANGELOG.md")| [CHANGELOG.md](/expo/expo/blob/main/CHANGELOG.md "CHANGELOG.md")  
[CONTRIBUTING.md](/expo/expo/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")| [CONTRIBUTING.md](/expo/expo/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")  
[Gemfile](/expo/expo/blob/main/Gemfile "Gemfile")| [Gemfile](/expo/expo/blob/main/Gemfile "Gemfile")  
[Gemfile.lock](/expo/expo/blob/main/Gemfile.lock "Gemfile.lock")| [Gemfile.lock](/expo/expo/blob/main/Gemfile.lock "Gemfile.lock")  
[LICENSE](/expo/expo/blob/main/LICENSE "LICENSE")| [LICENSE](/expo/expo/blob/main/LICENSE "LICENSE")  
[README.md](/expo/expo/blob/main/README.md "README.md")| [README.md](/expo/expo/blob/main/README.md "README.md")  
[SECURITY.md](/expo/expo/blob/main/SECURITY.md "SECURITY.md")| [SECURITY.md](/expo/expo/blob/main/SECURITY.md "SECURITY.md")  
[SUPPORT.md](/expo/expo/blob/main/SUPPORT.md "SUPPORT.md")| [SUPPORT.md](/expo/expo/blob/main/SUPPORT.md "SUPPORT.md")  
[THIRD-PARTY-LICENSES](/expo/expo/blob/main/THIRD-PARTY-LICENSES "THIRD-PARTY-LICENSES")| [THIRD-PARTY-LICENSES](/expo/expo/blob/main/THIRD-PARTY-LICENSES "THIRD-PARTY-LICENSES")  
[buildAndroidTarballLocally.sh](/expo/expo/blob/main/buildAndroidTarballLocally.sh "buildAndroidTarballLocally.sh")| [buildAndroidTarballLocally.sh](/expo/expo/blob/main/buildAndroidTarballLocally.sh "buildAndroidTarballLocally.sh")  
[changelogVersions.json](/expo/expo/blob/main/changelogVersions.json "changelogVersions.json")| [changelogVersions.json](/expo/expo/blob/main/changelogVersions.json "changelogVersions.json")  
[dev-home-config.json](/expo/expo/blob/main/dev-home-config.json "dev-home-config.json")| [dev-home-config.json](/expo/expo/blob/main/dev-home-config.json "dev-home-config.json")  
[package.json](/expo/expo/blob/main/package.json "package.json")| [package.json](/expo/expo/blob/main/package.json "package.json")  
[tsconfig.json](/expo/expo/blob/main/tsconfig.json "tsconfig.json")| [tsconfig.json](/expo/expo/blob/main/tsconfig.json "tsconfig.json")  
[tsconfig.node.json](/expo/expo/blob/main/tsconfig.node.json "tsconfig.node.json")| [tsconfig.node.json](/expo/expo/blob/main/tsconfig.node.json "tsconfig.node.json")  
[yarn.lock](/expo/expo/blob/main/yarn.lock "yarn.lock")| [yarn.lock](/expo/expo/blob/main/yarn.lock "yarn.lock")  
View all files  
  
## Repository files navigation

  * [README](#)
  * [MIT license](#)
  * [Security](#)



[ ](https://expo.dev/)

# Expo

[](#expo)

[ ](https://www.npmjs.com/package/expo) [ ](https://chat.expo.dev) [ ](https://github.com/expo/expo/blob/main/LICENSE) [ ](http://www.npmtrends.com/expo)

[**Try Expo in the Browser**](https://snack.expo.dev) • [Read the Documentation](https://docs.expo.dev) • [Learn more on our blog](https://expo.dev/blog) • [Request a feature](https://expo.canny.io/feature-requests)

###### Follow us on

[](#follow-us-on)

[ ](https://github.com/expo) [ ](https://bsky.app/profile/expo.dev)

## Introduction

[](#introduction)

Expo is an open-source platform for making universal native apps that run on Android, iOS, and the web. It includes a universal runtime and libraries that let you build native apps by writing React and JavaScript.

This repository includes the Expo SDK, Modules API, Go app, CLI, Router, documentation, and various other supporting tools. [Expo Application Services (EAS)](https://expo.dev/eas) is a platform of hosted services that are deeply integrated with Expo open source tools. EAS helps you build, ship, and iterate on your app as an individual or a team.

Read the [Expo Community Guidelines](https://expo.dev/guidelines) before interacting in the repository. Thank you for helping keep the Expo community open and welcoming!

## Table of contents

[](#table-of-contents)

  * [📚 Documentation](#-documentation)
  * [🗺 Project Layout](#-project-layout)
  * [🏅 Badges](#-badges)
  * [👏 Contributing](#-contributing)
  * [❓ FAQ](#-faq)
  * [💙 The Team](#-the-team)
  * [License](#license)



## 📚 Documentation

[](#-documentation)

Learn about building and deploying universal apps [in our official docs!](https://docs.expo.dev)

  * [Getting Started](https://docs.expo.dev/)
  * [API Reference](https://docs.expo.dev/versions/latest/)
  * [Using Custom Native Modules](https://docs.expo.dev/workflow/customizing/)



## 🗺 Project Layout

[](#-project-layout)

  * `packages`[](/expo/expo/blob/main/packages) All the source code for Expo modules, if you want to edit a library or just see how it works this is where you'll find it.
  * `apps`[](/expo/expo/blob/main/apps) This is where you can find Expo projects which are linked to the development modules. You'll do most of your testing in here.
  * `apps/expo-go`[](/expo/expo/blob/main/apps/expo-go) This is where you can find the source code for Expo Go.
  * `apps/expo-go/ios/Exponent.xcworkspace`[](/expo/expo/blob/main/apps/expo-go/ios) is the Xcode workspace. When developing iOS, always open this instead of `Exponent.xcodeproj` because the workspace also loads the CocoaPods dependencies.
  * `docs`[](/expo/expo/blob/main/docs) The source code for **<https://docs.expo.dev>**
  * `templates`[](/expo/expo/blob/main/templates) The template projects you get when you run `npx create-expo-app`
  * `react-native-lab`[](/expo/expo/blob/main/react-native-lab) This is our fork of `react-native` used to build Expo Go.
  * `guides`[](/expo/expo/blob/main/guides) In-depth tutorials for advanced topics like contributing to the client.
  * `tools`[](/expo/expo/blob/main/tools) contain build and configuration tools.
  * `template-files`[](/expo/expo/blob/main/template-files) contains templates for files that require private keys. They are populated using the keys in `template-files/keys.json`.
  * `template-files/ios/dependencies.json`[](/expo/expo/blob/main/template-files/ios/dependencies.json) specifies the CocoaPods dependencies of the app.



## 🏅 Badges

[](#-badges)

Let everyone know your app can be run instantly in the _Expo Go_ app! 

[](https://expo.dev/client)

[](https://expo.dev/client)

```
[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-000.svg?style=flat-square&logo=EXPO&labelColor=f3f3f3&logoColor=000)](https://expo.dev/client)
[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-4630EB.svg?style=flat-square&logo=EXPO&labelColor=f3f3f3&logoColor=000)](https://expo.dev/client)
```


## 👏 Contributing

[](#-contributing)

If you like Expo and want to help make it better then check out our [contributing guide](/expo/expo/blob/main/CONTRIBUTING.md)! Check out the [CLI package](https://github.com/expo/expo/tree/main/packages/%40expo/cli) to work on the Expo CLI.

## ❓ FAQ

[](#-faq)

If you have questions about Expo and want answers, then check out our [Frequently Asked Questions](https://docs.expo.dev/faq/)!

If you still have questions you can ask them on our [Discord and Forums](https://chat.expo.dev) or X .

## 💙 The Team

[](#-the-team)

Curious about who makes Expo? Here are our [team members](https://expo.dev/about)!

## License

[](#license)

The Expo source code is made available under the [MIT license](/expo/expo/blob/main/LICENSE). Some of the dependencies are licensed differently, with the BSD license, for example.

[](https://user-images.githubusercontent.com/9664363/185428788-d762fd5d-97b3-4f59-8db7-f72405be9677.gif) [ ](https://user-images.githubusercontent.com/9664363/185428788-d762fd5d-97b3-4f59-8db7-f72405be9677.gif) [ ](https://user-images.githubusercontent.com/9664363/185428788-d762fd5d-97b3-4f59-8db7-f72405be9677.gif)

## About

An open-source framework for making universal native apps with React. Expo runs on Android, iOS, and the web. 

[docs.expo.dev](https://docs.expo.dev "https://docs.expo.dev")

### Topics

[ react ](/topics/react "Topic: react") [ javascript ](/topics/javascript "Topic: javascript") [ android ](/topics/android "Topic: android") [ ios ](/topics/ios "Topic: ios") [ mobile ](/topics/mobile "Topic: mobile") [ framework ](/topics/framework "Topic: framework") [ typescript ](/topics/typescript "Topic: typescript") [ react-native ](/topics/react-native "Topic: react-native") [ web ](/topics/web "Topic: web") [ frontend ](/topics/frontend "Topic: frontend") [ native ](/topics/native "Topic: native") [ universal ](/topics/universal "Topic: universal") [ web-framework ](/topics/web-framework "Topic: web-framework") [ native-apps ](/topics/native-apps "Topic: native-apps") [ app-framework ](/topics/app-framework "Topic: app-framework") [ expo ](/topics/expo "Topic: expo")

### Resources

[ Readme ](#readme-ov-file)

### License

[ MIT license ](#MIT-1-ov-file)

### Security policy

[ Security policy ](#security-ov-file)

[ Activity](/expo/expo/activity)

[ Custom properties](/expo/expo/custom-properties)

### Stars

[ **35.5k** stars](/expo/expo/stargazers)

### Watchers

[ **305** watching](/expo/expo/watchers)

### Forks

[ **5.7k** forks](/expo/expo/forks)

[ Report repository ](/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2Fexpo%2Fexpo&report=expo+%28user%29)

##  [Used by 1.1m](/expo/expo/network/dependents)

[ + 1,067,006  ](/expo/expo/network/dependents)

##  [Contributors 1,468](/expo/expo/graphs/contributors)

  * [ ](https://github.com/brentvatne)
  * [ ](https://github.com/tsapeta)
  * [ ](https://github.com/EvanBacon)
  * [ ](https://github.com/lukmccall)
  * [ ](https://github.com/amandeepmittal)
  * [ ](https://github.com/terribleben)
  * [ ](https://github.com/esamelson)
  * [ ](https://github.com/Kudo)
  * [ ](https://github.com/expo-bot)
  * [ ](https://github.com/sjchmiela)
  * [ ](https://github.com/Simek)
  * [ ](https://github.com/ide)
  * [ ](https://github.com/wschurman)
  * [ ](https://github.com/byCedric)



[+ 1,454 contributors](/expo/expo/graphs/contributors)

## Languages

  * [ TypeScript 38.8% ](/expo/expo/search?l=typescript)
  * [ JavaScript 28.1% ](/expo/expo/search?l=javascript)
  * [ Kotlin 12.5% ](/expo/expo/search?l=kotlin)
  * [ Swift 8.2% ](/expo/expo/search?l=swift)
  * [ Objective-C 5.2% ](/expo/expo/search?l=objective-c)
  * [ Java 2.9% ](/expo/expo/search?l=java)
  * Other 4.3%



## Footer

[ ](https://github.com "GitHub") © 2024 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You can’t perform that action at this time. 
[Skip to main content](#__docusaurus_skipToContent_fallback)

The New Architecture has arrived - [learn more](/blog/2024/10/23/the-new-architecture-is-here)

[**React Native**](/)

[Development](#)

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



[Contributing](/contributing/overview)[Community](/community/overview)[Showcase](/showcase)[Blog](/blog)[](https://github.com/facebook/react-native)

Search

[Star](https://github.com/facebook/react-native)

# React Native

## Learn once, write anywhere.

[Get Started](/docs/environment-setup)[Learn the Basics](/docs/getting-started)

# Create native apps for Android, iOS, and more using React

### React Native brings the best parts of developing with React to native development. It's a best-in-class JavaScript library for building user interfaces.

index.js

```
function HomeScreen() {  return (   <View>    <Text> Hello World 👋 🌍!</Text>  </View>  ); }
```


**Written in JavaScript, rendered with native code.** React primitives render to native platform UI, meaning your app uses the same native platform APIs other apps do.

# Native development for everyone

### React Native lets you create truly native apps and doesn't compromise your users' experiences. It provides a core set of platform agnostic native components like `View`, `Text`, and `Image` that map directly to the platform's native UI building blocks.

# Get a head start with a framework

### React Native brings the React programming paradigm to platforms like Android and iOS. It doesn’t prescribe how to do routing, or how to access each of the numerous platform APIs. To build a new app with React Native, we recommend a framework like [Expo](https://expo.dev).

#### File-based routing

Create stack, modal, drawer, and tab screens with minimal boilerplate using your filesystem.

#### Use any library, SDK, or native code

Generate native changes or write your own native code. Use over 50 modules to create your app.

#### Developer tools

Get started quickly with Expo Go, then continue with expo-dev-client: a module that adds Expo’s tools to apps that require native changes.

# Watch and learn

### Watch talks by the React team and learn how to get the most out of React Native. Find the latest on .

#### FB 2019: Mobile innovation with React Native

45:29

#### Why React Native?

1:42

# Meta supported. Community driven.

Meta released React Native in 2015 and has been maintaining it ever since.

In 2018, React Native had the [2nd highest](https://octoverse.github.com/2018/projects#repositories) number of contributors for any repository in GitHub. Today, React Native is supported by contributions from individuals and companies around the world including [Callstack](https://callstack.com/), [Expo](https://expo.io/), [Infinite Red](https://infinite.red/), [Microsoft](https://www.microsoft.com/) and [Software Mansion](https://swmansion.com/).

Our community is always shipping exciting new projects and exploring platforms beyond Android and iOS with repos like [React Native Windows](https://github.com/microsoft/react-native-windows#readme), [React Native macOS](https://github.com/microsoft/react-native-macos#readme) and [React Native Web](https://github.com/necolas/react-native-web#readme).

React Native is being used in thousands of apps, but it's likely you've already used it in one of these apps:

  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://blog.coinbase.com/optimizing-react-native-7e7bf7ac3a34)
  * [](https://formidable.com/work/puma-scaling-across-the-globe/)
  * [](https://github.com/wordpress-mobile/gutenberg-mobile)
  * [](https://engineering.tableau.com/react-native-at-tableau-3-years-in-89d43c38354c)
  * [](https://blog.flipkart.tech/the-journey-of-react-native-flipkart-47dcd0c3d1c6)
  * [](https://medium.com/mercari-engineering/why-we-decided-to-rewrite-our-ios-android-apps-from-scratch-in-react-native-9f1737558299)
  * [](https://discord.com/blog/how-discord-achieves-native-ios-performance-with-react-native)
  * [](https://www.techatbloomberg.com/blog/bloomberg-used-react-native-develop-new-consumer-app/)
  * [](https://medium.com/@Pinterest_Engineering/supporting-react-native-at-pinterest-f8c2233f90e6)
  * [](https://www.tesla.com/blog)
  * [](https://medium.com/walmartlabs/react-native-at-walmartlabs-cdd140589560#.ueonqqloc)
  * [](https://www.tencent.com/en-us/business.html)
  * [](https://github.com/mattermost/mattermost-mobile)



and [many more](/showcase).

# Welcome to the React Native community

[Get Started](/docs/environment-setup)

Develop

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



Participate

  * [Showcase](/showcase)
  * [Contributing](/contributing/overview)
  * [Community](/community/overview)
  * [Directory](https://reactnative.directory/)
  * [Stack Overflow](https://stackoverflow.com/questions/tagged/react-native)



Find us

  * [Blog](/blog)
  * [GitHub](https://github.com/facebook/react-native)



Explore More

  * [ReactJS](https://react.dev/)
  * [Privacy Policy](https://opensource.fb.com/legal/privacy/)
  * [Terms of Service](https://opensource.fb.com/legal/terms/)



[](https://opensource.fb.com/)

Copyright © 2024 Meta Platforms, Inc.
[](/)

Meta Open Source

## Welcome to our community

Empowering diverse communities through open source technology.

[Explore projects](/projects)

### Meta Embraces Open Source

Meta is committed to the notion that open source not only provides great technology for developers, but also brings the best out in people. Meta believes in the following tenets:

#### Collaboration

Open source allows developers from around the world to proactively work together to achieve common goals.

#### Community

Open source provides opportunities for the creation of diverse communities in support of the betterment of everyone.

#### Technology

Open source has produced historic technologies, including operating systems, frameworks and programming languages.

Featured Media

[The Diff Episode 10: Talking Open Source with Paul O'ShannessyDecember 7, 2021](https://www.youtube.com/watch?v=QR84BJt4fw0)

[Explain Like I'm 5: Season 3September 28, 2021](https://youtube.com/playlist?list=PLzIwronG0sE49zLk608yB5GKKT8WbEhnZ)

[See all media](/media)

Popular Projects

[DocumentationDocusaurusSetup a website for your documentation quickly and easily.View Project](https://docusaurus.io)

[FrameworksReactA JavaScript framework for building awesome user interfaces.View Project](https://reactjs.org)

[FrameworksPyTorchA Python-based machine learning framework for dynamic neural networks.View Project](https://pytorch.org)

[See more projects](/projects)

[](https://nasa.github.io/cumulus/docs/cumulus-docs-readme)

[](https://developers.diem.com)

[](https://slack.engineering/hacklang-at-slack-a-better-php/)

[](https://www.opencompute.org/membership/membership-organizational-directory?keyword=AT%26T)

[](https://aws.amazon.com/blogs/aws/announcing-torchserve-an-open-source-model-server-for-pytorch/)

[](https://www.carbondesignsystem.com/developing/frameworks/react/)

Showcase

## Globally trusted

Open source is used by teams of all shapes and sizes to create, iterate, and grow.

[See Showcase](/showcase)

[](https://meta.com)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



Site Map[Projects](/projects)[FAQ](/get-involved#faq)[About](/about)[Get Involved](/get-involved)

Information[Linux](/linux)[Careers](https://metacareers.com)[Bug Bounty Program](https://bugbounty.meta.com)

Connect[GitHub](https://github.com/facebook)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



© 2024 Meta

  * [Code of Conduct](/code-of-conduct)
  * [Privacy Policy](/legal/privacy)
  * [Cookie Policy](/legal/cookie-policy)
  * [Terms of Use](/legal/terms)
  * [Trademark Policy](/legal/trademark)


Don’t miss what’s happening

People on X are the first to know.

[Log in](/login)

[Sign up](/i/flow/signup)

Welcome to x.com!

We are letting you know that we are changing our URL, but your privacy and data protection settings remain the same.

For more details, see our Privacy Policy: 

# [](/)

[Settings](/settings)

## Profile

See new posts
[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact%2Fblob%2Fmain%2FCODE_OF_CONDUCT.md)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact%2Fblob%2Fmain%2FCODE_OF_CONDUCT.md)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Fblob%2Fshow&source=header-repo&source_repo=facebook%2Freact) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ facebook ](/facebook) / **[react](/facebook/react) ** Public

  * [ Notifications ](/login?return_to=%2Ffacebook%2Freact) You must be signed in to change notification settings
  * [ Fork 47.2k ](/login?return_to=%2Ffacebook%2Freact)
  * [ Star  231k ](/login?return_to=%2Ffacebook%2Freact)




  * [ Code ](/facebook/react)
  * [ Issues 764 ](/facebook/react/issues)
  * [ Pull requests 176 ](/facebook/react/pulls)
  * [ Actions ](/facebook/react/actions)
  * [ Projects 0 ](/facebook/react/projects)
  * [ Wiki ](/facebook/react/wiki)
  * [ Security ](/facebook/react/security)
  * [ Insights ](/facebook/react/pulse)



Additional navigation options

  * [ Code  ](/facebook/react)
  * [ Issues  ](/facebook/react/issues)
  * [ Pull requests  ](/facebook/react/pulls)
  * [ Actions  ](/facebook/react/actions)
  * [ Projects  ](/facebook/react/projects)
  * [ Wiki  ](/facebook/react/wiki)
  * [ Security  ](/facebook/react/security)
  * [ Insights  ](/facebook/react/pulse)



## Files

main

  * .codesandbox

  * .github

  * compiler

  * fixtures

  * packages

  * scripts

  * .editorconfig

  * .eslintignore

  * .eslintrc.js

  * .git-blame-ignore-revs

  * .gitattributes

  * .gitignore

  * .mailmap

  * .nvmrc

  * .prettierignore

  * .prettierrc.js

  * .watchmanconfig

  * CHANGELOG-canary.md

  * CHANGELOG.md

  * CODE_OF_CONDUCT.md

  * CONTRIBUTING.md

  * LICENSE

  * README.md

  * ReactVersions.js

  * SECURITY.md

  * babel.config.js

  * dangerfile.js

  * netlify.toml

  * package.json

  * react.code-workspace

  * yarn.lock




## Breadcrumbs

  1. [react](/facebook/react/tree/main)



/

# CODE_OF_CONDUCT.md

Blame

Blame

## Latest commit

[](/zahad-a-s)[zahad-a-s](/facebook/react/commits?author=zahad-a-s)

[revert last grammatical edit (](/facebook/react/commit/7a227276e653b481b73ed9e9178244b53d61f730)[#25067](https://github.com/facebook/react/pull/25067)[)](/facebook/react/commit/7a227276e653b481b73ed9e9178244b53d61f730)

Aug 11, 2022

[7a22727](/facebook/react/commit/7a227276e653b481b73ed9e9178244b53d61f730) · Aug 11, 2022

## History

[History](/facebook/react/commits/main/CODE_OF_CONDUCT.md)

[](/facebook/react/commits/main/CODE_OF_CONDUCT.md)

80 lines (60 loc) · 3.46 KB

## Breadcrumbs

  1. [react](/facebook/react/tree/main)



/

# CODE_OF_CONDUCT.md

Top

## File metadata and controls

  * Preview

  * Code

  * Blame




80 lines (60 loc) · 3.46 KB

[Raw](https://github.com/facebook/react/raw/refs/heads/main/CODE_OF_CONDUCT.md)

# Code of Conduct

[](#code-of-conduct)

## Our Pledge

[](#our-pledge)

In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.

## Our Standards

[](#our-standards)

Examples of behavior that contributes to creating a positive environment include:

  * Using welcoming and inclusive language
  * Being respectful of differing viewpoints and experiences
  * Gracefully accepting constructive criticism
  * Focusing on what is best for the community
  * Showing empathy towards other community members



Examples of unacceptable behavior by participants include:

  * The use of sexualized language or imagery and unwelcome sexual attention or advances
  * Trolling, insulting/derogatory comments, and personal or political attacks
  * Public or private harassment
  * Publishing others' private information, such as a physical or electronic address, without explicit permission
  * Other conduct which could reasonably be considered inappropriate in a professional setting



## Our Responsibilities

[](#our-responsibilities)

Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.

Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.

## Scope

[](#scope)

This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.

This Code of Conduct also applies outside the project spaces when there is a reasonable belief that an individual's behavior may have a negative impact on the project or its community.

## Enforcement

[](#enforcement)

Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at opensource-conduct@fb.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.

Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.

## Attribution

[](#attribution)

This Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org), version 1.4, available at <https://www.contributor-covenant.org/version/1/4/code-of-conduct.html>

For answers to common questions about this code of conduct, see <https://www.contributor-covenant.org/faq>

## Footer

[ ](https://github.com "GitHub") © 2024 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You can’t perform that action at this time. 
[](/)

# Meta Open Source - Privacy Policy

 _Effective April 25, 2023_

This Privacy Policy describes Meta Platforms, Inc. (**"Meta"** , **"we"** , **"us"** or **"our"**) practices for handling your information in connection with this website and our open source-related websites (**"Websites"**) and any content, related documentation, information and services (e.g. apps, tutorials, tools to support the developer workflow, access to resources, etc.) made available to you on this website (collectively, the **"Services"**). This Privacy Policy describes the personal information we process to support our Services.

For clarity, this Privacy Policy only applies to the Websites and does not apply to any:

  1. use of open source code, documentation or specifications made available on GitHub, which are governed by the terms of the applicable open source license;
  2. pull requests, issues and any other interactions or features related to participation in open source projects on GitHub, which are governed by GitHub's terms and conditions; or
  3. use of any other Meta website, service or product, which are governed by the terms and conditions applicable to those offerings.



#### What Kinds of Information Do We Collect?

When you interact with us through our Services, we may collect or receive the following types of information:

**_Information you provide directly to us._** For certain activities, we may collect the following types of information:

  * **_Contact information,_** such as name, email address and contact details; and
  * ** _Other information_** you provide to us, such as when you send us correspondence or otherwise participate on the Services.



**_Information we collect automatically._** Depending on the type of device you use and how you interact with us, we may also collect certain information automatically when you use our Services, such as:

  * **_Device attributes,_** including information such as the operating system, hardware and software versions, battery level, signal strength, available storage space, browser type, app and file names and types, and plugins.
  * **_Device operations,_** including information about operations performed on the Services as well as pages visited.
  * **_Identifiers,_** including information such as unique identifiers, device IDs, and other identifiers, and Family Device IDs associated with the same device or account.
  * **_Network and connections,_** information such as the name of your mobile operator or ISP, language, time zone, mobile phone number, IP address, connection speed, information about other devices that are nearby or on your network, and Wi-Fi hotspots you connect to using our Services.
  * **_Cookie data,_** data from cookies and other similar technologies that are stored on your device, including cookie IDs and settings. Learn more about how we use cookies by reading our [Cookie Policy](/legal/cookie-policy).



**_Information you provide to us through our app (where applicable)._** Some of our Services include the provision of an app. In such cases, we may receive certain video and text content that you choose to provide to us through our app. We may analyze this depending on the context and content in accordance with the purposes described below.

**_Integrations with other services from third parties._** Some of our Services allow you to enable or log in via various online services (collectively, **"Login Services"**). By including these Login Services, we aim to make your online experiences richer and more personalized. When you add a Login Service account to our Services or log in to our Services using such an account, we may collect relevant information necessary to enable our Services to facilitate your login, such as your email address. We may also share your information with that Login Service to facilitate or enhance the delivery of that platform or our Services.

As part of an integration with a Login Service, that Login Service may provide us with access to certain information that you have provided to their platform, and we will use, store, and disclose such information in accordance with this Privacy Policy. However, please remember that the manner in which platforms use, store, and disclose your information is governed by the policies that apply to those platforms. Information collected by Login Services is subject to their own terms and policies, not this one.

**_Social media features._** Our Services may use social media features, such as the Facebook "like" button, the "Tweet" button and other sharing widgets (**"Social Media Features"**). You may be given the option by such Social Media Features to post information about your activities on a website to a profile page of yours that is provided by a third party social media network in order to share with others within your network. Social Media Features are either hosted by the respective social media network or hosted directly on our Websites. To the extent the Social Media Features are hosted by the respective social media network(s) and you click through to these from our Websites, the latter may receive information showing that you have visited our Websites. If you are logged in to your social media account, it is possible that the respective social media network can link your visit to our Websites with your social media profile. Your interactions with Social Media Features are governed by the privacy policies of the companies providing the relevant Social Media Features.

#### Cookies and Similar Technologies

Cookies are small pieces of text used to store information on web browsers. Cookies are used to store and receive identifiers and other information on computers, phones and other devices. We use cookies and similar technologies, for such things as maintaining and monitoring the infrastructure of the Services, ensuring security protections, analyzing how our Services perform and other analytics purposes, and fulfilling other legitimate purposes as further described in this Privacy Policy. We also use analytics cookies to better understand how our Services are being used by tracking how you interact with the Services and where you click.

We use cookies served by Google Analytics to collect limited data directly from end-user browsers to enable us to better understand your use of the Services, including making use of the demographics and interests reports services of Google Analytics. Further information on how Google collects and uses this data, including processing in the United States, can be found at <https://www.google.com/policies/privacy/partners/>. You can opt-out of all Google supported analytics within the Services by going to the following webpage: <https://tools.google.com/dlpage/gaoptout>.

Learn more about how we use cookies by reading our [Cookie Policy](/legal/cookie-policy).

#### How Do We Use Information?

We will use the information described above for the purpose of operating and providing the Websites and our Services. Specifically, we will use the information for the following purposes:

  * **_Provide, personalize and improve our Services._** We use your information to provide the Websites and fulfill your requests for resources, services, and information; analyze content that you provide to us and provide suggestions for what is in such content; analyze the use of the Services and user data to understand, improve and operate the Services; and customize the content you see when you use the Services;
  * **_Communicate with you._** We use your email address to communicate with you about the Services and let you know about our terms and policies. If you subscribe to a newsletter, we will use your email address to send you such newsletter. We also use your information to respond to you when you contact us;
  * **_Promote safety, integrity and security._** We use the information that we have to verify accounts and activity, combat harmful conduct, maintain the integrity of our Services, and promote safety and security on our Websites. For example, we use data that we have to investigate suspicious activity or breaches of the [Terms of Use](/legal/terms);
  * **_For any other purposes_** disclosed to you at the time we collect your information or pursuant to your consent.



#### How We Share Information

There are certain circumstances in which we may share your information with certain third parties without further notice to you, as set forth below:

  * **_Service providers and third-party vendors._** We share your information with third-party vendors and service providers that support the Services, for example cloud hosting providers (to provide data storage and processing services), communications providers (to process new queries and to manage our emails) and analytics providers to perform analysis on the Services. These service providers are limited from using your information for any purpose other than to perform services for us.
  * **_Legal purposes._** We may disclose information for legal purposes, such as to respond to subpoenas, court orders, legal process, law enforcement requests, legal claims or government inquiries, detect fraud, and to protect and defend the rights, interests, safety, and security of Meta, our affiliates, owner, users, or the public.
  * **_Business transfers._** We may share your information in connection with a substantial corporate transaction, such as the sale of a website, a merger, consolidation, asset sale, or in the unlikely event of bankruptcy.
  * **_With your consent._** We may share information for any other purposes disclosed to you at the time we collect the information or pursuant to your consent. If you choose to engage in public activities on the Websites, you should be aware that any information you share there can be read, collected, or used by other users of these areas. You should use caution in disclosing personal information while participating in these areas. We are not responsible for the information you choose to submit in these public areas.



#### Children's Information

Meta does not knowingly collect or store information from children under the age of 13, unless permitted by law. We will delete any information we may have inadvertently received from a child under 13 upon notice. If you have reason to believe that a child under the age of 13 has provided personal information to Meta through our Services please contact us.

#### Third-Party Links

Our Websites may contain links to other sites that we do not own or operate (e.g. GitHub). Except as provided in this Privacy Policy, we do not provide your information to these third parties without your consent. The linked websites have separate and independent privacy statements, notices and terms of use, which we recommend you carefully review. We do not have any control over such websites, and therefore have no liability or responsibility for the linked websites' personal information practices.

#### Data Retention

We retain information relating to the Services until it is no longer necessary to serve the purposes for which it was collected, such as to provide the Services to you or improve the Services. Reasons we may retain some information for longer periods include:

  * A legal request or obligation, including obligations of Meta Companies or to comply with applicable law;
  * A governmental investigation;
  * An investigation of possible violations of our terms or policies;
  * To prevent harm;
  * For safety, security and integrity purposes;
  * To protect ourselves, including our rights, property or products;
  * If it's needed in relation to a legal claim, complaint, litigation or regulatory proceedings.



#### Additional Information for United States Residents

If you are a United States resident, you can learn more about the consumer privacy rights that may be available to you by reviewing the .

#### Additional Information for Individuals in the European Region and the United Kingdom

If you are a user in a territory or country listed below (the "European Region") or the United Kingdom, the following information also applies to you and supplements the information contained above in the Privacy Policy.

Andorra, Austria, Azores, Belgium, Bulgaria, Canary Islands, Channel Islands, Croatia, Czech Republic, Denmark, Estonia, Finland, France, French Guiana, Germany, Greece, Guadeloupe, Hungary, Iceland, Ireland, Isle of Man, Italy, Latvia, Liechtenstein, Lithuania, Luxembourg, Madeira, Malta, Martinique, Mayotte, Monaco, Netherlands, Norway, Poland, Portugal, Republic of Cyprus, Réunion, Romania, San Marino, Saint Barthélemy, Saint-Martin, Slovakia, Slovenia, Spain, Sweden, Switzerland, and Vatican City and the UK sovereign bases in Cyprus (Akrotiri and Dhekelia).

If you live in the European Region, the data controller responsible for your information when you use the Websites is Meta Platforms Ireland Ltd. If you live in the United Kingdom, the data controller responsible for your information when you use the Websites is Meta Platforms, Inc.

**_Our legal basis for processing data._** We collect, use and share data in the ways described above based on the following:

  * **_Contractual necessity._** The majority of the processing of personal data described in this Privacy Policy is justified on the basis that it is necessary for the performance of a contract and specifically, for the purposes of our [Terms of Use](/legal/terms). For example, we rely on this legal basis to create your account, grant you access to our Services and to communicate with you regarding the Services.
  * **_Legitimate interests._** Our processing of personal data as described in this Privacy Policy is justified on the basis that it is necessary for the legitimate interests or the legitimate interests of a third party, where not outweighed by your interests or fundamental rights and freedoms. We rely on this legal basis to further understand who is accessing and using the Services; prevent and address fraud, unauthorized use of the Services, breaches of our terms and policies, or other harmful or illegal activity; protect ourselves (including our rights, property or products), our users or others, including as part of investigations or regulatory enquiries; or to prevent death or imminent bodily harm.
  * **_Compliance with a legal obligation._** We rely on this legal basis for processing data when the law requires it, including, for example, if there is a valid legal request for certain data.



**_Data Transfers._** We transfer personal data both internally within Meta and externally with our partners. Information controlled by Meta Platforms Ireland Ltd. or Meta Platforms, Inc. may be transferred or transmitted to, or stored and processed in, the United States or other countries for the purposes described in this policy. These data transfers are necessary to provide the services set forth in the [Terms of Use](/legal/terms).

Meta Platforms Ireland Ltd. will protect your data when it is transferred outside the European Region by implementing appropriate safeguards to protect your personal data, where required, such as using the European Commission's Standard Contractual Clauses for the transfer of personal data outside the EEA. Meta Platforms, Inc. will protect your data when it is transferred to countries outside of the United Kingdom by implementing appropriate safeguards to protect your personal data, where required, such as using the International Data Transfer Agreement or the International Data Transfer Addendum which have been approved by the UK Parliament.

**_Your Rights_**

Under the GDPR and UK GDPR, you have the right to data portability, right to access, right to rectify, and right to erase your data under certain circumstances. You also have the right to object to and restrict certain processing of your data. In evaluating an objection, we will evaluate several factors, including: reasonable user expectations; the benefits and risks to you and third parties; and other available means to achieve the same purpose that may be less invasive and do not require disproportional effort. Your objection will be upheld and we will cease processing your information, unless continued processing is based on compelling legitimate grounds or is needed for legal reasons.

Please note that to protect your information, we may need to verify your identity before processing your request. In some cases, we may need to collect additional information to verify your identity, such as a government issued ID. To exercise your rights under the GDPR or UK GDPR, you can email opensource@meta.com or contact us by mail at the address provided below.

**_Contact information for individuals in the European Region only_**

The data controller responsible for your information is Meta Platforms Ireland Ltd., which you can contact by writing to:

Meta Platforms Ireland Ltd.ATTN: Privacy OperationsMerrion RoadDublin 4, D04 X2K5Ireland

Contact the Data Protection Officer for Meta Platforms Ireland Ltd. You also have the right to lodge a complaint with Meta Platforms Ireland Ltd.'s lead supervisory authority, the Irish Data Protection Commissioner, or your local supervisory authority.

**_Contact information for individuals in the United Kingdom only_**

If you are in the United Kingdom, the data controller responsible for your information is Meta Platforms, Inc., which you can contact , or by writing to:

Meta Platforms, Inc.ATTN: Privacy Operations1601 Willow RoadMenlo Park, CA 94025

Contact the Data Protection Officer for Meta Platforms, Inc. You also have the right to lodge a complaint with the UK's Information Commissioner's Office.

#### Changes to this Policy

We will notify you before we make material changes to this Policy. If we make non-material changes, we may update or modify this Privacy Policy at any time without prior notice.

We recommend that you review the Privacy Policy each time you visit the Websites to stay informed of our privacy practices. Any changes will be effective when we post the revised policy.

#### Questions

If you have any questions about this Privacy Policy or our practices, please contact us at opensource@meta.com or by mail at:

Meta, Inc.ATTN: Privacy Operations1601 Willow RoadMenlo Park, CA 94025

Table of contents[](#undefined)[](#undefined)[](#undefined)[](#undefined)[What Kinds of Information Do We Collect?](#what-kinds-of-information-do-we-collect)[Cookies and Similar Technologies](#cookies-and-similar-technologies)[How Do We Use Information?](#how-do-we-use-information)[How We Share Information](#how-we-share-information)[Children's Information](#childrens-information)[Third-Party Links](#third-party-links)[Data Retention](#data-retention)[Additional Information for United States Residents](#additional-information-for-united-states-residents)[Additional Information for Individuals in the European Region and the United Kingdom](#additional-information-for-individuals-in-the-european-region-and-the-united-kingdom)[Changes to this Policy](#changes-to-this-policy)[Questions](#questions)

[](https://meta.com)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



Site Map[Projects](/projects)[FAQ](/get-involved#faq)[About](/about)[Get Involved](/get-involved)

Information[Linux](/linux)[Careers](https://metacareers.com)[Bug Bounty Program](https://bugbounty.meta.com)

Connect[GitHub](https://github.com/facebook)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



© 2024 Meta

  * [Code of Conduct](/code-of-conduct)
  * [Privacy Policy](/legal/privacy)
  * [Cookie Policy](/legal/cookie-policy)
  * [Terms of Use](/legal/terms)
  * [Trademark Policy](/legal/trademark)


[](/)

# Meta Open Source - Terms of Use

 _Effective December 1, 2020_

These Terms of Use ("**Terms** ") govern your use of this website hosted and provided by Meta Platforms, Inc. ("**Meta** ", "**us** " or "**we** "), ("**Website** ") and any services offered through the Website ("**Services** ").

These Terms are a legal contract between you and us so it is important that you review them carefully.

For clarity, these Terms only apply to this Website and do not apply to any:

  1. use of open source code, documentation or specifications made available on GitHub, which are governed by the terms of the applicable open source license;
  2. pull requests, issues and any other interactions or features related to participation in open source projects on GitHub, which are governed by GitHub's terms and conditions; or
  3. use of any other Meta website, service or product, which are governed by the terms and conditions applicable to those offerings.



We may change these Terms or modify any features of the Website or the Services at any time. Any such change or modification will be effective immediately upon posting on our Website. You accept these Terms by browsing this Website and/or using the Services, and you accept any changes to the Terms by continuing to use the Website after we post any such changes.

If you do not agree to these Terms, please do not access or use the Website.

If you need to contact us for any reason, please do so at opensource@meta.com

#### 1. What you can do on this Website

We make this Website available to you and others to help everyone better understand our open source projects. In exchange, we need you to make the following commitments:

**(a) Who can use the Website**

We try to make our Website broadly available to everyone, but you cannot use our Website if:

  * You are a minor in your country of residence except if your parents or guardians have agreed to these Terms on your behalf.
  * You are prohibited from accessing the Website under applicable laws.

**(b) What you can share and do on the Website**

You agree not to engage in the conduct described below (or to facilitate or support others in doing so):

  1. You may not use our Website, do or share anything:
     * That violates these Terms (and other terms and policies that apply to your use of the Website);
     * That is unlawful in any country, misleading, discriminatory or fraudulent; and/or
     * That infringes or violates someone else's rights, including their intellectual property rights.
  2. You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of the Services or Website.

**(c) Access to the Website**

The Website is made available free of charge and the Services are available only for informational purposes. We make no representations or warranties of any kind as to the accuracy, currency, or completeness of the information and other materials made available through the Website and are not liable for any decisions you may make in reliance on this content.

#### 2. Links To Third-Party Content

The Website or Services may contain links to third-party content. For example, our user communities may be hosted by third party platforms over which we have no control and for which we have no responsibility. Therefore, please review each of these platforms or websites' terms of use and privacy policies before participating.

We do not control, endorse, sponsor, recommend, or otherwise accept responsibility for any content, terms of use, policies on or use of any third party website.

#### 3. Limits on Liability

We work hard to provide the best Website and Services we can and to specify clear guidelines for everyone who uses them. Our Website and Services, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, that they will function without disruptions, delays, or imperfections or content will be accurate, current and complete. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT IN RELATION TO THE WEBSITE, THE SERVICES AND THEIR CONTENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content). Some jurisdictions do not allow the exclusion or limitation of implied warranties, in which case parts of this disclaimer may not apply to you.

We cannot predict when issues might arise with our Website and Services. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms, the Website or the Services, even if we have been advised of the possibility of such damages. Our aggregate liability arising out of or relating to these Terms, the Website or the Services will not exceed $100.

We do not exclude or limit in any way our liability to you where it would be unlawful to do so therefore depending on the country where you reside some of these exclusions and limitations may not apply to you.

#### 4. Disputes

We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.

For any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms, the Website and/or the Services ("**claim** "), you agree that it will be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County. You also agree to submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.

The preceding provision regarding applicable law and venue does not apply if you are a consumer based in the European Union. If you are a consumer based in the European Union, these Terms will be subject to the laws of your country of residence and you may bring a claim in front of those courts.

#### 5. Privacy

Under data protection legislation, we are required to provide you with certain information about who we are, how we process your personal data and for what purposes and your rights in relation to your personal data and how to exercise them. This information is provided in our [Privacy Policy](/legal/privacy) and it is important that you read that information. Please also review our [Cookie Policy](/legal/cookie-policy), which tells you which cookies we use on the Website and how to manage them.

#### 6. Other important terms

These Terms make up the entire agreement between you and Meta Platforms, Inc. regarding your use of our Services and this Website. They supersede any prior agreements.

If any portion of these Terms is found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.

You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.

You agree that no joint venture, partnership, employment, or agency relationship exists between you and us as a result of these Terms or your access to and use of the Website or Services.

These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.

We reserve all rights not expressly granted to you.

Table of contents[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[1. What you can do on this Website](#what-you-can-do-on-this-website)[2. Links To Third-Party Content](#links-to-third-party-content)[3. Limits on Liability](#limits-on-liability)[4. Disputes](#disputes)[5. Privacy](#privacy)[6. Other important terms](#other-important-terms)

[](https://meta.com)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



Site Map[Projects](/projects)[FAQ](/get-involved#faq)[About](/about)[Get Involved](/get-involved)

Information[Linux](/linux)[Careers](https://metacareers.com)[Bug Bounty Program](https://bugbounty.meta.com)

Connect[GitHub](https://github.com/facebook)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



© 2024 Meta

  * [Code of Conduct](/code-of-conduct)
  * [Privacy Policy](/legal/privacy)
  * [Cookie Policy](/legal/cookie-policy)
  * [Terms of Use](/legal/terms)
  * [Trademark Policy](/legal/trademark)



Don’t miss what’s happening

People on X are the first to know.

[Log in](/login)

[Sign up](/i/flow/signup)

Welcome to x.com!

We are letting you know that we are changing our URL, but your privacy and data protection settings remain the same.

For more details, see our Privacy Policy: 

# [](/)

[Settings](/settings)

[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=facebook%2Freact) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ facebook ](/facebook) / **[react](/facebook/react) ** Public

  * [ Notifications ](/login?return_to=%2Ffacebook%2Freact) You must be signed in to change notification settings
  * [ Fork 47.2k ](/login?return_to=%2Ffacebook%2Freact)
  * [ Star  231k ](/login?return_to=%2Ffacebook%2Freact)




The library for web and native user interfaces. 

[react.dev](https://react.dev "https://react.dev")

### License

[ MIT license ](/facebook/react/blob/main/LICENSE)

[ 231k stars ](/facebook/react/stargazers) [ 47.2k forks ](/facebook/react/forks) [ Branches ](/facebook/react/branches) [ Tags ](/facebook/react/tags) [ Activity ](/facebook/react/activity)

[ Star  ](/login?return_to=%2Ffacebook%2Freact)

[ Notifications ](/login?return_to=%2Ffacebook%2Freact) You must be signed in to change notification settings

  * [ Code ](/facebook/react)
  * [ Issues 764 ](/facebook/react/issues)
  * [ Pull requests 176 ](/facebook/react/pulls)
  * [ Actions ](/facebook/react/actions)
  * [ Projects 0 ](/facebook/react/projects)
  * [ Wiki ](/facebook/react/wiki)
  * [ Security ](/facebook/react/security)
  * [ Insights ](/facebook/react/pulse)



Additional navigation options

  * [ Code  ](/facebook/react)
  * [ Issues  ](/facebook/react/issues)
  * [ Pull requests  ](/facebook/react/pulls)
  * [ Actions  ](/facebook/react/actions)
  * [ Projects  ](/facebook/react/projects)
  * [ Wiki  ](/facebook/react/wiki)
  * [ Security  ](/facebook/react/security)
  * [ Insights  ](/facebook/react/pulse)



# facebook/react

main

[**358** Branches](/facebook/react/branches)[**145** Tags](/facebook/react/tags)

[](/facebook/react/branches)[](/facebook/react/tags)

Go to file

Code

## Folders and files

Name| Name| Last commit message| Last commit date  
---|---|---|---  
  
## Latest commit

[](/sebmarkbage)[sebmarkbage](/facebook/react/commits?author=sebmarkbage)[[Flight] Mark Errored Server Components (](/facebook/react/commit/50f00fd876b0b92b243cd8b54a222f9577446392)[#31879](https://github.com/facebook/react/pull/31879)[)](/facebook/react/commit/50f00fd876b0b92b243cd8b54a222f9577446392)Dec 28, 2024[50f00fd](/facebook/react/commit/50f00fd876b0b92b243cd8b54a222f9577446392) · Dec 28, 2024

## History

[19,815 Commits](/facebook/react/commits/main/)[](/facebook/react/commits/main/)  
[.codesandbox](/facebook/react/tree/main/.codesandbox ".codesandbox")| [.codesandbox](/facebook/react/tree/main/.codesandbox ".codesandbox")| [Codesandbox: upgrade to Node.js 18 (](/facebook/react/commit/88313ffd57a5df2666520c9a528eafdf2914d5f2 "Codesandbox: upgrade to Node.js 18 \(#26330\)
Turns out Codesandbox didn't support `String.prototype.replaceAll` in
#26329.
This updates the config to use Node.js 18 for Codesandbox builds.")[#26330](https://github.com/facebook/react/pull/26330)[)](/facebook/react/commit/88313ffd57a5df2666520c9a528eafdf2914d5f2 "Codesandbox: upgrade to Node.js 18 \(#26330\)
Turns out Codesandbox didn't support `String.prototype.replaceAll` in
#26329.
This updates the config to use Node.js 18 for Codesandbox builds.")| Mar 7, 2023  
[.github](/facebook/react/tree/main/.github ".github")| [.github](/facebook/react/tree/main/.github ".github")| [Update runtime workflow to use HEAD commit (](/facebook/react/commit/9463d51e515544bb3119dd4cec46ce2177cf4c62 "Update runtime workflow to use HEAD commit \(#31850\)
This updates the CI workflow for the runtime build and tests to use the
HEAD commit of the PR branch rather than the Fake News merge commit that
the `@actions/checkout` action bafflingly defaults to.
Testing against the merge commit never made sense to me as a behavior
because as soon as someone updates upstream, it's out of date anyway.
It should just match the exact commit that the developer pushed, and the
once that appears in the GitHub UI.")[#31850](https://github.com/facebook/react/pull/31850)[)](/facebook/react/commit/9463d51e515544bb3119dd4cec46ce2177cf4c62 "Update runtime workflow to use HEAD commit \(#31850\)
This updates the CI workflow for the runtime build and tests to use the
HEAD commit of the PR branch rather than the Fake News merge commit that
the `@actions/checkout` action bafflingly defaults to.
Testing against the merge commit never made sense to me as a behavior
because as soon as someone updates upstream, it's out of date anyway.
It should just match the exact commit that the developer pushed, and the
once that appears in the GitHub UI.")| Dec 19, 2024  
[compiler](/facebook/react/tree/main/compiler "compiler")| [compiler](/facebook/react/tree/main/compiler "compiler")| [[rcr] Relax react peer dep requirement (](/facebook/react/commit/4309bde2b4faa044dc6266142378a330c030e053 "\[rcr\] Relax react peer dep requirement \(#31915\)
There's no real reason to restrict the React peer dep to
non-experimental, so relax it.
---
\[//\]: # \(BEGIN SAPLING FOOTER\)
Stack created with \[Sapling\]\(https://sapling-scm.com\). Best reviewed
with \[ReviewStack\]\(https://reviewstack.dev/facebook/react/pull/31915\).
* #31919
* #31918
* #31917
* #31916
* __->__ #31915
* #31920")[#31915](https://github.com/facebook/react/pull/31915)[)](/facebook/react/commit/4309bde2b4faa044dc6266142378a330c030e053 "\[rcr\] Relax react peer dep requirement \(#31915\)
There's no real reason to restrict the React peer dep to
non-experimental, so relax it.
---
\[//\]: # \(BEGIN SAPLING FOOTER\)
Stack created with \[Sapling\]\(https://sapling-scm.com\). Best reviewed
with \[ReviewStack\]\(https://reviewstack.dev/facebook/react/pull/31915\).
* #31919
* #31918
* #31917
* #31916
* __->__ #31915
* #31920")| Dec 28, 2024  
[fixtures](/facebook/react/tree/main/fixtures "fixtures")| [fixtures](/facebook/react/tree/main/fixtures "fixtures")| [Add Profiler mode to fixtures even if React DevTools is not installed (](/facebook/react/commit/d4ac7689f94f8ed53b779a651d62a2b9af20e6c0 "Add Profiler mode to fixtures even if React DevTools is not installed \(#31877\)
Currently you need to do one of either:
1. Install React DevTools
2. Install React Refresh
3. Add Profiler component
To opt in to component level profiling.
It was a bit confusing that some of the fixtures was doing 2 which made
them work while other was depending on if you had DevTools.
Really React Refresh shouldn't really opt you in I think.")[…](https://github.com/facebook/react/pull/31877)| Dec 28, 2024  
[packages](/facebook/react/tree/main/packages "packages")| [packages](/facebook/react/tree/main/packages "packages")| [[Flight] Mark Errored Server Components (](/facebook/react/commit/50f00fd876b0b92b243cd8b54a222f9577446392 "\[Flight\] Mark Errored Server Components \(#31879\)
This is similar to #31876 but for Server Components.
It marks them as errored and puts the error message in the Summary
properties.
<img width="1511" alt="Screenshot 2024-12-20 at 5 05 35 PM"
src="https://github.com/user-attachments/assets/92f11e42-0e23-41c7-bfd4-09effb25e024"
/>
This only looks at the current chunk for rejections. That means that
there might still be promises deeper that rejected but it's only the
immediate return value of the Server Component that's considered a
rejection of the component itself.")[#31879](https://github.com/facebook/react/pull/31879)[)](/facebook/react/commit/50f00fd876b0b92b243cd8b54a222f9577446392 "\[Flight\] Mark Errored Server Components \(#31879\)
This is similar to #31876 but for Server Components.
It marks them as errored and puts the error message in the Summary
properties.
<img width="1511" alt="Screenshot 2024-12-20 at 5 05 35 PM"
src="https://github.com/user-attachments/assets/92f11e42-0e23-41c7-bfd4-09effb25e024"
/>
This only looks at the current chunk for rejections. That means that
there might still be promises deeper that rejected but it's only the
immediate return value of the Server Component that's considered a
rejection of the component itself.")| Dec 28, 2024  
[scripts](/facebook/react/tree/main/scripts "scripts")| [scripts](/facebook/react/tree/main/scripts "scripts")| [[asserts helpers] react package (](/facebook/react/commit/94867f33be327a52bfffda89a14c85897180e43e "\[asserts helpers\] react package \(#31853\)
Based off https://github.com/facebook/react/pull/31844
Commit to review:
https://github.com/facebook/react/commit/11aa104e3e70c0accc21f785060b812beb145089
Converts the rest of the `react` package.")[#31853](https://github.com/facebook/react/pull/31853)[)](/facebook/react/commit/94867f33be327a52bfffda89a14c85897180e43e "\[asserts helpers\] react package \(#31853\)
Based off https://github.com/facebook/react/pull/31844
Commit to review:
https://github.com/facebook/react/commit/11aa104e3e70c0accc21f785060b812beb145089
Converts the rest of the `react` package.")| Dec 24, 2024  
[.editorconfig](/facebook/react/blob/main/.editorconfig ".editorconfig")| [.editorconfig](/facebook/react/blob/main/.editorconfig ".editorconfig")| [Remove trim_trailing_whitespace from editorconfig (](/facebook/react/commit/33c7bd9ae3b4f998a477fe0ea8ebdf2f2ee8a144 "Remove trim_trailing_whitespace from editorconfig \(#31413\)
This setting breaks `toMatchInlineSnapshot` by removing whitespace in
snapshots.")[#31413](https://github.com/facebook/react/pull/31413)[)](/facebook/react/commit/33c7bd9ae3b4f998a477fe0ea8ebdf2f2ee8a144 "Remove trim_trailing_whitespace from editorconfig \(#31413\)
This setting breaks `toMatchInlineSnapshot` by removing whitespace in
snapshots.")| Nov 5, 2024  
[.eslintignore](/facebook/react/blob/main/.eslintignore ".eslintignore")| [.eslintignore](/facebook/react/blob/main/.eslintignore ".eslintignore")| [Fix ESLint and Prettier configs for React Compiler (](/facebook/react/commit/c93c30f9d4c6339708636c3fbf9189acfe96443f "Fix ESLint and Prettier configs for React Compiler \(#29073\)
Fixes the top-level ESLint and Prettier configs to ignore the compiler.
For now the compiler has its own prettier and linting setup with
different versions/configs.")[#29073](https://github.com/facebook/react/pull/29073)[)](/facebook/react/commit/c93c30f9d4c6339708636c3fbf9189acfe96443f "Fix ESLint and Prettier configs for React Compiler \(#29073\)
Fixes the top-level ESLint and Prettier configs to ignore the compiler.
For now the compiler has its own prettier and linting setup with
different versions/configs.")| May 16, 2024  
[.eslintrc.js](/facebook/react/blob/main/.eslintrc.js ".eslintrc.js")| [.eslintrc.js](/facebook/react/blob/main/.eslintrc.js ".eslintrc.js")| [Implement react-server-dom-parcel (](/facebook/react/commit/ca587425fe21b644bebb336f058f1a0d9763631b "Implement react-server-dom-parcel \(#31725\)
This adds a new `react-server-dom-parcel-package`, which is an RSC
integration for the Parcel bundler. It is mostly copied from the
existing webpack/turbopack integrations, with some changes to utilize
Parcel runtime APIs for loading and executing bundles/modules.
See https://github.com/parcel-bundler/parcel/pull/10043 for the Parcel
side of this, which includes the plugin needed to generate client and
server references. https://github.com/parcel-bundler/rsc-examples also
includes examples of various ways to use RSCs with Parcel.
Differences from other integrations:
* Client and server modules are all part of the same graph, and we use
Parcel's
\[environments\]\(https://parceljs.org/plugin-system/transformer/#the-environment\)
to distinguish them. The server is the Parcel build entry point, and it
imports and renders server components in route handlers. When a `"use
client"` directive is seen, the environment changes and Parcel creates a
new client bundle for the page, combining all client modules together.
CSS from both client and server components are also combined
automatically.
* There is no separate manifest file that needs to be passed around by
the user. A \[Runtime\]\(https://parceljs.org/plugin-system/runtime/\)
plugin injects client and server references as needed into the relevant
bundles, and registers server action ids using `react-server-dom-parcel`
automatically.
* A special `<Resources>` component is also generated by Parcel to
render the `<script>` and `<link rel="stylesheet">` elements needed for
a page, using the relevant info from the bundle graph.
Note: I've already published a 0.0.x version of this package to npm for
testing purposes but happy to add whoever needs access to it as well.
### Questions
* How to test this in the React repo. I'll have integration tests in
Parcel, but setting up all the different mocks and environments to
simulate that here seems challenging. I could try to copy how
Webpack/Turbopack do it but it's a bit different.
* Where to put TypeScript types. Right now I have some ambient types in
my \[example
repo\]\(https://github.com/parcel-bundler/rsc-examples/blob/main/types.d.ts\)
but it would be nice for users not to copy and paste these. Can I
include them in the package or do they need to maintained separately in
definitelytyped? I would really prefer not to have to maintain code in
three different repos ideally.
---------
Co-authored-by: Sebastian Markbage <sebastian@calyptus.eu>")[#31725](https://github.com/facebook/react/pull/31725)[)](/facebook/react/commit/ca587425fe21b644bebb336f058f1a0d9763631b "Implement react-server-dom-parcel \(#31725\)
This adds a new `react-server-dom-parcel-package`, which is an RSC
integration for the Parcel bundler. It is mostly copied from the
existing webpack/turbopack integrations, with some changes to utilize
Parcel runtime APIs for loading and executing bundles/modules.
See https://github.com/parcel-bundler/parcel/pull/10043 for the Parcel
side of this, which includes the plugin needed to generate client and
server references. https://github.com/parcel-bundler/rsc-examples also
includes examples of various ways to use RSCs with Parcel.
Differences from other integrations:
* Client and server modules are all part of the same graph, and we use
Parcel's
\[environments\]\(https://parceljs.org/plugin-system/transformer/#the-environment\)
to distinguish them. The server is the Parcel build entry point, and it
imports and renders server components in route handlers. When a `"use
client"` directive is seen, the environment changes and Parcel creates a
new client bundle for the page, combining all client modules together.
CSS from both client and server components are also combined
automatically.
* There is no separate manifest file that needs to be passed around by
the user. A \[Runtime\]\(https://parceljs.org/plugin-system/runtime/\)
plugin injects client and server references as needed into the relevant
bundles, and registers server action ids using `react-server-dom-parcel`
automatically.
* A special `<Resources>` component is also generated by Parcel to
render the `<script>` and `<link rel="stylesheet">` elements needed for
a page, using the relevant info from the bundle graph.
Note: I've already published a 0.0.x version of this package to npm for
testing purposes but happy to add whoever needs access to it as well.
### Questions
* How to test this in the React repo. I'll have integration tests in
Parcel, but setting up all the different mocks and environments to
simulate that here seems challenging. I could try to copy how
Webpack/Turbopack do it but it's a bit different.
* Where to put TypeScript types. Right now I have some ambient types in
my \[example
repo\]\(https://github.com/parcel-bundler/rsc-examples/blob/main/types.d.ts\)
but it would be nice for users not to copy and paste these. Can I
include them in the package or do they need to maintained separately in
definitelytyped? I would really prefer not to have to maintain code in
three different repos ideally.
---------
Co-authored-by: Sebastian Markbage <sebastian@calyptus.eu>")| Dec 12, 2024  
[.git-blame-ignore-revs](/facebook/react/blob/main/.git-blame-ignore-revs ".git-blame-ignore-revs")| [.git-blame-ignore-revs](/facebook/react/blob/main/.git-blame-ignore-revs ".git-blame-ignore-revs")| [Add run prettier commit to .git-blame-ignore-revs](/facebook/react/commit/d439f279ff0517417e062cae8ebb77a67fe21fa9 "Add run prettier commit to .git-blame-ignore-revs
ghstack-source-id: a10c3b3d6412873023747d6f253f8793fa689b60
Pull Request resolved: https://github.com/facebook/react/pull/30391")| Jul 19, 2024  
[.gitattributes](/facebook/react/blob/main/.gitattributes ".gitattributes")| [.gitattributes](/facebook/react/blob/main/.gitattributes ".gitattributes")| [.gitattributes to ensure LF line endings when we should](/facebook/react/commit/8abca77381fbd31ffc2ff2b4fa12020768b8fc07 ".gitattributes to ensure LF line endings when we should")| Jan 18, 2014  
[.gitignore](/facebook/react/blob/main/.gitignore ".gitignore")| [.gitignore](/facebook/react/blob/main/.gitignore ".gitignore")| [feat[devtools]: add package for fusebox integration (](/facebook/react/commit/96c58466109c2944adb817001fec38088a7c431e "feat\[devtools\]: add package for fusebox integration \(#28553\)
## Summary
Stacked on https://github.com/facebook/react/pull/28552. Review only the
\[last commit at the
top\]\(https://github.com/facebook/react/pull/28553/commits/c69952f1bf6e23252d47e0f7eb98efbbb2cc2c55\).
These changes add new package `react-devtools-fusebox`, which is the
entrypoint for the RDT Frontend, which will be used in Chrome DevTools
panel. The main differences from other frontend shells \(extension,
standalone\) are:
1. This package builds scripts in ESM format, this is required by Chrome
DevTools, see webpack config:
https://github.com/facebook/react/blob/c69952f1bf6e23252d47e0f7eb98efbbb2cc2c55/packages/react-devtools-fusebox/webpack.config.frontend.js#L50-L52
2. The build includes styles in a separate `.css` file, which is
required for Chrome DevTools: styles are loaded lazily once panel is
mounted.")[#28553](https://github.com/facebook/react/pull/28553)[)](/facebook/react/commit/96c58466109c2944adb817001fec38088a7c431e "feat\[devtools\]: add package for fusebox integration \(#28553\)
## Summary
Stacked on https://github.com/facebook/react/pull/28552. Review only the
\[last commit at the
top\]\(https://github.com/facebook/react/pull/28553/commits/c69952f1bf6e23252d47e0f7eb98efbbb2cc2c55\).
These changes add new package `react-devtools-fusebox`, which is the
entrypoint for the RDT Frontend, which will be used in Chrome DevTools
panel. The main differences from other frontend shells \(extension,
standalone\) are:
1. This package builds scripts in ESM format, this is required by Chrome
DevTools, see webpack config:
https://github.com/facebook/react/blob/c69952f1bf6e23252d47e0f7eb98efbbb2cc2c55/packages/react-devtools-fusebox/webpack.config.frontend.js#L50-L52
2. The build includes styles in a separate `.css` file, which is
required for Chrome DevTools: styles are loaded lazily once panel is
mounted.")| Apr 12, 2024  
[.mailmap](/facebook/react/blob/main/.mailmap ".mailmap")| [.mailmap](/facebook/react/blob/main/.mailmap ".mailmap")| [updates mailmap entries (](/facebook/react/commit/ebb2253428315bfa3237df403082b0d2ec2f9c5c "updates mailmap entries \(#19824\)")[#19824](https://github.com/facebook/react/pull/19824)[)](/facebook/react/commit/ebb2253428315bfa3237df403082b0d2ec2f9c5c "updates mailmap entries \(#19824\)")| Sep 12, 2020  
[.nvmrc](/facebook/react/blob/main/.nvmrc ".nvmrc")| [.nvmrc](/facebook/react/blob/main/.nvmrc ".nvmrc")| [[ci] Standardize node version and timezones](/facebook/react/commit/922c7971ba3e52adf46678774bef3022d1aad4e0 "\[ci\] Standardize node version and timezones
Quick change to standardize on a single timezone across all workflows
and to use the same version of node \(18.20.1\).
Also updates .nvmrc
ghstack-source-id: e1d43006ec018acfcd88444feadde1b1d260de9d
Pull Request resolved: https://github.com/facebook/react/pull/30323")| Jul 12, 2024  
[.prettierignore](/facebook/react/blob/main/.prettierignore ".prettierignore")| [.prettierignore](/facebook/react/blob/main/.prettierignore ".prettierignore")| [[prettier] Ignore compiler/target (](/facebook/react/commit/0f1127b552790e6dc0b65650680237ba4c94d977 "\[prettier\] Ignore compiler/target \(#31168\)
Add missing directory to prettierignore.
---
\[//\]: # \(BEGIN SAPLING FOOTER\)
Stack created with \[Sapling\]\(https://sapling-scm.com\). Best reviewed
with \[ReviewStack\]\(https://reviewstack.dev/facebook/react/pull/31168\).
* #31167
* #31166
* #31165
* #31164
* #31148
* __->__ #31168")[#31168](https://github.com/facebook/react/pull/31168)[)](/facebook/react/commit/0f1127b552790e6dc0b65650680237ba4c94d977 "\[prettier\] Ignore compiler/target \(#31168\)
Add missing directory to prettierignore.
---
\[//\]: # \(BEGIN SAPLING FOOTER\)
Stack created with \[Sapling\]\(https://sapling-scm.com\). Best reviewed
with \[ReviewStack\]\(https://reviewstack.dev/facebook/react/pull/31168\).
* #31167
* #31166
* #31165
* #31164
* #31148
* __->__ #31168")| Oct 10, 2024  
[.prettierrc.js](/facebook/react/blob/main/.prettierrc.js ".prettierrc.js")| [.prettierrc.js](/facebook/react/blob/main/.prettierrc.js ".prettierrc.js")| [[BE] switch to hermes parser for prettier (](/facebook/react/commit/70484844bfd47382ad0011e0066ccf25d1a84464 "\[BE\] switch to hermes parser for prettier \(#30421\)
This will allow us to parse new flow syntax since the `flow` parser is
no longer updated.
I had to exclude some files and have them fall back to `flow` parser
since they contain invalid graphql syntax that makes the plugin crash.")[#30421](https://github.com/facebook/react/pull/30421)[)](/facebook/react/commit/70484844bfd47382ad0011e0066ccf25d1a84464 "\[BE\] switch to hermes parser for prettier \(#30421\)
This will allow us to parse new flow syntax since the `flow` parser is
no longer updated.
I had to exclude some files and have them fall back to `flow` parser
since they contain invalid graphql syntax that makes the plugin crash.")| Jul 23, 2024  
[.watchmanconfig](/facebook/react/blob/main/.watchmanconfig ".watchmanconfig")| [.watchmanconfig](/facebook/react/blob/main/.watchmanconfig ".watchmanconfig")| [.watchmanconfig must be valid json (](/facebook/react/commit/29b45596354035754d598d8b23a8233f3d2414f0 ".watchmanconfig must be valid json \(#16118\)
faceworldproblems?")[#16118](https://github.com/facebook/react/pull/16118)[)](/facebook/react/commit/29b45596354035754d598d8b23a8233f3d2414f0 ".watchmanconfig must be valid json \(#16118\)
faceworldproblems?")| Jul 12, 2019  
[CHANGELOG-canary.md](/facebook/react/blob/main/CHANGELOG-canary.md "CHANGELOG-canary.md")| [CHANGELOG-canary.md](/facebook/react/blob/main/CHANGELOG-canary.md "CHANGELOG-canary.md")| [Add useActionState to CHANGELOG-canary.md (](/facebook/react/commit/0a444356748ec1619acfbb60f9b112451c709343 "Add useActionState to CHANGELOG-canary.md \(#28632\)
Co-authored-by: Sébastien Lorber <slorber@users.noreply.github.com>")[#28632](https://github.com/facebook/react/pull/28632)[)](/facebook/react/commit/0a444356748ec1619acfbb60f9b112451c709343 "Add useActionState to CHANGELOG-canary.md \(#28632\)
Co-authored-by: Sébastien Lorber <slorber@users.noreply.github.com>")| Mar 26, 2024  
[CHANGELOG.md](/facebook/react/blob/main/CHANGELOG.md "CHANGELOG.md")| [CHANGELOG.md](/facebook/react/blob/main/CHANGELOG.md "CHANGELOG.md")| [Fix headings in React 19 CHANGELOG (](/facebook/react/commit/7283a213dbbc31029e65005276f12202558558fc "Fix headings in React 19 CHANGELOG \(#31683\)
Co-authored-by: eps1lon <sebastian.silbermann@vercel.com>")[#31683](https://github.com/facebook/react/pull/31683)[)](/facebook/react/commit/7283a213dbbc31029e65005276f12202558558fc "Fix headings in React 19 CHANGELOG \(#31683\)
Co-authored-by: eps1lon <sebastian.silbermann@vercel.com>")| Dec 6, 2024  
[CODE_OF_CONDUCT.md](/facebook/react/blob/main/CODE_OF_CONDUCT.md "CODE_OF_CONDUCT.md")| [CODE_OF_CONDUCT.md](/facebook/react/blob/main/CODE_OF_CONDUCT.md "CODE_OF_CONDUCT.md")| [revert last grammatical edit (](/facebook/react/commit/7a227276e653b481b73ed9e9178244b53d61f730 "revert last grammatical edit \(#25067\)
on line 29, #24798 edited \(others'\) to \(other's\); however, the subject here is plural \(e.g. "others in the community"\), thus \(others'\) is grammatically correct")[#25067](https://github.com/facebook/react/pull/25067)[)](/facebook/react/commit/7a227276e653b481b73ed9e9178244b53d61f730 "revert last grammatical edit \(#25067\)
on line 29, #24798 edited \(others'\) to \(other's\); however, the subject here is plural \(e.g. "others in the community"\), thus \(others'\) is grammatically correct")| Aug 11, 2022  
[CONTRIBUTING.md](/facebook/react/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")| [CONTRIBUTING.md](/facebook/react/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")| [Fix: Updated link in CONTRIBUTING (](/facebook/react/commit/2d80a0cd690bb5650b6c8a6c079a87b5dc42bd15 "Fix: Updated link in CONTRIBUTING \(#25381\)")[#25381](https://github.com/facebook/react/pull/25381)[)](/facebook/react/commit/2d80a0cd690bb5650b6c8a6c079a87b5dc42bd15 "Fix: Updated link in CONTRIBUTING \(#25381\)")| Oct 3, 2022  
[LICENSE](/facebook/react/blob/main/LICENSE "LICENSE")| [LICENSE](/facebook/react/blob/main/LICENSE "LICENSE")| [[Codemod] Update copyright header to Meta (](/facebook/react/commit/9cdf8a99edcfd94d7420835ea663edca04237527 "\[Codemod\] Update copyright header to Meta \(#25315\)
* Facebook -> Meta in copyright
rg --files | xargs sed -i 's#Copyright \(c\) Facebook, Inc. and its affiliates.#Copyright \(c\) Meta Platforms, Inc. and affiliates.#g'
* Manual tweaks")[#25315](https://github.com/facebook/react/pull/25315)[)](/facebook/react/commit/9cdf8a99edcfd94d7420835ea663edca04237527 "\[Codemod\] Update copyright header to Meta \(#25315\)
* Facebook -> Meta in copyright
rg --files | xargs sed -i 's#Copyright \(c\) Facebook, Inc. and its affiliates.#Copyright \(c\) Meta Platforms, Inc. and affiliates.#g'
* Manual tweaks")| Oct 18, 2022  
[README.md](/facebook/react/blob/main/README.md "README.md")| [README.md](/facebook/react/blob/main/README.md "README.md")| [[ez] Remove circleci badge from readme](/facebook/react/commit/4e482f490405c0c601d8712a0625fd17c04978e4 "\[ez\] Remove circleci badge from readme
CircleCI is no longer in use in this repo: a6b5ed01ae98a18507cb92d8e932a8ca321602e6
ghstack-source-id: b6234f11d143d2c65832e17ccf180b255dc23c9d
Pull Request resolved: https://github.com/facebook/react/pull/30502")| Jul 29, 2024  
[ReactVersions.js](/facebook/react/blob/main/ReactVersions.js "ReactVersions.js")| [ReactVersions.js](/facebook/react/blob/main/ReactVersions.js "ReactVersions.js")| [Fix canary version strings (](/facebook/react/commit/e854ce3b1551a4ac97012336c2e2076ab0cc0636 "Fix canary version strings \(#31721\)
We're still publishing RCs and creating canary version strings using the
RC naming convention. Setting the `canaryChannelLabel` back to canary
fixes the version names and tags after the 19 stable release.")[#31721](https://github.com/facebook/react/pull/31721)[)](/facebook/react/commit/e854ce3b1551a4ac97012336c2e2076ab0cc0636 "Fix canary version strings \(#31721\)
We're still publishing RCs and creating canary version strings using the
RC naming convention. Setting the `canaryChannelLabel` back to canary
fixes the version names and tags after the 19 stable release.")| Dec 13, 2024  
[SECURITY.md](/facebook/react/blob/main/SECURITY.md "SECURITY.md")| [SECURITY.md](/facebook/react/blob/main/SECURITY.md "SECURITY.md")| [Create SECURITY.md (](/facebook/react/commit/1b6e269751c28030429503a60590114e252fc86c "Create SECURITY.md \(#15784\)
Adds SECURITY.md as mentioned in #15722.")[#15784](https://github.com/facebook/react/pull/15784)[)](/facebook/react/commit/1b6e269751c28030429503a60590114e252fc86c "Create SECURITY.md \(#15784\)
Adds SECURITY.md as mentioned in #15722.")| Jan 10, 2020  
[babel.config.js](/facebook/react/blob/main/babel.config.js "babel.config.js")| [babel.config.js](/facebook/react/blob/main/babel.config.js "babel.config.js")| [Upgrade tests to use react/jsx-runtime (](/facebook/react/commit/952aa74f8e45ed35ac6bf1de10ad5ed5410deac6 "Upgrade tests to use react/jsx-runtime \(#28252\)
Instead of createElement.
We should have done this when we initially released jsx-runtime but
better late than never. The general principle is that our tests should
be written using the most up-to-date idioms that we recommend for users,
except when explicitly testing an edge case or legacy behavior, like for
backwards compatibility.
Most of the diff is related to tweaking test output and isn't very
interesting.
I did have to workaround an issue related to component stacks. The
component stack logic depends on shared state that lives in the React
module. The problem is that most of our tests reset the React module
state and re-require a fresh instance of React, React DOM, etc. However,
the JSX runtime is not re-required because it's injected by the compiler
as a static import. This means its copy of the shared state is no longer
the same as the one used by React, causing any warning logged by the JSX
runtime to not include a component stack. \(This same issue also breaks
string refs, but since we're removing those soon I'm not so concerned
about that.\) The solution I went with for now is to mock the JSX runtime
with a proxy that re-requires the module on every function invocation. I
don't love this but it will have to do for now. What we should really do
is migrate our tests away from manually resetting the module state and
use import syntax instead.")[#28252](https://github.com/facebook/react/pull/28252)[)](/facebook/react/commit/952aa74f8e45ed35ac6bf1de10ad5ed5410deac6 "Upgrade tests to use react/jsx-runtime \(#28252\)
Instead of createElement.
We should have done this when we initially released jsx-runtime but
better late than never. The general principle is that our tests should
be written using the most up-to-date idioms that we recommend for users,
except when explicitly testing an edge case or legacy behavior, like for
backwards compatibility.
Most of the diff is related to tweaking test output and isn't very
interesting.
I did have to workaround an issue related to component stacks. The
component stack logic depends on shared state that lives in the React
module. The problem is that most of our tests reset the React module
state and re-require a fresh instance of React, React DOM, etc. However,
the JSX runtime is not re-required because it's injected by the compiler
as a static import. This means its copy of the shared state is no longer
the same as the one used by React, causing any warning logged by the JSX
runtime to not include a component stack. \(This same issue also breaks
string refs, but since we're removing those soon I'm not so concerned
about that.\) The solution I went with for now is to mock the JSX runtime
with a proxy that re-requires the module on every function invocation. I
don't love this but it will have to do for now. What we should really do
is migrate our tests away from manually resetting the module state and
use import syntax instead.")| Feb 6, 2024  
[dangerfile.js](/facebook/react/blob/main/dangerfile.js "dangerfile.js")| [dangerfile.js](/facebook/react/blob/main/dangerfile.js "dangerfile.js")| [[ci] Cleanup more references to circleci](/facebook/react/commit/8fe510752f150a34be4409f474ca7de0746b7b18 "\[ci\] Cleanup more references to circleci
ghstack-source-id: 85a5f17b2b9dee35bb747ce2da13bffaed0fa34a
Pull Request resolved: https://github.com/facebook/react/pull/30509")| Jul 30, 2024  
[netlify.toml](/facebook/react/blob/main/netlify.toml "netlify.toml")| [netlify.toml](/facebook/react/blob/main/netlify.toml "netlify.toml")| [[UMD] Remove umd builds (](/facebook/react/commit/da6ba53b10d8240fc251ba14a3e5878604d3dc7d "\[UMD\] Remove umd builds \(#28735\)
In React 19 React will finally stop publishing UMD builds. This is
motivated primarily by the lack of use of UMD format and the added
complexity of maintaining build infra for these releases. Additionally
with ESM becoming more prevalent in browsers and services like esm.sh
which can host React as an ESM module there are other options for doing
script tag based react loading.
This PR removes all the UMD build configs and forks.
There are some fixtures that still have references to UMD builds however
many of them already do not work \(for instance they are using legacy
features like ReactDOM.render\) and rather than block the removal on
these fixtures being brought up to date we'll just move forward and fix
or removes fixtures as necessary in the future.")[#28735](https://github.com/facebook/react/pull/28735)[)](/facebook/react/commit/da6ba53b10d8240fc251ba14a3e5878604d3dc7d "\[UMD\] Remove umd builds \(#28735\)
In React 19 React will finally stop publishing UMD builds. This is
motivated primarily by the lack of use of UMD format and the added
complexity of maintaining build infra for these releases. Additionally
with ESM becoming more prevalent in browsers and services like esm.sh
which can host React as an ESM module there are other options for doing
script tag based react loading.
This PR removes all the UMD build configs and forks.
There are some fixtures that still have references to UMD builds however
many of them already do not work \(for instance they are using legacy
features like ReactDOM.render\) and rather than block the removal on
these fixtures being brought up to date we'll just move forward and fix
or removes fixtures as necessary in the future.")| Apr 17, 2024  
[package.json](/facebook/react/blob/main/package.json "package.json")| [package.json](/facebook/react/blob/main/package.json "package.json")| [Bump rollup from 3.20.0 to 3.29.5 (](/facebook/react/commit/db320ea4d910d360ccb83850ccdbc464a77fc1c5 "Bump rollup from 3.20.0 to 3.29.5 \(#31072\)
Bumps \[rollup\]\(https://github.com/rollup/rollup\) from 3.20.0 to 3.29.5.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a
href="https://github.com/rollup/rollup/releases">rollup's
releases</a>.</em></p>
<blockquote>
<h2>v3.29.4</h2>
<h2>3.29.4</h2>
<p><em>2023-09-28</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix static analysis when an exported function uses callbacks \(<a
href="https://redirect.github.com/rollup/rollup/issues/5158">#5158</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5158">#5158</a>:
Deoptimize all parameters when losing track of a function \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>v3.29.3</h2>
<h2>3.29.3</h2>
<p><em>2023-09-24</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix a bug where code was wrongly tree-shaken after mutating function
parameters \(<a
href="https://redirect.github.com/rollup/rollup/issues/5153">#5153</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5145">#5145</a>:
docs: improve the docs repl appearance in the light mode \(<a
href="https://github.com/TrickyPi"><code>@​TrickyPi</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5148">#5148</a>:
chore\(deps\): update dependency
<code>@​vue/eslint-config-typescript</code> to v12 \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5149">#5149</a>:
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5153">#5153</a>:
Fully deoptimize first level path when deoptimizing nested parameter
paths \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>v3.29.2</h2>
<h2>3.29.2</h2>
<p><em>2023-09-15</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Export <code>TreeshakingPreset</code> type \(<a
href="https://redirect.github.com/rollup/rollup/issues/5131">#5131</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5131">#5131</a>:
fix: exports <code>TreeshakingPreset</code> \(<a
href="https://github.com/moltar"><code>@​moltar</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5134">#5134</a>:
docs: steps to enable symlinks on windows \(<a
href="https://github.com/thebanjomatic"><code>@​thebanjomatic</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5137">#5137</a>:
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
</ul>
<h2>v3.29.1</h2>
<h2>3.29.1</h2>
<p><em>2023-09-10</em></p>
<h3>Bug Fixes</h3>
<!-- raw HTML omitted -->
</blockquote>
<p>... \(truncated\)</p>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href="https://github.com/rollup/rollup/blob/master/CHANGELOG.md">rollup's
changelog</a>.</em></p>
<blockquote>
<h1>rollup changelog</h1>
<h2>4.22.4</h2>
<p><em>2024-09-21</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix a vulnerability in generated code that affects IIFE, UMD and CJS
bundles when run in a browser context \(<a
href="https://redirect.github.com/rollup/rollup/issues/5671">#5671</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5670">#5670</a>:
refactor: Use object.prototype to check for reserved properties \(<a
href="https://github.com/YuHyeonWook"><code>@​YuHyeonWook</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5671">#5671</a>:
Fix DOM Clobbering CVE \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.3</h2>
<p><em>2024-09-21</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Ensure that mutations in modules without side effects are observed
while properly handling transitive dependencies \(<a
href="https://redirect.github.com/rollup/rollup/issues/5669">#5669</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5669">#5669</a>:
Ensure impure dependencies of pure modules are added \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.2</h2>
<p><em>2024-09-20</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Revert fix for side effect free modules until other issues are
investigated \(<a
href="https://redirect.github.com/rollup/rollup/issues/5667">#5667</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5667">#5667</a>:
Partially revert <a
href="https://redirect.github.com/rollup/rollup/issues/5658">#5658</a>
and re-apply <a
href="https://redirect.github.com/rollup/rollup/issues/5644">#5644</a>
\(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.1</h2>
<p><em>2024-09-20</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Revert <a
href="https://redirect.github.com/rollup/rollup/issues/5644">#5644</a>
&quot;stable chunk hashes&quot; while issues are being investigated</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5663">#5663</a>:
chore\(deps\): update dependency inquirer to v11 \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\], <a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<!-- raw HTML omitted -->
</blockquote>
<p>... \(truncated\)</p>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href="https://github.com/rollup/rollup/commit/dfd233d3a9feb18aa69b49b6c1da0248a4f1c6e3"><code>dfd233d</code></a>
3.29.5</li>
<li><a
href="https://github.com/rollup/rollup/commit/2ef77c00ec2635d42697cff2c0567ccc8db34fb4"><code>2ef77c0</code></a>
Fix DOM Clobbering CVE</li>
<li><a
href="https://github.com/rollup/rollup/commit/a6448b99f725d457e35821b73a865b5c4d4c6a61"><code>a6448b9</code></a>
3.29.4</li>
<li><a
href="https://github.com/rollup/rollup/commit/4e92d60fa90cead39481e3703d26e5d812f43bd1"><code>4e92d60</code></a>
Deoptimize all parameters when losing track of a function \(<a
href="https://redirect.github.com/rollup/rollup/issues/5158">#5158</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/801ffd1a9bebe550b6a0ce665bdca1ead06313de"><code>801ffd1</code></a>
3.29.3</li>
<li><a
href="https://github.com/rollup/rollup/commit/353e4628284b1ef4d8a8b47d895881e5ce6546f4"><code>353e462</code></a>
Fully deoptimize first level path when deoptimizing nested parameter
paths \(#...</li>
<li><a
href="https://github.com/rollup/rollup/commit/a1a89e77fbe06a23229486194970f0813593e9df"><code>a1a89e7</code></a>
chore\(deps\): update dependency
<code>@​vue/eslint-config-typescript</code> to v12 \(<a
href="https://redirect.github.com/rollup/rollup/issues/5148">#5148</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/cc14f7070af8c02ac2d477bda043f3203955291d"><code>cc14f70</code></a>
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://redirect.github.com/rollup/rollup/issues/5149">#5149</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/1e8355b2b68811da24e1d96dea32176b403dc377"><code>1e8355b</code></a>
docs: improve the docs repl appearance in the light mode \(<a
href="https://redirect.github.com/rollup/rollup/issues/5145">#5145</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/5950fc8a6bf6c9f8ef1c7ae05bb8c43d5c313212"><code>5950fc8</code></a>
Adapt branches in REPL workflow</li>
<li>Additional commits viewable in <a
href="https://github.com/rollup/rollup/compare/v3.20.0...v3.29.5">compare
view</a></li>
</ul>
</details>
<br />

\[!\[Dependabot compatibility
score\]\(https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=rollup&package-manager=npm_and_yarn&previous-version=3.20.0&new-version=3.29.5\)\]\(https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores\)
Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.
\[//\]: # \(dependabot-automerge-start\)
\[//\]: # \(dependabot-automerge-end\)
---
<details>
<summary>Dependabot commands and options</summary>
<br />
You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version \(unless you reopen
the PR or upgrade to it yourself\)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version \(unless you reopen
the PR or upgrade to it yourself\)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency \(unless you reopen the
PR or upgrade to it yourself\)
You can disable automated security fix PRs for this repo from the
\[Security Alerts
page\]\(https://github.com/facebook/react/network/alerts\).
</details>
Signed-off-by: dependabot\[bot\] <support@github.com>
Co-authored-by: dependabot\[bot\] <49699333+dependabot\[bot\]@users.noreply.github.com>")[#31072](https://github.com/facebook/react/pull/31072)[)](/facebook/react/commit/db320ea4d910d360ccb83850ccdbc464a77fc1c5 "Bump rollup from 3.20.0 to 3.29.5 \(#31072\)
Bumps \[rollup\]\(https://github.com/rollup/rollup\) from 3.20.0 to 3.29.5.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a
href="https://github.com/rollup/rollup/releases">rollup's
releases</a>.</em></p>
<blockquote>
<h2>v3.29.4</h2>
<h2>3.29.4</h2>
<p><em>2023-09-28</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix static analysis when an exported function uses callbacks \(<a
href="https://redirect.github.com/rollup/rollup/issues/5158">#5158</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5158">#5158</a>:
Deoptimize all parameters when losing track of a function \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>v3.29.3</h2>
<h2>3.29.3</h2>
<p><em>2023-09-24</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix a bug where code was wrongly tree-shaken after mutating function
parameters \(<a
href="https://redirect.github.com/rollup/rollup/issues/5153">#5153</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5145">#5145</a>:
docs: improve the docs repl appearance in the light mode \(<a
href="https://github.com/TrickyPi"><code>@​TrickyPi</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5148">#5148</a>:
chore\(deps\): update dependency
<code>@​vue/eslint-config-typescript</code> to v12 \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5149">#5149</a>:
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5153">#5153</a>:
Fully deoptimize first level path when deoptimizing nested parameter
paths \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>v3.29.2</h2>
<h2>3.29.2</h2>
<p><em>2023-09-15</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Export <code>TreeshakingPreset</code> type \(<a
href="https://redirect.github.com/rollup/rollup/issues/5131">#5131</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5131">#5131</a>:
fix: exports <code>TreeshakingPreset</code> \(<a
href="https://github.com/moltar"><code>@​moltar</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5134">#5134</a>:
docs: steps to enable symlinks on windows \(<a
href="https://github.com/thebanjomatic"><code>@​thebanjomatic</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5137">#5137</a>:
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
</ul>
<h2>v3.29.1</h2>
<h2>3.29.1</h2>
<p><em>2023-09-10</em></p>
<h3>Bug Fixes</h3>
<!-- raw HTML omitted -->
</blockquote>
<p>... \(truncated\)</p>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href="https://github.com/rollup/rollup/blob/master/CHANGELOG.md">rollup's
changelog</a>.</em></p>
<blockquote>
<h1>rollup changelog</h1>
<h2>4.22.4</h2>
<p><em>2024-09-21</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix a vulnerability in generated code that affects IIFE, UMD and CJS
bundles when run in a browser context \(<a
href="https://redirect.github.com/rollup/rollup/issues/5671">#5671</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5670">#5670</a>:
refactor: Use object.prototype to check for reserved properties \(<a
href="https://github.com/YuHyeonWook"><code>@​YuHyeonWook</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5671">#5671</a>:
Fix DOM Clobbering CVE \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.3</h2>
<p><em>2024-09-21</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Ensure that mutations in modules without side effects are observed
while properly handling transitive dependencies \(<a
href="https://redirect.github.com/rollup/rollup/issues/5669">#5669</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5669">#5669</a>:
Ensure impure dependencies of pure modules are added \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.2</h2>
<p><em>2024-09-20</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Revert fix for side effect free modules until other issues are
investigated \(<a
href="https://redirect.github.com/rollup/rollup/issues/5667">#5667</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5667">#5667</a>:
Partially revert <a
href="https://redirect.github.com/rollup/rollup/issues/5658">#5658</a>
and re-apply <a
href="https://redirect.github.com/rollup/rollup/issues/5644">#5644</a>
\(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.1</h2>
<p><em>2024-09-20</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Revert <a
href="https://redirect.github.com/rollup/rollup/issues/5644">#5644</a>
&quot;stable chunk hashes&quot; while issues are being investigated</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5663">#5663</a>:
chore\(deps\): update dependency inquirer to v11 \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\], <a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<!-- raw HTML omitted -->
</blockquote>
<p>... \(truncated\)</p>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href="https://github.com/rollup/rollup/commit/dfd233d3a9feb18aa69b49b6c1da0248a4f1c6e3"><code>dfd233d</code></a>
3.29.5</li>
<li><a
href="https://github.com/rollup/rollup/commit/2ef77c00ec2635d42697cff2c0567ccc8db34fb4"><code>2ef77c0</code></a>
Fix DOM Clobbering CVE</li>
<li><a
href="https://github.com/rollup/rollup/commit/a6448b99f725d457e35821b73a865b5c4d4c6a61"><code>a6448b9</code></a>
3.29.4</li>
<li><a
href="https://github.com/rollup/rollup/commit/4e92d60fa90cead39481e3703d26e5d812f43bd1"><code>4e92d60</code></a>
Deoptimize all parameters when losing track of a function \(<a
href="https://redirect.github.com/rollup/rollup/issues/5158">#5158</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/801ffd1a9bebe550b6a0ce665bdca1ead06313de"><code>801ffd1</code></a>
3.29.3</li>
<li><a
href="https://github.com/rollup/rollup/commit/353e4628284b1ef4d8a8b47d895881e5ce6546f4"><code>353e462</code></a>
Fully deoptimize first level path when deoptimizing nested parameter
paths \(#...</li>
<li><a
href="https://github.com/rollup/rollup/commit/a1a89e77fbe06a23229486194970f0813593e9df"><code>a1a89e7</code></a>
chore\(deps\): update dependency
<code>@​vue/eslint-config-typescript</code> to v12 \(<a
href="https://redirect.github.com/rollup/rollup/issues/5148">#5148</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/cc14f7070af8c02ac2d477bda043f3203955291d"><code>cc14f70</code></a>
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://redirect.github.com/rollup/rollup/issues/5149">#5149</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/1e8355b2b68811da24e1d96dea32176b403dc377"><code>1e8355b</code></a>
docs: improve the docs repl appearance in the light mode \(<a
href="https://redirect.github.com/rollup/rollup/issues/5145">#5145</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/5950fc8a6bf6c9f8ef1c7ae05bb8c43d5c313212"><code>5950fc8</code></a>
Adapt branches in REPL workflow</li>
<li>Additional commits viewable in <a
href="https://github.com/rollup/rollup/compare/v3.20.0...v3.29.5">compare
view</a></li>
</ul>
</details>
<br />

\[!\[Dependabot compatibility
score\]\(https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=rollup&package-manager=npm_and_yarn&previous-version=3.20.0&new-version=3.29.5\)\]\(https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores\)
Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.
\[//\]: # \(dependabot-automerge-start\)
\[//\]: # \(dependabot-automerge-end\)
---
<details>
<summary>Dependabot commands and options</summary>
<br />
You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version \(unless you reopen
the PR or upgrade to it yourself\)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version \(unless you reopen
the PR or upgrade to it yourself\)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency \(unless you reopen the
PR or upgrade to it yourself\)
You can disable automated security fix PRs for this repo from the
\[Security Alerts
page\]\(https://github.com/facebook/react/network/alerts\).
</details>
Signed-off-by: dependabot\[bot\] <support@github.com>
Co-authored-by: dependabot\[bot\] <49699333+dependabot\[bot\]@users.noreply.github.com>")| Sep 26, 2024  
[react.code-workspace](/facebook/react/blob/main/react.code-workspace "react.code-workspace")| [react.code-workspace](/facebook/react/blob/main/react.code-workspace "react.code-workspace")| [created a vscode workspace file for the repo (](/facebook/react/commit/dfd30974aba0d7740e084f70a8af1cd4c54bb273 "created a vscode workspace file for the repo \(#29830\)
### Summary
Similarly to what has been done on the `react-native` repo in
https://github.com/facebook/react-native/pull/43851, this PR adds a
`react.code-workspace` workspace file when using VSCode.
This disables the built-in TypeScript Language Service for `.js`, `.ts`,
and `.json` files, recommends extensions, enables `formatOnSave`,
excludes certain files in search, and configures Flow language support.
### Motivation
This is a DevX benefit for **React contributors** using open source VS
Code. Without this, it takes quite a long time to set up the environment
in vscode to work well.
For me the following two points took around an hour each to figure out,
but for others it may take even more \(screenshots can be found below\):
* Search with "files to include" was searching in ignored files
\(compiled/generated\)
* Configure language validation and prettier both in "packages" that use
flow and in the "compiler" folder that uses typescript.
### Recommended extensions
NOTE: The recommended extensions list is currently minimal — happy to
extend this now or in future, but let's aim to keep these conservative
at the moment.
* Flow — language support
* EditorConfig — formatting based on `.editorconfig`, all file types
* Prettier — formatting for JS* files
* ESLint — linter for JS* files
### Why `react.code-workspace`?
`.code-workspace` files have slight extra behaviours over a `.vscode/`
directory:
* Allows user to opt-in or skip.
* Allows double-click launching from file managers.
* Allows base folder \(and any subfolders in future\) to be opened with
local file tree scope \(useful in fbsource!\)
* \(Minor point\) Single config file over multiple files.
https://code.visualstudio.com/docs/editor/workspaces
### Test plan
Against a new un-configured copy of Visual Studio Code Insiders.
**Without workspace config**
❌ .js files raise errors by default \(built-in TypeScript language
service\)
❌ When using the Flow VS Code extension, the wrong version \(global\) of
Flow is used.
<img width="978" alt="Screenshot 2024-06-10 at 16 03 59"
src="https://github.com/facebook/react/assets/5188459/17e19ba4-bac2-48ea-9b35-6b4b6242bcc1">
❌ Searching in excluded files when the "include" field is specified
<img width="502" alt="Screenshot 2024-06-10 at 15 41 24"
src="https://github.com/facebook/react/assets/5188459/00248755-7905-41bc-b303-498ddba82108">
**With workspace config**
✅ Built-in TypeScript Language Service is disabled for .js files, but
still enabled for .ts\[x\] files
!\[Screen Recording 2024-06-13 at 12 21
24\]\(https://github.com/facebook/react/assets/5188459/6048218c-f316-44cd-8771-d2d0e848991d\)
✅ Flow language support is configured correctly against flow version in
package.json
<img width="993" alt="Screenshot 2024-06-10 at 16 03 44"
src="https://github.com/facebook/react/assets/5188459/b54e143c-a013-4e73-8995-3af7b5a03e36">
✅ Does not search in excluded files when the "include" field is
specified
<img width="555" alt="Screenshot 2024-06-10 at 15 39 18"
src="https://github.com/facebook/react/assets/5188459/dd3e5344-84fb-4b5d-8689-4c8bd28168e0">
✅ Workspace config is suggested when folder is opened in VS Code
!\[image\]\(https://github.com/facebook/react/assets/5188459/7434261f-1057-4954-9885-b057a10684ad\)
✅ Dialog is shown on workspace launch with recommended VS Code
extensions
<img width="580" alt="Screenshot 2024-06-10 at 15 40 52"
src="https://github.com/facebook/react/assets/5188459/c6406fb6-92a0-47f1-8497-4ffe899bb6a9">")[#29830](https://github.com/facebook/react/pull/29830)[)](/facebook/react/commit/dfd30974aba0d7740e084f70a8af1cd4c54bb273 "created a vscode workspace file for the repo \(#29830\)
### Summary
Similarly to what has been done on the `react-native` repo in
https://github.com/facebook/react-native/pull/43851, this PR adds a
`react.code-workspace` workspace file when using VSCode.
This disables the built-in TypeScript Language Service for `.js`, `.ts`,
and `.json` files, recommends extensions, enables `formatOnSave`,
excludes certain files in search, and configures Flow language support.
### Motivation
This is a DevX benefit for **React contributors** using open source VS
Code. Without this, it takes quite a long time to set up the environment
in vscode to work well.
For me the following two points took around an hour each to figure out,
but for others it may take even more \(screenshots can be found below\):
* Search with "files to include" was searching in ignored files
\(compiled/generated\)
* Configure language validation and prettier both in "packages" that use
flow and in the "compiler" folder that uses typescript.
### Recommended extensions
NOTE: The recommended extensions list is currently minimal — happy to
extend this now or in future, but let's aim to keep these conservative
at the moment.
* Flow — language support
* EditorConfig — formatting based on `.editorconfig`, all file types
* Prettier — formatting for JS* files
* ESLint — linter for JS* files
### Why `react.code-workspace`?
`.code-workspace` files have slight extra behaviours over a `.vscode/`
directory:
* Allows user to opt-in or skip.
* Allows double-click launching from file managers.
* Allows base folder \(and any subfolders in future\) to be opened with
local file tree scope \(useful in fbsource!\)
* \(Minor point\) Single config file over multiple files.
https://code.visualstudio.com/docs/editor/workspaces
### Test plan
Against a new un-configured copy of Visual Studio Code Insiders.
**Without workspace config**
❌ .js files raise errors by default \(built-in TypeScript language
service\)
❌ When using the Flow VS Code extension, the wrong version \(global\) of
Flow is used.
<img width="978" alt="Screenshot 2024-06-10 at 16 03 59"
src="https://github.com/facebook/react/assets/5188459/17e19ba4-bac2-48ea-9b35-6b4b6242bcc1">
❌ Searching in excluded files when the "include" field is specified
<img width="502" alt="Screenshot 2024-06-10 at 15 41 24"
src="https://github.com/facebook/react/assets/5188459/00248755-7905-41bc-b303-498ddba82108">
**With workspace config**
✅ Built-in TypeScript Language Service is disabled for .js files, but
still enabled for .ts\[x\] files
!\[Screen Recording 2024-06-13 at 12 21
24\]\(https://github.com/facebook/react/assets/5188459/6048218c-f316-44cd-8771-d2d0e848991d\)
✅ Flow language support is configured correctly against flow version in
package.json
<img width="993" alt="Screenshot 2024-06-10 at 16 03 44"
src="https://github.com/facebook/react/assets/5188459/b54e143c-a013-4e73-8995-3af7b5a03e36">
✅ Does not search in excluded files when the "include" field is
specified
<img width="555" alt="Screenshot 2024-06-10 at 15 39 18"
src="https://github.com/facebook/react/assets/5188459/dd3e5344-84fb-4b5d-8689-4c8bd28168e0">
✅ Workspace config is suggested when folder is opened in VS Code
!\[image\]\(https://github.com/facebook/react/assets/5188459/7434261f-1057-4954-9885-b057a10684ad\)
✅ Dialog is shown on workspace launch with recommended VS Code
extensions
<img width="580" alt="Screenshot 2024-06-10 at 15 40 52"
src="https://github.com/facebook/react/assets/5188459/c6406fb6-92a0-47f1-8497-4ffe899bb6a9">")| Jun 13, 2024  
[yarn.lock](/facebook/react/blob/main/yarn.lock "yarn.lock")| [yarn.lock](/facebook/react/blob/main/yarn.lock "yarn.lock")| [Bump next prerelease version numbers (](/facebook/react/commit/c86542b240375f95dfd14af5b8ec39e29881e74d "Bump next prerelease version numbers \(#31676\)
Updates the version numbers in the prerelease \(canary and experimental\)
channels.
---------
Co-authored-by: Jack Pope <jackpope1@gmail.com>")[#31676](https://github.com/facebook/react/pull/31676)[)](/facebook/react/commit/c86542b240375f95dfd14af5b8ec39e29881e74d "Bump next prerelease version numbers \(#31676\)
Updates the version numbers in the prerelease \(canary and experimental\)
channels.
---------
Co-authored-by: Jack Pope <jackpope1@gmail.com>")| Dec 13, 2024  
View all files  
  
## Repository files navigation

  * [README](#)
  * [Code of conduct](#)
  * [MIT license](#)
  * [Security](#)



# [React](https://react.dev/) · [](https://github.com/facebook/react/blob/main/LICENSE) [](https://www.npmjs.com/package/react) [![\(Runtime\) Build and Test](https://github.com/facebook/react/actions/workflows/runtime_build_and_test.yml/badge.svg)](https://github.com/facebook/react/actions/workflows/runtime_build_and_test.yml) [![\(Compiler\) TypeScript](https://github.com/facebook/react/actions/workflows/compiler_typescript.yml/badge.svg?branch=main)](https://github.com/facebook/react/actions/workflows/compiler_typescript.yml) [](https://legacy.reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

[](#react------)

React is a JavaScript library for building user interfaces.

  * **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
  * **Component-Based:** Build encapsulated components that manage their own state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
  * **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using [Node](https://nodejs.org/en) and power mobile apps using [React Native](https://reactnative.dev/).



[Learn how to use React in your project](https://react.dev/learn).

## Installation

[](#installation)

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need** :

  * Use [Quick Start](https://react.dev/learn) to get a taste of React.
  * [Add React to an Existing Project](https://react.dev/learn/add-react-to-an-existing-project) to use as little or as much React as you need.
  * [Create a New React App](https://react.dev/learn/start-a-new-react-project) if you're looking for a powerful JavaScript toolchain.



## Documentation

[](#documentation)

You can find the React documentation [on the website](https://react.dev/).

Check out the [Getting Started](https://react.dev/learn) page for a quick overview.

The documentation is divided into several sections:

  * [Quick Start](https://react.dev/learn)
  * [Tutorial](https://react.dev/learn/tutorial-tic-tac-toe)
  * [Thinking in React](https://react.dev/learn/thinking-in-react)
  * [Installation](https://react.dev/learn/installation)
  * [Describing the UI](https://react.dev/learn/describing-the-ui)
  * [Adding Interactivity](https://react.dev/learn/adding-interactivity)
  * [Managing State](https://react.dev/learn/managing-state)
  * [Advanced Guides](https://react.dev/learn/escape-hatches)
  * [API Reference](https://react.dev/reference/react)
  * [Where to Get Support](https://react.dev/community)
  * [Contributing Guide](https://legacy.reactjs.org/docs/how-to-contribute.html)



You can improve it by sending pull requests to [this repository](https://github.com/reactjs/react.dev).

## Examples

[](#examples)

We have several examples [on the website](https://react.dev/). Here is the first one to get you started:

```
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
 return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```


This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://react.dev/learn#writing-markup-with-jsx). JSX is not required to use React, but it makes code more readable, and writing it feels like writing HTML.

## Contributing

[](#contributing)

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

[](#code-of-conduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://legacy.reactjs.org/docs/how-to-contribute.html)

[](#contributing-guide)

Read our [contributing guide](https://legacy.reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### [Good First Issues](https://github.com/facebook/react/labels/good%20first%20issue)

[](#good-first-issues)

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

[](#license)

React is [MIT licensed](/facebook/react/blob/main/LICENSE).

## About

The library for web and native user interfaces. 

[react.dev](https://react.dev "https://react.dev")

### Topics

[ react ](/topics/react "Topic: react") [ javascript ](/topics/javascript "Topic: javascript") [ library ](/topics/library "Topic: library") [ ui ](/topics/ui "Topic: ui") [ frontend ](/topics/frontend "Topic: frontend") [ declarative ](/topics/declarative "Topic: declarative")

### Resources

[ Readme ](#readme-ov-file)

### License

[ MIT license ](#MIT-1-ov-file)

### Code of conduct

[ Code of conduct ](#coc-ov-file)

### Security policy

[ Security policy ](#security-ov-file)

[ Activity](/facebook/react/activity)

[ Custom properties](/facebook/react/custom-properties)

### Stars

[ **231k** stars](/facebook/react/stargazers)

### Watchers

[ **6.6k** watching](/facebook/react/watchers)

### Forks

[ **47.2k** forks](/facebook/react/forks)

[ Report repository ](/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact&report=facebook+%28user%29)

##  [Releases 103](/facebook/react/releases)

[ 19.0.0 (December 5, 2024) Latest  Dec 5, 2024 ](/facebook/react/releases/tag/v19.0.0)

[+ 102 releases](/facebook/react/releases)

##  [Used by 25.8m](/facebook/react/network/dependents)

[ + 25,798,629  ](/facebook/react/network/dependents)

##  [Contributors 1,676](/facebook/react/graphs/contributors)

  * [ ](https://github.com/zpao)
  * [ ](https://github.com/gaearon)
  * [ ](https://github.com/sebmarkbage)
  * [ ](https://github.com/acdlite)
  * [ ](https://github.com/sophiebits)
  * [ ](https://github.com/josephsavona)
  * [ ](https://github.com/poteto)
  * [ ](https://github.com/jimfb)
  * [ ](https://github.com/trueadm)
  * [ ](https://github.com/bvaughn)
  * [ ](https://github.com/gsathya)
  * [ ](https://github.com/petehunt)
  * [ ](https://github.com/mofeiZ)
  * [ ](https://github.com/kassens)



[+ 1,662 contributors](/facebook/react/graphs/contributors)

## Languages

  * [ JavaScript 63.4% ](/facebook/react/search?l=javascript)
  * [ TypeScript 22.5% ](/facebook/react/search?l=typescript)
  * [ Rust 10.7% ](/facebook/react/search?l=rust)
  * [ HTML 1.4% ](/facebook/react/search?l=html)
  * [ CSS 0.9% ](/facebook/react/search?l=css)
  * [ C++ 0.6% ](/facebook/react/search?l=c%2B%2B)
  * Other 0.5%



## Footer

[ ](https://github.com "GitHub") © 2024 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You can’t perform that action at this time. 
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

# React

The library for web and native user interfaces

[Learn React](/learn)[API Reference](/reference/react)

## Create user interfaces from components

React lets you build user interfaces out of individual pieces called components. Create your own React components like `Thumbnail`, `LikeButton`, and `Video`. Then combine them into entire screens, pages, and apps.

### Video.js

```


function Video({ video }) {

 return (

  <div>

   <Thumbnail video={video} />

   <a href={video.url}>

    <h3>{video.title}</h3>

    <p>{video.description}</p>

   </a>

   <LikeButton video={video} />

  </div>

 );

}


```


My videoVideo description

Whether you work on your own or with thousands of other developers, using React feels the same. It is designed to let you seamlessly combine components written by independent people, teams, and organizations.

## Write components with code and markup

React components are JavaScript functions. Want to show some content conditionally? Use an `if` statement. Displaying a list? Try array `map()`. Learning React is learning programming.

### VideoList.js

```


function VideoList({ videos, emptyHeading }) {

 const count = videos.length;

 let heading = emptyHeading;

 if (count > 0) {

  const noun = count > 1 ? 'Videos' : 'Video';

  heading = count + ' ' + noun;

 }

 return (

  <section>

   <h2>{heading}</h2>

   {videos.map(video =>

    <Video key={video.id} video={video} />

   )}

  </section>

 );

}


```


## 3 Videos

First videoVideo description

Second videoVideo description

Third videoVideo description

This markup syntax is called JSX. It is a JavaScript syntax extension popularized by React. Putting JSX markup close to related rendering logic makes React components easy to create, maintain, and delete.

## Add interactivity wherever you need it

React components receive data and return what should appear on the screen. You can pass them new data in response to an interaction, like when the user types into an input. React will then update the screen to match the new data.

### SearchableVideoList.js

```


import { useState } from 'react';

function SearchableVideoList({ videos }) {

 const [searchText, setSearchText] = useState('');

 const foundVideos = filterVideos(videos, searchText);

 return (

  <>

   <SearchInput

    value={searchText}

    onChange={newText => setSearchText(newText)} />

   <VideoList

    videos={foundVideos}

    emptyHeading={`No matches for “${searchText}”`} />

  </>

 );

}


```


example.com/videos.html

# React Videos

A brief history of React

Search

## 5 Videos

[](https://www.youtube.com/watch?v=8pDqJVdNa44)### [React: The DocumentaryThe origin story of React](https://www.youtube.com/watch?v=8pDqJVdNa44)

[](https://www.youtube.com/watch?v=x7cQ3mrcKaY)### [Rethinking Best PracticesPete Hunt (2013)](https://www.youtube.com/watch?v=x7cQ3mrcKaY)

[](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)### [Introducing React NativeTom Occhino (2015)](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)

[](https://www.youtube.com/watch?v=V-QO-KO90iQ)### [Introducing React HooksSophie Alpert and Dan Abramov (2018)](https://www.youtube.com/watch?v=V-QO-KO90iQ)

[](https://www.youtube.com/watch?v=TQQPAU21ZUw)### [Introducing Server ComponentsDan Abramov and Lauren Tan (2020)](https://www.youtube.com/watch?v=TQQPAU21ZUw)

You don’t have to build your whole page in React. Add React to your existing HTML page, and render interactive React components anywhere on it.

[Add React to your page](/learn/add-react-to-an-existing-project)

## Go full-stack with a framework

React is a library. It lets you put components together, but it doesn’t prescribe how to do routing and data fetching. To build an entire app with React, we recommend a full-stack React framework like [Next.js](https://nextjs.org) or [Remix](https://remix.run).

### confs/[slug].js

```


import { db } from './database.js';

import { Suspense } from 'react';

async function ConferencePage({ slug }) {

 const conf = await db.Confs.find({ slug });

 return (

  <ConferenceLayout conf={conf}>

   <Suspense fallback={<TalksLoading />}>

    <Talks confId={conf.id} />

   </Suspense>

  </ConferenceLayout>

 );

}

async function Talks({ confId }) {

 const talks = await db.Talks.findAll({ confId });

 const videos = talks.map(talk => talk.video);

 return <SearchableVideoList videos={videos} />;

}


```


example.com/confs/react-conf-2021

React Conf 2021React Conf 2019

Search

## 19 Videos

[React Conf](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)### [React 18 KeynoteThe React Team](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)

[React Conf](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)### [React 18 for App DevelopersShruti Kapoor](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)

[React Conf](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)### [Streaming Server Rendering with SuspenseShaundai Person](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)

[React Conf](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)### [The First React Working GroupAakansha Doshi](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)

[React Conf](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)### [React Developer ToolingBrian Vaughn](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)

[React Conf](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)### [React without memoXuan Huang (黄玄)](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)

[React Conf](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)### [React Docs KeynoteRachel Nabors](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)

[React Conf](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)### [Things I Learnt from the New React DocsDebbie O'Brien](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)

[React Conf](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)### [Learning in the BrowserSarah Rainsberger](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)

[React Conf](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)### [The ROI of Designing with ReactLinton Ye](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)

[React Conf](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)### [Interactive Playgrounds with ReactDelba de Oliveira](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)

[React Conf](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)### [Re-introducing RelayRobert Balicki](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)

[React Conf](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)### [React Native DesktopEric Rozell and Steven Moyes](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)

[React Conf](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)### [On-device Machine Learning for React NativeRoman Rädle](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)

[React Conf](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)### [React 18 for External Store LibrariesDaishi Kato](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)

[React Conf](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)### [Building Accessible Components with React 18Diego Haz](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)

[React Conf](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)### [Accessible Japanese Form Components with ReactTafu Nakazaki](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)

[React Conf](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)### [UI Tools for ArtistsLyle Troxell](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)

[React Conf](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)### [Hydrogen + React 18Helen Lin](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)

React is also an architecture. Frameworks that implement it let you fetch data in asynchronous components that run on the server or even during the build. Read data from a file or a database, and pass it down to your interactive components.

[Get started with a framework](/learn/start-a-new-react-project)

## Use the best from every platform

People love web and native apps for different reasons. React lets you build both web apps and native apps using the same skills. It leans upon each platform’s unique strengths to let your interfaces feel just right on every platform.

example.com

#### Stay true to the web

People expect web app pages to load fast. On the server, React lets you start streaming HTML while you’re still fetching data, progressively filling in the remaining content before any JavaScript code loads. On the client, React can use standard web APIs to keep your UI responsive even in the middle of rendering.

9:40 AM

#### Go truly native

People expect native apps to look and feel like their platform. [React Native](https://reactnative.dev) and [Expo](https://github.com/expo/expo) let you build apps in React for Android, iOS, and more. They look and feel native because their UIs _are_ truly native. It’s not a web view—your React components render real Android and iOS views provided by the platform.

With React, you can be a web _and_ a native developer. Your team can ship to many platforms without sacrificing the user experience. Your organization can bridge the platform silos, and form teams that own entire features end-to-end.

[Build for native platforms](https://reactnative.dev/)

## Upgrade when the future is ready

React approaches changes with care. Every React commit is tested on business-critical surfaces with over a billion users. Over 100,000 React components at Meta help validate every migration strategy.

The React team is always researching how to improve React. Some research takes years to pay off. React has a high bar for taking a research idea into production. Only proven approaches become a part of React.

[Read more React news](/blog)

Latest React News

## [React 19December 05, 2024](/blog/2024/12/05/react-19)

## [React Compiler Beta Release and RoadmapOctober 21, 2024](/blog/2024/10/21/react-compiler-beta-release)

## [React Conf 2024 RecapMay 22, 2024](/blog/2024/05/22/react-conf-2024-recap)

## [React 19 RCApril 25, 2024](/blog/2024/04/25/react-19)

[Read more React news](/blog)

## Join a community of millions

You’re not alone. Two million developers from all over the world visit the React docs every month. React is something that people and teams can agree on.

This is why React is more than a library, an architecture, or even an ecosystem. React is a community. It’s a place where you can ask for help, find opportunities, and meet new friends. You will meet both developers and designers, beginners and experts, researchers and artists, teachers and students. Our backgrounds may be very different, but React lets us all create user interfaces together.

## Welcome to the React community

[Get Started](/learn)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

# React

The library for web and native user interfaces

[Learn React](/learn)[API Reference](/reference/react)

## Create user interfaces from components

React lets you build user interfaces out of individual pieces called components. Create your own React components like `Thumbnail`, `LikeButton`, and `Video`. Then combine them into entire screens, pages, and apps.

### Video.js

```


function Video({ video }) {

 return (

  <div>

   <Thumbnail video={video} />

   <a href={video.url}>

    <h3>{video.title}</h3>

    <p>{video.description}</p>

   </a>

   <LikeButton video={video} />

  </div>

 );

}


```


My videoVideo description

Whether you work on your own or with thousands of other developers, using React feels the same. It is designed to let you seamlessly combine components written by independent people, teams, and organizations.

## Write components with code and markup

React components are JavaScript functions. Want to show some content conditionally? Use an `if` statement. Displaying a list? Try array `map()`. Learning React is learning programming.

### VideoList.js

```


function VideoList({ videos, emptyHeading }) {

 const count = videos.length;

 let heading = emptyHeading;

 if (count > 0) {

  const noun = count > 1 ? 'Videos' : 'Video';

  heading = count + ' ' + noun;

 }

 return (

  <section>

   <h2>{heading}</h2>

   {videos.map(video =>

    <Video key={video.id} video={video} />

   )}

  </section>

 );

}


```


## 3 Videos

First videoVideo description

Second videoVideo description

Third videoVideo description

This markup syntax is called JSX. It is a JavaScript syntax extension popularized by React. Putting JSX markup close to related rendering logic makes React components easy to create, maintain, and delete.

## Add interactivity wherever you need it

React components receive data and return what should appear on the screen. You can pass them new data in response to an interaction, like when the user types into an input. React will then update the screen to match the new data.

### SearchableVideoList.js

```


import { useState } from 'react';

function SearchableVideoList({ videos }) {

 const [searchText, setSearchText] = useState('');

 const foundVideos = filterVideos(videos, searchText);

 return (

  <>

   <SearchInput

    value={searchText}

    onChange={newText => setSearchText(newText)} />

   <VideoList

    videos={foundVideos}

    emptyHeading={`No matches for “${searchText}”`} />

  </>

 );

}


```


example.com/videos.html

# React Videos

A brief history of React

Search

## 5 Videos

[](https://www.youtube.com/watch?v=8pDqJVdNa44)### [React: The DocumentaryThe origin story of React](https://www.youtube.com/watch?v=8pDqJVdNa44)

[](https://www.youtube.com/watch?v=x7cQ3mrcKaY)### [Rethinking Best PracticesPete Hunt (2013)](https://www.youtube.com/watch?v=x7cQ3mrcKaY)

[](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)### [Introducing React NativeTom Occhino (2015)](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)

[](https://www.youtube.com/watch?v=V-QO-KO90iQ)### [Introducing React HooksSophie Alpert and Dan Abramov (2018)](https://www.youtube.com/watch?v=V-QO-KO90iQ)

[](https://www.youtube.com/watch?v=TQQPAU21ZUw)### [Introducing Server ComponentsDan Abramov and Lauren Tan (2020)](https://www.youtube.com/watch?v=TQQPAU21ZUw)

You don’t have to build your whole page in React. Add React to your existing HTML page, and render interactive React components anywhere on it.

[Add React to your page](/learn/add-react-to-an-existing-project)

## Go full-stack with a framework

React is a library. It lets you put components together, but it doesn’t prescribe how to do routing and data fetching. To build an entire app with React, we recommend a full-stack React framework like [Next.js](https://nextjs.org) or [Remix](https://remix.run).

### confs/[slug].js

```


import { db } from './database.js';

import { Suspense } from 'react';

async function ConferencePage({ slug }) {

 const conf = await db.Confs.find({ slug });

 return (

  <ConferenceLayout conf={conf}>

   <Suspense fallback={<TalksLoading />}>

    <Talks confId={conf.id} />

   </Suspense>

  </ConferenceLayout>

 );

}

async function Talks({ confId }) {

 const talks = await db.Talks.findAll({ confId });

 const videos = talks.map(talk => talk.video);

 return <SearchableVideoList videos={videos} />;

}


```


example.com/confs/react-conf-2021

React Conf 2021React Conf 2019

Search

## 19 Videos

[React Conf](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)### [React 18 KeynoteThe React Team](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)

[React Conf](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)### [React 18 for App DevelopersShruti Kapoor](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)

[React Conf](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)### [Streaming Server Rendering with SuspenseShaundai Person](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)

[React Conf](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)### [The First React Working GroupAakansha Doshi](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)

[React Conf](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)### [React Developer ToolingBrian Vaughn](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)

[React Conf](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)### [React without memoXuan Huang (黄玄)](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)

[React Conf](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)### [React Docs KeynoteRachel Nabors](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)

[React Conf](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)### [Things I Learnt from the New React DocsDebbie O'Brien](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)

[React Conf](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)### [Learning in the BrowserSarah Rainsberger](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)

[React Conf](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)### [The ROI of Designing with ReactLinton Ye](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)

[React Conf](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)### [Interactive Playgrounds with ReactDelba de Oliveira](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)

[React Conf](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)### [Re-introducing RelayRobert Balicki](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)

[React Conf](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)### [React Native DesktopEric Rozell and Steven Moyes](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)

[React Conf](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)### [On-device Machine Learning for React NativeRoman Rädle](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)

[React Conf](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)### [React 18 for External Store LibrariesDaishi Kato](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)

[React Conf](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)### [Building Accessible Components with React 18Diego Haz](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)

[React Conf](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)### [Accessible Japanese Form Components with ReactTafu Nakazaki](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)

[React Conf](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)### [UI Tools for ArtistsLyle Troxell](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)

[React Conf](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)### [Hydrogen + React 18Helen Lin](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)

React is also an architecture. Frameworks that implement it let you fetch data in asynchronous components that run on the server or even during the build. Read data from a file or a database, and pass it down to your interactive components.

[Get started with a framework](/learn/start-a-new-react-project)

## Use the best from every platform

People love web and native apps for different reasons. React lets you build both web apps and native apps using the same skills. It leans upon each platform’s unique strengths to let your interfaces feel just right on every platform.

example.com

#### Stay true to the web

People expect web app pages to load fast. On the server, React lets you start streaming HTML while you’re still fetching data, progressively filling in the remaining content before any JavaScript code loads. On the client, React can use standard web APIs to keep your UI responsive even in the middle of rendering.

9:40 AM

#### Go truly native

People expect native apps to look and feel like their platform. [React Native](https://reactnative.dev) and [Expo](https://github.com/expo/expo) let you build apps in React for Android, iOS, and more. They look and feel native because their UIs _are_ truly native. It’s not a web view—your React components render real Android and iOS views provided by the platform.

With React, you can be a web _and_ a native developer. Your team can ship to many platforms without sacrificing the user experience. Your organization can bridge the platform silos, and form teams that own entire features end-to-end.

[Build for native platforms](https://reactnative.dev/)

## Upgrade when the future is ready

React approaches changes with care. Every React commit is tested on business-critical surfaces with over a billion users. Over 100,000 React components at Meta help validate every migration strategy.

The React team is always researching how to improve React. Some research takes years to pay off. React has a high bar for taking a research idea into production. Only proven approaches become a part of React.

[Read more React news](/blog)

Latest React News

## [React 19December 05, 2024](/blog/2024/12/05/react-19)

## [React Compiler Beta Release and RoadmapOctober 21, 2024](/blog/2024/10/21/react-compiler-beta-release)

## [React Conf 2024 RecapMay 22, 2024](/blog/2024/05/22/react-conf-2024-recap)

## [React 19 RCApril 25, 2024](/blog/2024/04/25/react-19)

[Read more React news](/blog)

## Join a community of millions

You’re not alone. Two million developers from all over the world visit the React docs every month. React is something that people and teams can agree on.

This is why React is more than a library, an architecture, or even an ecosystem. React is a community. It’s a place where you can ask for help, find opportunities, and meet new friends. You will meet both developers and designers, beginners and experts, researchers and artists, teachers and students. Our backgrounds may be very different, but React lets us all create user interfaces together.

## Welcome to the React community

[Get Started](/learn)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")
  * [Installation ](/learn/installation "Installation")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")
  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")
  * [Managing State ](/learn/managing-state "Managing State")
  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

### REACT API

  * [Hooks ](/reference/react "Hooks")
  * [Components ](/reference/react/components "Components")
  * [APIs ](/reference/react/apis "APIs")
  * [Legacy APIs ](/reference/react/legacy "Legacy APIs")

### REACT DOM API

  * [Components ](/reference/react-dom/components "Components")
  * [APIs ](/reference/react-dom "APIs")
  * [Client APIs ](/reference/react-dom/client "Client APIs")
  * [Server APIs ](/reference/react-dom/server "Server APIs")

### GET INVOLVED

  * [React Community ](/community "React Community")

### STAY INFORMED

  * [React Blog ](/blog "React Blog")



Is this page useful?

[React Docs](/)

# React Versions[](#undefined "Link for this heading")

The React docs at [react.dev](https://react.dev) provide documentation for the latest version of React.

We aim to keep the docs updated within major versions, and do not publish versions for each minor or patch version. When a new major is released, we archive the docs for the previous version as `x.react.dev`. See our [versioning policy](/community/versioning-policy) for more info.

You can find an archive of previous major versions below.

## Latest version: 19.0 [](#latest-version "Link for Latest version: 19.0 ")

  * [react.dev](https://react.dev)



## Previous versions [](#previous-versions "Link for Previous versions ")

  * [18.react.dev](https://18.react.dev)
  * [17.react.dev](https://17.react.dev)
  * [16.react.dev](https://16.react.dev)
  * [15.react.dev](https://15.react.dev)



### Note

#### Legacy Docs [](#legacy-docs "Link for Legacy Docs ")

In 2023, we [launched our new docs](/blog/2023/03/16/introducing-react-dev) for React 18 as [react.dev](https://react.dev). The legacy React 18 docs are available at [legacy.reactjs.org](https://legacy.reactjs.org). Versions 17 and below are hosted on legacy sites.

For versions older than React 15, see [15.react.dev](https://15.react.dev).

## Changelog [](#changelog "Link for Changelog ")

### React 19 [](#react-19 "Link for React 19 ")

**Blog Posts**

  * [React v19](/blog/2024/12/05/react-19)
  * [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide)
  * [React Compiler Beta Release](/blog/2024/10/21/react-compiler-beta-release)



**Talks**

  * [React 19 Keynote](https://www.youtube.com/watch?v=lyEKhv8-3n0)
  * [A Roadmap to React 19](https://www.youtube.com/watch?v=R0B2HsSM78s)
  * [What’s new in React 19](https://www.youtube.com/watch?v=AJOGzVygGcY)
  * [React for Two Computers](https://www.youtube.com/watch?v=ozI4V_29fj4)
  * [React Compiler Deep Dive](https://www.youtube.com/watch?v=uA_PVyZP7AI)
  * [React Compiler Case Studies](https://www.youtube.com/watch?v=lvhPq5chokM)
  * [React 19 Deep Dive: Coordinating HTML](https://www.youtube.com/watch?v=IBBN-s77YSI)



**Releases**

  * [v19.0.0 (December, 2024)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1900-december-5-2024)



### React 18 [](#react-18 "Link for React 18 ")

**Blog Posts**

  * [React v18.0](/blog/2022/03/29/react-v18)
  * [How to Upgrade to React 18](/blog/2022/03/08/react-18-upgrade-guide)
  * [The Plan for React 18](/blog/2021/06/08/the-plan-for-react-18)



**Talks**

  * [React 18 Keynote](https://www.youtube.com/watch?v=FZ0cG47msEk)
  * [React 18 for app developers](https://www.youtube.com/watch?v=ytudH8je5ko)
  * [Streaming Server Rendering with Suspense](https://www.youtube.com/watch?v=pj5N-Khihgc)
  * [React without memo](https://www.youtube.com/watch?v=lGEMwh32soc)
  * [React Docs Keynote](https://www.youtube.com/watch?v=mneDaMYOKP8)
  * [React Developer Tooling](https://www.youtube.com/watch?v=oxDfrke8rZg)
  * [The first React Working Group](https://www.youtube.com/watch?v=qn7gRClrC9U)
  * [React 18 for External Store Libraries](https://www.youtube.com/watch?v=oPfSC5bQPR8)



**Releases**

  * [v18.3.1 (April, 2024)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1831-april-26-2024)
  * [v18.3.0 (April, 2024)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1830-april-25-2024)
  * [v18.2.0 (June, 2022)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1820-june-14-2022)
  * [v18.1.0 (April, 2022)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1810-april-26-2022)
  * [v18.0.0 (March 2022)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1800-march-29-2022)



### React 17 [](#react-17 "Link for React 17 ")

**Blog Posts**

  * [React v17.0](https://legacy.reactjs.org/blog/2020/10/20/react-v17.html)
  * [Introducing the New JSX Transform](https://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html)
  * [React v17.0 Release Candidate: No New Features](https://legacy.reactjs.org/blog/2020/08/10/react-v17-rc.html)



**Releases**

  * [v17.0.2 (March 2021)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1702-march-22-2021)
  * [v17.0.1 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1701-october-22-2020)
  * [v17.0.0 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1700-october-20-2020)



### React 16 [](#react-16 "Link for React 16 ")

**Blog Posts**

  * [React v16.0](https://legacy.reactjs.org/blog/2017/09/26/react-v16.0.html)
  * [DOM Attributes in React 16](https://legacy.reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html)
  * [Error Handling in React 16](https://legacy.reactjs.org/blog/2017/07/26/error-handling-in-react-16.html)
  * [React v16.2.0: Improved Support for Fragments](https://legacy.reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html)
  * [React v16.4.0: Pointer Events](https://legacy.reactjs.org/blog/2018/05/23/react-v-16-4.html)
  * [React v16.4.2: Server-side vulnerability fix](https://legacy.reactjs.org/blog/2018/08/01/react-v-16-4-2.html)
  * [React v16.6.0: lazy, memo and contextType](https://legacy.reactjs.org/blog/2018/10/23/react-v-16-6.html)
  * [React v16.7: No, This Is Not the One With Hooks](https://legacy.reactjs.org/blog/2018/12/19/react-v-16-7.html)
  * [React v16.8: The One With Hooks](https://legacy.reactjs.org/blog/2019/02/06/react-v16.8.0.html)
  * [React v16.9.0 and the Roadmap Update](https://legacy.reactjs.org/blog/2019/08/08/react-v16.9.0.html)
  * [React v16.13.0](https://legacy.reactjs.org/blog/2020/02/26/react-v16.13.0.html)



**Releases**

  * [v16.14.0 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16140-october-14-2020)
  * [v16.13.1 (March 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16131-march-19-2020)
  * [v16.13.0 (February 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16130-february-26-2020)
  * [v16.12.0 (November 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16120-november-14-2019)
  * [v16.11.0 (October 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16110-october-22-2019)
  * [v16.10.2 (October 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16102-october-3-2019)
  * [v16.10.1 (September 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16101-september-28-2019)
  * [v16.10.0 (September 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16100-september-27-2019)
  * [v16.9.0 (August 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1690-august-8-2019)
  * [v16.8.6 (March 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1686-march-27-2019)
  * [v16.8.5 (March 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1685-march-22-2019)
  * [v16.8.4 (March 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1684-march-5-2019)
  * [v16.8.3 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1683-february-21-2019)
  * [v16.8.2 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1682-february-14-2019)
  * [v16.8.1 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1681-february-6-2019)
  * [v16.8.0 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1680-february-6-2019)
  * [v16.7.0 (December 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1670-december-19-2018)
  * [v16.6.3 (November 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1663-november-12-2018)
  * [v16.6.2 (November 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1662-november-12-2018)
  * [v16.6.1 (November 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1661-november-6-2018)
  * [v16.6.0 (October 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1660-october-23-2018)
  * [v16.5.2 (September 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1652-september-18-2018)
  * [v16.5.1 (September 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1651-september-13-2018)
  * [v16.5.0 (September 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1650-september-5-2018)
  * [v16.4.2 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1642-august-1-2018)
  * [v16.4.1 (June 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1641-june-13-2018)
  * [v16.4.0 (May 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1640-may-23-2018)
  * [v16.3.3 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1633-august-1-2018)
  * [v16.3.2 (April 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1632-april-16-2018)
  * [v16.3.1 (April 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1631-april-3-2018)
  * [v16.3.0 (March 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1630-march-29-2018)
  * [v16.2.1 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1621-august-1-2018)
  * [v16.2.0 (November 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1620-november-28-2017)
  * [v16.1.2 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1612-august-1-2018)
  * [v16.1.1 (November 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1611-november-13-2017)
  * [v16.1.0 (November 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1610-november-9-2017)
  * [v16.0.1 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1601-august-1-2018)
  * [v16.0 (September 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1600-september-26-2017)



### React 15 [](#react-15 "Link for React 15 ")

**Blog Posts**

  * [React v15.0](https://legacy.reactjs.org/blog/2016/04/07/react-v15.html)
  * [React v15.0 Release Candidate 2](https://legacy.reactjs.org/blog/2016/03/16/react-v15-rc2.html)
  * [React v15.0 Release Candidate](https://legacy.reactjs.org/blog/2016/03/07/react-v15-rc1.html)
  * [New Versioning Scheme](https://legacy.reactjs.org/blog/2016/02/19/new-versioning-scheme.html)
  * [Discontinuing IE 8 Support in React DOM](https://legacy.reactjs.org/blog/2016/01/12/discontinuing-ie8-support.html)
  * [Introducing React’s Error Code System](https://legacy.reactjs.org/blog/2016/07/11/introducing-reacts-error-code-system.html)
  * [React v15.0.1](https://legacy.reactjs.org/blog/2016/04/08/react-v15.0.1.html)
  * [React v15.4.0](https://legacy.reactjs.org/blog/2016/11/16/react-v15.4.0.html)
  * [React v15.5.0](https://legacy.reactjs.org/blog/2017/04/07/react-v15.5.0.html)
  * [React v15.6.0](https://legacy.reactjs.org/blog/2017/06/13/react-v15.6.0.html)
  * [React v15.6.2](https://legacy.reactjs.org/blog/2017/09/25/react-v15.6.2.html)



**Releases**

  * [v15.7.0 (October 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1570-october-14-2020)
  * [v15.6.2 (September 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1562-september-25-2017)
  * [v15.6.1 (June 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1561-june-14-2017)
  * [v15.6.0 (June 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1560-june-13-2017)
  * [v15.5.4 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1554-april-11-2017)
  * [v15.5.3 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1553-april-7-2017)
  * [v15.5.2 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1552-april-7-2017)
  * [v15.5.1 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1551-april-7-2017)
  * [v15.5.0 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1550-april-7-2017)
  * [v15.4.2 (January 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1542-january-6-2017)
  * [v15.4.1 (November 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1541-november-22-2016)
  * [v15.4.0 (November 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1540-november-16-2016)
  * [v15.3.2 (September 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1532-september-19-2016)
  * [v15.3.1 (August 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1531-august-19-2016)
  * [v15.3.0 (July 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1530-july-29-2016)
  * [v15.2.1 (July 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1521-july-8-2016)
  * [v15.2.0 (July 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1520-july-1-2016)
  * [v15.1.0 (May 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1510-may-20-2016)
  * [v15.0.2 (April 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1502-april-29-2016)
  * [v15.0.1 (April 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1501-april-8-2016)
  * [v15.0.0 (April 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1500-april-7-2016)



### React 0.14 [](#react-14 "Link for React 0.14 ")

**Blog Posts**

  * [React v0.14](https://legacy.reactjs.org/blog/2015/10/07/react-v0.14.html)
  * [React v0.14 Release Candidate](https://legacy.reactjs.org/blog/2015/09/10/react-v0.14-rc1.html)
  * [React v0.14 Beta 1](https://legacy.reactjs.org/blog/2015/07/03/react-v0.14-beta-1.html)
  * [New React Developer Tools](https://legacy.reactjs.org/blog/2015/09/02/new-react-developer-tools.html)
  * [New React Devtools Beta](https://legacy.reactjs.org/blog/2015/08/03/new-react-devtools-beta.html)
  * [React v0.14.1](https://legacy.reactjs.org/blog/2015/10/28/react-v0.14.1.html)
  * [React v0.14.2](https://legacy.reactjs.org/blog/2015/11/02/react-v0.14.2.html)
  * [React v0.14.3](https://legacy.reactjs.org/blog/2015/11/18/react-v0.14.3.html)
  * [React v0.14.4](https://legacy.reactjs.org/blog/2015/12/29/react-v0.14.4.html)
  * [React v0.14.8](https://legacy.reactjs.org/blog/2016/03/29/react-v0.14.8.html)



**Releases**

  * [v0.14.10 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#01410-october-14-2020)
  * [v0.14.8 (March 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0148-march-29-2016)
  * [v0.14.7 (January 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0147-january-28-2016)
  * [v0.14.6 (January 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0146-january-6-2016)
  * [v0.14.5 (December 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0145-december-29-2015)
  * [v0.14.4 (December 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0144-december-29-2015)
  * [v0.14.3 (November 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0143-november-18-2015)
  * [v0.14.2 (November 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0142-november-2-2015)
  * [v0.14.1 (October 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0141-october-28-2015)
  * [v0.14.0 (October 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0140-october-7-2015)



### React 0.13 [](#react-13 "Link for React 0.13 ")

**Blog Posts**

  * [React Native v0.4](https://legacy.reactjs.org/blog/2015/04/17/react-native-v0.4.html)
  * [React v0.13](https://legacy.reactjs.org/blog/2015/03/10/react-v0.13.html)
  * [React v0.13 RC2](https://legacy.reactjs.org/blog/2015/03/03/react-v0.13-rc2.html)
  * [React v0.13 RC](https://legacy.reactjs.org/blog/2015/02/24/react-v0.13-rc1.html)
  * [React v0.13.0 Beta 1](https://legacy.reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html)
  * [Streamlining React Elements](https://legacy.reactjs.org/blog/2015/02/24/streamlining-react-elements.html)
  * [Introducing Relay and GraphQL](https://legacy.reactjs.org/blog/2015/02/20/introducing-relay-and-graphql.html)
  * [Introducing React Native](https://legacy.reactjs.org/blog/2015/03/26/introducing-react-native.html)
  * [React v0.13.1](https://legacy.reactjs.org/blog/2015/03/16/react-v0.13.1.html)
  * [React v0.13.2](https://legacy.reactjs.org/blog/2015/04/18/react-v0.13.2.html)
  * [React v0.13.3](https://legacy.reactjs.org/blog/2015/05/08/react-v0.13.3.html)



**Releases**

  * [v0.13.3 (May 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0133-may-8-2015)
  * [v0.13.2 (April 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0132-april-18-2015)
  * [v0.13.1 (March 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0131-march-16-2015)
  * [v0.13.0 (March 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0130-march-10-2015)



### React 0.12 [](#react-12 "Link for React 0.12 ")

**Blog Posts**

  * [React v0.12](https://legacy.reactjs.org/blog/2014/10/28/react-v0.12.html)
  * [React v0.12 RC](https://legacy.reactjs.org/blog/2014/10/16/react-v0.12-rc1.html)
  * [Introducing React Elements](https://legacy.reactjs.org/blog/2014/10/14/introducing-react-elements.html)
  * [React v0.12.2](https://legacy.reactjs.org/blog/2014/12/18/react-v0.12.2.html)



**Releases**

  * [v0.12.2 (December 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0122-december-18-2014)
  * [v0.12.1 (November 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0121-november-18-2014)
  * [v0.12.0 (October 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0120-october-28-2014)



### React 0.11 [](#react-11 "Link for React 0.11 ")

**Blog Posts**

  * [React v0.11](https://legacy.reactjs.org/blog/2014/07/17/react-v0.11.html)
  * [React v0.11 RC](https://legacy.reactjs.org/blog/2014/07/13/react-v0.11-rc1.html)
  * [One Year of Open-Source React](https://legacy.reactjs.org/blog/2014/05/29/one-year-of-open-source-react.html)
  * [The Road to 1.0](https://legacy.reactjs.org/blog/2014/03/28/the-road-to-1.0.html)
  * [React v0.11.1](https://legacy.reactjs.org/blog/2014/07/25/react-v0.11.1.html)
  * [React v0.11.2](https://legacy.reactjs.org/blog/2014/09/16/react-v0.11.2.html)
  * [Introducing the JSX Specificaion](https://legacy.reactjs.org/blog/2014/09/03/introducing-the-jsx-specification.html)



**Releases**

  * [v0.11.2 (September 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0112-september-16-2014)
  * [v0.11.1 (July 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0111-july-24-2014)
  * [v0.11.0 (July 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0110-july-17-2014)



### React 0.10 and below [](#react-10-and-below "Link for React 0.10 and below ")

**Blog Posts**

  * [React v0.10](https://legacy.reactjs.org/blog/2014/03/21/react-v0.10.html)
  * [React v0.10 RC](https://legacy.reactjs.org/blog/2014/03/19/react-v0.10-rc1.html)
  * [React v0.9](https://legacy.reactjs.org/blog/2014/02/20/react-v0.9.html)
  * [React v0.9 RC](https://legacy.reactjs.org/blog/2014/02/16/react-v0.9-rc1.html)
  * [React Chrome Developer Tools](https://legacy.reactjs.org/blog/2014/01/02/react-chrome-developer-tools.html)
  * [React v0.8](https://legacy.reactjs.org/blog/2013/12/19/react-v0.8.0.html)
  * [React v0.5.2, v0.4.2](https://legacy.reactjs.org/blog/2013/12/18/react-v0.5.2-v0.4.2.html)
  * [React v0.5.1](https://legacy.reactjs.org/blog/2013/10/29/react-v0-5-1.html)
  * [React v0.5](https://legacy.reactjs.org/blog/2013/10/16/react-v0.5.0.html)
  * [React v0.4.1](https://legacy.reactjs.org/blog/2013/07/26/react-v0-4-1.html)
  * [React v0.4.0](https://legacy.reactjs.org/blog/2013/07/17/react-v0-4-0.html)
  * [New in React v0.4: Prop Validation and Default Values](https://legacy.reactjs.org/blog/2013/07/11/react-v0-4-prop-validation-and-default-values.html)
  * [New in React v0.4: Autobind by Default](https://legacy.reactjs.org/blog/2013/07/02/react-v0-4-autobind-by-default.html)
  * [React v0.3.3](https://legacy.reactjs.org/blog/2013/07/02/react-v0-4-autobind-by-default.html)



**Releases**

  * [v0.10.0 (March 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0100-march-21-2014)
  * [v0.9.0 (February 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#090-february-20-2014)
  * [v0.8.0 (December 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#080-december-19-2013)
  * [v0.5.2 (December 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#052-042-december-18-2013)
  * [v0.5.1 (October 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#051-october-29-2013)
  * [v0.5.0 (October 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#050-october-16-2013)
  * [v0.4.1 (July 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#041-july-26-2013)
  * [v0.4.0 (July 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#040-july-17-2013)
  * [v0.3.3 (June 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#033-june-20-2013)
  * [v0.3.2 (May 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#032-may-31-2013)
  * [v0.3.1 (May 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#031-may-30-2013)
  * [v0.3.0 (May 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#031-may-30-2013)



### Initial Commit [](#initial-commit "Link for Initial Commit ")

React was open-sourced on May 29, 2013. The initial commit is: `75897c`[: Initial public release](https://github.com/facebook/react/commit/75897c2dcd1dd3a6ca46284dd37e13d22b4b16b4)

See the first blog post: [Why did we build React?](https://legacy.reactjs.org/blog/2013/06/05/why-react.html)

React was open sourced at Facebook Seattle in 2013:

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Latest version: 19.0 ](#latest-version)
  * [Previous versions ](#previous-versions)
  * [Changelog ](#changelog)
  * [React 19 ](#react-19)
  * [React 18 ](#react-18)
  * [React 17 ](#react-17)
  * [React 16 ](#react-16)
  * [React 15 ](#react-15)
  * [React 0.14 ](#react-14)
  * [React 0.13 ](#react-13)
  * [React 0.12 ](#react-12)
  * [React 0.11 ](#react-11)
  * [React 0.10 and below ](#react-10-and-below)
  * [Initial Commit ](#initial-commit)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Quick Start[](#undefined "Link for this heading")

Welcome to the React documentation! This page will give you an introduction to 80% of the React concepts that you will use on a daily basis.

### You will learn

  * How to create and nest components
  * How to add markup and styles
  * How to display data
  * How to render conditions and lists
  * How to respond to events and update the screen
  * How to share data between components



## Creating and nesting components [](#components "Link for Creating and nesting components ")

React apps are made out of _components_. A component is a piece of the UI (user interface) that has its own logic and appearance. A component can be as small as a button, or as large as an entire page.

React components are JavaScript functions that return markup:

```


function MyButton() {

 return (

  <button>I'm a button</button>

 );

}


```


Now that you’ve declared `MyButton`, you can nest it into another component:

```


export default function MyApp() {

 return (

  <div>

   <h1>Welcome to my app</h1>

   <MyButton />

  </div>

 );

}


```


Notice that `<MyButton />` starts with a capital letter. That’s how you know it’s a React component. React component names must always start with a capital letter, while HTML tags must be lowercase.

Have a look at the result:

App.js

App.js

Download ResetFork

99

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

function MyButton() {

return (

<button>

I'm a button

</button>

);

}

export default function MyApp() {

return (

<div>

<h1>Welcome to my app</h1>

<MyButton />

</div>

);

}

[Open on CodeSandboxOpen Sandbox](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

Show more

The `export default` keywords specify the main component in the file. If you’re not familiar with some piece of JavaScript syntax, [MDN](https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export) and [javascript.info](https://javascript.info/import-export) have great references.

## Writing markup with JSX [](#writing-markup-with-jsx "Link for Writing markup with JSX ")

The markup syntax you’ve seen above is called _JSX_. It is optional, but most React projects use JSX for its convenience. All of the [tools we recommend for local development](/learn/installation) support JSX out of the box.

JSX is stricter than HTML. You have to close tags like `<br />`. Your component also can’t return multiple JSX tags. You have to wrap them into a shared parent, like a `<div>...</div>` or an empty `<>...</>` wrapper:

```


function AboutPage() {

 return (

  <>

   <h1>About</h1>

   <p>Hello there.<br />How do you do?</p>

  </>

 );

}


```


If you have a lot of HTML to port to JSX, you can use an [online converter.](https://transform.tools/html-to-jsx)

## Adding styles [](#adding-styles "Link for Adding styles ")

In React, you specify a CSS class with `className`. It works the same way as the HTML `class`[](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class) attribute:

```


<img className="avatar" />


```


Then you write the CSS rules for it in a separate CSS file:

```


/* In your CSS */

.avatar {

 border-radius: 50%;

}


```


React does not prescribe how you add CSS files. In the simplest case, you’ll add a `<link>`[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link) tag to your HTML. If you use a build tool or a framework, consult its documentation to learn how to add a CSS file to your project.

## Displaying data [](#displaying-data "Link for Displaying data ")

JSX lets you put markup into JavaScript. Curly braces let you “escape back” into JavaScript so that you can embed some variable from your code and display it to the user. For example, this will display `user.name`:

```


return (

 <h1>

  {user.name}

 </h1>

);


```


You can also “escape into JavaScript” from JSX attributes, but you have to use curly braces _instead of_ quotes. For example, `className="avatar"` passes the `"avatar"` string as the CSS class, but `src={user.imageUrl}` reads the JavaScript `user.imageUrl` variable value, and then passes that value as the `src` attribute:

```


return (

 <img

  className="avatar"

  src={user.imageUrl}

 />

);


```


You can put more complex expressions inside the JSX curly braces too, for example, [string concatenation](https://javascript.info/operators#string-concatenation-with-binary):

App.js

App.js

Download ResetFork

```
const user = {
 name: 'Hedy Lamarr',
 imageUrl: 'https://i.imgur.com/yXOvdOSs.jpg',
 imageSize: 90,
};
export default function Profile() {
 return (
  <>
   <h1>{user.name}</h1>
   <img
    className="avatar"
    src={user.imageUrl}
    alt={'Photo of ' + user.name}
    style={{
     width: user.imageSize,
     height: user.imageSize
    }}
   />
  </>
 );
}

```


Show more

In the above example, `style={{}}` is not a special syntax, but a regular `{}` object inside the `style={ }` JSX curly braces. You can use the `style` attribute when your styles depend on JavaScript variables.

## Conditional rendering [](#conditional-rendering "Link for Conditional rendering ")

In React, there is no special syntax for writing conditions. Instead, you’ll use the same techniques as you use when writing regular JavaScript code. For example, you can use an `if`[](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) statement to conditionally include JSX:

```


let content;

if (isLoggedIn) {

 content = <AdminPanel />;

} else {

 content = <LoginForm />;

}

return (

 <div>

  {content}

 </div>

);


```


If you prefer more compact code, you can use the [conditional `?` operator.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator) Unlike `if`, it works inside JSX:

```


<div>

 {isLoggedIn ? (

  <AdminPanel />

 ) : (

  <LoginForm />

 )}

</div>


```


When you don’t need the `else` branch, you can also use a shorter [logical `&&` syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#short-circuit_evaluation):

```


<div>

 {isLoggedIn && <AdminPanel />}

</div>


```


All of these approaches also work for conditionally specifying attributes. If you’re unfamiliar with some of this JavaScript syntax, you can start by always using `if...else`.

## Rendering lists [](#rendering-lists "Link for Rendering lists ")

You will rely on JavaScript features like `for`[ loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) and the [array `map()` function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) to render lists of components.

For example, let’s say you have an array of products:

```


const products = [

 { title: 'Cabbage', id: 1 },

 { title: 'Garlic', id: 2 },

 { title: 'Apple', id: 3 },

];


```


Inside your component, use the `map()` function to transform an array of products into an array of `<li>` items:

```


const listItems = products.map(product =>

 <li key={product.id}>

  {product.title}

 </li>

);

return (

 <ul>{listItems}</ul>

);


```


Notice how `<li>` has a `key` attribute. For each item in a list, you should pass a string or a number that uniquely identifies that item among its siblings. Usually, a key should be coming from your data, such as a database ID. React uses your keys to know what happened if you later insert, delete, or reorder the items.

App.js

App.js

Download ResetFork

```
const products = [
 { title: 'Cabbage', isFruit: false, id: 1 },
 { title: 'Garlic', isFruit: false, id: 2 },
 { title: 'Apple', isFruit: true, id: 3 },
];
export default function ShoppingList() {
 const listItems = products.map(product =>
  <li
   key={product.id}
   style={{
    color: product.isFruit ? 'magenta' : 'darkgreen'
   }}
  >
   {product.title}
  </li>
 );
 return (
  <ul>{listItems}</ul>
 );
}

```


Show more

## Responding to events [](#responding-to-events "Link for Responding to events ")

You can respond to events by declaring _event handler_ functions inside your components:

```


function MyButton() {

 function handleClick() {

  alert('You clicked me!');

 }

 return (

  <button onClick={handleClick}>

   Click me

  </button>

 );

}


```


Notice how `onClick={handleClick}` has no parentheses at the end! Do not _call_ the event handler function: you only need to _pass it down_. React will call your event handler when the user clicks the button.

## Updating the screen [](#updating-the-screen "Link for Updating the screen ")

Often, you’ll want your component to “remember” some information and display it. For example, maybe you want to count the number of times a button is clicked. To do this, add _state_ to your component.

First, import `useState`[](/reference/react/useState) from React:

```


import { useState } from 'react';


```


Now you can declare a _state variable_ inside your component:

```


function MyButton() {

 const [count, setCount] = useState(0);

 // ...


```


You’ll get two things from `useState`: the current state (`count`), and the function that lets you update it (`setCount`). You can give them any names, but the convention is to write `[something, setSomething]`.

The first time the button is displayed, `count` will be `0` because you passed `0` to `useState()`. When you want to change state, call `setCount()` and pass the new value to it. Clicking this button will increment the counter:

```


function MyButton() {

 const [count, setCount] = useState(0);

 function handleClick() {

  setCount(count + 1);

 }

 return (

  <button onClick={handleClick}>

   Clicked {count} times

  </button>

 );

}


```


React will call your component function again. This time, `count` will be `1`. Then it will be `2`. And so on.

If you render the same component multiple times, each will get its own state. Click each button separately:

App.js

App.js

Download ResetFork

```
import { useState } from 'react';
export default function MyApp() {
 return (
  <div>
   <h1>Counters that update separately</h1>
   <MyButton />
   <MyButton />
  </div>
 );
}
function MyButton() {
 const [count, setCount] = useState(0);
 function handleClick() {
  setCount(count + 1);
 }
 return (
  <button onClick={handleClick}>
   Clicked {count} times
  </button>
 );
}

```


Show more

Notice how each button “remembers” its own `count` state and doesn’t affect other buttons.

## Using Hooks [](#using-hooks "Link for Using Hooks ")

Functions starting with `use` are called _Hooks_. `useState` is a built-in Hook provided by React. You can find other built-in Hooks in the [API reference.](/reference/react) You can also write your own Hooks by combining the existing ones.

Hooks are more restrictive than other functions. You can only call Hooks _at the top_ of your components (or other Hooks). If you want to use `useState` in a condition or a loop, extract a new component and put it there.

## Sharing data between components [](#sharing-data-between-components "Link for Sharing data between components ")

In the previous example, each `MyButton` had its own independent `count`, and when each button was clicked, only the `count` for the button clicked changed:

Initially, each `MyButton`’s `count` state is `0`

The first `MyButton` updates its `count` to `1`

However, often you’ll need components to _share data and always update together_.

To make both `MyButton` components display the same `count` and update together, you need to move the state from the individual buttons “upwards” to the closest component containing all of them.

In this example, it is `MyApp`:

Initially, `MyApp`’s `count` state is `0` and is passed down to both children

On click, `MyApp` updates its `count` state to `1` and passes it down to both children

Now when you click either button, the `count` in `MyApp` will change, which will change both of the counts in `MyButton`. Here’s how you can express this in code.

First, _move the state up_ from `MyButton` into `MyApp`:

```


export default function MyApp() {

 const [count, setCount] = useState(0);

 function handleClick() {

  setCount(count + 1);

 }

 return (

  <div>

   <h1>Counters that update separately</h1>

   <MyButton />

   <MyButton />

  </div>

 );

}

function MyButton() {

 // ... we're moving code from here ...

}


```


Then, _pass the state down_ from `MyApp` to each `MyButton`, together with the shared click handler. You can pass information to `MyButton` using the JSX curly braces, just like you previously did with built-in tags like `<img>`:

```


export default function MyApp() {

 const [count, setCount] = useState(0);

 function handleClick() {

  setCount(count + 1);

 }

 return (

  <div>

   <h1>Counters that update together</h1>

   <MyButton count={count} onClick={handleClick} />

   <MyButton count={count} onClick={handleClick} />

  </div>

 );

}


```


The information you pass down like this is called _props_. Now the `MyApp` component contains the `count` state and the `handleClick` event handler, and _passes both of them down as props_ to each of the buttons.

Finally, change `MyButton` to _read_ the props you have passed from its parent component:

```


function MyButton({ count, onClick }) {

 return (

  <button onClick={onClick}>

   Clicked {count} times

  </button>

 );

}


```


When you click the button, the `onClick` handler fires. Each button’s `onClick` prop was set to the `handleClick` function inside `MyApp`, so the code inside of it runs. That code calls `setCount(count + 1)`, incrementing the `count` state variable. The new `count` value is passed as a prop to each button, so they all show the new value. This is called “lifting state up”. By moving state up, you’ve shared it between components.

App.js

App.js

Download ResetFork

```
import { useState } from 'react';
export default function MyApp() {
 const [count, setCount] = useState(0);
 function handleClick() {
  setCount(count + 1);
 }
 return (
  <div>
   <h1>Counters that update together</h1>
   <MyButton count={count} onClick={handleClick} />
   <MyButton count={count} onClick={handleClick} />
  </div>
 );
}
function MyButton({ count, onClick }) {
 return (
  <button onClick={onClick}>
   Clicked {count} times
  </button>
 );
}

```


Show more

## Next Steps [](#next-steps "Link for Next Steps ")

By now, you know the basics of how to write React code!

Check out the [Tutorial](/learn/tutorial-tic-tac-toe) to put them into practice and build your first mini-app with React.

[NextTutorial: Tic-Tac-Toe](/learn/tutorial-tic-tac-toe)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Creating and nesting components ](#components)
  * [Writing markup with JSX ](#writing-markup-with-jsx)
  * [Adding styles ](#adding-styles)
  * [Displaying data ](#displaying-data)
  * [Conditional rendering ](#conditional-rendering)
  * [Rendering lists ](#rendering-lists)
  * [Responding to events ](#responding-to-events)
  * [Updating the screen ](#updating-the-screen)
  * [Using Hooks ](#using-hooks)
  * [Sharing data between components ](#sharing-data-between-components)
  * [Next Steps ](#next-steps)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### react@19

  * [Overview ](/reference/react "Overview")
  * [Hooks ](/reference/react/hooks "Hooks")

    * [useActionState ](/reference/react/useActionState "useActionState")
    * [useCallback ](/reference/react/useCallback "useCallback")
    * [useContext ](/reference/react/useContext "useContext")
    * [useDebugValue ](/reference/react/useDebugValue "useDebugValue")
    * [useDeferredValue ](/reference/react/useDeferredValue "useDeferredValue")
    * [useEffect ](/reference/react/useEffect "useEffect")
    * [useId ](/reference/react/useId "useId")
    * [useImperativeHandle ](/reference/react/useImperativeHandle "useImperativeHandle")
    * [useInsertionEffect ](/reference/react/useInsertionEffect "useInsertionEffect")
    * [useLayoutEffect ](/reference/react/useLayoutEffect "useLayoutEffect")
    * [useMemo ](/reference/react/useMemo "useMemo")
    * [useOptimistic ](/reference/react/useOptimistic "useOptimistic")
    * [useReducer ](/reference/react/useReducer "useReducer")
    * [useRef ](/reference/react/useRef "useRef")
    * [useState ](/reference/react/useState "useState")
    * [useSyncExternalStore ](/reference/react/useSyncExternalStore "useSyncExternalStore")
    * [useTransition ](/reference/react/useTransition "useTransition")

  * [Components ](/reference/react/components "Components")

    * [<Fragment> (<>) ](/reference/react/Fragment "<Fragment> \(<>\)")
    * [<Profiler> ](/reference/react/Profiler "<Profiler>")
    * [<StrictMode> ](/reference/react/StrictMode "<StrictMode>")
    * [<Suspense> ](/reference/react/Suspense "<Suspense>")

  * [APIs ](/reference/react/apis "APIs")

    * [act ](/reference/react/act "act")
    * [cache ](/reference/react/cache "cache")
    * [createContext ](/reference/react/createContext "createContext")
    * [lazy ](/reference/react/lazy "lazy")
    * [memo ](/reference/react/memo "memo")
    * [startTransition ](/reference/react/startTransition "startTransition")
    * [use ](/reference/react/use "use")
    * [experimental_taintObjectReference  - This feature is available in the latest Canary](/reference/react/experimental_taintObjectReference "experimental_taintObjectReference")
    * [experimental_taintUniqueValue  - This feature is available in the latest Canary](/reference/react/experimental_taintUniqueValue "experimental_taintUniqueValue")

### react-dom@19

  * [Hooks ](/reference/react-dom/hooks "Hooks")

    * [useFormStatus ](/reference/react-dom/hooks/useFormStatus "useFormStatus")

  * [Components ](/reference/react-dom/components "Components")

    * [Common (e.g. <div>) ](/reference/react-dom/components/common "Common \(e.g. <div>\)")
    * [<form> ](/reference/react-dom/components/form "<form>")
    * [<input> ](/reference/react-dom/components/input "<input>")
    * [<option> ](/reference/react-dom/components/option "<option>")
    * [<progress> ](/reference/react-dom/components/progress "<progress>")
    * [<select> ](/reference/react-dom/components/select "<select>")
    * [<textarea> ](/reference/react-dom/components/textarea "<textarea>")
    * [<link> ](/reference/react-dom/components/link "<link>")
    * [<meta> ](/reference/react-dom/components/meta "<meta>")
    * [<script> ](/reference/react-dom/components/script "<script>")
    * [<style> ](/reference/react-dom/components/style "<style>")
    * [<title> ](/reference/react-dom/components/title "<title>")

  * [APIs ](/reference/react-dom "APIs")

    * [createPortal ](/reference/react-dom/createPortal "createPortal")
    * [flushSync ](/reference/react-dom/flushSync "flushSync")
    * [preconnect ](/reference/react-dom/preconnect "preconnect")
    * [prefetchDNS ](/reference/react-dom/prefetchDNS "prefetchDNS")
    * [preinit ](/reference/react-dom/preinit "preinit")
    * [preinitModule ](/reference/react-dom/preinitModule "preinitModule")
    * [preload ](/reference/react-dom/preload "preload")
    * [preloadModule ](/reference/react-dom/preloadModule "preloadModule")

  * [Client APIs ](/reference/react-dom/client "Client APIs")

    * [createRoot ](/reference/react-dom/client/createRoot "createRoot")
    * [hydrateRoot ](/reference/react-dom/client/hydrateRoot "hydrateRoot")

  * [Server APIs ](/reference/react-dom/server "Server APIs")

    * [renderToPipeableStream ](/reference/react-dom/server/renderToPipeableStream "renderToPipeableStream")
    * [renderToReadableStream ](/reference/react-dom/server/renderToReadableStream "renderToReadableStream")
    * [renderToStaticMarkup ](/reference/react-dom/server/renderToStaticMarkup "renderToStaticMarkup")
    * [renderToString ](/reference/react-dom/server/renderToString "renderToString")

  * [Static APIs ](/reference/react-dom/static "Static APIs")

    * [prerender ](/reference/react-dom/static/prerender "prerender")
    * [prerenderToNodeStream ](/reference/react-dom/static/prerenderToNodeStream "prerenderToNodeStream")

### Rules of React

  * [Overview ](/reference/rules "Overview")

    * [Components and Hooks must be pure ](/reference/rules/components-and-hooks-must-be-pure "Components and Hooks must be pure")
    * [React calls Components and Hooks ](/reference/rules/react-calls-components-and-hooks "React calls Components and Hooks")
    * [Rules of Hooks ](/reference/rules/rules-of-hooks "Rules of Hooks")

### React Server Components

  * [Server Components ](/reference/rsc/server-components "Server Components")
  * [Server Functions ](/reference/rsc/server-functions "Server Functions")
  * [Directives ](/reference/rsc/directives "Directives")

    * ['use client' ](/reference/rsc/use-client "'use client'")
    * ['use server' ](/reference/rsc/use-server "'use server'")

### Legacy APIs

  * [Legacy React APIs ](/reference/react/legacy "Legacy React APIs")

    * [Children ](/reference/react/Children "Children")
    * [cloneElement ](/reference/react/cloneElement "cloneElement")
    * [Component ](/reference/react/Component "Component")
    * [createElement ](/reference/react/createElement "createElement")
    * [createRef ](/reference/react/createRef "createRef")
    * [forwardRef ](/reference/react/forwardRef "forwardRef")
    * [isValidElement ](/reference/react/isValidElement "isValidElement")
    * [PureComponent ](/reference/react/PureComponent "PureComponent")




Is this page useful?

[API Reference](/reference/react)

# React Reference Overview[](#undefined "Link for this heading")

This section provides detailed reference documentation for working with React. For an introduction to React, please visit the [Learn](/learn) section.

The React reference documentation is broken down into functional subsections:

## React [](#react "Link for React ")

Programmatic React features:

  * [Hooks](/reference/react/hooks) - Use different React features from your components.
  * [Components](/reference/react/components) - Built-in components that you can use in your JSX.
  * [APIs](/reference/react/apis) - APIs that are useful for defining components.
  * [Directives](/reference/rsc/directives) - Provide instructions to bundlers compatible with React Server Components.



## React DOM [](#react-dom "Link for React DOM ")

React-dom contains features that are only supported for web applications (which run in the browser DOM environment). This section is broken into the following:

  * [Hooks](/reference/react-dom/hooks) - Hooks for web applications which run in the browser DOM environment.
  * [Components](/reference/react-dom/components) - React supports all of the browser built-in HTML and SVG components.
  * [APIs](/reference/react-dom) - The `react-dom` package contains methods supported only in web applications.
  * [Client APIs](/reference/react-dom/client) - The `react-dom/client` APIs let you render React components on the client (in the browser).
  * [Server APIs](/reference/react-dom/server) - The `react-dom/server` APIs let you render React components to HTML on the server.



## Rules of React [](#rules-of-react "Link for Rules of React ")

React has idioms — or rules — for how to express patterns in a way that is easy to understand and yields high-quality applications:

  * [Components and Hooks must be pure](/reference/rules/components-and-hooks-must-be-pure) – Purity makes your code easier to understand, debug, and allows React to automatically optimize your components and hooks correctly.
  * [React calls Components and Hooks](/reference/rules/react-calls-components-and-hooks) – React is responsible for rendering components and hooks when necessary to optimize the user experience.
  * [Rules of Hooks](/reference/rules/rules-of-hooks) – Hooks are defined using JavaScript functions, but they represent a special type of reusable UI logic with restrictions on where they can be called.



## Legacy APIs [](#legacy-apis "Link for Legacy APIs ")

  * [Legacy APIs](/reference/react/legacy) - Exported from the `react` package, but not recommended for use in newly written code.



[NextHooks](/reference/react/hooks)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [React ](#react)
  * [React DOM ](#react-dom)
  * [Rules of React ](#rules-of-react)
  * [Legacy APIs ](#legacy-apis)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# React Community[](#undefined "Link for this heading")

React has a community of millions of developers. On this page we’ve listed some React-related communities that you can be a part of; see the other pages in this section for additional online and in-person learning materials.

## Code of Conduct [](#code-of-conduct "Link for Code of Conduct ")

Before participating in React’s communities, [please read our Code of Conduct.](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md) We have adopted the [Contributor Covenant](https://www.contributor-covenant.org/) and we expect that all community members adhere to the guidelines within.

## Stack Overflow [](#stack-overflow "Link for Stack Overflow ")

Stack Overflow is a popular forum to ask code-level questions or if you’re stuck with a specific error. Read through the [existing questions](https://stackoverflow.com/questions/tagged/reactjs) tagged with **reactjs** or [ask your own](https://stackoverflow.com/questions/ask?tags=reactjs)!

## Popular Discussion Forums [](#popular-discussion-forums "Link for Popular Discussion Forums ")

There are many online forums which are a great place for discussion about best practices and application architecture as well as the future of React. If you have an answerable code-level question, Stack Overflow is usually a better fit.

Each community consists of many thousands of React users.

  * [DEV’s React community](https://dev.to/t/react)
  * [Hashnode’s React community](https://hashnode.com/n/reactjs)
  * [Reactiflux online chat](https://discord.gg/reactiflux)



## News [](#news "Link for News ")

For the latest news about React, and the [official React blog](/blog) on this website.

[NextReact Conferences](/community/conferences)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Code of Conduct ](#code-of-conduct)
  * [Stack Overflow ](#stack-overflow)
  * [Popular Discussion Forums ](#popular-discussion-forums)
  * [News ](#news)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React Blog[](#undefined "Link for this heading")

This blog is the official source for the updates from the React team. Anything important, including release notes or deprecation notices, will be posted here first. You can also follow the account on Twitter, but you won’t miss anything essential if you only read this blog.

## [React v19 December 5, 2024In the React 19 Upgrade Guide, we shared step-by-step instructions for upgrading your app to React 19. In this post, we’ll give an overview of the new features in React 19, and how you can adopt them …Read more](/blog/2024/12/05/react-19)## [React Compiler Beta ReleaseOctober 21, 2024We announced an experimental release of React Compiler at React Conf 2024. We’ve made a lot of progress since then, and in this post we want to share what’s next for React Compiler …Read more](/blog/2024/10/21/react-compiler-beta-release)## [React Conf 2024 RecapMay 22, 2024Last week we hosted React Conf 2024, a two-day conference in Henderson, Nevada where 700+ attendees gathered in-person to discuss the latest in UI engineering. This was our first in-person conference since 2019, and we were thrilled to be able to bring the community together again …Read more](/blog/2024/05/22/react-conf-2024-recap)## [React 19 Upgrade GuideApril 25, 2024The improvements added to React 19 require some breaking changes, but we’ve worked to make the upgrade as smooth as possible, and we don’t expect the changes to impact most apps. In this post, we will guide you through the steps for upgrading libraries to React 19 …Read more](/blog/2024/04/25/react-19-upgrade-guide)## [React Labs: What We've Been Working On – February 2024February 15, 2024In React Labs posts, we write about projects in active research and development. Since our last update, we’ve made significant progress on React Compiler, new features, and React 19, and we’d like to share what we learned.Read more](/blog/2024/02/15/react-labs-what-we-have-been-working-on-february-2024)## [React Canaries: Incremental Feature Rollout Outside MetaMay 3, 2023Traditionally, new React features used to only be available at Meta first, and land in the open source releases later. We’d like to offer the React community an option to adopt individual new features as soon as their design is close to final—similar to how Meta uses React internally. We are introducing a new officially supported Canary release channel. It lets curated setups like frameworks decouple adoption of individual React features from the React release schedule.Read more](/blog/2023/05/03/react-canaries)## [React Labs: What We've Been Working On – March 2023March 22, 2023In React Labs posts, we write about projects in active research and development. Since our last update, we’ve made significant progress on React Server Components, Asset Loading, Optimizing Compiler, Offscreen Rendering, and Transition Tracing, and we’d like to share what we learned.Read more](/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023)## [Introducing react.devMarch 16, 2023Today we are thrilled to launch react.dev, the new home for React and its documentation. In this post, we would like to give you a tour of the new site.Read more](/blog/2023/03/16/introducing-react-dev)## [React Labs: What We've Been Working On – June 2022June 15, 2022React 18 was years in the making, and with it brought valuable lessons for the React team. Its release was the result of many years of research and exploring many paths. Some of those paths were successful; many more were dead-ends that led to new insights. One lesson we’ve learned is that it’s frustrating for the community to wait for new features without having insight into these paths that we’re exploring…Read more](/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022)## [React v18.0March 29, 2022React 18 is now available on npm! In our last post, we shared step-by-step instructions for upgrading your app to React 18. In this post, we’ll give an overview of what’s new in React 18, and what it means for the future…Read more](/blog/2022/03/29/react-v18)## [How to Upgrade to React 18March 8, 2022As we shared in the release post, React 18 introduces features powered by our new concurrent renderer, with a gradual adoption strategy for existing applications. In this post, we will guide you through the steps for upgrading to React 18…Read more](/blog/2022/03/08/react-18-upgrade-guide)## [React Conf 2021 RecapDecember 17, 2021Last week we hosted our 6th React Conf. In previous years, we’ve used the React Conf stage to deliver industry changing announcements such as React Native and React Hooks. This year, we shared our multi-platform vision for React, starting with the release of React 18 and gradual adoption of concurrent features…Read more](/blog/2021/12/17/react-conf-2021-recap)## [The Plan for React 18June 8, 2021The React team is excited to share a few updates:

  * We’ve started work on the React 18 release, which will be our next major version.
  * We’ve created a Working Group to prepare the community for gradual adoption of new features in React 18.
  * We’ve published a React 18 Alpha so that library authors can try it and provide feedback…

Read more](/blog/2021/06/08/the-plan-for-react-18)## [Introducing Zero-Bundle-Size React Server ComponentsDecember 21, 20202020 has been a long year. As it comes to an end we wanted to share a special Holiday Update on our research into zero-bundle-size React Server Components. To introduce React Server Components, we have prepared a talk and a demo. If you want, you can check them out during the holidays, or later when work picks back up in the new year…Read more](/blog/2020/12/21/data-fetching-with-react-server-components)

### All release notes [](#all-release-notes "Link for All release notes ")

Not every React release deserves its own blog post, but you can find a detailed changelog for every release in the `CHANGELOG.md`[](https://github.com/facebook/react/blob/main/CHANGELOG.md) file in the React repository, as well as on the [Releases](https://github.com/facebook/react/releases) page.

### Older posts [](#older-posts "Link for Older posts ")

See the [older posts.](https://reactjs.org/blog/all.html)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Translations[](#undefined "Link for this heading")

React docs are translated by the global community into many languages all over the world.

## Source site [](#main-site "Link for Source site ")

All translations are provided from the canonical source docs:

  * [English](https://react.dev/) — [Contribute](https://github.com/reactjs/react.dev/)



## Full translations [](#full-translations "Link for Full translations ")

  * [French (Français)](https://fr.react.dev/) — [Contribute](https://github.com/reactjs/fr.react.dev)
  * [Japanese (日本語)](https://ja.react.dev/) — [Contribute](https://github.com/reactjs/ja.react.dev)
  * [Korean (한국어)](https://ko.react.dev/) — [Contribute](https://github.com/reactjs/ko.react.dev)
  * [Simplified Chinese (简体中文)](https://zh-hans.react.dev/) — [Contribute](https://github.com/reactjs/zh-hans.react.dev)
  * [Spanish (Español)](https://es.react.dev/) — [Contribute](https://github.com/reactjs/es.react.dev)
  * [Turkish (Türkçe)](https://tr.react.dev/) — [Contribute](https://github.com/reactjs/tr.react.dev)



## In-progress translations [](#in-progress-translations "Link for In-progress translations ")

For the progress of each translation, see: [Is React Translated Yet?](https://translations.react.dev/)

  * [Arabic (العربية)](https://ar.react.dev/) — [Contribute](https://github.com/reactjs/ar.react.dev)
  * [Azerbaijani (Azərbaycanca)](https://az.react.dev/) — [Contribute](https://github.com/reactjs/az.react.dev)
  * [Belarusian (Беларуская)](https://be.react.dev/) — [Contribute](https://github.com/reactjs/be.react.dev)
  * [Bengali (বাংলা)](https://bn.react.dev/) — [Contribute](https://github.com/reactjs/bn.react.dev)
  * [Czech (Čeština)](https://cs.react.dev/) — [Contribute](https://github.com/reactjs/cs.react.dev)
  * [Finnish (Suomi)](https://fi.react.dev/) — [Contribute](https://github.com/reactjs/fi.react.dev)
  * [German (Deutsch)](https://de.react.dev/) — [Contribute](https://github.com/reactjs/de.react.dev)
  * [Gujarati (ગુજરાતી)](https://gu.react.dev/) — [Contribute](https://github.com/reactjs/gu.react.dev)
  * [Hebrew (עברית)](https://he.react.dev/) — [Contribute](https://github.com/reactjs/he.react.dev)
  * [Hindi (हिन्दी)](https://hi.react.dev/) — [Contribute](https://github.com/reactjs/hi.react.dev)
  * [Hungarian (magyar)](https://hu.react.dev/) — [Contribute](https://github.com/reactjs/hu.react.dev)
  * [Icelandic (Íslenska)](https://is.react.dev/) — [Contribute](https://github.com/reactjs/is.react.dev)
  * [Indonesian (Bahasa Indonesia)](https://id.react.dev/) — [Contribute](https://github.com/reactjs/id.react.dev)
  * [Italian (Italiano)](https://it.react.dev/) — [Contribute](https://github.com/reactjs/it.react.dev)
  * [Kazakh (Қазақша)](https://kk.react.dev/) — [Contribute](https://github.com/reactjs/kk.react.dev)
  * [Lao (ພາສາລາວ)](https://lo.react.dev/) — [Contribute](https://github.com/reactjs/lo.react.dev)
  * [Macedonian (Македонски)](https://mk.react.dev/) — [Contribute](https://github.com/reactjs/mk.react.dev)
  * [Malayalam (മലയാളം)](https://ml.react.dev/) — [Contribute](https://github.com/reactjs/ml.react.dev)
  * [Mongolian (Монгол хэл)](https://mn.react.dev/) — [Contribute](https://github.com/reactjs/mn.react.dev)
  * [Persian (فارسی)](https://fa.react.dev/) — [Contribute](https://github.com/reactjs/fa.react.dev)
  * [Polish (Polski)](https://pl.react.dev/) — [Contribute](https://github.com/reactjs/pl.react.dev)
  * [Portuguese (Brazil) (Português do Brasil)](https://pt-br.react.dev/) — [Contribute](https://github.com/reactjs/pt-br.react.dev)
  * [Russian (Русский)](https://ru.react.dev/) — [Contribute](https://github.com/reactjs/ru.react.dev)
  * [Serbian (Srpski)](https://sr.react.dev/) — [Contribute](https://github.com/reactjs/sr.react.dev)
  * [Sinhala (සිංහල)](https://si.react.dev/) — [Contribute](https://github.com/reactjs/si.react.dev)
  * [Swahili (Kiswahili)](https://sw.react.dev/) — [Contribute](https://github.com/reactjs/sw.react.dev)
  * [Tamil (தமிழ்)](https://ta.react.dev/) — [Contribute](https://github.com/reactjs/ta.react.dev)
  * [Telugu (తెలుగు)](https://te.react.dev/) — [Contribute](https://github.com/reactjs/te.react.dev)
  * [Traditional Chinese (繁體中文)](https://zh-hant.react.dev/) — [Contribute](https://github.com/reactjs/zh-hant.react.dev)
  * [Ukrainian (Українська)](https://uk.react.dev/) — [Contribute](https://github.com/reactjs/uk.react.dev)
  * [Urdu (اردو)](https://ur.react.dev/) — [Contribute](https://github.com/reactjs/ur.react.dev)
  * [Vietnamese (Tiếng Việt)](https://vi.react.dev/) — [Contribute](https://github.com/reactjs/vi.react.dev)



## How to contribute [](#how-to-contribute "Link for How to contribute ")

You can contribute to the translation efforts!

The community conducts the translation work for the React docs on each language-specific fork of react.dev. Typical translation work involves directly translating a Markdown file and creating a pull request. Click the “contribute” link above to the GitHub repository for your language, and follow the instructions there to help with the translation effort.

If you want to start a new translation for your language, visit: [translations.react.dev](https://github.com/reactjs/translations.react.dev)

[PreviousDocs Contributors](/community/docs-contributors)[NextAcknowledgements](/community/acknowledgements)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Source site ](#main-site)
  * [Full translations ](#full-translations)
  * [In-progress translations ](#in-progress-translations)
  * [How to contribute ](#how-to-contribute)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

[Installation](/learn/installation)

# Add React to an Existing Project[](#undefined "Link for this heading")

If you want to add some interactivity to your existing project, you don’t have to rewrite it in React. Add React to your existing stack, and render interactive React components anywhere.

### Note

**You need to install[Node.js](https://nodejs.org/en/) for local development.** Although you can [try React](/learn/installation#try-react) online or with a simple HTML page, realistically most JavaScript tooling you’ll want to use for development requires Node.js.

## Using React for an entire subroute of your existing website [](#using-react-for-an-entire-subroute-of-your-existing-website "Link for Using React for an entire subroute of your existing website ")

Let’s say you have an existing web app at `example.com` built with another server technology (like Rails), and you want to implement all routes starting with `example.com/some-app/` fully with React.

Here’s how we recommend to set it up:

  1. **Build the React part of your app** using one of the [React-based frameworks](/learn/start-a-new-react-project).
  2. **Specify`/some-app` as the _base path_** in your framework’s configuration (here’s how: [Next.js](https://nextjs.org/docs/api-reference/next.config.js/basepath), [Gatsby](https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/path-prefix/)).
  3. **Configure your server or a proxy** so that all requests under `/some-app/` are handled by your React app.



This ensures the React part of your app can [benefit from the best practices](/learn/start-a-new-react-project#can-i-use-react-without-a-framework) baked into those frameworks.

Many React-based frameworks are full-stack and let your React app take advantage of the server. However, you can use the same approach even if you can’t or don’t want to run JavaScript on the server. In that case, serve the HTML/CSS/JS export (`next export`[ output](https://nextjs.org/docs/advanced-features/static-html-export) for Next.js, default for Gatsby) at `/some-app/` instead.

## Using React for a part of your existing page [](#using-react-for-a-part-of-your-existing-page "Link for Using React for a part of your existing page ")

Let’s say you have an existing page built with another technology (either a server one like Rails, or a client one like Backbone), and you want to render interactive React components somewhere on that page. That’s a common way to integrate React—in fact, it’s how most React usage looked at Meta for many years!

You can do this in two steps:

  1. **Set up a JavaScript environment** that lets you use the [JSX syntax](/learn/writing-markup-with-jsx), split your code into modules with the `import`[](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) / `export`[](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) syntax, and use packages (for example, React) from the [npm](https://www.npmjs.com/) package registry.
  2. **Render your React components** where you want to see them on the page.



The exact approach depends on your existing page setup, so let’s walk through some details.

### Step 1: Set up a modular JavaScript environment [](#step-1-set-up-a-modular-javascript-environment "Link for Step 1: Set up a modular JavaScript environment ")

A modular JavaScript environment lets you write your React components in individual files, as opposed to writing all of your code in a single file. It also lets you use all the wonderful packages published by other developers on the [npm](https://www.npmjs.com/) registry—including React itself! How you do this depends on your existing setup:

  * **If your app is already split into files that use`import` statements,** try to use the setup you already have. Check whether writing `<div />` in your JS code causes a syntax error. If it causes a syntax error, you might need to [transform your JavaScript code with Babel](https://babeljs.io/setup), and enable the [Babel React preset](https://babeljs.io/docs/babel-preset-react) to use JSX.

  * **If your app doesn’t have an existing setup for compiling JavaScript modules,** set it up with [Vite](https://vitejs.dev/). The Vite community maintains [many integrations with backend frameworks](https://github.com/vitejs/awesome-vite#integrations-with-backends), including Rails, Django, and Laravel. If your backend framework is not listed, [follow this guide](https://vitejs.dev/guide/backend-integration.html) to manually integrate Vite builds with your backend.




To check whether your setup works, run this command in your project folder:

Terminal

Copy

npm install react react-dom

Then add these lines of code at the top of your main JavaScript file (it might be called `index.js` or `main.js`):

index.js

index.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { createRoot } from 'react-dom/client';
// Clear the existing HTML content
document.body.innerHTML = '<div id="app"></div>';
// Render your React component instead
const root = createRoot(document.getElementById('app'));
root.render(<h1>Hello, world</h1>);

```


If the entire content of your page was replaced by a “Hello, world!”, everything worked! Keep reading.

### Note

Integrating a modular JavaScript environment into an existing project for the first time can feel intimidating, but it’s worth it! If you get stuck, try our [community resources](/community) or the [Vite Chat](https://chat.vitejs.dev/).

### Step 2: Render React components anywhere on the page [](#step-2-render-react-components-anywhere-on-the-page "Link for Step 2: Render React components anywhere on the page ")

In the previous step, you put this code at the top of your main file:

```


import { createRoot } from 'react-dom/client';

// Clear the existing HTML content

document.body.innerHTML = '<div id="app"></div>';

// Render your React component instead

const root = createRoot(document.getElementById('app'));

root.render(<h1>Hello, world</h1>);


```


Of course, you don’t actually want to clear the existing HTML content!

Delete this code.

Instead, you probably want to render your React components in specific places in your HTML. Open your HTML page (or the server templates that generate it) and add a unique `id`[](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id) attribute to any tag, for example:

```


<!-- ... somewhere in your html ... -->

<nav id="navigation"></nav>

<!-- ... more html ... -->


```


This lets you find that HTML element with `document.getElementById`[](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById) and pass it to `createRoot`[](/reference/react-dom/client/createRoot) so that you can render your own React component inside:

index.jsindex.html

index.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { createRoot } from 'react-dom/client';
function NavigationBar() {
 // TODO: Actually implement a navigation bar
 return <h1>Hello from React!</h1>;
}
const domNode = document.getElementById('navigation');
const root = createRoot(domNode);
root.render(<NavigationBar />);

```


Notice how the original HTML content from `index.html` is preserved, but your own `NavigationBar` React component now appears inside the `<nav id="navigation">` from your HTML. Read the `createRoot`[ usage documentation](/reference/react-dom/client/createRoot#rendering-a-page-partially-built-with-react) to learn more about rendering React components inside an existing HTML page.

When you adopt React in an existing project, it’s common to start with small interactive components (like buttons), and then gradually keep “moving upwards” until eventually your entire page is built with React. If you ever reach that point, we recommend migrating to [a React framework](/learn/start-a-new-react-project) right after to get the most out of React.

## Using React Native in an existing native mobile app [](#using-react-native-in-an-existing-native-mobile-app "Link for Using React Native in an existing native mobile app ")

[React Native](https://reactnative.dev/) can also be integrated into existing native apps incrementally. If you have an existing native app for Android (Java or Kotlin) or iOS (Objective-C or Swift), [follow this guide](https://reactnative.dev/docs/integration-with-existing-apps) to add a React Native screen to it.

[PreviousStart a New React Project](/learn/start-a-new-react-project)[NextEditor Setup](/learn/editor-setup)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Using React for an entire subroute of your existing website ](#using-react-for-an-entire-subroute-of-your-existing-website)
  * [Using React for a part of your existing page ](#using-react-for-a-part-of-your-existing-page)
  * [Step 1: Set up a modular JavaScript environment ](#step-1-set-up-a-modular-javascript-environment)
  * [Step 2: Render React components anywhere on the page ](#step-2-render-react-components-anywhere-on-the-page)
  * [Using React Native in an existing native mobile app ](#using-react-native-in-an-existing-native-mobile-app)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

[Installation](/learn/installation)

# Start a New React Project[](#undefined "Link for this heading")

If you want to build a new app or a new website fully with React, we recommend picking one of the React-powered frameworks popular in the community.

You can use React without a framework, however we’ve found that most apps and sites eventually build solutions to common problems such as code-splitting, routing, data fetching, and generating HTML. These problems are common to all UI libraries, not just React.

By starting with a framework, you can get started with React quickly, and avoid essentially building your own framework later.

##### Deep Dive

#### Can I use React without a framework? [](#can-i-use-react-without-a-framework "Link for Can I use React without a framework? ")

Show Details

You can definitely use React without a framework—that’s how you’d [use React for a part of your page.](/learn/add-react-to-an-existing-project#using-react-for-a-part-of-your-existing-page) **However, if you’re building a new app or a site fully with React, we recommend using a framework.**

Here’s why.

Even if you don’t need routing or data fetching at first, you’ll likely want to add some libraries for them. As your JavaScript bundle grows with every new feature, you might have to figure out how to split code for every route individually. As your data fetching needs get more complex, you are likely to encounter server-client network waterfalls that make your app feel very slow. As your audience includes more users with poor network conditions and low-end devices, you might need to generate HTML from your components to display content early—either on the server, or during the build time. Changing your setup to run some of your code on the server or during the build can be very tricky.

**These problems are not React-specific. This is why Svelte has SvelteKit, Vue has Nuxt, and so on.** To solve these problems on your own, you’ll need to integrate your bundler with your router and with your data fetching library. It’s not hard to get an initial setup working, but there are a lot of subtleties involved in making an app that loads quickly even as it grows over time. You’ll want to send down the minimal amount of app code but do so in a single client–server roundtrip, in parallel with any data required for the page. You’ll likely want the page to be interactive before your JavaScript code even runs, to support progressive enhancement. You may want to generate a folder of fully static HTML files for your marketing pages that can be hosted anywhere and still work with JavaScript disabled. Building these capabilities yourself takes real work.

**React frameworks on this page solve problems like these by default, with no extra work from your side.** They let you start very lean and then scale your app with your needs. Each React framework has a community, so finding answers to questions and upgrading tooling is easier. Frameworks also give structure to your code, helping you and others retain context and skills between different projects. Conversely, with a custom setup it’s easier to get stuck on unsupported dependency versions, and you’ll essentially end up creating your own framework—albeit one with no community or upgrade path (and if it’s anything like the ones we’ve made in the past, more haphazardly designed).

If your app has unusual constraints not served well by these frameworks, or you prefer to solve these problems yourself, you can roll your own custom setup with React. Grab `react` and `react-dom` from npm, set up your custom build process with a bundler like [Vite](https://vitejs.dev/) or [Parcel](https://parceljs.org/), and add other tools as you need them for routing, static generation or server-side rendering, and more.

## Production-grade React frameworks [](#production-grade-react-frameworks "Link for Production-grade React frameworks ")

These frameworks support all the features you need to deploy and scale your app in production and are working towards supporting our [full-stack architecture vision](#which-features-make-up-the-react-teams-full-stack-architecture-vision). All of the frameworks we recommend are open source with active communities for support, and can be deployed to your own server or a hosting provider. If you’re a framework author interested in being included on this list, [please let us know](https://github.com/reactjs/react.dev/issues/new?assignees=&labels=type%3A+framework&projects=&template=3-framework.yml&title=%5BFramework%5D%3A+).

### Next.js [](#nextjs-pages-router "Link for Next.js ")

**[Next.js’ Pages Router](https://nextjs.org/) is a full-stack React framework.** It’s versatile and lets you create React apps of any size—from a mostly static blog to a complex dynamic application. To create a new Next.js project, run in your terminal:

Terminal

Copy

npx create-next-app@latest

If you’re new to Next.js, check out the [learn Next.js course.](https://nextjs.org/learn)

Next.js is maintained by [Vercel](https://vercel.com/). You can [deploy a Next.js app](https://nextjs.org/docs/app/building-your-application/deploying) to any Node.js or serverless hosting, or to your own server. Next.js also supports a [static export](https://nextjs.org/docs/pages/building-your-application/deploying/static-exports) which doesn’t require a server.

### Remix [](#remix "Link for Remix ")

**[Remix](https://remix.run/) is a full-stack React framework with nested routing.** It lets you break your app into nested parts that can load data in parallel and refresh in response to the user actions. To create a new Remix project, run:

Terminal

Copy

npx create-remix

If you’re new to Remix, check out the Remix [blog tutorial](https://remix.run/docs/en/main/tutorials/blog) (short) and [app tutorial](https://remix.run/docs/en/main/tutorials/jokes) (long).

Remix is maintained by [Shopify](https://www.shopify.com/). When you create a Remix project, you need to [pick your deployment target](https://remix.run/docs/en/main/guides/deployment). You can deploy a Remix app to any Node.js or serverless hosting by using or writing an [adapter](https://remix.run/docs/en/main/other-api/adapter).

### Gatsby [](#gatsby "Link for Gatsby ")

**[Gatsby](https://www.gatsbyjs.com/) is a React framework for fast CMS-backed websites.** Its rich plugin ecosystem and its GraphQL data layer simplify integrating content, APIs, and services into one website. To create a new Gatsby project, run:

Terminal

Copy

npx create-gatsby

If you’re new to Gatsby, check out the [Gatsby tutorial.](https://www.gatsbyjs.com/docs/tutorial/)

Gatsby is maintained by [Netlify](https://www.netlify.com/). You can [deploy a fully static Gatsby site](https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting) to any static hosting. If you opt into using server-only features, make sure your hosting provider supports them for Gatsby.

### Expo (for native apps) [](#expo "Link for Expo \(for native apps\) ")

**[Expo](https://expo.dev/) is a React framework that lets you create universal Android, iOS, and web apps with truly native UIs.** It provides an SDK for [React Native](https://reactnative.dev/) that makes the native parts easier to use. To create a new Expo project, run:

Terminal

Copy

npx create-expo-app

If you’re new to Expo, check out the [Expo tutorial](https://docs.expo.dev/tutorial/introduction/).

Expo is maintained by [Expo (the company)](https://expo.dev/about). Building apps with Expo is free, and you can submit them to the Google and Apple app stores without restrictions. Expo additionally provides opt-in paid cloud services.

## Bleeding-edge React frameworks [](#bleeding-edge-react-frameworks "Link for Bleeding-edge React frameworks ")

As we’ve explored how to continue improving React, we realized that integrating React more closely with frameworks (specifically, with routing, bundling, and server technologies) is our biggest opportunity to help React users build better apps. The Next.js team has agreed to collaborate with us in researching, developing, integrating, and testing framework-agnostic bleeding-edge React features like [React Server Components.](/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023#react-server-components)

These features are getting closer to being production-ready every day, and we’ve been in talks with other bundler and framework developers about integrating them. Our hope is that in a year or two, all frameworks listed on this page will have full support for these features. (If you’re a framework author interested in partnering with us to experiment with these features, please let us know!)

### Next.js (App Router) [](#nextjs-app-router "Link for Next.js \(App Router\) ")

**[Next.js’s App Router](https://nextjs.org/docs) is a redesign of the Next.js APIs aiming to fulfill the React team’s full-stack architecture vision.** It lets you fetch data in asynchronous components that run on the server or even during the build.

Next.js is maintained by [Vercel](https://vercel.com/). You can [deploy a Next.js app](https://nextjs.org/docs/app/building-your-application/deploying) to any Node.js or serverless hosting, or to your own server. Next.js also supports [static export](https://nextjs.org/docs/app/building-your-application/deploying/static-exports) which doesn’t require a server.

##### Deep Dive

#### Which features make up the React team’s full-stack architecture vision? [](#which-features-make-up-the-react-teams-full-stack-architecture-vision "Link for Which features make up the React team’s full-stack architecture vision? ")

Show Details

Next.js’s App Router bundler fully implements the official [React Server Components specification](https://github.com/reactjs/rfcs/blob/main/text/0188-server-components.md). This lets you mix build-time, server-only, and interactive components in a single React tree.

For example, you can write a server-only React component as an `async` function that reads from a database or from a file. Then you can pass data down from it to your interactive components:

```


// This component runs *only* on the server (or during the build).

async function Talks({ confId }) {

 // 1. You're on the server, so you can talk to your data layer. API endpoint not required.

 const talks = await db.Talks.findAll({ confId });

 // 2. Add any amount of rendering logic. It won't make your JavaScript bundle larger.

 const videos = talks.map(talk => talk.video);

 // 3. Pass the data down to the components that will run in the browser.

 return <SearchableVideoList videos={videos} />;

}


```


Next.js’s App Router also integrates [data fetching with Suspense](/blog/2022/03/29/react-v18#suspense-in-data-frameworks). This lets you specify a loading state (like a skeleton placeholder) for different parts of your user interface directly in your React tree:

```


<Suspense fallback={<TalksLoading />}>

 <Talks confId={conf.id} />

</Suspense>


```


Server Components and Suspense are React features rather than Next.js features. However, adopting them at the framework level requires buy-in and non-trivial implementation work. At the moment, the Next.js App Router is the most complete implementation. The React team is working with bundler developers to make these features easier to implement in the next generation of frameworks.

[PreviousInstallation](/learn/installation)[NextAdd React to an Existing Project](/learn/add-react-to-an-existing-project)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Production-grade React frameworks ](#production-grade-react-frameworks)
  * [Next.js ](#nextjs-pages-router)
  * [Remix ](#remix)
  * [Gatsby ](#gatsby)
  * [Expo (for native apps) ](#expo)
  * [Bleeding-edge React frameworks ](#bleeding-edge-react-frameworks)
  * [Next.js (App Router) ](#nextjs-app-router)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React v19[](#undefined "Link for this heading")

December 05, 2024 by [The React Team](/community/team)

### Note

### React 19 is now stable! [](#react-19-is-now-stable "Link for React 19 is now stable! ")

Additions since this post was originally shared with the React 19 RC in April:

  * **Pre-warming for suspended trees** : see [Improvements to Suspense](/blog/2024/04/25/react-19-upgrade-guide#improvements-to-suspense).
  * **React DOM static APIs** : see [New React DOM Static APIs](#new-react-dom-static-apis).



_The date for this post has been updated to reflect the stable release date._

React v19 is now available on npm!

In our [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide), we shared step-by-step instructions for upgrading your app to React 19. In this post, we’ll give an overview of the new features in React 19, and how you can adopt them.

  * [What’s new in React 19](#whats-new-in-react-19)
  * [Improvements in React 19](#improvements-in-react-19)
  * [How to upgrade](#how-to-upgrade)



For a list of breaking changes, see the [Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide).

## What’s new in React 19 [](#whats-new-in-react-19 "Link for What’s new in React 19 ")

### Actions [](#actions "Link for Actions ")

A common use case in React apps is to perform a data mutation and then update state in response. For example, when a user submits a form to change their name, you will make an API request, and then handle the response. In the past, you would need to handle pending states, errors, optimistic updates, and sequential requests manually.

For example, you could handle the pending and error state in `useState`:

```


// Before Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, setIsPending] = useState(false);

 const handleSubmit = async () => {

  setIsPending(true);

  const error = await updateName(name);

  setIsPending(false);

  if (error) {

   setError(error);

   return;

  } 

  redirect("/path");

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


In React 19, we’re adding support for using async functions in transitions to handle pending states, errors, forms, and optimistic updates automatically.

For example, you can use `useTransition` to handle the pending state for you:

```


// Using pending state from Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, startTransition] = useTransition();

 const handleSubmit = () => {

  startTransition(async () => {

   const error = await updateName(name);

   if (error) {

    setError(error);

    return;

   } 

   redirect("/path");

  })

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


The async transition will immediately set the `isPending` state to true, make the async request(s), and switch `isPending` to false after any transitions. This allows you to keep the current UI responsive and interactive while the data is changing.

### Note

#### By convention, functions that use async transitions are called “Actions”. [](#by-convention-functions-that-use-async-transitions-are-called-actions "Link for By convention, functions that use async transitions are called “Actions”. ")

Actions automatically manage submitting data for you:

  * **Pending state** : Actions provide a pending state that starts at the beginning of a request and automatically resets when the final state update is committed.
  * **Optimistic updates** : Actions support the new `useOptimistic`[](#new-hook-optimistic-updates) hook so you can show users instant feedback while the requests are submitting.
  * **Error handling** : Actions provide error handling so you can display Error Boundaries when a request fails, and revert optimistic updates to their original value automatically.
  * **Forms** : `<form>` elements now support passing functions to the `action` and `formAction` props. Passing functions to the `action` props use Actions by default and reset the form automatically after submission.



Building on top of Actions, React 19 introduces `useOptimistic`[](#new-hook-optimistic-updates) to manage optimistic updates, and a new hook `React.useActionState`[](#new-hook-useactionstate) to handle common cases for Actions. In `react-dom` we’re adding `<form>`[ Actions](#form-actions) to manage forms automatically and `useFormStatus`[](#new-hook-useformstatus) to support the common cases for Actions in forms.

In React 19, the above example can be simplified to:

```


// Using <form> Actions and useActionState

function ChangeName({ name, setName }) {

 const [error, submitAction, isPending] = useActionState(

  async (previousState, formData) => {

   const error = await updateName(formData.get("name"));

   if (error) {

    return error;

   }

   redirect("/path");

   return null;

  },

  null,

 );

 return (

  <form action={submitAction}>

   <input type="text" name="name" />

   <button type="submit" disabled={isPending}>Update</button>

   {error && <p>{error}</p>}

  </form>

 );

}


```


In the next section, we’ll break down each of the new Action features in React 19.

### New hook: `useActionState` [](#new-hook-useactionstate "Link for this heading")

To make the common cases easier for Actions, we’ve added a new hook called `useActionState`:

```


const [error, submitAction, isPending] = useActionState(

 async (previousState, newName) => {

  const error = await updateName(newName);

  if (error) {

   // You can return any result of the action.

   // Here, we return only the error.

   return error;

  }

  // handle success

  return null;

 },

 null,

);


```


`useActionState` accepts a function (the “Action”), and returns a wrapped Action to call. This works because Actions compose. When the wrapped Action is called, `useActionState` will return the last result of the Action as `data`, and the pending state of the Action as `pending`.

### Note

`React.useActionState` was previously called `ReactDOM.useFormState` in the Canary releases, but we’ve renamed it and deprecated `useFormState`.

See [#28491](https://github.com/facebook/react/pull/28491) for more info.

For more information, see the docs for `useActionState`[](/reference/react/useActionState).

### React DOM: `<form>` Actions [](#form-actions "Link for this heading")

Actions are also integrated with React 19’s new `<form>` features for `react-dom`. We’ve added support for passing functions as the `action` and `formAction` props of `<form>`, `<input>`, and `<button>` elements to automatically submit forms with Actions:

```


<form action={actionFunction}>


```


When a `<form>` Action succeeds, React will automatically reset the form for uncontrolled components. If you need to reset the `<form>` manually, you can call the new `requestFormReset` React DOM API.

For more information, see the `react-dom` docs for `<form>`[](/reference/react-dom/components/form), `<input>`[](/reference/react-dom/components/input), and `<button>`.

### React DOM: New hook: `useFormStatus` [](#new-hook-useformstatus "Link for this heading")

In design systems, it’s common to write design components that need access to information about the `<form>` they’re in, without drilling props down to the component. This can be done via Context, but to make the common case easier, we’ve added a new hook `useFormStatus`:

```


import {useFormStatus} from 'react-dom';

function DesignButton() {

 const {pending} = useFormStatus();

 return <button type="submit" disabled={pending} />

}


```


`useFormStatus` reads the status of the parent `<form>` as if the form was a Context provider.

For more information, see the `react-dom` docs for `useFormStatus`[](/reference/react-dom/hooks/useFormStatus).

### New hook: `useOptimistic` [](#new-hook-optimistic-updates "Link for this heading")

Another common UI pattern when performing a data mutation is to show the final state optimistically while the async request is underway. In React 19, we’re adding a new hook called `useOptimistic` to make this easier:

```


function ChangeName({currentName, onUpdateName}) {

 const [optimisticName, setOptimisticName] = useOptimistic(currentName);

 const submitAction = async formData => {

  const newName = formData.get("name");

  setOptimisticName(newName);

  const updatedName = await updateName(newName);

  onUpdateName(updatedName);

 };

 return (

  <form action={submitAction}>

   <p>Your name is: {optimisticName}</p>

   <p>

    <label>Change Name:</label>

    <input

     type="text"

     name="name"

     disabled={currentName !== optimisticName}

    />

   </p>

  </form>

 );

}


```


The `useOptimistic` hook will immediately render the `optimisticName` while the `updateName` request is in progress. When the update finishes or errors, React will automatically switch back to the `currentName` value.

For more information, see the docs for `useOptimistic`[](/reference/react/useOptimistic).

### New API: `use` [](#new-feature-use "Link for this heading")

In React 19 we’re introducing a new API to read resources in render: `use`.

For example, you can read a promise with `use`, and React will Suspend until the promise resolves:

```


import {use} from 'react';

function Comments({commentsPromise}) {

 // `use` will suspend until the promise resolves.

 const comments = use(commentsPromise);

 return comments.map(comment => <p key={comment.id}>{comment}</p>);

}

function Page({commentsPromise}) {

 // When `use` suspends in Comments,

 // this Suspense boundary will be shown.

 return (

  <Suspense fallback={<div>Loading...</div>}>

   <Comments commentsPromise={commentsPromise} />

  </Suspense>

 )

}


```


### Note

#### `use` does not support promises created in render. [](#use-does-not-support-promises-created-in-render "Link for this heading")

If you try to pass a promise created in render to `use`, React will warn:

Console

A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework.

To fix, you need to pass a promise from a suspense powered library or framework that supports caching for promises. In the future we plan to ship features to make it easier to cache promises in render.

You can also read context with `use`, allowing you to read Context conditionally such as after early returns:

```


import {use} from 'react';

import ThemeContext from './ThemeContext'

function Heading({children}) {

 if (children == null) {

  return null;

 }

 // This would not work with useContext

 // because of the early return.

 const theme = use(ThemeContext);

 return (

  <h1 style={{color: theme.color}}>

   {children}

  </h1>

 );

}


```


The `use` API can only be called in render, similar to hooks. Unlike hooks, `use` can be called conditionally. In the future we plan to support more ways to consume resources in render with `use`.

For more information, see the docs for `use`[](/reference/react/use).

## New React DOM Static APIs [](#new-react-dom-static-apis "Link for New React DOM Static APIs ")

We’ve added two new APIs to `react-dom/static` for static site generation:

  * `prerender`[](/reference/react-dom/static/prerender)
  * `prerenderToNodeStream`[](/reference/react-dom/static/prerenderToNodeStream)



These new APIs improve on `renderToString` by waiting for data to load for static HTML generation. They are designed to work with streaming environments like Node.js Streams and Web Streams. For example, in a Web Stream environment, you can prerender a React tree to static HTML with `prerender`:

```


import { prerender } from 'react-dom/static';

async function handler(request) {

 const {prelude} = await prerender(<App />, {

  bootstrapScripts: ['/main.js']

 });

 return new Response(prelude, {

  headers: { 'content-type': 'text/html' },

 });

}


```


Prerender APIs will wait for all data to load before returning the static HTML stream. Streams can be converted to strings, or sent with a streaming response. They do not support streaming content as it loads, which is supported by the existing [React DOM server rendering APIs](/reference/react-dom/server).

For more information, see [React DOM Static APIs](/reference/react-dom/static).

## React Server Components [](#react-server-components "Link for React Server Components ")

### Server Components [](#server-components "Link for Server Components ")

Server Components are a new option that allows rendering components ahead of time, before bundling, in an environment separate from your client application or SSR server. This separate environment is the “server” in React Server Components. Server Components can run once at build time on your CI server, or they can be run for each request using a web server.

React 19 includes all of the React Server Components features included from the Canary channel. This means libraries that ship with Server Components can now target React 19 as a peer dependency with a `react-server` [export condition](https://github.com/reactjs/rfcs/blob/main/text/0227-server-module-conventions.md#react-server-conditional-exports) for use in frameworks that support the [Full-stack React Architecture](/learn/start-a-new-react-project#which-features-make-up-the-react-teams-full-stack-architecture-vision).

### Note

#### How do I build support for Server Components? [](#how-do-i-build-support-for-server-components "Link for How do I build support for Server Components? ")

While React Server Components in React 19 are stable and will not break between minor versions, the underlying APIs used to implement a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x.

To support React Server Components as a bundler or framework, we recommend pinning to a specific React version, or using the Canary release. We will continue working with bundlers and frameworks to stabilize the APIs used to implement React Server Components in the future.

For more, see the docs for [React Server Components](/reference/rsc/server-components).

### Server Actions [](#server-actions "Link for Server Actions ")

Server Actions allow Client Components to call async functions executed on the server.

When a Server Action is defined with the `"use server"` directive, your framework will automatically create a reference to the server function, and pass that reference to the Client Component. When that function is called on the client, React will send a request to the server to execute the function, and return the result.

### Note

#### There is no directive for Server Components. [](#there-is-no-directive-for-server-components "Link for There is no directive for Server Components. ")

A common misunderstanding is that Server Components are denoted by `"use server"`, but there is no directive for Server Components. The `"use server"` directive is used for Server Actions.

For more info, see the docs for [Directives](/reference/rsc/directives).

Server Actions can be created in Server Components and passed as props to Client Components, or they can be imported and used in Client Components.

For more, see the docs for [React Server Actions](/reference/rsc/server-actions).

## Improvements in React 19 [](#improvements-in-react-19 "Link for Improvements in React 19 ")

### `ref` as a prop [](#ref-as-a-prop "Link for this heading")

Starting in React 19, you can now access `ref` as a prop for function components:

```


function MyInput({placeholder, ref}) {

 return <input placeholder={placeholder} ref={ref} />

}

//...

<MyInput ref={ref} />


```


New function components will no longer need `forwardRef`, and we will be publishing a codemod to automatically update your components to use the new `ref` prop. In future versions we will deprecate and remove `forwardRef`.

### Note

`refs` passed to classes are not passed as props since they reference the component instance.

### Diffs for hydration errors [](#diffs-for-hydration-errors "Link for Diffs for hydration errors ")

We also improved error reporting for hydration errors in `react-dom`. For example, instead of logging multiple errors in DEV without any information about the mismatch:

Console

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Uncaught Error: Text content does not match server-rendered HTML. at checkForUnmatchedText …

We now log a single message with a diff of the mismatch:

Console

Uncaught Error: Hydration failed because the server rendered HTML didn’t match the client. As a result this tree will be regenerated on the client. This can happen if an SSR-ed Client Component used: - A server/client branch `if (typeof window !== 'undefined')`. - Variable input such as `Date.now()` or `Math.random()` which changes each time it’s called. - Date formatting in a user’s locale which doesn’t match the server. - External changing data without sending a snapshot of it along with the HTML. - Invalid HTML tag nesting. It can also happen if the client has a browser extension installed which messes with the HTML before React loaded. <https://react.dev/link/hydration-mismatch> <App> <span> + Client - Server at throwOnHydrationMismatch …

### `<Context>` as a provider [](#context-as-a-provider "Link for this heading")

In React 19, you can render `<Context>` as a provider instead of `<Context.Provider>`:

```


const ThemeContext = createContext('');

function App({children}) {

 return (

  <ThemeContext value="dark">

   {children}

  </ThemeContext>

 ); 

}


```


New Context providers can use `<Context>` and we will be publishing a codemod to convert existing providers. In future versions we will deprecate `<Context.Provider>`.

### Cleanup functions for refs [](#cleanup-functions-for-refs "Link for Cleanup functions for refs ")

We now support returning a cleanup function from `ref` callbacks:

```


<input

 ref={(ref) => {

  // ref created

  // NEW: return a cleanup function to reset

  // the ref when element is removed from DOM.

  return () => {

   // ref cleanup

  };

 }}

/>


```


When the component unmounts, React will call the cleanup function returned from the `ref` callback. This works for DOM refs, refs to class components, and `useImperativeHandle`.

### Note

Previously, React would call `ref` functions with `null` when unmounting the component. If your `ref` returns a cleanup function, React will now skip this step.

In future versions, we will deprecate calling refs with `null` when unmounting components.

Due to the introduction of ref cleanup functions, returning anything else from a `ref` callback will now be rejected by TypeScript. The fix is usually to stop using implicit returns, for example:

```


- <div ref={current => (instance = current)} />

+ <div ref={current => {instance = current}} />


```


The original code returned the instance of the `HTMLDivElement` and TypeScript wouldn’t know if this was _supposed_ to be a cleanup function or if you didn’t want to return a cleanup function.

You can codemod this pattern with `no-implicit-ref-callback-return`[](https://github.com/eps1lon/types-react-codemod/#no-implicit-ref-callback-return).

### `useDeferredValue` initial value [](#use-deferred-value-initial-value "Link for this heading")

We’ve added an `initialValue` option to `useDeferredValue`:

```


function Search({deferredValue}) {

 // On initial render the value is ''.

 // Then a re-render is scheduled with the deferredValue.

 const value = useDeferredValue(deferredValue, '');

 return (

  <Results query={value} />

 );

}


```


When initialValue is provided, `useDeferredValue` will return it as `value` for the initial render of the component, and schedules a re-render in the background with the deferredValue returned.

For more, see `useDeferredValue`[](/reference/react/useDeferredValue).

### Support for Document Metadata [](#support-for-metadata-tags "Link for Support for Document Metadata ")

In HTML, document metadata tags like `<title>`, `<link>`, and `<meta>` are reserved for placement in the `<head>` section of the document. In React, the component that decides what metadata is appropriate for the app may be very far from the place where you render the `<head>` or React does not render the `<head>` at all. In the past, these elements would need to be inserted manually in an effect, or by libraries like `react-helmet`[](https://github.com/nfl/react-helmet), and required careful handling when server rendering a React application.

In React 19, we’re adding support for rendering document metadata tags in components natively:

```


function BlogPost({post}) {

 return (

  <article>

   <h1>{post.title}</h1>

   <title>{post.title}</title>

   <meta name="author" content="Josh" />

   <link rel="author" href="https://twitter.com/joshcstory/" />

   <meta name="keywords" content={post.keywords} />

   <p>

    Eee equals em-see-squared...

   </p>

  </article>

 );

}


```


When React renders this component, it will see the `<title>` `<link>` and `<meta>` tags, and automatically hoist them to the `<head>` section of document. By supporting these metadata tags natively, we’re able to ensure they work with client-only apps, streaming SSR, and Server Components.

### Note

#### You may still want a Metadata library [](#you-may-still-want-a-metadata-library "Link for You may still want a Metadata library ")

For simple use cases, rendering Document Metadata as tags may be suitable, but libraries can offer more powerful features like overriding generic metadata with specific metadata based on the current route. These features make it easier for frameworks and libraries like `react-helmet`[](https://github.com/nfl/react-helmet) to support metadata tags, rather than replace them.

For more info, see the docs for `<title>`[](/reference/react-dom/components/title), `<link>`[](/reference/react-dom/components/link), and `<meta>`[](/reference/react-dom/components/meta).

### Support for stylesheets [](#support-for-stylesheets "Link for Support for stylesheets ")

Stylesheets, both externally linked (`<link rel="stylesheet" href="...">`) and inline (`<style>...</style>`), require careful positioning in the DOM due to style precedence rules. Building a stylesheet capability that allows for composability within components is hard, so users often end up either loading all of their styles far from the components that may depend on them, or they use a style library which encapsulates this complexity.

In React 19, we’re addressing this complexity and providing even deeper integration into Concurrent Rendering on the Client and Streaming Rendering on the Server with built in support for stylesheets. If you tell React the `precedence` of your stylesheet it will manage the insertion order of the stylesheet in the DOM and ensure that the stylesheet (if external) is loaded before revealing content that depends on those style rules.

```


function ComponentOne() {

 return (

  <Suspense fallback="loading...">

   <link rel="stylesheet" href="foo" precedence="default" />

   <link rel="stylesheet" href="bar" precedence="high" />

   <article class="foo-class bar-class">

    {...}

   </article>

  </Suspense>

 )

}

function ComponentTwo() {

 return (

  <div>

   <p>{...}</p>

   <link rel="stylesheet" href="baz" precedence="default" /> <-- will be inserted between foo & bar

  </div>

 )

}


```


During Server Side Rendering React will include the stylesheet in the `<head>`, which ensures that the browser will not paint until it has loaded. If the stylesheet is discovered late after we’ve already started streaming, React will ensure that the stylesheet is inserted into the `<head>` on the client before revealing the content of a Suspense boundary that depends on that stylesheet.

During Client Side Rendering React will wait for newly rendered stylesheets to load before committing the render. If you render this component from multiple places within your application React will only include the stylesheet once in the document:

```


function App() {

 return <>

  <ComponentOne />

  ...

  <ComponentOne /> // won't lead to a duplicate stylesheet link in the DOM

 </>

}


```


For users accustomed to loading stylesheets manually this is an opportunity to locate those stylesheets alongside the components that depend on them allowing for better local reasoning and an easier time ensuring you only load the stylesheets that you actually depend on.

Style libraries and style integrations with bundlers can also adopt this new capability so even if you don’t directly render your own stylesheets, you can still benefit as your tools are upgraded to use this feature.

For more details, read the docs for `<link>`[](/reference/react-dom/components/link) and `<style>`[](/reference/react-dom/components/style).

### Support for async scripts [](#support-for-async-scripts "Link for Support for async scripts ")

In HTML normal scripts (`<script src="...">`) and deferred scripts (`<script defer="" src="...">`) load in document order which makes rendering these kinds of scripts deep within your component tree challenging. Async scripts (`<script async="" src="...">`) however will load in arbitrary order.

In React 19 we’ve included better support for async scripts by allowing you to render them anywhere in your component tree, inside the components that actually depend on the script, without having to manage relocating and deduplicating script instances.

```


function MyComponent() {

 return (

  <div>

   <script async={true} src="..." />

   Hello World

  </div>

 )

}

function App() {

 <html>

  <body>

   <MyComponent>

   ...

   <MyComponent> // won't lead to duplicate script in the DOM

  </body>

 </html>

}


```


In all rendering environments, async scripts will be deduplicated so that React will only load and execute the script once even if it is rendered by multiple different components.

In Server Side Rendering, async scripts will be included in the `<head>` and prioritized behind more critical resources that block paint such as stylesheets, fonts, and image preloads.

For more details, read the docs for `<script>`[](/reference/react-dom/components/script).

### Support for preloading resources [](#support-for-preloading-resources "Link for Support for preloading resources ")

During initial document load and on client side updates, telling the Browser about resources that it will likely need to load as early as possible can have a dramatic effect on page performance.

React 19 includes a number of new APIs for loading and preloading Browser resources to make it as easy as possible to build great experiences that aren’t held back by inefficient resource loading.

```


import { prefetchDNS, preconnect, preload, preinit } from 'react-dom'

function MyComponent() {

 preinit('https://.../path/to/some/script.js', {as: 'script' }) // loads and executes this script eagerly

 preload('https://.../path/to/font.woff', { as: 'font' }) // preloads this font

 preload('https://.../path/to/stylesheet.css', { as: 'style' }) // preloads this stylesheet

 prefetchDNS('https://...') // when you may not actually request anything from this host

 preconnect('https://...') // when you will request something but aren't sure what

}


```


```


<!-- the above would result in the following DOM/HTML -->

<html>

 <head>

  <!-- links/scripts are prioritized by their utility to early loading, not call order -->

  <link rel="prefetch-dns" href="https://...">

  <link rel="preconnect" href="https://...">

  <link rel="preload" as="font" href="https://.../path/to/font.woff">

  <link rel="preload" as="style" href="https://.../path/to/stylesheet.css">

  <script async="" src="https://.../path/to/some/script.js"></script>

 </head>

 <body>

  ...

 </body>

</html>


```


These APIs can be used to optimize initial page loads by moving discovery of additional resources like fonts out of stylesheet loading. They can also make client updates faster by prefetching a list of resources used by an anticipated navigation and then eagerly preloading those resources on click or even on hover.

For more details see [Resource Preloading APIs](/reference/react-dom#resource-preloading-apis).

### Compatibility with third-party scripts and extensions [](#compatibility-with-third-party-scripts-and-extensions "Link for Compatibility with third-party scripts and extensions ")

We’ve improved hydration to account for third-party scripts and browser extensions.

When hydrating, if an element that renders on the client doesn’t match the element found in the HTML from the server, React will force a client re-render to fix up the content. Previously, if an element was inserted by third-party scripts or browser extensions, it would trigger a mismatch error and client render.

In React 19, unexpected tags in the `<head>` and `<body>` will be skipped over, avoiding the mismatch errors. If React needs to re-render the entire document due to an unrelated hydration mismatch, it will leave in place stylesheets inserted by third-party scripts and browser extensions.

### Better error reporting [](#error-handling "Link for Better error reporting ")

We improved error handling in React 19 to remove duplication and provide options for handling caught and uncaught errors. For example, when there’s an error in render caught by an Error Boundary, previously React would throw the error twice (once for the original error, then again after failing to automatically recover), and then call `console.error` with info about where the error occurred.

This resulted in three errors for every caught error:

Console

Uncaught Error: hit at Throws at renderWithHooks …

Uncaught Error: hit <-- Duplicate at Throws at renderWithHooks …

The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary.

In React 19, we log a single error with all the error information included:

Console

Error: hit at Throws at renderWithHooks … The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary. at ErrorBoundary at App

Additionally, we’ve added two new root options to complement `onRecoverableError`:

  * `onCaughtError`: called when React catches an error in an Error Boundary.
  * `onUncaughtError`: called when an error is thrown and not caught by an Error Boundary.
  * `onRecoverableError`: called when an error is thrown and automatically recovered.



For more info and examples, see the docs for `createRoot`[](/reference/react-dom/client/createRoot) and `hydrateRoot`[](/reference/react-dom/client/hydrateRoot).

### Support for Custom Elements [](#support-for-custom-elements "Link for Support for Custom Elements ")

React 19 adds full support for custom elements and passes all tests on [Custom Elements Everywhere](https://custom-elements-everywhere.com/).

In past versions, using Custom Elements in React has been difficult because React treated unrecognized props as attributes rather than properties. In React 19, we’ve added support for properties that works on the client and during SSR with the following strategy:

  * **Server Side Rendering** : props passed to a custom element will render as attributes if their type is a primitive value like `string`, `number`, or the value is `true`. Props with non-primitive types like `object`, `symbol`, `function`, or value `false` will be omitted.
  * **Client Side Rendering** : props that match a property on the Custom Element instance will be assigned as properties, otherwise they will be assigned as attributes.



Thanks to [Joey Arhar](https://github.com/josepharhar) for driving the design and implementation of Custom Element support in React.

#### How to upgrade [](#how-to-upgrade "Link for How to upgrade ")

See the [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide) for step-by-step instructions and a full list of breaking and notable changes.

_Note: this post was originally published 04/25/2024 and has been updated to 12/05/2024 with the stable release._

[ PreviousBlog](/blog)[NextReact Compiler Beta Release and Roadmap](/blog/2024/10/21/react-compiler-beta-release)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React Compiler Beta Release[](#undefined "Link for this heading")

October 21, 2024 by .

The React team is excited to share new updates:

  1. We’re publishing React Compiler Beta today, so that early adopters and library maintainers can try it and provide feedback.
  2. We’re officially supporting React Compiler for apps on React 17+, through an optional `react-compiler-runtime` package.
  3. We’re opening up public membership of the [React Compiler Working Group](https://github.com/reactwg/react-compiler) to prepare the community for gradual adoption of the compiler.



At [React Conf 2024](/blog/2024/05/22/react-conf-2024-recap), we announced the experimental release of React Compiler, a build-time tool that optimizes your React app through automatic memoization. [You can find an introduction to React Compiler here](/learn/react-compiler).

Since the first release, we’ve fixed numerous bugs reported by the React community, received several high quality bug fixes and contributions[1](#user-content-fn-1) to the compiler, made the compiler more resilient to the broad diversity of JavaScript patterns, and have continued to roll out the compiler more widely at Meta.

In this post, we want to share what’s next for React Compiler.

## Try React Compiler Beta today [](#try-react-compiler-beta-today "Link for Try React Compiler Beta today ")

At [React India 2024](https://www.youtube.com/watch?v=qd5yk2gxbtg), we shared an update on React Compiler. Today, we are excited to announce a new Beta release of React Compiler and ESLint plugin. New betas are published to npm using the `@beta` tag.

To install React Compiler Beta:

Terminal

Copy

npm install -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta

Or, if you’re using Yarn:

Terminal

Copy

yarn add -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta

You can watch talk at React India here:

## We recommend everyone use the React Compiler linter today [](#we-recommend-everyone-use-the-react-compiler-linter-today "Link for We recommend everyone use the React Compiler linter today ")

React Compiler’s ESLint plugin helps developers proactively identify and correct [Rules of React](/reference/rules) violations. **We strongly recommend everyone use the linter today**. The linter does not require that you have the compiler installed, so you can use it independently, even if you are not ready to try out the compiler.

To install the linter only:

Terminal

Copy

npm install -D eslint-plugin-react-compiler@beta

Or, if you’re using Yarn:

Terminal

Copy

yarn add -D eslint-plugin-react-compiler@beta

After installation you can enable the linter by [adding it to your ESLint config](/learn/react-compiler#installing-eslint-plugin-react-compiler). Using the linter helps identify Rules of React breakages, making it easier to adopt the compiler when it’s fully released.

## Backwards Compatibility [](#backwards-compatibility "Link for Backwards Compatibility ")

React Compiler produces code that depends on runtime APIs added in React 19, but we’ve since added support for the compiler to also work with React 17 and 18. If you are not on React 19 yet, in the Beta release you can now try out React Compiler by specifying a minimum `target` in your compiler config, and adding `react-compiler-runtime` as a dependency. [You can find docs on this here](/learn/react-compiler#using-react-compiler-with-react-17-or-18).

## Using React Compiler in libraries [](#using-react-compiler-in-libraries "Link for Using React Compiler in libraries ")

Our initial release was focused on identifying major issues with using the compiler in applications. We’ve gotten great feedback and have substantially improved the compiler since then. We’re now ready for broad feedback from the community, and for library authors to try out the compiler to improve performance and the developer experience of maintaining your library.

React Compiler can also be used to compile libraries. Because React Compiler needs to run on the original source code prior to any code transformations, it is not possible for an application’s build pipeline to compile the libraries they use. Hence, our recommendation is for library maintainers to independently compile and test their libraries with the compiler, and ship compiled code to npm.

Because your code is pre-compiled, users of your library will not need to have the compiler enabled in order to benefit from the automatic memoization applied to your library. If your library targets apps not yet on React 19, specify a minimum `target` and add `react-compiler-runtime` as a direct dependency. The runtime package will use the correct implementation of APIs depending on the application’s version, and polyfill the missing APIs if necessary.

[You can find more docs on this here.](/learn/react-compiler#using-the-compiler-on-libraries)

## Opening up React Compiler Working Group to everyone [](#opening-up-react-compiler-working-group-to-everyone "Link for Opening up React Compiler Working Group to everyone ")

We previously announced the invite-only [React Compiler Working Group](https://github.com/reactwg/react-compiler) at React Conf to provide feedback, ask questions, and collaborate on the compiler’s experimental release.

From today, together with the Beta release of React Compiler, we are opening up Working Group membership to everyone. The goal of the React Compiler Working Group is to prepare the ecosystem for a smooth, gradual adoption of React Compiler by existing applications and libraries. Please continue to file bug reports in the [React repo](https://github.com/facebook/react), but please leave feedback, ask questions, or share ideas in the [Working Group discussion forum](https://github.com/reactwg/react-compiler/discussions).

The core team will also use the discussions repo to share our research findings. As the Stable Release gets closer, any important information will also be posted on this forum.

## React Compiler at Meta [](#react-compiler-at-meta "Link for React Compiler at Meta ")

At [React Conf](/blog/2024/05/22/react-conf-2024-recap), we shared that our rollout of the compiler on Quest Store and Instagram were successful. Since then, we’ve deployed React Compiler across several more major web apps at Meta, including and [Threads](https://www.threads.net). That means if you’ve used any of these apps recently, you may have had your experience powered by the compiler. We were able to onboard these apps onto the compiler with few code changes required, in a monorepo with more than 100,000 React components.

We’ve seen notable performance improvements across all of these apps. As we’ve rolled out, we’re continuing to see results on the order of [the wins we shared previously at ReactConf](https://youtu.be/lyEKhv8-3n0?t=3223). These apps have already been heavily hand tuned and optimized by Meta engineers and React experts over the years, so even improvements on the order of a few percent are a huge win for us.

We also expected developer productivity wins from React Compiler. To measure this, we collaborated with our data science partners at Meta[2](#user-content-fn-2) to conduct a thorough statistical analysis of the impact of manual memoization on productivity. Before rolling out the compiler at Meta, we discovered that only about 8% of React pull requests used manual memoization and that these pull requests took 31-46% longer to author[3](#user-content-fn-3). This confirmed our intuition that manual memoization introduces cognitive overhead, and we anticipate that React Compiler will lead to more efficient code authoring and review. Notably, React Compiler also ensures that _all_ code is memoized by default, not just the (in our case) 8% where developers explicitly apply memoization.

## Roadmap to Stable [](#roadmap-to-stable "Link for Roadmap to Stable ")

_This is not a final roadmap, and is subject to change._

We intend to ship a Release Candidate of the compiler in the near future following the Beta release, when the majority of apps and libraries that follow the Rules of React have been proven to work well with the compiler. After a period of final feedback from the community, we plan on a Stable Release for the compiler. The Stable Release will mark the beginning of a new foundation for React, and all apps and libraries will be strongly recommended to use the compiler and ESLint plugin.

  * ✅ Experimental: Released at React Conf 2024, primarily for feedback from early adopters.
  * ✅ Public Beta: Available today, for feedback from the wider community.
  * 🚧 Release Candidate (RC): React Compiler works for the majority of rule-following apps and libraries without issue.
  * 🚧 General Availability: After final feedback period from the community.



These releases also include the compiler’s ESLint plugin, which surfaces diagnostics statically analyzed by the compiler. We plan to combine the existing eslint-plugin-react-hooks plugin with the compiler’s ESLint plugin, so only one plugin needs to be installed.

Post-Stable, we plan to add more compiler optimizations and improvements. This includes both continual improvements to automatic memoization, and new optimizations altogether, with minimal to no change of product code. Upgrading to each new release of the compiler is aimed to be straightforward, and each upgrade will continue to improve performance and add better handling of diverse JavaScript and React patterns.

Throughout this process, we also plan to prototype an IDE extension for React. It is still very early in research, so we expect to be able to share more of our findings with you in a future React Labs blog post.

Thanks to , , , [Alex Taylor](https://github.com/alexmckenley), , and for reviewing and editing this post.

## Footnotes[](#footnote-label "Link for Footnotes")

  1. Thanks [@nikeee](https://github.com/facebook/react/pulls?q=is%3Apr+author%3Anikeee), [@henryqdineen](https://github.com/facebook/react/pulls?q=is%3Apr+author%3Ahenryqdineen), [@TrickyPi](https://github.com/facebook/react/pulls?q=is%3Apr+author%3ATrickyPi), and several others for their contributions to the compiler. [↩](#user-content-fnref-1)

  2. Thanks for leading this study on React Compiler at Meta, and for reviewing this post. [↩](#user-content-fnref-2)

  3. After controlling on author tenure, diff length/complexity, and other potential confounding factors. [↩](#user-content-fnref-3)




[PreviousReact 19](/blog/2024/12/05/react-19)[NextReact Conf 2024 Recap](/blog/2024/05/22/react-conf-2024-recap)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React Conf 2024 Recap[](#undefined "Link for this heading")

May 22, 2024 by .

Last week we hosted React Conf 2024, a two-day conference in Henderson, Nevada where 700+ attendees gathered in-person to discuss the latest in UI engineering. This was our first in-person conference since 2019, and we were thrilled to be able to bring the community together again.

At React Conf 2024, we announced the [React 19 RC](/blog/2024/12/05/react-19), the [React Native New Architecture Beta](https://github.com/reactwg/react-native-new-architecture/discussions/189), and an experimental release of the [React Compiler](/learn/react-compiler). The community also took the stage to announce [React Router v7](https://remix.run/blog/merging-remix-and-react-router), [Universal Server Components](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=20765s) in Expo Router, React Server Components in [RedwoodJS](https://redwoodjs.com/blog/rsc-now-in-redwoodjs), and much more.

The entire [day 1](https://www.youtube.com/watch?v=T8TZQ6k4SLE) and [day 2](https://www.youtube.com/watch?v=0ckOUBiuxVY) streams are available online. In this post, we’ll summarize the talks and announcements from the event.

## Day 1 [](#day-1 "Link for Day 1 ")

_[Watch the full day 1 stream here.](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=973s)_

To kick off day 1, Meta CTO [Andrew “Boz” Bosworth](https://www.threads.net/@boztank) shared a welcome message followed by an introduction by , who manages the React Org at Meta, and our MC .

In the day 1 keynote, shared our goals and vision for React to make it easy for anyone to build great user experiences. followed with a State of React, where she shared that React was downloaded over 1 billion times in 2023, and that 37% of new developers learn to program with React. Finally, she highlighted the work of the React community to make React, React.

For more, check out these talks from the community later in the conference:

  * [Vanilla React](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=5542s) by 
  * [React Rhythm & Blues](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=12728s) by 
  * [RedwoodJS, now with React Server Components](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=26815s) by 
  * [Introducing Universal React Server Components in Expo Router](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=20765s) by 



Next in the keynote, and shared new features coming in React 19, and announced the React 19 RC which is ready for testing in production. Check out all the features in the [React 19 release post](/blog/2024/12/05/react-19), and see these talks for deep dives on the new features:

  * [What’s new in React 19](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=8880s) by 
  * [React Unpacked: A Roadmap to React 19](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=10112s) by 
  * [React 19 Deep Dive: Coordinating HTML](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=24916s) by 
  * [Enhancing Forms with React Server Components](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=25280s) by 
  * [React for Two Computers](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=18825s) by 
  * [And Now You Understand React Server Components](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=11256s) by 



Finally, we ended the keynote with , , and announcing that the React Compiler is now [Open Source](https://github.com/facebook/react/pull/29061), and sharing an experimental version of the React Compiler to try out.

For more information on using the Compiler and how it works, check out [the docs](/learn/react-compiler) and these talks:

  * [Forget About Memo](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=12020s) by 
  * [React Compiler Deep Dive](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=9313s) by and 



Watch the full day 1 keynote here:

## Day 2 [](#day-2 "Link for Day 2 ")

_[Watch the full day 2 stream here.](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=1720s)_

To kick off day 2, shared a welcome message, followed by a Thank You from and an introduction by our Chief Vibes Officer .

In the day 2 keynote, shared the State of React Native, including 78 million downloads in 2023. He also highlighted apps using React Native including 2000+ screens used inside of Meta; the product details page in Facebook Marketplace, which is visited more than 2 billion times per day; and part of the Microsoft Windows Start Menu and some features in almost every Microsoft Office product across mobile and desktop.

Nicola also highlighted all the work the community does to support React Native including libraries, frameworks, and multiple platforms. For more, check out these talks from the community:

  * [Extending React Native beyond Mobile and Desktop Apps](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=5798s) by and 
  * [Spatial computing with React](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=22525s) by 



continued the day 2 keynote by announcing that the React Native New Architecture is now in Beta and ready for apps to adopt in production. He shared new features and improvements in the new architecture, and shared the roadmap for the future of React Native. For more check out:

  * [Cross Platform React](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=26569s) by [Olga Zinoveva](https://github.com/SlyCaptainFlint) and 



Next in the keynote, Nicola announced that we are now recommending starting with a framework like Expo for all new apps created with React Native. With the change, he also announced a new React Native homepage and new Getting Started docs. You can view the new Getting Started guide in the [React Native docs](https://reactnative.dev/docs/next/environment-setup).

Finally, to end the keynote, shared the latest features and improvements in Expo, and how to get started developing with React Native using Expo.

Watch the full day 2 keynote here:

## Q&A [](#q-and-a "Link for Q&A ")

The React and React Native teams also ended each day with a Q&A session:

  * [React Q&A](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=27518s) hosted by 
  * [React Native Q&A](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=27935s) hosted by 



## And more… [](#and-more "Link for And more… ")

We also heard talks on accessibility, error reporting, css, and more:

  * [Demystifying accessibility in React apps](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=20655s) by 
  * [Pigment CSS, CSS in the server component age](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=21696s) by 
  * [Real-time React Server Components](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=24070s) by 
  * [Let’s break React Rules](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=25862s) by 
  * [Solve 100% of your errors](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=19881s) by [Ryan Albrecht](https://github.com/ryan953)



## Thank you [](#thank-you "Link for Thank you ")

Thank you to all the staff, speakers, and participants who made React Conf 2024 possible. There are too many to list, but we want to thank a few in particular.

Thank you to , the team at [Callstack](https://www.callstack.com/), and our React Team Developer Advocate for helping to plan the entire event; and to [Sunny Leggett](https://zeroslopeevents.com/about) and everyone from [Zero Slope](https://zeroslopeevents.com) for helping to organize the event.

Thank you for being our MC and Chief Vibes Officer; and to and for hosting the Q&A sessions.

Thank you and for welcoming us each day and providing direction on structure and content; and to for joining us with a special message during the after-party.

Thank you [Ricky Hanlon](https://www.youtube.com/watch?v=FxTZL2U-uKg&t=1263s) for providing detailed feedback on talks, working on slide designs, and generally filling in the gaps to sweat the details.

Thank you [Callstack](https://www.callstack.com/) for building the conference website; and to and the [Expo](https://expo.dev/) team for building the conference mobile app.

Thank you to all the sponsors who made the event possible: [Remix](https://remix.run/), [Amazon](https://developer.amazon.com/apps-and-games?cmp=US_2024_05_3P_React-Conf-2024&ch=prtnr&chlast=prtnr&pub=ref&publast=ref&type=org&typelast=org), [MUI](https://mui.com/), [Sentry](https://sentry.io/for/react/?utm_source=sponsored-conf&utm_medium=sponsored-event&utm_campaign=frontend-fy25q2-evergreen&utm_content=logo-reactconf2024-learnmore), [Abbott](https://www.jobs.abbott/software), [Expo](https://expo.dev/), [RedwoodJS](https://redwoodjs.com/), and [Vercel](https://vercel.com).

Thank you to the AV Team for the visuals, stage, and sound; and to the Westin Hotel for hosting us.

Thank you to all the speakers who shared their knowledge and experiences with the community.

Finally, thank you to everyone who attended in person and online to show what makes React, React. React is more than a library, it is a community, and it was inspiring to see everyone come together to share and learn together.

See you next time!

[PreviousReact Compiler Beta Release and Roadmap](/blog/2024/10/21/react-compiler-beta-release)[NextReact 19 RC](/blog/2024/04/25/react-19)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React v19[](#undefined "Link for this heading")

December 05, 2024 by [The React Team](/community/team)

### Note

### React 19 is now stable! [](#react-19-is-now-stable "Link for React 19 is now stable! ")

Additions since this post was originally shared with the React 19 RC in April:

  * **Pre-warming for suspended trees** : see [Improvements to Suspense](/blog/2024/04/25/react-19-upgrade-guide#improvements-to-suspense).
  * **React DOM static APIs** : see [New React DOM Static APIs](#new-react-dom-static-apis).



_The date for this post has been updated to reflect the stable release date._

React v19 is now available on npm!

In our [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide), we shared step-by-step instructions for upgrading your app to React 19. In this post, we’ll give an overview of the new features in React 19, and how you can adopt them.

  * [What’s new in React 19](#whats-new-in-react-19)
  * [Improvements in React 19](#improvements-in-react-19)
  * [How to upgrade](#how-to-upgrade)



For a list of breaking changes, see the [Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide).

## What’s new in React 19 [](#whats-new-in-react-19 "Link for What’s new in React 19 ")

### Actions [](#actions "Link for Actions ")

A common use case in React apps is to perform a data mutation and then update state in response. For example, when a user submits a form to change their name, you will make an API request, and then handle the response. In the past, you would need to handle pending states, errors, optimistic updates, and sequential requests manually.

For example, you could handle the pending and error state in `useState`:

```


// Before Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, setIsPending] = useState(false);

 const handleSubmit = async () => {

  setIsPending(true);

  const error = await updateName(name);

  setIsPending(false);

  if (error) {

   setError(error);

   return;

  } 

  redirect("/path");

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


In React 19, we’re adding support for using async functions in transitions to handle pending states, errors, forms, and optimistic updates automatically.

For example, you can use `useTransition` to handle the pending state for you:

```


// Using pending state from Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, startTransition] = useTransition();

 const handleSubmit = () => {

  startTransition(async () => {

   const error = await updateName(name);

   if (error) {

    setError(error);

    return;

   } 

   redirect("/path");

  })

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


The async transition will immediately set the `isPending` state to true, make the async request(s), and switch `isPending` to false after any transitions. This allows you to keep the current UI responsive and interactive while the data is changing.

### Note

#### By convention, functions that use async transitions are called “Actions”. [](#by-convention-functions-that-use-async-transitions-are-called-actions "Link for By convention, functions that use async transitions are called “Actions”. ")

Actions automatically manage submitting data for you:

  * **Pending state** : Actions provide a pending state that starts at the beginning of a request and automatically resets when the final state update is committed.
  * **Optimistic updates** : Actions support the new `useOptimistic`[](#new-hook-optimistic-updates) hook so you can show users instant feedback while the requests are submitting.
  * **Error handling** : Actions provide error handling so you can display Error Boundaries when a request fails, and revert optimistic updates to their original value automatically.
  * **Forms** : `<form>` elements now support passing functions to the `action` and `formAction` props. Passing functions to the `action` props use Actions by default and reset the form automatically after submission.



Building on top of Actions, React 19 introduces `useOptimistic`[](#new-hook-optimistic-updates) to manage optimistic updates, and a new hook `React.useActionState`[](#new-hook-useactionstate) to handle common cases for Actions. In `react-dom` we’re adding `<form>`[ Actions](#form-actions) to manage forms automatically and `useFormStatus`[](#new-hook-useformstatus) to support the common cases for Actions in forms.

In React 19, the above example can be simplified to:

```


// Using <form> Actions and useActionState

function ChangeName({ name, setName }) {

 const [error, submitAction, isPending] = useActionState(

  async (previousState, formData) => {

   const error = await updateName(formData.get("name"));

   if (error) {

    return error;

   }

   redirect("/path");

   return null;

  },

  null,

 );

 return (

  <form action={submitAction}>

   <input type="text" name="name" />

   <button type="submit" disabled={isPending}>Update</button>

   {error && <p>{error}</p>}

  </form>

 );

}


```


In the next section, we’ll break down each of the new Action features in React 19.

### New hook: `useActionState` [](#new-hook-useactionstate "Link for this heading")

To make the common cases easier for Actions, we’ve added a new hook called `useActionState`:

```


const [error, submitAction, isPending] = useActionState(

 async (previousState, newName) => {

  const error = await updateName(newName);

  if (error) {

   // You can return any result of the action.

   // Here, we return only the error.

   return error;

  }

  // handle success

  return null;

 },

 null,

);


```


`useActionState` accepts a function (the “Action”), and returns a wrapped Action to call. This works because Actions compose. When the wrapped Action is called, `useActionState` will return the last result of the Action as `data`, and the pending state of the Action as `pending`.

### Note

`React.useActionState` was previously called `ReactDOM.useFormState` in the Canary releases, but we’ve renamed it and deprecated `useFormState`.

See [#28491](https://github.com/facebook/react/pull/28491) for more info.

For more information, see the docs for `useActionState`[](/reference/react/useActionState).

### React DOM: `<form>` Actions [](#form-actions "Link for this heading")

Actions are also integrated with React 19’s new `<form>` features for `react-dom`. We’ve added support for passing functions as the `action` and `formAction` props of `<form>`, `<input>`, and `<button>` elements to automatically submit forms with Actions:

```


<form action={actionFunction}>


```


When a `<form>` Action succeeds, React will automatically reset the form for uncontrolled components. If you need to reset the `<form>` manually, you can call the new `requestFormReset` React DOM API.

For more information, see the `react-dom` docs for `<form>`[](/reference/react-dom/components/form), `<input>`[](/reference/react-dom/components/input), and `<button>`.

### React DOM: New hook: `useFormStatus` [](#new-hook-useformstatus "Link for this heading")

In design systems, it’s common to write design components that need access to information about the `<form>` they’re in, without drilling props down to the component. This can be done via Context, but to make the common case easier, we’ve added a new hook `useFormStatus`:

```


import {useFormStatus} from 'react-dom';

function DesignButton() {

 const {pending} = useFormStatus();

 return <button type="submit" disabled={pending} />

}


```


`useFormStatus` reads the status of the parent `<form>` as if the form was a Context provider.

For more information, see the `react-dom` docs for `useFormStatus`[](/reference/react-dom/hooks/useFormStatus).

### New hook: `useOptimistic` [](#new-hook-optimistic-updates "Link for this heading")

Another common UI pattern when performing a data mutation is to show the final state optimistically while the async request is underway. In React 19, we’re adding a new hook called `useOptimistic` to make this easier:

```


function ChangeName({currentName, onUpdateName}) {

 const [optimisticName, setOptimisticName] = useOptimistic(currentName);

 const submitAction = async formData => {

  const newName = formData.get("name");

  setOptimisticName(newName);

  const updatedName = await updateName(newName);

  onUpdateName(updatedName);

 };

 return (

  <form action={submitAction}>

   <p>Your name is: {optimisticName}</p>

   <p>

    <label>Change Name:</label>

    <input

     type="text"

     name="name"

     disabled={currentName !== optimisticName}

    />

   </p>

  </form>

 );

}


```


The `useOptimistic` hook will immediately render the `optimisticName` while the `updateName` request is in progress. When the update finishes or errors, React will automatically switch back to the `currentName` value.

For more information, see the docs for `useOptimistic`[](/reference/react/useOptimistic).

### New API: `use` [](#new-feature-use "Link for this heading")

In React 19 we’re introducing a new API to read resources in render: `use`.

For example, you can read a promise with `use`, and React will Suspend until the promise resolves:

```


import {use} from 'react';

function Comments({commentsPromise}) {

 // `use` will suspend until the promise resolves.

 const comments = use(commentsPromise);

 return comments.map(comment => <p key={comment.id}>{comment}</p>);

}

function Page({commentsPromise}) {

 // When `use` suspends in Comments,

 // this Suspense boundary will be shown.

 return (

  <Suspense fallback={<div>Loading...</div>}>

   <Comments commentsPromise={commentsPromise} />

  </Suspense>

 )

}


```


### Note

#### `use` does not support promises created in render. [](#use-does-not-support-promises-created-in-render "Link for this heading")

If you try to pass a promise created in render to `use`, React will warn:

Console

A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework.

To fix, you need to pass a promise from a suspense powered library or framework that supports caching for promises. In the future we plan to ship features to make it easier to cache promises in render.

You can also read context with `use`, allowing you to read Context conditionally such as after early returns:

```


import {use} from 'react';

import ThemeContext from './ThemeContext'

function Heading({children}) {

 if (children == null) {

  return null;

 }

 // This would not work with useContext

 // because of the early return.

 const theme = use(ThemeContext);

 return (

  <h1 style={{color: theme.color}}>

   {children}

  </h1>

 );

}


```


The `use` API can only be called in render, similar to hooks. Unlike hooks, `use` can be called conditionally. In the future we plan to support more ways to consume resources in render with `use`.

For more information, see the docs for `use`[](/reference/react/use).

## New React DOM Static APIs [](#new-react-dom-static-apis "Link for New React DOM Static APIs ")

We’ve added two new APIs to `react-dom/static` for static site generation:

  * `prerender`[](/reference/react-dom/static/prerender)
  * `prerenderToNodeStream`[](/reference/react-dom/static/prerenderToNodeStream)



These new APIs improve on `renderToString` by waiting for data to load for static HTML generation. They are designed to work with streaming environments like Node.js Streams and Web Streams. For example, in a Web Stream environment, you can prerender a React tree to static HTML with `prerender`:

```


import { prerender } from 'react-dom/static';

async function handler(request) {

 const {prelude} = await prerender(<App />, {

  bootstrapScripts: ['/main.js']

 });

 return new Response(prelude, {

  headers: { 'content-type': 'text/html' },

 });

}


```


Prerender APIs will wait for all data to load before returning the static HTML stream. Streams can be converted to strings, or sent with a streaming response. They do not support streaming content as it loads, which is supported by the existing [React DOM server rendering APIs](/reference/react-dom/server).

For more information, see [React DOM Static APIs](/reference/react-dom/static).

## React Server Components [](#react-server-components "Link for React Server Components ")

### Server Components [](#server-components "Link for Server Components ")

Server Components are a new option that allows rendering components ahead of time, before bundling, in an environment separate from your client application or SSR server. This separate environment is the “server” in React Server Components. Server Components can run once at build time on your CI server, or they can be run for each request using a web server.

React 19 includes all of the React Server Components features included from the Canary channel. This means libraries that ship with Server Components can now target React 19 as a peer dependency with a `react-server` [export condition](https://github.com/reactjs/rfcs/blob/main/text/0227-server-module-conventions.md#react-server-conditional-exports) for use in frameworks that support the [Full-stack React Architecture](/learn/start-a-new-react-project#which-features-make-up-the-react-teams-full-stack-architecture-vision).

### Note

#### How do I build support for Server Components? [](#how-do-i-build-support-for-server-components "Link for How do I build support for Server Components? ")

While React Server Components in React 19 are stable and will not break between minor versions, the underlying APIs used to implement a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x.

To support React Server Components as a bundler or framework, we recommend pinning to a specific React version, or using the Canary release. We will continue working with bundlers and frameworks to stabilize the APIs used to implement React Server Components in the future.

For more, see the docs for [React Server Components](/reference/rsc/server-components).

### Server Actions [](#server-actions "Link for Server Actions ")

Server Actions allow Client Components to call async functions executed on the server.

When a Server Action is defined with the `"use server"` directive, your framework will automatically create a reference to the server function, and pass that reference to the Client Component. When that function is called on the client, React will send a request to the server to execute the function, and return the result.

### Note

#### There is no directive for Server Components. [](#there-is-no-directive-for-server-components "Link for There is no directive for Server Components. ")

A common misunderstanding is that Server Components are denoted by `"use server"`, but there is no directive for Server Components. The `"use server"` directive is used for Server Actions.

For more info, see the docs for [Directives](/reference/rsc/directives).

Server Actions can be created in Server Components and passed as props to Client Components, or they can be imported and used in Client Components.

For more, see the docs for [React Server Actions](/reference/rsc/server-actions).

## Improvements in React 19 [](#improvements-in-react-19 "Link for Improvements in React 19 ")

### `ref` as a prop [](#ref-as-a-prop "Link for this heading")

Starting in React 19, you can now access `ref` as a prop for function components:

```


function MyInput({placeholder, ref}) {

 return <input placeholder={placeholder} ref={ref} />

}

//...

<MyInput ref={ref} />


```


New function components will no longer need `forwardRef`, and we will be publishing a codemod to automatically update your components to use the new `ref` prop. In future versions we will deprecate and remove `forwardRef`.

### Note

`refs` passed to classes are not passed as props since they reference the component instance.

### Diffs for hydration errors [](#diffs-for-hydration-errors "Link for Diffs for hydration errors ")

We also improved error reporting for hydration errors in `react-dom`. For example, instead of logging multiple errors in DEV without any information about the mismatch:

Console

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Uncaught Error: Text content does not match server-rendered HTML. at checkForUnmatchedText …

We now log a single message with a diff of the mismatch:

Console

Uncaught Error: Hydration failed because the server rendered HTML didn’t match the client. As a result this tree will be regenerated on the client. This can happen if an SSR-ed Client Component used: - A server/client branch `if (typeof window !== 'undefined')`. - Variable input such as `Date.now()` or `Math.random()` which changes each time it’s called. - Date formatting in a user’s locale which doesn’t match the server. - External changing data without sending a snapshot of it along with the HTML. - Invalid HTML tag nesting. It can also happen if the client has a browser extension installed which messes with the HTML before React loaded. <https://react.dev/link/hydration-mismatch> <App> <span> + Client - Server at throwOnHydrationMismatch …

### `<Context>` as a provider [](#context-as-a-provider "Link for this heading")

In React 19, you can render `<Context>` as a provider instead of `<Context.Provider>`:

```


const ThemeContext = createContext('');

function App({children}) {

 return (

  <ThemeContext value="dark">

   {children}

  </ThemeContext>

 ); 

}


```


New Context providers can use `<Context>` and we will be publishing a codemod to convert existing providers. In future versions we will deprecate `<Context.Provider>`.

### Cleanup functions for refs [](#cleanup-functions-for-refs "Link for Cleanup functions for refs ")

We now support returning a cleanup function from `ref` callbacks:

```


<input

 ref={(ref) => {

  // ref created

  // NEW: return a cleanup function to reset

  // the ref when element is removed from DOM.

  return () => {

   // ref cleanup

  };

 }}

/>


```


When the component unmounts, React will call the cleanup function returned from the `ref` callback. This works for DOM refs, refs to class components, and `useImperativeHandle`.

### Note

Previously, React would call `ref` functions with `null` when unmounting the component. If your `ref` returns a cleanup function, React will now skip this step.

In future versions, we will deprecate calling refs with `null` when unmounting components.

Due to the introduction of ref cleanup functions, returning anything else from a `ref` callback will now be rejected by TypeScript. The fix is usually to stop using implicit returns, for example:

```


- <div ref={current => (instance = current)} />

+ <div ref={current => {instance = current}} />


```


The original code returned the instance of the `HTMLDivElement` and TypeScript wouldn’t know if this was _supposed_ to be a cleanup function or if you didn’t want to return a cleanup function.

You can codemod this pattern with `no-implicit-ref-callback-return`[](https://github.com/eps1lon/types-react-codemod/#no-implicit-ref-callback-return).

### `useDeferredValue` initial value [](#use-deferred-value-initial-value "Link for this heading")

We’ve added an `initialValue` option to `useDeferredValue`:

```


function Search({deferredValue}) {

 // On initial render the value is ''.

 // Then a re-render is scheduled with the deferredValue.

 const value = useDeferredValue(deferredValue, '');

 return (

  <Results query={value} />

 );

}


```


When initialValue is provided, `useDeferredValue` will return it as `value` for the initial render of the component, and schedules a re-render in the background with the deferredValue returned.

For more, see `useDeferredValue`[](/reference/react/useDeferredValue).

### Support for Document Metadata [](#support-for-metadata-tags "Link for Support for Document Metadata ")

In HTML, document metadata tags like `<title>`, `<link>`, and `<meta>` are reserved for placement in the `<head>` section of the document. In React, the component that decides what metadata is appropriate for the app may be very far from the place where you render the `<head>` or React does not render the `<head>` at all. In the past, these elements would need to be inserted manually in an effect, or by libraries like `react-helmet`[](https://github.com/nfl/react-helmet), and required careful handling when server rendering a React application.

In React 19, we’re adding support for rendering document metadata tags in components natively:

```


function BlogPost({post}) {

 return (

  <article>

   <h1>{post.title}</h1>

   <title>{post.title}</title>

   <meta name="author" content="Josh" />

   <link rel="author" href="https://twitter.com/joshcstory/" />

   <meta name="keywords" content={post.keywords} />

   <p>

    Eee equals em-see-squared...

   </p>

  </article>

 );

}


```


When React renders this component, it will see the `<title>` `<link>` and `<meta>` tags, and automatically hoist them to the `<head>` section of document. By supporting these metadata tags natively, we’re able to ensure they work with client-only apps, streaming SSR, and Server Components.

### Note

#### You may still want a Metadata library [](#you-may-still-want-a-metadata-library "Link for You may still want a Metadata library ")

For simple use cases, rendering Document Metadata as tags may be suitable, but libraries can offer more powerful features like overriding generic metadata with specific metadata based on the current route. These features make it easier for frameworks and libraries like `react-helmet`[](https://github.com/nfl/react-helmet) to support metadata tags, rather than replace them.

For more info, see the docs for `<title>`[](/reference/react-dom/components/title), `<link>`[](/reference/react-dom/components/link), and `<meta>`[](/reference/react-dom/components/meta).

### Support for stylesheets [](#support-for-stylesheets "Link for Support for stylesheets ")

Stylesheets, both externally linked (`<link rel="stylesheet" href="...">`) and inline (`<style>...</style>`), require careful positioning in the DOM due to style precedence rules. Building a stylesheet capability that allows for composability within components is hard, so users often end up either loading all of their styles far from the components that may depend on them, or they use a style library which encapsulates this complexity.

In React 19, we’re addressing this complexity and providing even deeper integration into Concurrent Rendering on the Client and Streaming Rendering on the Server with built in support for stylesheets. If you tell React the `precedence` of your stylesheet it will manage the insertion order of the stylesheet in the DOM and ensure that the stylesheet (if external) is loaded before revealing content that depends on those style rules.

```


function ComponentOne() {

 return (

  <Suspense fallback="loading...">

   <link rel="stylesheet" href="foo" precedence="default" />

   <link rel="stylesheet" href="bar" precedence="high" />

   <article class="foo-class bar-class">

    {...}

   </article>

  </Suspense>

 )

}

function ComponentTwo() {

 return (

  <div>

   <p>{...}</p>

   <link rel="stylesheet" href="baz" precedence="default" /> <-- will be inserted between foo & bar

  </div>

 )

}


```


During Server Side Rendering React will include the stylesheet in the `<head>`, which ensures that the browser will not paint until it has loaded. If the stylesheet is discovered late after we’ve already started streaming, React will ensure that the stylesheet is inserted into the `<head>` on the client before revealing the content of a Suspense boundary that depends on that stylesheet.

During Client Side Rendering React will wait for newly rendered stylesheets to load before committing the render. If you render this component from multiple places within your application React will only include the stylesheet once in the document:

```


function App() {

 return <>

  <ComponentOne />

  ...

  <ComponentOne /> // won't lead to a duplicate stylesheet link in the DOM

 </>

}


```


For users accustomed to loading stylesheets manually this is an opportunity to locate those stylesheets alongside the components that depend on them allowing for better local reasoning and an easier time ensuring you only load the stylesheets that you actually depend on.

Style libraries and style integrations with bundlers can also adopt this new capability so even if you don’t directly render your own stylesheets, you can still benefit as your tools are upgraded to use this feature.

For more details, read the docs for `<link>`[](/reference/react-dom/components/link) and `<style>`[](/reference/react-dom/components/style).

### Support for async scripts [](#support-for-async-scripts "Link for Support for async scripts ")

In HTML normal scripts (`<script src="...">`) and deferred scripts (`<script defer="" src="...">`) load in document order which makes rendering these kinds of scripts deep within your component tree challenging. Async scripts (`<script async="" src="...">`) however will load in arbitrary order.

In React 19 we’ve included better support for async scripts by allowing you to render them anywhere in your component tree, inside the components that actually depend on the script, without having to manage relocating and deduplicating script instances.

```


function MyComponent() {

 return (

  <div>

   <script async={true} src="..." />

   Hello World

  </div>

 )

}

function App() {

 <html>

  <body>

   <MyComponent>

   ...

   <MyComponent> // won't lead to duplicate script in the DOM

  </body>

 </html>

}


```


In all rendering environments, async scripts will be deduplicated so that React will only load and execute the script once even if it is rendered by multiple different components.

In Server Side Rendering, async scripts will be included in the `<head>` and prioritized behind more critical resources that block paint such as stylesheets, fonts, and image preloads.

For more details, read the docs for `<script>`[](/reference/react-dom/components/script).

### Support for preloading resources [](#support-for-preloading-resources "Link for Support for preloading resources ")

During initial document load and on client side updates, telling the Browser about resources that it will likely need to load as early as possible can have a dramatic effect on page performance.

React 19 includes a number of new APIs for loading and preloading Browser resources to make it as easy as possible to build great experiences that aren’t held back by inefficient resource loading.

```


import { prefetchDNS, preconnect, preload, preinit } from 'react-dom'

function MyComponent() {

 preinit('https://.../path/to/some/script.js', {as: 'script' }) // loads and executes this script eagerly

 preload('https://.../path/to/font.woff', { as: 'font' }) // preloads this font

 preload('https://.../path/to/stylesheet.css', { as: 'style' }) // preloads this stylesheet

 prefetchDNS('https://...') // when you may not actually request anything from this host

 preconnect('https://...') // when you will request something but aren't sure what

}


```


```


<!-- the above would result in the following DOM/HTML -->

<html>

 <head>

  <!-- links/scripts are prioritized by their utility to early loading, not call order -->

  <link rel="prefetch-dns" href="https://...">

  <link rel="preconnect" href="https://...">

  <link rel="preload" as="font" href="https://.../path/to/font.woff">

  <link rel="preload" as="style" href="https://.../path/to/stylesheet.css">

  <script async="" src="https://.../path/to/some/script.js"></script>

 </head>

 <body>

  ...

 </body>

</html>


```


These APIs can be used to optimize initial page loads by moving discovery of additional resources like fonts out of stylesheet loading. They can also make client updates faster by prefetching a list of resources used by an anticipated navigation and then eagerly preloading those resources on click or even on hover.

For more details see [Resource Preloading APIs](/reference/react-dom#resource-preloading-apis).

### Compatibility with third-party scripts and extensions [](#compatibility-with-third-party-scripts-and-extensions "Link for Compatibility with third-party scripts and extensions ")

We’ve improved hydration to account for third-party scripts and browser extensions.

When hydrating, if an element that renders on the client doesn’t match the element found in the HTML from the server, React will force a client re-render to fix up the content. Previously, if an element was inserted by third-party scripts or browser extensions, it would trigger a mismatch error and client render.

In React 19, unexpected tags in the `<head>` and `<body>` will be skipped over, avoiding the mismatch errors. If React needs to re-render the entire document due to an unrelated hydration mismatch, it will leave in place stylesheets inserted by third-party scripts and browser extensions.

### Better error reporting [](#error-handling "Link for Better error reporting ")

We improved error handling in React 19 to remove duplication and provide options for handling caught and uncaught errors. For example, when there’s an error in render caught by an Error Boundary, previously React would throw the error twice (once for the original error, then again after failing to automatically recover), and then call `console.error` with info about where the error occurred.

This resulted in three errors for every caught error:

Console

Uncaught Error: hit at Throws at renderWithHooks …

Uncaught Error: hit <-- Duplicate at Throws at renderWithHooks …

The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary.

In React 19, we log a single error with all the error information included:

Console

Error: hit at Throws at renderWithHooks … The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary. at ErrorBoundary at App

Additionally, we’ve added two new root options to complement `onRecoverableError`:

  * `onCaughtError`: called when React catches an error in an Error Boundary.
  * `onUncaughtError`: called when an error is thrown and not caught by an Error Boundary.
  * `onRecoverableError`: called when an error is thrown and automatically recovered.



For more info and examples, see the docs for `createRoot`[](/reference/react-dom/client/createRoot) and `hydrateRoot`[](/reference/react-dom/client/hydrateRoot).

### Support for Custom Elements [](#support-for-custom-elements "Link for Support for Custom Elements ")

React 19 adds full support for custom elements and passes all tests on [Custom Elements Everywhere](https://custom-elements-everywhere.com/).

In past versions, using Custom Elements in React has been difficult because React treated unrecognized props as attributes rather than properties. In React 19, we’ve added support for properties that works on the client and during SSR with the following strategy:

  * **Server Side Rendering** : props passed to a custom element will render as attributes if their type is a primitive value like `string`, `number`, or the value is `true`. Props with non-primitive types like `object`, `symbol`, `function`, or value `false` will be omitted.
  * **Client Side Rendering** : props that match a property on the Custom Element instance will be assigned as properties, otherwise they will be assigned as attributes.



Thanks to [Joey Arhar](https://github.com/josepharhar) for driving the design and implementation of Custom Element support in React.

#### How to upgrade [](#how-to-upgrade "Link for How to upgrade ")

See the [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide) for step-by-step instructions and a full list of breaking and notable changes.

_Note: this post was originally published 04/25/2024 and has been updated to 12/05/2024 with the stable release._

[ PreviousBlog](/blog)[NextReact Compiler Beta Release and Roadmap](/blog/2024/10/21/react-compiler-beta-release)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Installation[](#undefined "Link for this heading")

React has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.

### In this chapter

  * [How to start a new React project](/learn/start-a-new-react-project)
  * [How to add React to an existing project](/learn/add-react-to-an-existing-project)
  * [How to set up your editor](/learn/editor-setup)
  * [How to install React Developer Tools](/learn/react-developer-tools)



## Try React [](#try-react "Link for Try React ")

You don’t need to install anything to play with React. Try editing this sandbox!

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

9

1

2

3

4

5

6

7

8

function Greeting({ name }) {

return <h1>Hello, {name}</h1>;

}

export default function App() {

return <Greeting name="world" />

}

You can edit it directly or open it in a new tab by pressing the “Fork” button in the upper right corner.

Most pages in the React documentation contain sandboxes like this. Outside of the React documentation, there are many online sandboxes that support React: for example, [CodeSandbox](https://codesandbox.io/s/new), [StackBlitz](https://stackblitz.com/fork/react), or [CodePen.](https://codepen.io/pen?template=QWYVwWN)

### Try React locally [](#try-react-locally "Link for Try React locally ")

To try React locally on your computer, [download this HTML page.](https://gist.githubusercontent.com/gaearon/0275b1e1518599bbeafcde4722e79ed1/raw/db72dcbf3384ee1708c4a07d3be79860db04bff0/example.html) Open it in your editor and in your browser!

## Start a new React project [](#start-a-new-react-project "Link for Start a new React project ")

If you want to build an app or a website fully with React, [start a new React project.](/learn/start-a-new-react-project)

## Add React to an existing project [](#add-react-to-an-existing-project "Link for Add React to an existing project ")

If want to try using React in your existing app or a website, [add React to an existing project.](/learn/add-react-to-an-existing-project)

## Next steps [](#next-steps "Link for Next steps ")

Head to the [Quick Start](/learn) guide for a tour of the most important React concepts you will encounter every day.

[PreviousThinking in React](/learn/thinking-in-react)[NextStart a New React Project](/learn/start-a-new-react-project)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Try React ](#try-react)
  * [Try React locally ](#try-react-locally)
  * [Start a new React project ](#start-a-new-react-project)
  * [Add React to an existing project ](#add-react-to-an-existing-project)
  * [Next steps ](#next-steps)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Describing the UI[](#undefined "Link for this heading")

React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable _components._ From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.

### In this chapter

  * [How to write your first React component](/learn/your-first-component)
  * [When and how to create multi-component files](/learn/importing-and-exporting-components)
  * [How to add markup to JavaScript with JSX](/learn/writing-markup-with-jsx)
  * [How to use curly braces with JSX to access JavaScript functionality from your components](/learn/javascript-in-jsx-with-curly-braces)
  * [How to configure components with props](/learn/passing-props-to-a-component)
  * [How to conditionally render components](/learn/conditional-rendering)
  * [How to render multiple components at a time](/learn/rendering-lists)
  * [How to avoid confusing bugs by keeping components pure](/learn/keeping-components-pure)
  * [Why understanding your UI as trees is useful](/learn/understanding-your-ui-as-a-tree)



## Your first component [](#your-first-component "Link for Your first component ")

React applications are built from isolated pieces of UI called _components_. A React component is a JavaScript function that you can sprinkle with markup. Components can be as small as a button, or as large as an entire page. Here is a `Gallery` component rendering three `Profile` components:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

99

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

function Profile() {

return (

<img

src="https://i.imgur.com/MK3eW3As.jpg"

alt="Katherine Johnson"

/>

);

}

export default function Gallery() {

return (

<section>

<h1>Amazing scientists</h1>

<Profile />

<Profile />

<Profile />

</section>

);

}

Show more

## Ready to learn this topic?

Read **[Your First Component](/learn/your-first-component)** to learn how to declare and use React components.

[Read More](/learn/your-first-component)

## Importing and exporting components [](#importing-and-exporting-components "Link for Importing and exporting components ")

You can declare many components in one file, but large files can get difficult to navigate. To solve this, you can _export_ a component into its own file, and then _import_ that component from another file:

Gallery.jsProfile.js

Gallery.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import Profile from './Profile.js';
export default function Gallery() {
 return (
  <section>
   <h1>Amazing scientists</h1>
   <Profile />
   <Profile />
   <Profile />
  </section>
 );
}

```


## Ready to learn this topic?

Read **[Importing and Exporting Components](/learn/importing-and-exporting-components)** to learn how to split components into their own files.

[Read More](/learn/importing-and-exporting-components)

## Writing markup with JSX [](#writing-markup-with-jsx "Link for Writing markup with JSX ")

Each React component is a JavaScript function that may contain some markup that React renders into the browser. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information.

If we paste existing HTML markup into a React component, it won’t always work:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
export default function TodoList() {
 return (
  // This doesn't quite work!
  <h1>Hedy Lamarr's Todos</h1>
  <img
   src="https://i.imgur.com/yXOvdOSs.jpg"
   alt="Hedy Lamarr"
   class="photo"
  >
  <ul>
   <li>Invent new traffic lights
   <li>Rehearse a movie scene
   <li>Improve spectrum technology
  </ul>

```


Show more

If you have existing HTML like this, you can fix it using a [converter](https://transform.tools/html-to-jsx):

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
export default function TodoList() {
 return (
  <>
   <h1>Hedy Lamarr's Todos</h1>
   <img
    src="https://i.imgur.com/yXOvdOSs.jpg"
    alt="Hedy Lamarr"
    className="photo"
   />
   <ul>
    <li>Invent new traffic lights</li>
    <li>Rehearse a movie scene</li>
    <li>Improve spectrum technology</li>
   </ul>
  </>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Writing Markup with JSX](/learn/writing-markup-with-jsx)** to learn how to write valid JSX.

[Read More](/learn/writing-markup-with-jsx)

## JavaScript in JSX with curly braces [](#javascript-in-jsx-with-curly-braces "Link for JavaScript in JSX with curly braces ")

JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to “open a window” to JavaScript:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
const person = {
 name: 'Gregorio Y. Zara',
 theme: {
  backgroundColor: 'black',
  color: 'pink'
 }
};
export default function TodoList() {
 return (
  <div style={person.theme}>
   <h1>{person.name}'s Todos</h1>
   <img
    className="avatar"
    src="https://i.imgur.com/7vQD0fPs.jpg"
    alt="Gregorio Y. Zara"
   />
   <ul>
    <li>Improve the videophone</li>
    <li>Prepare aeronautics lectures</li>
    <li>Work on the alcohol-fuelled engine</li>
   </ul>
  </div>
 );
}

```


Show more

## Ready to learn this topic?

Read **[JavaScript in JSX with Curly Braces](/learn/javascript-in-jsx-with-curly-braces)** to learn how to access JavaScript data from JSX.

[Read More](/learn/javascript-in-jsx-with-curly-braces)

## Passing props to a component [](#passing-props-to-a-component "Link for Passing props to a component ")

React components use _props_ to communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, functions, and even JSX!

App.jsutils.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { getImageUrl } from './utils.js'
export default function Profile() {
 return (
  <Card>
   <Avatar
    size={100}
    person={{
     name: 'Katsuko Saruhashi',
     imageId: 'YfeOqp2'
    }}
   />
  </Card>
 );
}
function Avatar({ person, size }) {
 return (
  <img
   className="avatar"
   src={getImageUrl(person)}
   alt={person.name}
   width={size}
   height={size}
  />
 );
}
function Card({ children }) {
 return (
  <div className="card">
   {children}
  </div>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Passing Props to a Component](/learn/passing-props-to-a-component)** to learn how to pass and read props.

[Read More](/learn/passing-props-to-a-component)

## Conditional rendering [](#conditional-rendering "Link for Conditional rendering ")

Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like `if` statements, `&&`, and `? :` operators.

In this example, the JavaScript `&&` operator is used to conditionally render a checkmark:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
function Item({ name, isPacked }) {
 return (
  <li className="item">
   {name} {isPacked && '✅'}
  </li>
 );
}
export default function PackingList() {
 return (
  <section>
   <h1>Sally Ride's Packing List</h1>
   <ul>
    <Item
     isPacked={true}
     name="Space suit"
    />
    <Item
     isPacked={true}
     name="Helmet with a golden leaf"
    />
    <Item
     isPacked={false}
     name="Photo of Tam"
    />
   </ul>
  </section>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Conditional Rendering](/learn/conditional-rendering)** to learn the different ways to render content conditionally.

[Read More](/learn/conditional-rendering)

## Rendering lists [](#rendering-lists "Link for Rendering lists ")

You will often want to display multiple similar components from a collection of data. You can use JavaScript’s `filter()` and `map()` with React to filter and transform your array of data into an array of components.

For each array item, you will need to specify a `key`. Usually, you will want to use an ID from the database as a `key`. Keys let React keep track of each item’s place in the list even if the list changes.

App.jsdata.jsutils.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { people } from './data.js';
import { getImageUrl } from './utils.js';
export default function List() {
 const listItems = people.map(person =>
  <li key={person.id}>
   <img
    src={getImageUrl(person)}
    alt={person.name}
   />
   <p>
    <b>{person.name}:</b>
    {' ' + person.profession + ' '}
    known for {person.accomplishment}
   </p>
  </li>
 );
 return (
  <article>
   <h1>Scientists</h1>
   <ul>{listItems}</ul>
  </article>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Rendering Lists](/learn/rendering-lists)** to learn how to render a list of components, and how to choose a key.

[Read More](/learn/rendering-lists)

## Keeping components pure [](#keeping-components-pure "Link for Keeping components pure ")

Some JavaScript functions are _pure._ A pure function:

  * **Minds its own business.** It does not change any objects or variables that existed before it was called.
  * **Same inputs, same output.** Given the same inputs, a pure function should always return the same result.



By strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. Here is an example of an impure component:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
let guest = 0;
function Cup() {
 // Bad: changing a preexisting variable!
 guest = guest + 1;
 return <h2>Tea cup for guest #{guest}</h2>;
}
export default function TeaSet() {
 return (
  <>
   <Cup />
   <Cup />
   <Cup />
  </>
 );
}

```


Show more

You can make this component pure by passing a prop instead of modifying a preexisting variable:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
function Cup({ guest }) {
 return <h2>Tea cup for guest #{guest}</h2>;
}
export default function TeaSet() {
 return (
  <>
   <Cup guest={1} />
   <Cup guest={2} />
   <Cup guest={3} />
  </>
 );
}

```


## Ready to learn this topic?

Read **[Keeping Components Pure](/learn/keeping-components-pure)** to learn how to write components as pure, predictable functions.

[Read More](/learn/keeping-components-pure)

## Your UI as a tree [](#your-ui-as-a-tree "Link for Your UI as a tree ")

React uses trees to model the relationships between components and modules.

A React render tree is a representation of the parent and child relationship between components.

An example React render tree.

Components near the top of the tree, near the root component, are considered top-level components. Components with no child components are leaf components. This categorization of components is useful for understanding data flow and rendering performance.

Modelling the relationship between JavaScript modules is another useful way to understand your app. We refer to it as a module dependency tree.

An example module dependency tree.

A dependency tree is often used by build tools to bundle all the relevant JavaScript code for the client to download and render. A large bundle size regresses user experience for React apps. Understanding the module dependency tree is helpful to debug such issues.

## Ready to learn this topic?

Read **[Your UI as a Tree](/learn/understanding-your-ui-as-a-tree)** to learn how to create a render and module dependency trees for a React app and how they’re useful mental models for improving user experience and performance.

[Read More](/learn/understanding-your-ui-as-a-tree)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Your First Component](/learn/your-first-component) to start reading this chapter page by page!

Or, if you’re already familiar with these topics, why not read about [Adding Interactivity](/learn/adding-interactivity)?

[NextYour First Component](/learn/your-first-component)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Your first component ](#your-first-component)
  * [Importing and exporting components ](#importing-and-exporting-components)
  * [Writing markup with JSX ](#writing-markup-with-jsx)
  * [JavaScript in JSX with curly braces ](#javascript-in-jsx-with-curly-braces)
  * [Passing props to a component ](#passing-props-to-a-component)
  * [Conditional rendering ](#conditional-rendering)
  * [Rendering lists ](#rendering-lists)
  * [Keeping components pure ](#keeping-components-pure)
  * [Your UI as a tree ](#your-ui-as-a-tree)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Adding Interactivity[](#undefined "Link for this heading")

Some things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is called _state._ You can add state to any component, and update it as needed. In this chapter, you’ll learn how to write components that handle interactions, update their state, and display different output over time.

### In this chapter

  * [How to handle user-initiated events](/learn/responding-to-events)
  * [How to make components “remember” information with state](/learn/state-a-components-memory)
  * [How React updates the UI in two phases](/learn/render-and-commit)
  * [Why state doesn’t update right after you change it](/learn/state-as-a-snapshot)
  * [How to queue multiple state updates](/learn/queueing-a-series-of-state-updates)
  * [How to update an object in state](/learn/updating-objects-in-state)
  * [How to update an array in state](/learn/updating-arrays-in-state)



## Responding to events [](#responding-to-events "Link for Responding to events ")

React lets you add _event handlers_ to your JSX. Event handlers are your own functions that will be triggered in response to user interactions like clicking, hovering, focusing on form inputs, and so on.

Built-in components like `<button>` only support built-in browser events like `onClick`. However, you can also create your own components, and give their event handler props any application-specific names that you like.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
export default function App() {
 return (
  <Toolbar
   onPlayMovie={() => alert('Playing!')}
   onUploadImage={() => alert('Uploading!')}
  />
 );
}
function Toolbar({ onPlayMovie, onUploadImage }) {
 return (
  <div>
   <Button onClick={onPlayMovie}>
    Play Movie
   </Button>
   <Button onClick={onUploadImage}>
    Upload Image
   </Button>
  </div>
 );
}
function Button({ onClick, children }) {
 return (
  <button onClick={onClick}>
   {children}
  </button>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Responding to Events](/learn/responding-to-events)** to learn how to add event handlers.

[Read More](/learn/responding-to-events)

## State: a component’s memory [](#state-a-components-memory "Link for State: a component’s memory ")

Components often need to change what’s on the screen as a result of an interaction. Typing into the form should update the input field, clicking “next” on an image carousel should change which image is displayed, clicking “buy” puts a product in the shopping cart. Components need to “remember” things: the current input value, the current image, the shopping cart. In React, this kind of component-specific memory is called _state._

You can add state to a component with a `useState`[](/reference/react/useState) Hook. _Hooks_ are special functions that let your components use React features (state is one of those features). The `useState` Hook lets you declare a state variable. It takes the initial state and returns a pair of values: the current state, and a state setter function that lets you update it.

```


const [index, setIndex] = useState(0);

const [showMore, setShowMore] = useState(false);


```


Here is how an image gallery uses and updates state on click:

App.jsdata.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
import { sculptureList } from './data.js';
export default function Gallery() {
 const [index, setIndex] = useState(0);
 const [showMore, setShowMore] = useState(false);
 const hasNext = index < sculptureList.length - 1;
 function handleNextClick() {
  if (hasNext) {
   setIndex(index + 1);
  } else {
   setIndex(0);
  }
 }
 function handleMoreClick() {
  setShowMore(!showMore);
 }
 let sculpture = sculptureList[index];
 return (
  <>
   <button onClick={handleNextClick}>
    Next
   </button>
   <h2>
    <i>{sculpture.name} </i>
    by {sculpture.artist}
   </h2>
   <h3>
    ({index + 1} of {sculptureList.length})
   </h3>
   <button onClick={handleMoreClick}>
    {showMore ? 'Hide' : 'Show'} details
   </button>
   {showMore && <p>{sculpture.description}</p>}
   <img
    src={sculpture.url}
    alt={sculpture.alt}
   />
  </>
 );
}

```


Show more

## Ready to learn this topic?

Read **[State: A Component’s Memory](/learn/state-a-components-memory)** to learn how to remember a value and update it on interaction.

[Read More](/learn/state-a-components-memory)

## Render and commit [](#render-and-commit "Link for Render and commit ")

Before your components are displayed on the screen, they must be rendered by React. Understanding the steps in this process will help you think about how your code executes and explain its behavior.

Imagine that your components are cooks in the kitchen, assembling tasty dishes from ingredients. In this scenario, React is the waiter who puts in requests from customers and brings them their orders. This process of requesting and serving UI has three steps:

  1. **Triggering** a render (delivering the diner’s order to the kitchen)
  2. **Rendering** the component (preparing the order in the kitchen)
  3. **Committing** to the DOM (placing the order on the table)



  1. Trigger
  2. Render
  3. Commit



Illustrated by [Rachel Lee Nabors](https://nearestnabors.com/)

## Ready to learn this topic?

Read **[Render and Commit](/learn/render-and-commit)** to learn the lifecycle of a UI update.

[Read More](/learn/render-and-commit)

## State as a snapshot [](#state-as-a-snapshot "Link for State as a snapshot ")

Unlike regular JavaScript variables, React state behaves more like a snapshot. Setting it does not change the state variable you already have, but instead triggers a re-render. This can be surprising at first!

```


console.log(count); // 0

setCount(count + 1); // Request a re-render with 1

console.log(count); // Still 0!


```


This behavior helps you avoid subtle bugs. Here is a little chat app. Try to guess what happens if you press “Send” first and _then_ change the recipient to Bob. Whose name will appear in the `alert` five seconds later?

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [to, setTo] = useState('Alice');
 const [message, setMessage] = useState('Hello');
 function handleSubmit(e) {
  e.preventDefault();
  setTimeout(() => {
   alert(`You said ${message} to ${to}`);
  }, 5000);
 }
 return (
  <form onSubmit={handleSubmit}>
   <label>
    To:{' '}
    <select
     value={to}
     onChange={e => setTo(e.target.value)}>
     <option value="Alice">Alice</option>
     <option value="Bob">Bob</option>
    </select>
   </label>
   <textarea
    placeholder="Message"
    value={message}
    onChange={e => setMessage(e.target.value)}
   />
   <button type="submit">Send</button>
  </form>
 );
}

```


Show more

## Ready to learn this topic?

Read **[State as a Snapshot](/learn/state-as-a-snapshot)** to learn why state appears “fixed” and unchanging inside the event handlers.

[Read More](/learn/state-as-a-snapshot)

## Queueing a series of state updates [](#queueing-a-series-of-state-updates "Link for Queueing a series of state updates ")

This component is buggy: clicking “+3” increments the score only once.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Counter() {
 const [score, setScore] = useState(0);
 function increment() {
  setScore(score + 1);
 }
 return (
  <>
   <button onClick={() => increment()}>+1</button>
   <button onClick={() => {
    increment();
    increment();
    increment();
   }}>+3</button>
   <h1>Score: {score}</h1>
  </>
 )
}

```


Show more

[State as a Snapshot](/learn/state-as-a-snapshot) explains why this is happening. Setting state requests a new re-render, but does not change it in the already running code. So `score` continues to be `0` right after you call `setScore(score + 1)`.

```


console.log(score); // 0

setScore(score + 1); // setScore(0 + 1);

console.log(score); // 0

setScore(score + 1); // setScore(0 + 1);

console.log(score); // 0

setScore(score + 1); // setScore(0 + 1);

console.log(score); // 0


```


You can fix this by passing an _updater function_ when setting state. Notice how replacing `setScore(score + 1)` with `setScore(s => s + 1)` fixes the “+3” button. This lets you queue multiple state updates.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Counter() {
 const [score, setScore] = useState(0);
 function increment() {
  setScore(s => s + 1);
 }
 return (
  <>
   <button onClick={() => increment()}>+1</button>
   <button onClick={() => {
    increment();
    increment();
    increment();
   }}>+3</button>
   <h1>Score: {score}</h1>
  </>
 )
}

```


Show more

## Ready to learn this topic?

Read **[Queueing a Series of State Updates](/learn/queueing-a-series-of-state-updates)** to learn how to queue a sequence of state updates.

[Read More](/learn/queueing-a-series-of-state-updates)

## Updating objects in state [](#updating-objects-in-state "Link for Updating objects in state ")

State can hold any kind of JavaScript value, including objects. But you shouldn’t change objects and arrays that you hold in the React state directly. Instead, when you want to update an object and array, you need to create a new one (or make a copy of an existing one), and then update the state to use that copy.

Usually, you will use the `...` spread syntax to copy objects and arrays that you want to change. For example, updating a nested object could look like this:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [person, setPerson] = useState({
  name: 'Niki de Saint Phalle',
  artwork: {
   title: 'Blue Nana',
   city: 'Hamburg',
   image: 'https://i.imgur.com/Sd1AgUOm.jpg',
  }
 });
 function handleNameChange(e) {
  setPerson({
   ...person,
   name: e.target.value
  });
 }
 function handleTitleChange(e) {
  setPerson({
   ...person,
   artwork: {
    ...person.artwork,
    title: e.target.value
   }
  });
 }
 function handleCityChange(e) {
  setPerson({
   ...person,
   artwork: {
    ...person.artwork,
    city: e.target.value
   }
  });
 }
 function handleImageChange(e) {
  setPerson({
   ...person,
   artwork: {
    ...person.artwork,
    image: e.target.value
   }
  });
 }
 return (
  <>
   <label>
    Name:
    <input
     value={person.name}
     onChange={handleNameChange}
    />
   </label>
   <label>
    Title:
    <input
     value={person.artwork.title}
     onChange={handleTitleChange}
    />
   </label>
   <label>
    City:
    <input
     value={person.artwork.city}
     onChange={handleCityChange}
    />
   </label>
   <label>
    Image:
    <input
     value={person.artwork.image}
     onChange={handleImageChange}
    />
   </label>
   <p>
    <i>{person.artwork.title}</i>
    {' by '}
    {person.name}
    <br />
    (located in {person.artwork.city})
   </p>
   <img
    src={person.artwork.image}
    alt={person.artwork.title}
   />
  </>
 );
}

```


Show more

If copying objects in code gets tedious, you can use a library like [Immer](https://github.com/immerjs/use-immer) to reduce repetitive code:

package.jsonApp.js

package.json

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
{
 "dependencies": {
  "immer": "1.7.3",
  "react": "latest",
  "react-dom": "latest",
  "react-scripts": "latest",
  "use-immer": "0.5.1"
 },
 "scripts": {
  "start": "react-scripts start",
  "build": "react-scripts build",
  "test": "react-scripts test --env=jsdom",
  "eject": "react-scripts eject"
 },
 "devDependencies": {}
}
```


## Ready to learn this topic?

Read **[Updating Objects in State](/learn/updating-objects-in-state)** to learn how to update objects correctly.

[Read More](/learn/updating-objects-in-state)

## Updating arrays in state [](#updating-arrays-in-state "Link for Updating arrays in state ")

Arrays are another type of mutable JavaScript objects you can store in state and should treat as read-only. Just like with objects, when you want to update an array stored in state, you need to create a new one (or make a copy of an existing one), and then set state to use the new array:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
const initialList = [
 { id: 0, title: 'Big Bellies', seen: false },
 { id: 1, title: 'Lunar Landscape', seen: false },
 { id: 2, title: 'Terracotta Army', seen: true },
];
export default function BucketList() {
 const [list, setList] = useState(
  initialList
 );
 function handleToggle(artworkId, nextSeen) {
  setList(list.map(artwork => {
   if (artwork.id === artworkId) {
    return { ...artwork, seen: nextSeen };
   } else {
    return artwork;
   }
  }));
 }
 return (
  <>
   <h1>Art Bucket List</h1>
   <h2>My list of art to see:</h2>
   <ItemList
    artworks={list}
    onToggle={handleToggle} />
  </>
 );
}
function ItemList({ artworks, onToggle }) {
 return (
  <ul>
   {artworks.map(artwork => (
    <li key={artwork.id}>
     <label>
      <input
       type="checkbox"
       checked={artwork.seen}
       onChange={e => {
        onToggle(
         artwork.id,
         e.target.checked
        );
       }}
      />
      {artwork.title}
     </label>
    </li>
   ))}
  </ul>
 );
}

```


Show more

If copying arrays in code gets tedious, you can use a library like [Immer](https://github.com/immerjs/use-immer) to reduce repetitive code:

package.jsonApp.js

package.json

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
{
 "dependencies": {
  "immer": "1.7.3",
  "react": "latest",
  "react-dom": "latest",
  "react-scripts": "latest",
  "use-immer": "0.5.1"
 },
 "scripts": {
  "start": "react-scripts start",
  "build": "react-scripts build",
  "test": "react-scripts test --env=jsdom",
  "eject": "react-scripts eject"
 },
 "devDependencies": {}
}
```


## Ready to learn this topic?

Read **[Updating Arrays in State](/learn/updating-arrays-in-state)** to learn how to update arrays correctly.

[Read More](/learn/updating-arrays-in-state)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Responding to Events](/learn/responding-to-events) to start reading this chapter page by page!

Or, if you’re already familiar with these topics, why not read about [Managing State](/learn/managing-state)?

[PreviousYour UI as a Tree](/learn/understanding-your-ui-as-a-tree)[NextResponding to Events](/learn/responding-to-events)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Responding to events ](#responding-to-events)
  * [State: a component’s memory ](#state-a-components-memory)
  * [Render and commit ](#render-and-commit)
  * [State as a snapshot ](#state-as-a-snapshot)
  * [Queueing a series of state updates ](#queueing-a-series-of-state-updates)
  * [Updating objects in state ](#updating-objects-in-state)
  * [Updating arrays in state ](#updating-arrays-in-state)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Managing State[](#undefined "Link for this heading")

Intermediate

As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you’ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.

### In this chapter

  * [How to think about UI changes as state changes](/learn/reacting-to-input-with-state)
  * [How to structure state well](/learn/choosing-the-state-structure)
  * [How to “lift state up” to share it between components](/learn/sharing-state-between-components)
  * [How to control whether the state gets preserved or reset](/learn/preserving-and-resetting-state)
  * [How to consolidate complex state logic in a function](/learn/extracting-state-logic-into-a-reducer)
  * [How to pass information without “prop drilling”](/learn/passing-data-deeply-with-context)
  * [How to scale state management as your app grows](/learn/scaling-up-with-reducer-and-context)



## Reacting to input with state [](#reacting-to-input-with-state "Link for Reacting to input with state ")

With React, you won’t modify the UI from code directly. For example, you won’t write commands like “disable the button”, “enable the button”, “show the success message”, etc. Instead, you will describe the UI you want to see for the different visual states of your component (“initial state”, “typing state”, “success state”), and then trigger the state changes in response to user input. This is similar to how designers think about UI.

Here is a quiz form built using React. Note how it uses the `status` state variable to determine whether to enable or disable the submit button, and whether to show the success message instead.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [answer, setAnswer] = useState('');
 const [error, setError] = useState(null);
 const [status, setStatus] = useState('typing');
 if (status === 'success') {
  return <h1>That's right!</h1>
 }
 async function handleSubmit(e) {
  e.preventDefault();
  setStatus('submitting');
  try {
   await submitForm(answer);
   setStatus('success');
  } catch (err) {
   setStatus('typing');
   setError(err);
  }
 }
 function handleTextareaChange(e) {
  setAnswer(e.target.value);
 }
 return (
  <>
   <h2>City quiz</h2>
   <p>
    In which city is there a billboard that turns air into drinkable water?
   </p>
   <form onSubmit={handleSubmit}>
    <textarea
     value={answer}
     onChange={handleTextareaChange}
     disabled={status === 'submitting'}
    />
    <br />
    <button disabled={
     answer.length === 0 ||
     status === 'submitting'
    }>
     Submit
    </button>
    {error !== null &&
     <p className="Error">
      {error.message}
     </p>
    }
   </form>
  </>
 );
}
function submitForm(answer) {
 // Pretend it's hitting the network.
 return new Promise((resolve, reject) => {
  setTimeout(() => {
   let shouldError = answer.toLowerCase() !== 'lima'
   if (shouldError) {
    reject(new Error('Good guess but a wrong answer. Try again!'));
   } else {
    resolve();
   }
  }, 1500);
 });
}

```


Show more

## Ready to learn this topic?

Read **[Reacting to Input with State](/learn/reacting-to-input-with-state)** to learn how to approach interactions with a state-driven mindset.

[Read More](/learn/reacting-to-input-with-state)

## Choosing the state structure [](#choosing-the-state-structure "Link for Choosing the state structure ")

Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. The most important principle is that state shouldn’t contain redundant or duplicated information. If there’s unnecessary state, it’s easy to forget to update it, and introduce bugs!

For example, this form has a **redundant** `fullName` state variable:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [firstName, setFirstName] = useState('');
 const [lastName, setLastName] = useState('');
 const [fullName, setFullName] = useState('');
 function handleFirstNameChange(e) {
  setFirstName(e.target.value);
  setFullName(e.target.value + ' ' + lastName);
 }
 function handleLastNameChange(e) {
  setLastName(e.target.value);
  setFullName(firstName + ' ' + e.target.value);
 }
 return (
  <>
   <h2>Let’s check you in</h2>
   <label>
    First name:{' '}
    <input
     value={firstName}
     onChange={handleFirstNameChange}
    />
   </label>
   <label>
    Last name:{' '}
    <input
     value={lastName}
     onChange={handleLastNameChange}
    />
   </label>
   <p>
    Your ticket will be issued to: <b>{fullName}</b>
   </p>
  </>
 );
}

```


Show more

You can remove it and simplify the code by calculating `fullName` while the component is rendering:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [firstName, setFirstName] = useState('');
 const [lastName, setLastName] = useState('');
 const fullName = firstName + ' ' + lastName;
 function handleFirstNameChange(e) {
  setFirstName(e.target.value);
 }
 function handleLastNameChange(e) {
  setLastName(e.target.value);
 }
 return (
  <>
   <h2>Let’s check you in</h2>
   <label>
    First name:{' '}
    <input
     value={firstName}
     onChange={handleFirstNameChange}
    />
   </label>
   <label>
    Last name:{' '}
    <input
     value={lastName}
     onChange={handleLastNameChange}
    />
   </label>
   <p>
    Your ticket will be issued to: <b>{fullName}</b>
   </p>
  </>
 );
}

```


Show more

This might seem like a small change, but many bugs in React apps are fixed this way.

## Ready to learn this topic?

Read **[Choosing the State Structure](/learn/choosing-the-state-structure)** to learn how to design the state shape to avoid bugs.

[Read More](/learn/choosing-the-state-structure)

## Sharing state between components [](#sharing-state-between-components "Link for Sharing state between components ")

Sometimes, you want the state of two components to always change together. To do it, remove state from both of them, move it to their closest common parent, and then pass it down to them via props. This is known as “lifting state up”, and it’s one of the most common things you will do writing React code.

In this example, only one panel should be active at a time. To achieve this, instead of keeping the active state inside each individual panel, the parent component holds the state and specifies the props for its children.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Accordion() {
 const [activeIndex, setActiveIndex] = useState(0);
 return (
  <>
   <h2>Almaty, Kazakhstan</h2>
   <Panel
    title="About"
    isActive={activeIndex === 0}
    onShow={() => setActiveIndex(0)}
   >
    With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.
   </Panel>
   <Panel
    title="Etymology"
    isActive={activeIndex === 1}
    onShow={() => setActiveIndex(1)}
   >
    The name comes from <span lang="kk-KZ">алма</span>, the Kazakh word for "apple" and is often translated as "full of apples". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang="la">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.
   </Panel>
  </>
 );
}
function Panel({
 title,
 children,
 isActive,
 onShow
}) {
 return (
  <section className="panel">
   <h3>{title}</h3>
   {isActive ? (
    <p>{children}</p>
   ) : (
    <button onClick={onShow}>
     Show
    </button>
   )}
  </section>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Sharing State Between Components](/learn/sharing-state-between-components)** to learn how to lift state up and keep components in sync.

[Read More](/learn/sharing-state-between-components)

## Preserving and resetting state [](#preserving-and-resetting-state "Link for Preserving and resetting state ")

When you re-render a component, React needs to decide which parts of the tree to keep (and update), and which parts to discard or re-create from scratch. In most cases, React’s automatic behavior works well enough. By default, React preserves the parts of the tree that “match up” with the previously rendered component tree.

However, sometimes this is not what you want. In this chat app, typing a message and then switching the recipient does not reset the input. This can make the user accidentally send a message to the wrong person:

App.jsContactList.jsChat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
import Chat from './Chat.js';
import ContactList from './ContactList.js';
export default function Messenger() {
 const [to, setTo] = useState(contacts[0]);
 return (
  <div>
   <ContactList
    contacts={contacts}
    selectedContact={to}
    onSelect={contact => setTo(contact)}
   />
   <Chat contact={to} />
  </div>
 )
}
const contacts = [
 { name: 'Taylor', email: 'taylor@mail.com' },
 { name: 'Alice', email: 'alice@mail.com' },
 { name: 'Bob', email: 'bob@mail.com' }
];

```


Show more

React lets you override the default behavior, and _force_ a component to reset its state by passing it a different `key`, like `<Chat key={email} />`. This tells React that if the recipient is different, it should be considered a _different_ `Chat` component that needs to be re-created from scratch with the new data (and UI like inputs). Now switching between the recipients resets the input field—even though you render the same component.

App.jsContactList.jsChat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
import Chat from './Chat.js';
import ContactList from './ContactList.js';
export default function Messenger() {
 const [to, setTo] = useState(contacts[0]);
 return (
  <div>
   <ContactList
    contacts={contacts}
    selectedContact={to}
    onSelect={contact => setTo(contact)}
   />
   <Chat key={to.email} contact={to} />
  </div>
 )
}
const contacts = [
 { name: 'Taylor', email: 'taylor@mail.com' },
 { name: 'Alice', email: 'alice@mail.com' },
 { name: 'Bob', email: 'bob@mail.com' }
];

```


Show more

## Ready to learn this topic?

Read **[Preserving and Resetting State](/learn/preserving-and-resetting-state)** to learn the lifetime of state and how to control it.

[Read More](/learn/preserving-and-resetting-state)

## Extracting state logic into a reducer [](#extracting-state-logic-into-a-reducer "Link for Extracting state logic into a reducer ")

Components with many state updates spread across many event handlers can get overwhelming. For these cases, you can consolidate all the state update logic outside your component in a single function, called “reducer”. Your event handlers become concise because they only specify the user “actions”. At the bottom of the file, the reducer function specifies how the state should update in response to each action!

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useReducer } from 'react';
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';
export default function TaskApp() {
 const [tasks, dispatch] = useReducer(
  tasksReducer,
  initialTasks
 );
 function handleAddTask(text) {
  dispatch({
   type: 'added',
   id: nextId++,
   text: text,
  });
 }
 function handleChangeTask(task) {
  dispatch({
   type: 'changed',
   task: task
  });
 }
 function handleDeleteTask(taskId) {
  dispatch({
   type: 'deleted',
   id: taskId
  });
 }
 return (
  <>
   <h1>Prague itinerary</h1>
   <AddTask
    onAddTask={handleAddTask}
   />
   <TaskList
    tasks={tasks}
    onChangeTask={handleChangeTask}
    onDeleteTask={handleDeleteTask}
   />
  </>
 );
}
function tasksReducer(tasks, action) {
 switch (action.type) {
  case 'added': {
   return [...tasks, {
    id: action.id,
    text: action.text,
    done: false
   }];
  }
  case 'changed': {
   return tasks.map(t => {
    if (t.id === action.task.id) {
     return action.task;
    } else {
     return t;
    }
   });
  }
  case 'deleted': {
   return tasks.filter(t => t.id !== action.id);
  }
  default: {
   throw Error('Unknown action: ' + action.type);
  }
 }
}
let nextId = 3;
const initialTasks = [
 { id: 0, text: 'Visit Kafka Museum', done: true },
 { id: 1, text: 'Watch a puppet show', done: false },
 { id: 2, text: 'Lennon Wall pic', done: false }
];

```


Show more

## Ready to learn this topic?

Read **[Extracting State Logic into a Reducer](/learn/extracting-state-logic-into-a-reducer)** to learn how to consolidate logic in the reducer function.

[Read More](/learn/extracting-state-logic-into-a-reducer)

## Passing data deeply with context [](#passing-data-deeply-with-context "Link for Passing data deeply with context ")

Usually, you will pass information from a parent component to a child component via props. But passing props can become inconvenient if you need to pass some prop through many components, or if many components need the same information. Context lets the parent component make some information available to any component in the tree below it—no matter how deep it is—without passing it explicitly through props.

Here, the `Heading` component determines its heading level by “asking” the closest `Section` for its level. Each `Section` tracks its own level by asking the parent `Section` and adding one to it. Every `Section` provides information to all components below it without passing props—it does that through context.

App.jsSection.jsHeading.jsLevelContext.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import Heading from './Heading.js';
import Section from './Section.js';
export default function Page() {
 return (
  <Section>
   <Heading>Title</Heading>
   <Section>
    <Heading>Heading</Heading>
    <Heading>Heading</Heading>
    <Heading>Heading</Heading>
    <Section>
     <Heading>Sub-heading</Heading>
     <Heading>Sub-heading</Heading>
     <Heading>Sub-heading</Heading>
     <Section>
      <Heading>Sub-sub-heading</Heading>
      <Heading>Sub-sub-heading</Heading>
      <Heading>Sub-sub-heading</Heading>
     </Section>
    </Section>
   </Section>
  </Section>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Passing Data Deeply with Context](/learn/passing-data-deeply-with-context)** to learn about using context as an alternative to passing props.

[Read More](/learn/passing-data-deeply-with-context)

## Scaling up with reducer and context [](#scaling-up-with-reducer-and-context "Link for Scaling up with reducer and context ")

Reducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.

With this approach, a parent component with complex state manages it with a reducer. Other components anywhere deep in the tree can read its state via context. They can also dispatch actions to update that state.

App.jsTasksContext.jsAddTask.jsTaskList.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';
import { TasksProvider } from './TasksContext.js';
export default function TaskApp() {
 return (
  <TasksProvider>
   <h1>Day off in Kyoto</h1>
   <AddTask />
   <TaskList />
  </TasksProvider>
 );
}

```


## Ready to learn this topic?

Read **[Scaling Up with Reducer and Context](/learn/scaling-up-with-reducer-and-context)** to learn how state management scales in a growing app.

[Read More](/learn/scaling-up-with-reducer-and-context)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Reacting to Input with State](/learn/reacting-to-input-with-state) to start reading this chapter page by page!

Or, if you’re already familiar with these topics, why not read about [Escape Hatches](/learn/escape-hatches)?

[PreviousUpdating Arrays in State](/learn/updating-arrays-in-state)[NextReacting to Input with State](/learn/reacting-to-input-with-state)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Reacting to input with state ](#reacting-to-input-with-state)
  * [Choosing the state structure ](#choosing-the-state-structure)
  * [Sharing state between components ](#sharing-state-between-components)
  * [Preserving and resetting state ](#preserving-and-resetting-state)
  * [Extracting state logic into a reducer ](#extracting-state-logic-into-a-reducer)
  * [Passing data deeply with context ](#passing-data-deeply-with-context)
  * [Scaling up with reducer and context ](#scaling-up-with-reducer-and-context)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Escape Hatches[](#undefined "Link for this heading")

Advanced

Some of your components may need to control and synchronize with systems outside of React. For example, you might need to focus an input using the browser API, play and pause a video player implemented without React, or connect and listen to messages from a remote server. In this chapter, you’ll learn the escape hatches that let you “step outside” React and connect to external systems. Most of your application logic and data flow should not rely on these features.

### In this chapter

  * [How to “remember” information without re-rendering](/learn/referencing-values-with-refs)
  * [How to access DOM elements managed by React](/learn/manipulating-the-dom-with-refs)
  * [How to synchronize components with external systems](/learn/synchronizing-with-effects)
  * [How to remove unnecessary Effects from your components](/learn/you-might-not-need-an-effect)
  * [How an Effect’s lifecycle is different from a component’s](/learn/lifecycle-of-reactive-effects)
  * [How to prevent some values from re-triggering Effects](/learn/separating-events-from-effects)
  * [How to make your Effect re-run less often](/learn/removing-effect-dependencies)
  * [How to share logic between components](/learn/reusing-logic-with-custom-hooks)



## Referencing values with refs [](#referencing-values-with-refs "Link for Referencing values with refs ")

When you want a component to “remember” some information, but you don’t want that information to [trigger new renders](/learn/render-and-commit), you can use a _ref_ :

```


const ref = useRef(0);


```


Like state, refs are retained by React between re-renders. However, setting state re-renders a component. Changing a ref does not! You can access the current value of that ref through the `ref.current` property.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useRef } from 'react';
export default function Counter() {
 let ref = useRef(0);
 function handleClick() {
  ref.current = ref.current + 1;
  alert('You clicked ' + ref.current + ' times!');
 }
 return (
  <button onClick={handleClick}>
   Click me!
  </button>
 );
}

```


Show more

A ref is like a secret pocket of your component that React doesn’t track. For example, you can use refs to store [timeout IDs](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#return_value), [DOM elements](https://developer.mozilla.org/en-US/docs/Web/API/Element), and other objects that don’t impact the component’s rendering output.

## Ready to learn this topic?

Read **[Referencing Values with Refs](/learn/referencing-values-with-refs)** to learn how to use refs to remember information.

[Read More](/learn/referencing-values-with-refs)

## Manipulating the DOM with refs [](#manipulating-the-dom-with-refs "Link for Manipulating the DOM with refs ")

React automatically updates the DOM to match your render output, so your components won’t often need to manipulate it. However, sometimes you might need access to the DOM elements managed by React—for example, to focus a node, scroll to it, or measure its size and position. There is no built-in way to do those things in React, so you will need a ref to the DOM node. For example, clicking the button will focus the input using a ref:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useRef } from 'react';
export default function Form() {
 const inputRef = useRef(null);
 function handleClick() {
  inputRef.current.focus();
 }
 return (
  <>
   <input ref={inputRef} />
   <button onClick={handleClick}>
    Focus the input
   </button>
  </>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Manipulating the DOM with Refs](/learn/manipulating-the-dom-with-refs)** to learn how to access DOM elements managed by React.

[Read More](/learn/manipulating-the-dom-with-refs)

## Synchronizing with Effects [](#synchronizing-with-effects "Link for Synchronizing with Effects ")

Some components need to synchronize with external systems. For example, you might want to control a non-React component based on the React state, set up a server connection, or send an analytics log when a component appears on the screen. Unlike event handlers, which let you handle particular events, _Effects_ let you run some code after rendering. Use them to synchronize your component with a system outside of React.

Press Play/Pause a few times and see how the video player stays synchronized to the `isPlaying` prop value:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useRef, useEffect } from 'react';
function VideoPlayer({ src, isPlaying }) {
 const ref = useRef(null);
 useEffect(() => {
  if (isPlaying) {
   ref.current.play();
  } else {
   ref.current.pause();
  }
 }, [isPlaying]);
 return <video ref={ref} src={src} loop playsInline />;
}
export default function App() {
 const [isPlaying, setIsPlaying] = useState(false);
 return (
  <>
   <button onClick={() => setIsPlaying(!isPlaying)}>
    {isPlaying ? 'Pause' : 'Play'}
   </button>
   <VideoPlayer
    isPlaying={isPlaying}
    src="https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4"
   />
  </>
 );
}

```


Show more

Many Effects also “clean up” after themselves. For example, an Effect that sets up a connection to a chat server should return a _cleanup function_ that tells React how to disconnect your component from that server:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
export default function ChatRoom() {
 useEffect(() => {
  const connection = createConnection();
  connection.connect();
  return () => connection.disconnect();
 }, []);
 return <h1>Welcome to the chat!</h1>;
}

```


In development, React will immediately run and clean up your Effect one extra time. This is why you see `"✅ Connecting..."` printed twice. This ensures that you don’t forget to implement the cleanup function.

## Ready to learn this topic?

Read **[Synchronizing with Effects](/learn/synchronizing-with-effects)** to learn how to synchronize components with external systems.

[Read More](/learn/synchronizing-with-effects)

## You Might Not Need An Effect [](#you-might-not-need-an-effect "Link for You Might Not Need An Effect ")

Effects are an escape hatch from the React paradigm. They let you “step outside” of React and synchronize your components with some external system. If there is no external system involved (for example, if you want to update a component’s state when some props or state change), you shouldn’t need an Effect. Removing unnecessary Effects will make your code easier to follow, faster to run, and less error-prone.

There are two common cases in which you don’t need Effects:

  * **You don’t need Effects to transform data for rendering.**
  * **You don’t need Effects to handle user events.**



For example, you don’t need an Effect to adjust some state based on other state:

```


function Form() {

 const [firstName, setFirstName] = useState('Taylor');

 const [lastName, setLastName] = useState('Swift');

 // 🔴 Avoid: redundant state and unnecessary Effect

 const [fullName, setFullName] = useState('');

 useEffect(() => {

  setFullName(firstName + ' ' + lastName);

 }, [firstName, lastName]);

 // ...

}


```


Instead, calculate as much as you can while rendering:

```


function Form() {

 const [firstName, setFirstName] = useState('Taylor');

 const [lastName, setLastName] = useState('Swift');

 // ✅ Good: calculated during rendering

 const fullName = firstName + ' ' + lastName;

 // ...

}


```


However, you _do_ need Effects to synchronize with external systems.

## Ready to learn this topic?

Read **[You Might Not Need an Effect](/learn/you-might-not-need-an-effect)** to learn how to remove unnecessary Effects.

[Read More](/learn/you-might-not-need-an-effect)

## Lifecycle of reactive effects [](#lifecycle-of-reactive-effects "Link for Lifecycle of reactive effects ")

Effects have a different lifecycle from components. Components may mount, update, or unmount. An Effect can only do two things: to start synchronizing something, and later to stop synchronizing it. This cycle can happen multiple times if your Effect depends on props and state that change over time.

This Effect depends on the value of the `roomId` prop. Props are _reactive values,_ which means they can change on a re-render. Notice that the Effect _re-synchronizes_ (and re-connects to the server) if `roomId` changes:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId }) {
 useEffect(() => {
  const connection = createConnection(serverUrl, roomId);
  connection.connect();
  return () => connection.disconnect();
 }, [roomId]);
 return <h1>Welcome to the {roomId} room!</h1>;
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <hr />
   <ChatRoom roomId={roomId} />
  </>
 );
}

```


Show more

React provides a linter rule to check that you’ve specified your Effect’s dependencies correctly. If you forget to specify `roomId` in the list of dependencies in the above example, the linter will find that bug automatically.

## Ready to learn this topic?

Read **[Lifecycle of Reactive Events](/learn/lifecycle-of-reactive-effects)** to learn how an Effect’s lifecycle is different from a component’s.

[Read More](/learn/lifecycle-of-reactive-effects)

## Separating events from Effects [](#separating-events-from-effects "Link for Separating events from Effects ")

### Under Construction

This section describes an **experimental API that has not yet been released** in a stable version of React.

Event handlers only re-run when you perform the same interaction again. Unlike event handlers, Effects re-synchronize if any of the values they read, like props or state, are different than during last render. Sometimes, you want a mix of both behaviors: an Effect that re-runs in response to some values but not others.

All code inside Effects is _reactive._ It will run again if some reactive value it reads has changed due to a re-render. For example, this Effect will re-connect to the chat if either `roomId` or `theme` have changed:

App.jschat.jsnotifications.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection, sendMessage } from './chat.js';
import { showNotification } from './notifications.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId, theme }) {
 useEffect(() => {
  const connection = createConnection(serverUrl, roomId);
  connection.on('connected', () => {
   showNotification('Connected!', theme);
  });
  connection.connect();
  return () => connection.disconnect();
 }, [roomId, theme]);
 return <h1>Welcome to the {roomId} room!</h1>
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 const [isDark, setIsDark] = useState(false);
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <label>
    <input
     type="checkbox"
     checked={isDark}
     onChange={e => setIsDark(e.target.checked)}
    />
    Use dark theme
   </label>
   <hr />
   <ChatRoom
    roomId={roomId}
    theme={isDark ? 'dark' : 'light'} 
   />
  </>
 );
}

```


Show more

This is not ideal. You want to re-connect to the chat only if the `roomId` has changed. Switching the `theme` shouldn’t re-connect to the chat! Move the code reading `theme` out of your Effect into an _Effect Event_ :

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { experimental_useEffectEvent as useEffectEvent } from 'react';
import { createConnection, sendMessage } from './chat.js';
import { showNotification } from './notifications.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId, theme }) {
 const onConnected = useEffectEvent(() => {
  showNotification('Connected!', theme);
 });
 useEffect(() => {
  const connection = createConnection(serverUrl, roomId);
  connection.on('connected', () => {
   onConnected();
  });
  connection.connect();
  return () => connection.disconnect();
 }, [roomId]);
 return <h1>Welcome to the {roomId} room!</h1>
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 const [isDark, setIsDark] = useState(false);
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <label>
    <input
     type="checkbox"
     checked={isDark}
     onChange={e => setIsDark(e.target.checked)}
    />
    Use dark theme
   </label>
   <hr />
   <ChatRoom
    roomId={roomId}
    theme={isDark ? 'dark' : 'light'} 
   />
  </>
 );
}

```


Show more

Code inside Effect Events isn’t reactive, so changing the `theme` no longer makes your Effect re-connect.

## Ready to learn this topic?

Read **[Separating Events from Effects](/learn/separating-events-from-effects)** to learn how to prevent some values from re-triggering Effects.

[Read More](/learn/separating-events-from-effects)

## Removing Effect dependencies [](#removing-effect-dependencies "Link for Removing Effect dependencies ")

When you write an Effect, the linter will verify that you’ve included every reactive value (like props and state) that the Effect reads in the list of your Effect’s dependencies. This ensures that your Effect remains synchronized with the latest props and state of your component. Unnecessary dependencies may cause your Effect to run too often, or even create an infinite loop. The way you remove them depends on the case.

For example, this Effect depends on the `options` object which gets re-created every time you edit the input:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId }) {
 const [message, setMessage] = useState('');
 const options = {
  serverUrl: serverUrl,
  roomId: roomId
 };
 useEffect(() => {
  const connection = createConnection(options);
  connection.connect();
  return () => connection.disconnect();
 }, [options]);
 return (
  <>
   <h1>Welcome to the {roomId} room!</h1>
   <input value={message} onChange={e => setMessage(e.target.value)} />
  </>
 );
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <hr />
   <ChatRoom roomId={roomId} />
  </>
 );
}

```


Show more

You don’t want the chat to re-connect every time you start typing a message in that chat. To fix this problem, move creation of the `options` object inside the Effect so that the Effect only depends on the `roomId` string:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId }) {
 const [message, setMessage] = useState('');
 useEffect(() => {
  const options = {
   serverUrl: serverUrl,
   roomId: roomId
  };
  const connection = createConnection(options);
  connection.connect();
  return () => connection.disconnect();
 }, [roomId]);
 return (
  <>
   <h1>Welcome to the {roomId} room!</h1>
   <input value={message} onChange={e => setMessage(e.target.value)} />
  </>
 );
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <hr />
   <ChatRoom roomId={roomId} />
  </>
 );
}

```


Show more

Notice that you didn’t start by editing the dependency list to remove the `options` dependency. That would be wrong. Instead, you changed the surrounding code so that the dependency became _unnecessary._ Think of the dependency list as a list of all the reactive values used by your Effect’s code. You don’t intentionally choose what to put on that list. The list describes your code. To change the dependency list, change the code.

## Ready to learn this topic?

Read **[Removing Effect Dependencies](/learn/removing-effect-dependencies)** to learn how to make your Effect re-run less often.

[Read More](/learn/removing-effect-dependencies)

## Reusing logic with custom Hooks [](#reusing-logic-with-custom-hooks "Link for Reusing logic with custom Hooks ")

React comes with built-in Hooks like `useState`, `useContext`, and `useEffect`. Sometimes, you’ll wish that there was a Hook for some more specific purpose: for example, to fetch data, to keep track of whether the user is online, or to connect to a chat room. To do this, you can create your own Hooks for your application’s needs.

In this example, the `usePointerPosition` custom Hook tracks the cursor position, while `useDelayedValue` custom Hook returns a value that’s “lagging behind” the value you passed by a certain number of milliseconds. Move the cursor over the sandbox preview area to see a moving trail of dots following the cursor:

App.jsusePointerPosition.jsuseDelayedValue.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { usePointerPosition } from './usePointerPosition.js';
import { useDelayedValue } from './useDelayedValue.js';
export default function Canvas() {
 const pos1 = usePointerPosition();
 const pos2 = useDelayedValue(pos1, 100);
 const pos3 = useDelayedValue(pos2, 200);
 const pos4 = useDelayedValue(pos3, 100);
 const pos5 = useDelayedValue(pos4, 50);
 return (
  <>
   <Dot position={pos1} opacity={1} />
   <Dot position={pos2} opacity={0.8} />
   <Dot position={pos3} opacity={0.6} />
   <Dot position={pos4} opacity={0.4} />
   <Dot position={pos5} opacity={0.2} />
  </>
 );
}
function Dot({ position, opacity }) {
 return (
  <div style={{
   position: 'absolute',
   backgroundColor: 'pink',
   borderRadius: '50%',
   opacity,
   transform: `translate(${position.x}px, ${position.y}px)`,
   pointerEvents: 'none',
   left: -20,
   top: -20,
   width: 40,
   height: 40,
  }} />
 );
}

```


Show more

You can create custom Hooks, compose them together, pass data between them, and reuse them between components. As your app grows, you will write fewer Effects by hand because you’ll be able to reuse custom Hooks you already wrote. There are also many excellent custom Hooks maintained by the React community.

## Ready to learn this topic?

Read **[Reusing Logic with Custom Hooks](/learn/reusing-logic-with-custom-hooks)** to learn how to share logic between components.

[Read More](/learn/reusing-logic-with-custom-hooks)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Referencing Values with Refs](/learn/referencing-values-with-refs) to start reading this chapter page by page!

[PreviousScaling Up with Reducer and Context](/learn/scaling-up-with-reducer-and-context)[NextReferencing Values with Refs](/learn/referencing-values-with-refs)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Referencing values with refs ](#referencing-values-with-refs)
  * [Manipulating the DOM with refs ](#manipulating-the-dom-with-refs)
  * [Synchronizing with Effects ](#synchronizing-with-effects)
  * [You Might Not Need An Effect ](#you-might-not-need-an-effect)
  * [Lifecycle of reactive effects ](#lifecycle-of-reactive-effects)
  * [Separating events from Effects ](#separating-events-from-effects)
  * [Removing Effect dependencies ](#removing-effect-dependencies)
  * [Reusing logic with custom Hooks ](#reusing-logic-with-custom-hooks)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### react@19

  * [Overview ](/reference/react "Overview")
  * [Hooks ](/reference/react/hooks "Hooks")

    * [useActionState ](/reference/react/useActionState "useActionState")
    * [useCallback ](/reference/react/useCallback "useCallback")
    * [useContext ](/reference/react/useContext "useContext")
    * [useDebugValue ](/reference/react/useDebugValue "useDebugValue")
    * [useDeferredValue ](/reference/react/useDeferredValue "useDeferredValue")
    * [useEffect ](/reference/react/useEffect "useEffect")
    * [useId ](/reference/react/useId "useId")
    * [useImperativeHandle ](/reference/react/useImperativeHandle "useImperativeHandle")
    * [useInsertionEffect ](/reference/react/useInsertionEffect "useInsertionEffect")
    * [useLayoutEffect ](/reference/react/useLayoutEffect "useLayoutEffect")
    * [useMemo ](/reference/react/useMemo "useMemo")
    * [useOptimistic ](/reference/react/useOptimistic "useOptimistic")
    * [useReducer ](/reference/react/useReducer "useReducer")
    * [useRef ](/reference/react/useRef "useRef")
    * [useState ](/reference/react/useState "useState")
    * [useSyncExternalStore ](/reference/react/useSyncExternalStore "useSyncExternalStore")
    * [useTransition ](/reference/react/useTransition "useTransition")

  * [Components ](/reference/react/components "Components")

    * [<Fragment> (<>) ](/reference/react/Fragment "<Fragment> \(<>\)")
    * [<Profiler> ](/reference/react/Profiler "<Profiler>")
    * [<StrictMode> ](/reference/react/StrictMode "<StrictMode>")
    * [<Suspense> ](/reference/react/Suspense "<Suspense>")

  * [APIs ](/reference/react/apis "APIs")

    * [act ](/reference/react/act "act")
    * [cache ](/reference/react/cache "cache")
    * [createContext ](/reference/react/createContext "createContext")
    * [lazy ](/reference/react/lazy "lazy")
    * [memo ](/reference/react/memo "memo")
    * [startTransition ](/reference/react/startTransition "startTransition")
    * [use ](/reference/react/use "use")
    * [experimental_taintObjectReference  - This feature is available in the latest Canary](/reference/react/experimental_taintObjectReference "experimental_taintObjectReference")
    * [experimental_taintUniqueValue  - This feature is available in the latest Canary](/reference/react/experimental_taintUniqueValue "experimental_taintUniqueValue")

### react-dom@19

  * [Hooks ](/reference/react-dom/hooks "Hooks")

    * [useFormStatus ](/reference/react-dom/hooks/useFormStatus "useFormStatus")

  * [Components ](/reference/react-dom/components "Components")

    * [Common (e.g. <div>) ](/reference/react-dom/components/common "Common \(e.g. <div>\)")
    * [<form> ](/reference/react-dom/components/form "<form>")
    * [<input> ](/reference/react-dom/components/input "<input>")
    * [<option> ](/reference/react-dom/components/option "<option>")
    * [<progress> ](/reference/react-dom/components/progress "<progress>")
    * [<select> ](/reference/react-dom/components/select "<select>")
    * [<textarea> ](/reference/react-dom/components/textarea "<textarea>")
    * [<link> ](/reference/react-dom/components/link "<link>")
    * [<meta> ](/reference/react-dom/components/meta "<meta>")
    * [<script> ](/reference/react-dom/components/script "<script>")
    * [<style> ](/reference/react-dom/components/style "<style>")
    * [<title> ](/reference/react-dom/components/title "<title>")

  * [APIs ](/reference/react-dom "APIs")

    * [createPortal ](/reference/react-dom/createPortal "createPortal")
    * [flushSync ](/reference/react-dom/flushSync "flushSync")
    * [preconnect ](/reference/react-dom/preconnect "preconnect")
    * [prefetchDNS ](/reference/react-dom/prefetchDNS "prefetchDNS")
    * [preinit ](/reference/react-dom/preinit "preinit")
    * [preinitModule ](/reference/react-dom/preinitModule "preinitModule")
    * [preload ](/reference/react-dom/preload "preload")
    * [preloadModule ](/reference/react-dom/preloadModule "preloadModule")

  * [Client APIs ](/reference/react-dom/client "Client APIs")

    * [createRoot ](/reference/react-dom/client/createRoot "createRoot")
    * [hydrateRoot ](/reference/react-dom/client/hydrateRoot "hydrateRoot")

  * [Server APIs ](/reference/react-dom/server "Server APIs")

    * [renderToPipeableStream ](/reference/react-dom/server/renderToPipeableStream "renderToPipeableStream")
    * [renderToReadableStream ](/reference/react-dom/server/renderToReadableStream "renderToReadableStream")
    * [renderToStaticMarkup ](/reference/react-dom/server/renderToStaticMarkup "renderToStaticMarkup")
    * [renderToString ](/reference/react-dom/server/renderToString "renderToString")

  * [Static APIs ](/reference/react-dom/static "Static APIs")

    * [prerender ](/reference/react-dom/static/prerender "prerender")
    * [prerenderToNodeStream ](/reference/react-dom/static/prerenderToNodeStream "prerenderToNodeStream")

### Rules of React

  * [Overview ](/reference/rules "Overview")

    * [Components and Hooks must be pure ](/reference/rules/components-and-hooks-must-be-pure "Components and Hooks must be pure")
    * [React calls Components and Hooks ](/reference/rules/react-calls-components-and-hooks "React calls Components and Hooks")
    * [Rules of Hooks ](/reference/rules/rules-of-hooks "Rules of Hooks")

### React Server Components

  * [Server Components ](/reference/rsc/server-components "Server Components")
  * [Server Functions ](/reference/rsc/server-functions "Server Functions")
  * [Directives ](/reference/rsc/directives "Directives")

    * ['use client' ](/reference/rsc/use-client "'use client'")
    * ['use server' ](/reference/rsc/use-server "'use server'")

### Legacy APIs

  * [Legacy React APIs ](/reference/react/legacy "Legacy React APIs")

    * [Children ](/reference/react/Children "Children")
    * [cloneElement ](/reference/react/cloneElement "cloneElement")
    * [Component ](/reference/react/Component "Component")
    * [createElement ](/reference/react/createElement "createElement")
    * [createRef ](/reference/react/createRef "createRef")
    * [forwardRef ](/reference/react/forwardRef "forwardRef")
    * [isValidElement ](/reference/react/isValidElement "isValidElement")
    * [PureComponent ](/reference/react/PureComponent "PureComponent")




Is this page useful?

[API Reference](/reference/react)

# React DOM APIs[](#undefined "Link for this heading")

The `react-dom` package contains methods that are only supported for the web applications (which run in the browser DOM environment). They are not supported for React Native.

## APIs [](#apis "Link for APIs ")

These APIs can be imported from your components. They are rarely used:

  * `createPortal`[](/reference/react-dom/createPortal) lets you render child components in a different part of the DOM tree.
  * `flushSync`[](/reference/react-dom/flushSync) lets you force React to flush a state update and update the DOM synchronously.



## Resource Preloading APIs [](#resource-preloading-apis "Link for Resource Preloading APIs ")

These APIs can be used to make apps faster by pre-loading resources such as scripts, stylesheets, and fonts as soon as you know you need them, for example before navigating to another page where the resources will be used.

[React-based frameworks](/learn/start-a-new-react-project) frequently handle resource loading for you, so you might not have to call these APIs yourself. Consult your framework’s documentation for details.

  * `prefetchDNS`[](/reference/react-dom/prefetchDNS) lets you prefetch the IP address of a DNS domain name that you expect to connect to.
  * `preconnect`[](/reference/react-dom/preconnect) lets you connect to a server you expect to request resources from, even if you don’t know what resources you’ll need yet.
  * `preload`[](/reference/react-dom/preload) lets you fetch a stylesheet, font, image, or external script that you expect to use.
  * `preloadModule`[](/reference/react-dom/preloadModule) lets you fetch an ESM module that you expect to use.
  * `preinit`[](/reference/react-dom/preinit) lets you fetch and evaluate an external script or fetch and insert a stylesheet.
  * `preinitModule`[](/reference/react-dom/preinitModule) lets you fetch and evaluate an ESM module.



## Entry points [](#entry-points "Link for Entry points ")

The `react-dom` package provides two additional entry points:

  * `react-dom/client`[](/reference/react-dom/client) contains APIs to render React components on the client (in the browser).
  * `react-dom/server`[](/reference/react-dom/server) contains APIs to render React components on the server.



## Removed APIs [](#removed-apis "Link for Removed APIs ")

These APIs were removed in React 19:

  * `findDOMNode`[](https://18.react.dev/reference/react-dom/findDOMNode): see [alternatives](https://18.react.dev/reference/react-dom/findDOMNode#alternatives).
  * `hydrate`[](https://18.react.dev/reference/react-dom/hydrate): use `hydrateRoot`[](/reference/react-dom/client/hydrateRoot) instead.
  * `render`[](https://18.react.dev/reference/react-dom/render): use `createRoot`[](/reference/react-dom/client/createRoot) instead.
  * `unmountComponentAtNode`[](/reference/react-dom/unmountComponentAtNode): use `root.unmount()`[](/reference/react-dom/client/createRoot#root-unmount) instead.
  * `renderToNodeStream`[](https://18.react.dev/reference/react-dom/server/renderToNodeStream): use `react-dom/server`[](/reference/react-dom/server) APIs instead.
  * `renderToStaticNodeStream`[](https://18.react.dev/reference/react-dom/server/renderToStaticNodeStream): use `react-dom/server`[](/reference/react-dom/server) APIs instead.



[Previous<title>](/reference/react-dom/components/title)[NextcreatePortal](/reference/react-dom/createPortal)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [APIs ](#apis)
  * [Resource Preloading APIs ](#resource-preloading-apis)
  * [Entry points ](#entry-points)
  * [Removed APIs ](#removed-apis)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Meet the Team[](#undefined "Link for this heading")

React development is led by a dedicated team working full time at Meta. It also receives contributions from people all over the world.

## React Core [](#react-core "Link for React Core ")

The React Core team members work full time on the core component APIs, the engine that powers React DOM and React Native, React DevTools, and the React documentation website.

Current members of the React team are listed in alphabetical order below.

### Andrew Clark[](#andrew-clark "Link for Andrew Clark")

Engineer at Vercel

Andrew got started with web development by making sites with WordPress, and eventually tricked himself into doing JavaScript. His favorite pastime is karaoke. Andrew is either a Disney villain or a Disney princess, depending on the day.

[acdlite](https://threads.net/acdlite)

[ acdlite](https://github.com/acdlite)

### Dan Abramov[](#dan-abramov "Link for Dan Abramov")

Independent Engineer

Dan got into programming after he accidentally discovered Visual Basic inside Microsoft PowerPoint. He has found his true calling in turning [Sebastian](#sebastian-markb%C3%A5ge)’s tweets into long-form blog posts. Dan occasionally wins at Fortnite by hiding in a bush until the game ends.

[danabra.mov](https://bsky.app/profile/danabra.mov)

[ gaearon](https://github.com/gaearon)

### Eli White[](#eli-white "Link for Eli White")

Engineering Manager at Meta

Eli got into programming after he got suspended from middle school for hacking. He has been working on React and React Native since 2017. He enjoys eating treats, especially ice cream and apple pie. You can find Eli trying quirky activities like parkour, indoor skydiving, and aerial silks.

[elicwhite](https://threads.net/elicwhite)

[ TheSavior](https://github.com/TheSavior)

### Jack Pope[](#jack-pope "Link for Jack Pope")

Engineer at Meta

Shortly after being introduced to AutoHotkey, Jack had written scripts to automate everything he could think of. When reaching limitations there, he dove headfirst into web app development and hasn’t looked back. Most recently, Jack worked on the web platform at Instagram before moving to React. His favorite programming language is JSX.

[ jackpope](https://github.com/jackpope)

[ jackpope.me](https://jackpope.me)

### Jason Bonta[](#jason-bonta "Link for Jason Bonta")

Engineering Manager at Meta

Jason abandoned embedded C for a career in front-end engineering and never looked back. Armed with esoteric CSS knowledge and a passion for beautiful UI, Jason joined Facebook in 2010, where he now feels privileged to have seen JavaScript development come of age. Though he may not understand how `for...of` loops work, he loves getting to work with brilliant people on projects that enable amazing UX.

[someextent](https://threads.net/someextent)

### Joe Savona[](#joe-savona "Link for Joe Savona")

Engineer at Meta

Joe was planning to major in math and philosophy but got into computer science after writing physics simulations in Matlab. Prior to React, he worked on Relay, RSocket.js, and the Skip programming language. While he’s not building some sort of reactive system he enjoys running, studying Japanese, and spending time with his family.

[joesavona](https://threads.net/joesavona)

[ josephsavona](https://github.com/josephsavona)

### Josh Story[](#josh-story "Link for Josh Story")

Engineer at Vercel

Josh majored in Mathematics and discovered programming while in college. His first professional developer job was to program insurance rate calculations in Microsoft Excel, the paragon of Reactive Programming which must be why he now works on React. In between that time Josh has been an IC, Manager, and Executive at a few startups. outside of work he likes to push his limits with cooking.

[storyhb.com](https://bsky.app/profile/storyhb.com)

[ gnoff](https://github.com/gnoff)

### Lauren Tan[](#lauren-tan "Link for Lauren Tan")

Engineer at Meta

Lauren’s programming career peaked when she first discovered the `<marquee>` tag. She’s been chasing that high ever since. She studied Finance instead of CS in college, so she learned to code using Excel. Lauren enjoys dropping cheeky memes in chat, playing video games with her partner, learning Korean, and petting her dog Zelda.

[potetotes](https://threads.net/potetotes)

[no.lol](https://bsky.app/profile/no.lol)

[ poteto](https://github.com/poteto)

### Luna Wei[](#luna-wei "Link for Luna Wei")

Engineer at Meta

Luna first learnt the fundamentals of python at the age of 6 from her father. Since then, she has been unstoppable. Luna aspires to be a gen z, and the road to success is paved with environmental advocacy, urban gardening and lots of quality time with her Voo-Doo’d (as pictured).

[lunaleaps](https://threads.net/lunaleaps)

[ lunaleaps](https://github.com/lunaleaps)

### Matt Carroll[](#matt-carroll "Link for Matt Carroll")

Developer Advocate at Meta

Matt stumbled into coding, and since then, has become enamored with creating things in communities that can’t be created alone. Prior to React, he worked on YouTube, the Google Assistant, Fuchsia, and Google Cloud AI and Evernote. When he’s not trying to make better developer tools he enjoys the mountains, jazz, and spending time with his family.

[mattcarrollcode](https://threads.net/mattcarrollcode)

[ mattcarrollcode](https://github.com/mattcarrollcode)

### Mofei Zhang[](#mofei-zhang "Link for Mofei Zhang")

Engineer at Meta

Mofei started programming when she realized it can help her cheat in video games. She focused on operating systems in undergrad / grad school, but now finds herself happily tinkering on React. Outside of work, she enjoys debugging bouldering problems and planning her next backpacking trip(s).

[z_mofei](https://threads.net/z_mofei)

[ mofeiZ](https://github.com/mofeiZ)

### Noah Lemen[](#noah-lemen "Link for Noah Lemen")

Engineer at Meta

Noah’s interest in UI programming sparked during his education in music technology at NYU. At Meta, he’s worked on internal tools, browsers, web performance, and is currently focused on React. Outside of work, Noah can be found tinkering with synthesizers or spending time with his cat.

[noahlemen](https://threads.net/noahlemen)

[ noahlemen](https://github.com/noahlemen)

[ noahle.men](https://noahle.men)

### Rick Hanlon[](#rick-hanlon "Link for Rick Hanlon")

Engineer at Meta

Ricky majored in theoretical math and somehow found himself on the React Native team for a couple years before joining the React team. When he’s not programming you can find him snowboarding, biking, climbing, golfing, or closing GitHub issues that do not match the issue template.

[rickhanlonii](https://threads.net/rickhanlonii)

[ricky.fm](https://bsky.app/profile/ricky.fm)

[ rickhanlonii](https://github.com/rickhanlonii)

### Ruslan Lesiutin[](#ruslan-lesiutin "Link for Ruslan Lesiutin")

Engineer at Meta

Ruslan’s introduction to UI programming started when he was a kid by manually editing HTML templates for his custom gaming forums. Somehow, he ended up majoring in Computer Science. He enjoys music, games, and memes. Mostly memes.

[lesiutin](https://threads.net/lesiutin)

[ hoxyq](https://github.com/hoxyq)

### Sathya Gunasekaran [](#sathya-gunasekaran "Link for Sathya Gunasekaran ")

Engineer at Meta

Sathya hated the Dragon Book in school but somehow ended up working on compilers all his career. When he’s not compiling React components, he’s either drinking coffee or eating yet another Dosa.

[gsathya.03](https://threads.net/gsathya.03)

[ gsathya](https://github.com/gsathya)

### Sebastian Markbåge[](#sebastian-markbåge "Link for Sebastian Markbåge")

Engineer at Vercel

Sebastian majored in psychology. He’s usually quiet. Even when he says something, it often doesn’t make sense to the rest of us until a few months later. The correct way to pronounce his surname is “mark-boa-geh” but he settled for “mark-beige” out of pragmatism — and that’s how he approaches React.

[sebmarkbage](https://threads.net/sebmarkbage)

[ sebmarkbage](https://github.com/sebmarkbage)

### Sebastian Silbermann[](#sebastian-silbermann "Link for Sebastian Silbermann")

Engineer at Vercel

Sebastian learned programming to make the browser games he played during class more enjoyable. Eventually this lead to contributing to as much open source code as possible. Outside of coding he’s busy making sure people don’t confuse him with the other Sebastians and Zilberman of the React community.

[sebsilbermann](https://threads.net/sebsilbermann)

[ eps1lon](https://github.com/eps1lon)

### Seth Webster[](#seth-webster "Link for Seth Webster")

Engineering Manager at Meta

Seth started programming as a kid growing up in Tucson, AZ. After school, he was bitten by the music bug and was a touring musician for about 10 years before returning to _work_ , starting with Intuit. In his spare time, he loves [taking pictures](https://www.sethwebster.com) and flying for animal rescues in the northeastern United States.

[sethwebster](https://threads.net/sethwebster)

[ sethwebster](https://github.com/sethwebster)

[ sethwebster.com](https://sethwebster.com)

### Sophie Alpert[](#sophie-alpert "Link for Sophie Alpert")

Independent Engineer

Four days after React was released, Sophie rewrote the entirety of her then-current project to use it, which she now realizes was perhaps a bit reckless. After she became the project’s #1 committer, she wondered why she wasn’t getting paid by Facebook like everyone else was and joined the team officially to lead React through its adolescent years. Though she quit that job years ago, somehow she’s still in the team’s group chats and “providing value”.

[sophiebits](https://threads.net/sophiebits)

[ sophiebits](https://github.com/sophiebits)

[ sophiebits.com](https://sophiebits.com)

### Tianyu Yao[](#tianyu-yao "Link for Tianyu Yao")

Engineer at Meta

Tianyu’s interest in computers started as a kid because he loves video games. So he majored in computer science and still plays childish games like League of Legends. When he is not in front of a computer, he enjoys playing with his two kittens, hiking and kayaking.

[ tyao1](https://github.com/tyao1)

### Yuzhi Zheng[](#yuzhi-zheng "Link for Yuzhi Zheng")

Engineering Manager at Meta

Yuzhi studied Computer Science in school. She liked the instant gratification of seeing code come to life without having to physically be in a laboratory. Now she’s a manager in the React org. Before management, she used to work on the Relay data fetching framework. In her spare time, Yuzhi enjoys optimizing her life via gardening and home improvement projects.

[yuzhiz](https://threads.net/yuzhiz)

[ yuzhi](https://github.com/yuzhi)

## Past contributors [](#past-contributors "Link for Past contributors ")

You can find the past team members and other people who significantly contributed to React over the years on the [acknowledgements](/community/acknowledgements) page.

[PreviousReact Videos](/community/videos)[NextDocs Contributors](/community/docs-contributors)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [React Core ](#react-core)
  * [Andrew Clark](#andrew-clark)
  * [Dan Abramov](#dan-abramov)
  * [Eli White](#eli-white)
  * [Jack Pope](#jack-pope)
  * [Jason Bonta](#jason-bonta)
  * [Joe Savona](#joe-savona)
  * [Josh Story](#josh-story)
  * [Lauren Tan](#lauren-tan)
  * [Luna Wei](#luna-wei)
  * [Matt Carroll](#matt-carroll)
  * [Mofei Zhang](#mofei-zhang)
  * [Noah Lemen](#noah-lemen)
  * [Rick Hanlon](#rick-hanlon)
  * [Ruslan Lesiutin](#ruslan-lesiutin)
  * [Sathya Gunasekaran ](#sathya-gunasekaran)
  * [Sebastian Markbåge](#sebastian-markbåge)
  * [Sebastian Silbermann](#sebastian-silbermann)
  * [Seth Webster](#seth-webster)
  * [Sophie Alpert](#sophie-alpert)
  * [Tianyu Yao](#tianyu-yao)
  * [Yuzhi Zheng](#yuzhi-zheng)
  * [Past contributors ](#past-contributors)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Docs Contributors[](#undefined "Link for this heading")

React documentation is written and maintained by the [React team](/community/team) and [external contributors.](https://github.com/reactjs/react.dev/graphs/contributors) On this page, we’d like to thank a few people who’ve made significant contributions to this site.

## Content [](#content "Link for Content ")

  * : editing, writing, illustrating
  * : writing, curriculum design
  * : example code
  * : writing
  * : writing
  * : writing
  * : writing
  * : writing
  * : editing, writing
  * : reviews, advice
  * : feedback



## Design [](#design "Link for Design ")

  * : site design
  * [Razvan Gradinar](https://dribbble.com/GradinarRazvan): sandbox design
  * [Maggie Appleton](https://maggieappleton.com/): diagram system
  * : color-coded explanations



## Development [](#development "Link for Development ")

  * : site development
  * [ThisDotLabs](https://www.thisdot.co/) (, ): site development
  * [CodeSandbox](https://codesandbox.io/) (, , , ): sandbox integration
  * : site development
  * : site development
  * [Harish Kumar](https://www.strek.in/): development and maintenance
  * : sandbox improvements



We’d also like to thank countless alpha testers and community members who gave us feedback along the way.

[PreviousMeet the Team](/community/team)[NextTranslations](/community/translations)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Content ](#content)
  * [Design ](#design)
  * [Development ](#development)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Acknowledgements[](#undefined "Link for this heading")

React was originally created by [Jordan Walke.](https://github.com/jordwalke) Today, React has a [dedicated full-time team working on it](/community/team), as well as over a thousand [open source contributors.](https://github.com/facebook/react/graphs/contributors)

## Past contributors [](#past-contributors "Link for Past contributors ")

We’d like to recognize a few people who have made significant contributions to React and its documentation in the past and have helped maintain them over the years:

  * [Almero Steyn](https://github.com/AlmeroSteyn)
  * [Andreas Svensson](https://github.com/syranide)
  * [Alex Krolick](https://github.com/alexkrolick)
  * [Alexey Pyltsyn](https://github.com/lex111)
  * [Andrey Lunyov](https://github.com/alunyov)
  * [Brandon Dail](https://github.com/aweary)
  * [Brian Vaughn](https://github.com/bvaughn)
  * [Caleb Meredith](https://github.com/calebmer)
  * [Chang Yan](https://github.com/cyan33)
  * [Cheng Lou](https://github.com/chenglou)
  * [Christoph Nakazawa](https://github.com/cpojer)
  * [Christopher Chedeau](https://github.com/vjeux)
  * [Clement Hoang](https://github.com/clemmy)
  * [Dave McCabe](https://github.com/davidmccabe)
  * [Dominic Gannaway](https://github.com/trueadm)
  * [Flarnie Marchan](https://github.com/flarnie)
  * [Jason Quense](https://github.com/jquense)
  * [Jesse Beach](https://github.com/jessebeach)
  * [Jessica Franco](https://github.com/Jessidhia)
  * [Jim Sproch](https://github.com/jimfb)
  * [Josh Duck](https://github.com/joshduck)
  * [Joe Critchley](https://github.com/joecritch)
  * [Jeff Morrison](https://github.com/jeffmo)
  * [Luna Ruan](https://github.com/lunaruan)
  * [Kathryn Middleton](https://github.com/kmiddleton14)
  * [Keyan Zhang](https://github.com/keyz)
  * [Marco Salazar](https://github.com/salazarm)
  * [Mengdi Chen](https://github.com/mondaychen)
  * [Nat Alison](https://github.com/tesseralis)
  * [Nathan Hunzaker](https://github.com/nhunzaker)
  * [Nicolas Gallagher](https://github.com/necolas)
  * [Paul O’Shannessy](https://github.com/zpao)
  * [Pete Hunt](https://github.com/petehunt)
  * [Philipp Spiess](https://github.com/philipp-spiess)
  * [Rachel Nabors](https://github.com/rachelnabors)
  * [Robert Zhang](https://github.com/robertzhidealx)
  * [Samuel Susla](https://github.com/sammy-SC)
  * [Sander Spies](https://github.com/sanderspies)
  * [Sasha Aickin](https://github.com/aickin)
  * [Sean Keegan](https://github.com/seanryankeegan)
  * [Sophia Shoemaker](https://github.com/mrscobbler)
  * [Sunil Pai](https://github.com/threepointone)
  * [Tim Yung](https://github.com/yungsters)
  * [Xuan Huang](https://github.com/huxpro)



This list is not exhaustive.

We’d like to give special thanks to [Tom Occhino](https://github.com/tomocchino) and [Adam Wolff](https://github.com/wolffiex) for their guidance and support over the years. We are also thankful to all the volunteers who [translated React into other languages.](https://translations.react.dev/)

## Additional Thanks [](#additional-thanks "Link for Additional Thanks ")

Additionally, we’re grateful to:

  * [Jeff Barczewski](https://github.com/jeffbski) for allowing us to use the `react` package name on npm
  * [Christopher Aue](https://christopheraue.net/) for letting us use the reactjs.com domain name and the username on Twitter
  * [ProjectMoon](https://github.com/ProjectMoon) for letting us use the [flux](https://www.npmjs.com/package/flux) package name on npm
  * Shane Anderson for allowing us to use the [react](https://github.com/react) org on GitHub



[PreviousTranslations](/community/translations)[NextVersioning Policy](/community/versioning-policy)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Past contributors ](#past-contributors)
  * [Additional Thanks ](#additional-thanks)


[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact%2Freleases)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact%2Freleases)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Freleases%2Findex&source=header-repo&source_repo=facebook%2Freact) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ facebook ](/facebook) / **[react](/facebook/react) ** Public

  * [ Notifications ](/login?return_to=%2Ffacebook%2Freact) You must be signed in to change notification settings
  * [ Fork 47.2k ](/login?return_to=%2Ffacebook%2Freact)
  * [ Star  231k ](/login?return_to=%2Ffacebook%2Freact)




  * [ Code ](/facebook/react)
  * [ Issues 758 ](/facebook/react/issues)
  * [ Pull requests 168 ](/facebook/react/pulls)
  * [ Actions ](/facebook/react/actions)
  * [ Projects 0 ](/facebook/react/projects)
  * [ Wiki ](/facebook/react/wiki)
  * [ Security ](/facebook/react/security)
  * [ Insights ](/facebook/react/pulse)



Additional navigation options

  * [ Code  ](/facebook/react)
  * [ Issues  ](/facebook/react/issues)
  * [ Pull requests  ](/facebook/react/pulls)
  * [ Actions  ](/facebook/react/actions)
  * [ Projects  ](/facebook/react/projects)
  * [ Wiki  ](/facebook/react/wiki)
  * [ Security  ](/facebook/react/security)
  * [ Insights  ](/facebook/react/pulse)



# Releases: facebook/react

[Releases](/facebook/react/releases) [Tags](/facebook/react/tags)

Releases · facebook/react

## 19.0.0 (December 5, 2024)

05 Dec 21:05 

[jackpope](/jackpope)

[ v19.0.0  ](/facebook/react/tree/v19.0.0)

[ `7aa5dda`](/facebook/react/commit/7aa5dda3b3e4c2baa905a59b922ae7ec14734b24)

This commit was created on GitHub.com and signed with GitHub’s **verified signature**. 

GPG key ID: B5690EEEBB952194 [Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v19.0.0)

Loading

[View all tags](/facebook/react/tags)

[19.0.0 (December 5, 2024)](/facebook/react/releases/tag/v19.0.0) [Latest](/facebook/react/releases/latest)

[Latest](/facebook/react/releases/latest)

Below is a list of all new features, APIs, deprecations, and breaking changes. Read [React 19 release post](https://react.dev/blog/2024/04/25/react-19) and [React 19 upgrade guide](https://react.dev/blog/2024/04/25/react-19-upgrade-guide) for more information.

> Note: To help make the upgrade to React 19 easier, we’ve published a react@18.3 release that is identical to 18.2 but adds warnings for deprecated APIs and other changes that are needed for React 19. We recommend upgrading to React 18.3.1 first to help identify any issues before upgrading to React 19.

## New Features

### React

  * Actions: `startTransition` can now accept async functions. Functions passed to `startTransition` are called “Actions”. A given Transition can include one or more Actions which update state in the background and update the UI with one commit. In addition to updating state, Actions can now perform side effects including async requests, and the Action will wait for the work to finish before finishing the Transition. This feature allows Transitions to include side effects like `fetch()` in the pending state, and provides support for error handling, and optimistic updates.
  * `useActionState`: is a new hook to order Actions inside of a Transition with access to the state of the action, and the pending state. It accepts a reducer that can call Actions, and the initial state used for first render. It also accepts an optional string that is used if the action is passed to a form `action` prop to support progressive enhancement in forms.
  * `useOptimistic`: is a new hook to update state while a Transition is in progress. It returns the state, and a set function that can be called inside a transition to “optimistically” update the state to expected final value immediately while the Transition completes in the background. When the transition finishes, the state is updated to the new value.
  * `use`: is a new API that allows reading resources in render. In React 19, `use` accepts a promise or Context. If provided a promise, `use` will suspend until a value is resolved. `use` can only be used in render but can be called conditionally.
  * `ref` as a prop: Refs can now be used as props, removing the need for `forwardRef`.
  * **Suspense sibling pre-warming** : When a component suspends, React will immediately commit the fallback of the nearest Suspense boundary, without waiting for the entire sibling tree to render. After the fallback commits, React will schedule another render for the suspended siblings to “pre-warm” lazy requests.



### React DOM Client

  * `<form> action` prop: Form Actions allow you to manage forms automatically and integrate with `useFormStatus`. When a `<form> action` succeeds, React will automatically reset the form for uncontrolled components. The form can be reset manually with the new `requestFormReset` API.
  * `<button> and <input> formAction` prop: Actions can be passed to the `formAction` prop to configure form submission behavior. This allows using different Actions depending on the input.
  * `useFormStatus`: is a new hook that provides the status of the parent `<form> action`, as if the form was a Context provider. The hook returns the values: `pending`, `data`, `method`, and `action`.
  * Support for Document Metadata: We’ve added support for rendering document metadata tags in components natively. React will automatically hoist them into the `<head>` section of the document.
  * Support for Stylesheets: React 19 will ensure stylesheets are inserted into the `<head>` on the client before revealing the content of a Suspense boundary that depends on that stylesheet.
  * Support for async scripts: Async scripts can be rendered anywhere in the component tree and React will handle ordering and deduplication.
  * Support for preloading resources: React 19 ships with `preinit`, `preload`, `prefetchDNS`, and `preconnect` APIs to optimize initial page loads by moving discovery of additional resources like fonts out of stylesheet loading. They can also be used to prefetch resources used by an anticipated navigation.



### React DOM Server

  * Added `prerender` and `prerenderToNodeStream` APIs for static site generation. They are designed to work with streaming environments like Node.js Streams and Web Streams. Unlike `renderToString`, they wait for data to load for HTML generation.



### React Server Components

  * RSC features such as directives, server components, and server functions are now stable. This means libraries that ship with Server Components can now target React 19 as a peer dependency with a react-server export condition for use in frameworks that support the Full-stack React Architecture. The underlying APIs used to implement a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x. See [docs](https://19.react.dev/reference/rsc/server-components) for how to support React Server Components.



## Deprecations

  * Deprecated: `element.ref` access: React 19 supports ref as a prop, so we’re deprecating `element.ref` in favor of `element.props.ref`. Accessing will result in a warning.
  * `react-test-renderer`: In React 19, react-test-renderer logs a deprecation warning and has switched to concurrent rendering for web usage. We recommend migrating your tests to @testinglibrary.com/docs/react-testing-library/intro/) or @testingesting-library.com/docs/react-native-testing-library/intro)



## Breaking Changes

React 19 brings in a number of breaking changes, including the removals of long-deprecated APIs. We recommend first upgrading to `18.3.1`, where we've added additional deprecation warnings. Check out the [upgrade guide](https://19.react.dev/blog/2024/04/25/react-19-upgrade-guide) for more details and guidance on codemodding.

### React

  * New JSX Transform is now required: We introduced [a new JSX transform](https://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html) in 2020 to improve bundle size and use JSX without importing React. In React 19, we’re adding additional improvements like using ref as a prop and JSX speed improvements that require the new transform.
  * Errors in render are not re-thrown: Errors that are not caught by an Error Boundary are now reported to window.reportError. Errors that are caught by an Error Boundary are reported to console.error. We’ve introduced `onUncaughtError` and `onCaughtError` methods to `createRoot` and `hydrateRoot` to customize this error handling.
  * Removed: `propTypes`: Using `propTypes` will now be silently ignored. If required, we recommend migrating to TypeScript or another type-checking solution.
  * Removed: `defaultProps` for functions: ES6 default parameters can be used in place. Class components continue to support `defaultProps` since there is no ES6 alternative.
  * Removed: `contextTypes` and `getChildContext`: Legacy Context for class components has been removed in favor of the `contextType` API.
  * Removed: string refs: Any usage of string refs need to be migrated to ref callbacks.
  * Removed: Module pattern factories: A rarely used pattern that can be migrated to regular functions.
  * Removed: `React.createFactory`: Now that JSX is broadly supported, all `createFactory` usage can be migrated to JSX components.
  * Removed: `react-test-renderer/shallow`: This has been a re-export of [react-shallow-renderer](https://github.com/enzymejs/react-shallow-renderer) since React 18. If needed, you can continue to use the third-party package directly. We recommend using @testinglibrary.com/docs/react-testing-library/intro/) or @testingesting-library.com/docs/react-native-testing-library/intro) instead.



### React DOM

  * Removed: `react-dom/test-utils`: We’ve moved `act` from `react-dom/test-utils` to react. All other utilities have been removed.
  * Removed: `ReactDOM`.`render`, `ReactDOM`.`hydrate`: These have been removed in favor of the concurrent equivalents: `ReactDOM`.`createRoot` and `ReactDOM.hydrateRoot`.
  * Removed: `unmountComponentAtNode`: Removed in favor of `root.unmount()`.
  * Removed: `ReactDOM`.`findDOMNode`: You can replace `ReactDOM`.`findDOMNode` with DOM Refs.



## Notable Changes

### React

  * `<Context>` as a provider: You can now render `<Context>` as a provider instead of `<Context.Provider>`.
  * Cleanup functions for refs: When the component unmounts, React will call the cleanup function returned from the ref callback.
  * `useDeferredValue` initial value argument: When provided, `useDeferredValue` will return the initial value for the initial render of a component, then schedule a re-render in the background with the `deferredValue` returned.
  * Support for Custom Elements: React 19 now passes all tests on [Custom Elements Everywhere](https://custom-elements-everywhere.com/).
  * StrictMode changes: `useMemo` and `useCallback` will now reuse the memoized results from the first render, during the second render. Additionally, StrictMode will now double-invoke ref callback functions on initial mount.
  * UMD builds removed: To load React 19 with a script tag, we recommend using an ESM-based CDN such as [esm.sh](http://esm.sh).



### React DOM

  * Diffs for hydration errors: In the case of a mismatch, React 19 logs a single error with a diff of the mismatched content.
  * Compatibility with third-party scripts and extensions: React will now force a client re-render to fix up any mismatched content caused by elements inserted by third-party JS.



## TypeScript Changes

The most common changes can be codemodded with `npx types-react-codemod@latest preset-19 ./path-to-your-react-ts-files`.

  * Removed deprecated TypeScript types: 
    * `ReactChild` (replacement: `React.ReactElement | number | string)`
    * `ReactFragment` (replacement: `Iterable<React.ReactNode>`)
    * `ReactNodeArray` (replacement: `ReadonlyArray<React.ReactNode>`)
    * `ReactText` (replacement:...



[Read more](/facebook/react/releases/tag/v19.0.0)

### Contributors

  * [ ](https://github.com/sophiebits)
  * [ ](https://github.com/kassens)
  * [ ](https://github.com/devongovett)
  * [ ](https://github.com/bvaughn)
  * [ ](https://github.com/sebmarkbage)
  * [ ](https://github.com/styfle)
  * [ ](https://github.com/danieltott)
  * [ ](https://github.com/unstubbable)
  * [ ](https://github.com/jupapios)
  * [ ](https://github.com/gaearon)
  * [ ](https://github.com/markerikson)
  * [ ](https://github.com/sokra)
  * [ ](https://github.com/JonnyBurger)
  * [ ](https://github.com/sammy-SC)
  * [ ](https://github.com/pandaiolo)
  * [ ](https://github.com/HenriqueLimas)
  * [ ](https://github.com/rickhanlonii)
  * [ ](https://github.com/gnoff)
  * [ ](https://github.com/colinhacks)
  * [ ](https://github.com/acdlite)
  * [ ](https://github.com/phryneas)
  * [ ](https://github.com/KarimP)
  * [ ](https://github.com/hansottowirtz)
  * [ ](https://github.com/tyao1)
  * [ ](https://github.com/timneutkens)
  * [ ](https://github.com/liuyenwei)
  * [ ](https://github.com/josepharhar)
  * [ ](https://github.com/jackpope)
  * [ ](https://github.com/feedthejim)
  * [ ](https://github.com/eps1lon)
  * [ ](https://github.com/lubieowoce)
  * [ ](https://github.com/himself65)
  * [ ](https://github.com/jellevoost)
  * [ ](https://github.com/sweetliquid)
  * [ ](https://github.com/ling1726)
  * [ ](https://github.com/mofeiZ)
  * [ ](https://github.com/yujunjung)
  * [ ](https://github.com/SouSingh)



sophiebits, kassens, and 36 other contributors 

Assets 2

Loading

👍 285 hhrrr, lbeckman314, matheuspergoli, raix, jonz94, Foshati, nikischin, 4ndrs, zach-betz-hln, diego-aquino, and 275 more reacted with thumbs up emoji 😄 45 Dmitriy-Frostoff, M21H, dBianchii, li-jia-nan, chemistwang, yisen91, haegeon-kim, th2205, ChiaJune, Entropy-10, and 35 more reacted with laugh emoji 🎉 216 cherniavskii, webbertakken, reichhartd, lbeckman314, camiloan, ArtKullashi, matheuspergoli, raix, jonz94, esvyridov, and 206 more reacted with hooray emoji ❤️ 95 4ndrs, dwalker93, diego-aquino, breadadams, kachkaev, tgmarinho, dylanjmcdonald, hongbo-miao, zweimach, HamoBoker, and 85 more reacted with heart emoji 🚀 123 marcosbotene, lbeckman314, ArtKullashi, fawzii0x3, matheuspergoli, raix, skyfrk, jonz94, MatthewHerbst, Foshati, and 113 more reacted with rocket emoji 👀 40 Dmitriy-Frostoff, M21H, avindra, dBianchii, yisen91, huongdevvn, staaky, haegeon-kim, Kin-Xemer, coder-hxl, and 30 more reacted with eyes emoji

All reactions

  * 👍 285 reactions
  * 😄 45 reactions
  * 🎉 216 reactions
  * ❤️ 95 reactions
  * 🚀 123 reactions
  * 👀 40 reactions



464 people reacted

## eslint-plugin-react-hooks@5.0.0 (Oct 11, 2024)

11 Oct 13:32 

[eps1lon](/eps1lon)

[ eslint-plugin-react-hooks@5.0.0  ](/facebook/react/tree/eslint-plugin-react-hooks%405.0.0)

[ `0911120`](/facebook/react/commit/09111202d617477b63507b41e8b6c3101b4afd87)

This commit was created on GitHub.com and signed with GitHub’s **verified signature**. 

GPG key ID: B5690EEEBB952194 [Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...eslint-plugin-react-hooks%405.0.0)

Loading

[View all tags](/facebook/react/tags)

[eslint-plugin-react-hooks@5.0.0 (Oct 11, 2024)](/facebook/react/releases/tag/eslint-plugin-react-hooks%405.0.0)

This release only contains `eslint-plugin-react-hooks`. Notably, new violations and support for ESLint v9 were added.

## `eslint-plugin-react-hooks`

  * **New Violations:** Component names now need to start with an uppercase letter instead of a non-lowercase letter. This means `_Button` or `_component` are no longer valid. ([@kassens](https://github.com/kassens)) in [#25162](https://github.com/facebook/react/pull/25162) For example, in 

```
function _Component() {
 useState()
 ^^^^^^^^ A React Hook "useState" is called in function "_Component" which is neither a Component nor a custom React Hook function.
}
```


`_Component` should be renamed to `Component`.


  * Add support for ESLint v9. ([@eps1lon](https://github.com/eps1lon) in [#28773](https://github.com/facebook/react/pull/28773))
  * Consider dispatch from `useActionState` stable. ([@eps1lon](https://github.com/eps1lon) in [#29665](https://github.com/facebook/react/pull/29665))
  * Accept `as` expression in callback. ([@StyleShit](https://github.com/StyleShit) in [#28202](https://github.com/facebook/react/pull/28202))
  * Accept `as` expressions in deps array. ([@StyleShit](https://github.com/StyleShit) in [#28189](https://github.com/facebook/react/pull/28189))
  * Treat `React.use()` the same as `use()`. ([@kassens](https://github.com/kassens) in [#27769](https://github.com/facebook/react/pull/27769))
  * Move `use()` lint to non-experimental. ([@kassens](https://github.com/kassens) in [#27768](https://github.com/facebook/react/pull/27768))
  * Support Flow `as` expressions. ([@cpojer](https://github.com/cpojer) in [#27590](https://github.com/facebook/react/pull/27590))
  * Allow `useEffect(fn, undefined)`. ([@kassens](https://github.com/kassens) in [#27525](https://github.com/facebook/react/pull/27525))
  * Disallow hooks in async functions. ([@acdlite](https://github.com/acdlite) in [#27045](https://github.com/facebook/react/pull/27045))
  * Rename experimental `useEvent` to `useEffectEvent`. ([@sebmarkbage](https://github.com/sebmarkbage) in [#25881](https://github.com/facebook/react/pull/25881))
  * Lint for presence of `useEvent` functions in dependency lists. ([@poteto](https://github.com/poteto) in [#25512](https://github.com/facebook/react/pull/25512))
  * Check `useEvent` references instead. ([@poteto](https://github.com/poteto) in [#25319](https://github.com/facebook/react/pull/25319))
  * Update `RulesOfHooks` with `useEvent` rules. ([@poteto](https://github.com/poteto) in [#25285](https://github.com/facebook/react/pull/25285))



Assets 2

Loading

👍 177 mkosir, Amoz19, nilsingwersen, gunters63, kevinpainchaud, fiskryeziu, aryaemami59, re-taro, Shakeskeyboarde, m3thom, and 167 more reacted with thumbs up emoji 😄 3 aalmanasir, GeorgeDzvengwe, and ScriptKnight-Master reacted with laugh emoji 🎉 74 mkosir, Amoz19, QuantumChemist, kevinpainchaud, daniellmiranda, aryaemami59, re-taro, Shakeskeyboarde, alinnert, haodaking, and 64 more reacted with hooray emoji ❤️ 60 mkosir, QuantumChemist, kevinpainchaud, aryaemami59, re-taro, Shakeskeyboarde, slk333, 4ndrs, ShobhitShah1, DavidGDA, and 50 more reacted with heart emoji 🚀 50 mkosir, Amoz19, QuantumChemist, LeunensMichiel, kevinpainchaud, aryaemami59, re-taro, monkey0722, Shakeskeyboarde, rodamaral, and 40 more reacted with rocket emoji 👀 20 Dmitriy-Frostoff, MidlajYH, rodrigomoyano11, Denisskas, lucipas, JamBalaya56562, fadrian06, warmachine028, zdu-strong, Talaxy009, and 10 more reacted with eyes emoji

All reactions

  * 👍 177 reactions
  * 😄 3 reactions
  * 🎉 74 reactions
  * ❤️ 60 reactions
  * 🚀 50 reactions
  * 👀 20 reactions



247 people reacted

## 18.3.1 (April 26, 2024)

26 Apr 19:53 

[rickhanlonii](/rickhanlonii)

[ v18.3.1  ](/facebook/react/tree/v18.3.1)

[ `f1338f8`](/facebook/react/commit/f1338f8080abd1386454a10bbf93d67bfe37ce85)

This commit was signed with the committer’s **verified signature**. 

[ ](/acdlite) [acdlite](/acdlite) Andrew Clark 

SSH Key Fingerprint: kMgJy+7AI/mxxpuyx1Qgc7NZY55dREBRubChEAYfi7I [Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v18.3.1)

Loading

[View all tags](/facebook/react/tags)

[18.3.1 (April 26, 2024)](/facebook/react/releases/tag/v18.3.1)

  * Export `act` from `react` [f1338f](https://github.com/facebook/react/commit/f1338f8080abd1386454a10bbf93d67bfe37ce85)



Assets 2

Loading

👍 293 franz-bendezu, rockyzhang24, IVLIU, jhosep98, golamrabbiazad, manyeyes, undesicimo, doooss, einer20, IntelligentSynthesis, and 283 more reacted with thumbs up emoji 😄 84 jafar-jabr, 1zilc, sergiocarneiro, lin72h, MuhamedAyoub, pwbriggs, undesicimo, silkyland, Marukome0743, MeherabSamir, and 74 more reacted with laugh emoji 🎉 79 hendriknielaender, advanceddev, marcio-grecio, Rel1cx, dbstratta, poteto, ZachLegros, clemstoquart, mkosir, ykzts, and 69 more reacted with hooray emoji ❤️ 96 4ndrs, batosai, marcio-grecio, dbstratta, hrasoa, poteto, mkosir, 1zilc, lin72h, xxrjun, and 86 more reacted with heart emoji 🚀 88 hendriknielaender, KirianCaumes, sampain, xxrjun, marcio-grecio, dbstratta, poteto, esau-morais, mkosir, lin72h, and 78 more reacted with rocket emoji 👀 14 mtayyebdeveloper, CapitanArdeshir, subham007-coder, codewithnathan97, jaimin-bariya, youne-elma, Rucellmai61, trungle33, Quanzhitong, Sudharsan0727, and 4 more reacted with eyes emoji

All reactions

  * 👍 293 reactions
  * 😄 84 reactions
  * 🎉 79 reactions
  * ❤️ 96 reactions
  * 🚀 88 reactions
  * 👀 14 reactions



441 people reacted

## 18.3.0 (April 25, 2024)

26 Apr 19:48 

[rickhanlonii](/rickhanlonii)

[ v18.3.0  ](/facebook/react/tree/v18.3.0)

[ `8a015b6`](/facebook/react/commit/8a015b68cc060079878e426610e64e86fb328f8d)

This commit was signed with the committer’s **verified signature**. 

[ ](/acdlite) [acdlite](/acdlite) Andrew Clark 

SSH Key Fingerprint: kMgJy+7AI/mxxpuyx1Qgc7NZY55dREBRubChEAYfi7I [Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v18.3.0)

Loading

[View all tags](/facebook/react/tags)

[18.3.0 (April 25, 2024)](/facebook/react/releases/tag/v18.3.0)

This release is identical to 18.2 but adds warnings for deprecated APIs and other changes that are needed for React 19.

Read the [React 19 Upgrade Guide](https://react.dev/blog/2024/04/25/react-19-upgrade-guide) for more info.

### React

  * Allow writing to `this.refs` to support string ref codemod [909071](https://github.com/facebook/react/commit/9090712fd3ca4e1099e1f92e67933c2cb4f32552)
  * Warn for deprecated `findDOMNode` outside StrictMode [c3b283](https://github.com/facebook/react/commit/c3b283964108b0e8dbcf1f9eb2e7e67815e39dfb)
  * Warn for deprecated `test-utils` methods [d4ea75](https://github.com/facebook/react/commit/d4ea75dc4258095593b6ac764289f42bddeb835c)
  * Warn for deprecated Legacy Context outside StrictMode [415ee0](https://github.com/facebook/react/commit/415ee0e6ea0fe3e288e65868df2e3241143d5f7f)
  * Warn for deprecated string refs outside StrictMode [#25383](https://github.com/facebook/react/pull/25383)
  * Warn for deprecated `defaultProps` for function components [#25699](https://github.com/facebook/react/pull/25699)
  * Warn when spreading `key` [#25697](https://github.com/facebook/react/pull/25697)
  * Warn when using `act` from `test-utils` [d4ea75](https://github.com/facebook/react/commit/d4ea75dc4258095593b6ac764289f42bddeb835c)



### React DOM

  * Warn for deprecated `unmountComponentAtNode` [8a015b](https://github.com/facebook/react/commit/8a015b68cc060079878e426610e64e86fb328f8d)
  * Warn for deprecated `renderToStaticNodeStream` [#28874](https://github.com/facebook/react/pull/28874)



Assets 2

Loading

👍 115 ChrisWiles, eifr, poteto, clemstoquart, zdu-strong, lin72h, golamrabbiazad, makoto14, ParasSolanki, ramunecroft, and 105 more reacted with thumbs up emoji 😄 24 vozaldi, fadrian06, vikiboss, 1weiho, MidlajYH, lnhrdt, zudydy, gmerwan, oy-itstedpark, w00khyung, and 14 more reacted with laugh emoji 🎉 39 ChrisWiles, Arechii, poteto, ykzts, zdu-strong, lin72h, golamrabbiazad, pwbriggs, syahrizaldev, fadrian06, and 29 more reacted with hooray emoji ❤️ 48 4ndrs, ChrisWiles, poteto, controversial, Bikossor, rendrom, zdu-strong, lin72h, AhmedBaset, golamrabbiazad, and 38 more reacted with heart emoji 🚀 61 mzaien, llegomark, KirianCaumes, dbstratta, Abhiek187, 87xie, 4ndrs, ChrisWiles, rivajunior, poteto, and 51 more reacted with rocket emoji 👀 4 ixsamar, thisisengineer, kronos456, and MagdyKishk reacted with eyes emoji

All reactions

  * 👍 115 reactions
  * 😄 24 reactions
  * 🎉 39 reactions
  * ❤️ 48 reactions
  * 🚀 61 reactions
  * 👀 4 reactions



179 people reacted

## 18.2.0 (June 14, 2022)

14 Jun 19:54 

[gnoff](/gnoff)

[ v18.2.0  ](/facebook/react/tree/v18.2.0)

[ `9e3b772`](/facebook/react/commit/9e3b772b8cabbd8cadc7522ebe3dde3279e79d9e)

This commit was created on GitHub.com and signed with GitHub’s **verified signature**. The key has expired. 

GPG key ID: 4AEE18F83AFDEB23

Expired

[Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v18.2.0)

Loading

[View all tags](/facebook/react/tags)

[18.2.0 (June 14, 2022)](/facebook/react/releases/tag/v18.2.0)

### React DOM

  * Provide a component stack as a second argument to `onRecoverableError`. ([@gnoff](https://github.com/gnoff) in [#24591](https://github.com/facebook/react/pull/24591))
  * Fix hydrating into `document` causing a blank page on mismatch. ([@gnoff](https://github.com/gnoff) in [#24523](https://github.com/facebook/react/pull/24523))
  * Fix false positive hydration errors with Suspense. ([@gnoff](https://github.com/gnoff) in [#24480](https://github.com/facebook/react/pull/24480) and [@acdlite](https://github.com/acdlite) in [#24532](https://github.com/facebook/react/pull/24532))
  * Fix ignored `setState` in Safari when adding an iframe. ([@gaearon](https://github.com/gaearon) in [#24459](https://github.com/facebook/react/pull/24459))



### React DOM Server

  * Pass information about server errors to the client. ([@salazarm](https://github.com/salazarm) and [@gnoff](https://github.com/gnoff) in [#24551](https://github.com/facebook/react/pull/24551) and [#24591](https://github.com/facebook/react/pull/24591))
  * Allow to provide a reason when aborting the HTML stream. ([@gnoff](https://github.com/gnoff) in [#24680](https://github.com/facebook/react/pull/24680))
  * Eliminate extraneous text separators in the HTML where possible. ([@gnoff](https://github.com/gnoff) in [#24630](https://github.com/facebook/react/pull/24630))
  * Disallow complex children inside `<title>` elements to match the browser constraints. ([@gnoff](https://github.com/gnoff) in [#24679](https://github.com/facebook/react/pull/24679))
  * Fix buffering in some worker environments by explicitly setting `highWaterMark` to `0`. ([@jplhomer](https://github.com/jplhomer) in [#24641](https://github.com/facebook/react/pull/24641))



### Server Components (Experimental)

  * Add support for `useId()` inside Server Components. ([@gnoff](https://github.com/gnoff)) in [#24172](https://github.com/facebook/react/pull/24172)



Assets 2

Loading

👍 498 apostolos, morellodev, marcotterra, chanan, dillingham, dcsaszar, davbrito, salvoravida, Resetnak, unrealapex, and 488 more reacted with thumbs up emoji 😄 71 wajeshubham, Huinno-YoonJaeYoon, leonardssh, anaslaham, mhndev, gregarega1993, Ahmedgkanria, lin72h, huynhdev24, Zinoujoker, and 61 more reacted with laugh emoji 🎉 120 mkosir, kazuhitonakayama, rvitaliy, ivanov-v, fatihcandev, aramnazaryan, OmerWow, outbackStack, xiel, tronikelis, and 110 more reacted with hooray emoji ❤️ 178 LakhderAmine99, pavinthan, RazvanRauta, morellodev, jplhomer, blittle, Berrones-Edwin, salvoravida, unrealapex, electron-space, and 168 more reacted with heart emoji 🚀 148 svengreb, unigazer, morellodev, blittle, kachkaev, jakejarvis, brneor, lmachens, salvoravida, unrealapex, and 138 more reacted with rocket emoji 👀 76 MrDanOak, adiezdev, outbackStack, tronikelis, MertHaddad, rivailruiz, andreLDias, EarlGeorge, jamieshark, libeyondea, and 66 more reacted with eyes emoji

All reactions

  * 👍 498 reactions
  * 😄 71 reactions
  * 🎉 120 reactions
  * ❤️ 178 reactions
  * 🚀 148 reactions
  * 👀 76 reactions



696 people reacted

## 18.1.0 (April 26, 2022)

26 Apr 21:15 

[acdlite](/acdlite)

[ v18.1.0  ](/facebook/react/tree/v18.1.0)

[ `22edb9f`](/facebook/react/commit/22edb9f777d27369fd2c1fad378f74e237b6dfd3)

This commit was created on GitHub.com and signed with GitHub’s **verified signature**. The key has expired. 

GPG key ID: 4AEE18F83AFDEB23

Expired

[Learn about vigilant mode](https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits). 

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v18.1.0)

Loading

[View all tags](/facebook/react/tags)

[18.1.0 (April 26, 2022)](/facebook/react/releases/tag/v18.1.0)

### React DOM

  * Fix the false positive warning about `react-dom/client` when using UMD bundle. ([@alireza-molaee](https://github.com/alireza-molaee) in [#24274](https://github.com/facebook/react/pull/24274))
  * Fix `suppressHydrationWarning` to work in production too. ([@gaearon](https://github.com/gaearon) in [#24271](https://github.com/facebook/react/pull/24271))
  * Fix `componentWillUnmount` firing twice inside of Suspense. ([@acdlite](https://github.com/acdlite) in [#24308](https://github.com/facebook/react/pull/24308))
  * Fix some transition updates being ignored. ([@acdlite](https://github.com/acdlite) in [#24353](https://github.com/facebook/react/pull/24353))
  * Fix `useDeferredValue` causing an infinite loop when passed an unmemoized value. ([@acdlite](https://github.com/acdlite) in [#24247](https://github.com/facebook/react/pull/24247))
  * Fix throttling of revealing Suspense fallbacks. ([@sunderls](https://github.com/sunderls) in [#24253](https://github.com/facebook/react/pull/24253))
  * Fix an inconsistency in whether the props object is the same between renders. ([@Andarist](https://github.com/Andarist) and [@acdlite](https://github.com/acdlite) in [#24421](https://github.com/facebook/react/pull/24421))
  * Fix a missing warning about a `setState` loop in `useEffect`. ([@gaearon](https://github.com/gaearon) in [#24298](https://github.com/facebook/react/pull/24298))
  * Fix a spurious hydration error. ([@gnoff](https://github.com/gnoff) in [#24404](https://github.com/facebook/react/pull/24404))
  * Warn when calling `setState` in `useInsertionEffect`. ([@gaearon](https://github.com/gaearon) in [#24295](https://github.com/facebook/react/pull/24295))
  * Ensure the reason for hydration errors is always displayed. ([@gaearon](https://github.com/gaearon) in [#24276](https://github.com/facebook/react/pull/24276))



### React DOM Server

  * Fix escaping for the `bootstrapScriptContent` contents. ([@gnoff](https://github.com/gnoff) in [#24385](https://github.com/facebook/react/pull/24385))
  * Significantly improve performance of `renderToPipeableStream`. ([@gnoff](https://github.com/gnoff) in [#24291](https://github.com/facebook/react/pull/24291))



### ESLint Plugin: React Hooks

  * Fix false positive errors with a large number of branches. ([@scyron6](https://github.com/scyron6) in [#24287](https://github.com/facebook/react/pull/24287))
  * Don't consider a known dependency stable when the variable is reassigned. ([@afzalsayed96](https://github.com/afzalsayed96) in [#24343](https://github.com/facebook/react/pull/24343))



### Use Subscription

  * Replace the implementation with the `use-sync-external-store` shim. ([@gaearon](https://github.com/gaearon) in [#24289](https://github.com/facebook/react/pull/24289))



Assets 2

Loading

👍 250 natewu, yusufneeson, rockchalkwushock, liu-yihong, NetLancer, jkoon90, devrsi0n, songjianet, gaby, donguks, and 240 more reacted with thumbs up emoji 😄 53 dimaMachina, hundehausen, nathan3boss, sajadevo, naji0329, alexander-grube, yairdyule, HillLiu, thevuong, zhuangya, and 43 more reacted with laugh emoji 🎉 98 dimaMachina, whoisjordangarcia, hundehausen, akamfoad, ecreeth, nathan3boss, sajadevo, naji0329, alexander-grube, import-brain, and 88 more reacted with hooray emoji ❤️ 72 eideard-hm, thevuong, lucasgdb, phobal, imjordanxd, beetcb, NoMoreViolence, raix, kasipavankumar, mkosir, and 62 more reacted with heart emoji 🚀 84 dimaMachina, hundehausen, svengreb, nathan3boss, sajadevo, naji0329, alexander-grube, import-brain, duzitug, TIMMLOPK, and 74 more reacted with rocket emoji 👀 46 ahsouza, thepmsquare, 3lang3, rodamaral, world56, charlie043, NoMoreViolence, U-C-S, tobyleye, oliverloops, and 36 more reacted with eyes emoji

All reactions

  * 👍 250 reactions
  * 😄 53 reactions
  * 🎉 98 reactions
  * ❤️ 72 reactions
  * 🚀 84 reactions
  * 👀 46 reactions



371 people reacted

## 18.0.0 (March 29, 2022)

29 Mar 17:22 

[acdlite](/acdlite)

[ v18.0.0  ](/facebook/react/tree/v18.0.0)

[ `34aa5cf`](/facebook/react/commit/34aa5cfe0d9b6ec4667e02bf46ab34d83dfb2d6d)

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v18.0.0)

Loading

[View all tags](/facebook/react/tags)

[18.0.0 (March 29, 2022)](/facebook/react/releases/tag/v18.0.0)

Below is a list of all new features, APIs, deprecations, and breaking changes. Read [React 18 release post](https://reactjs.org/blog/2022/03/29/react-v18.html) and [React 18 upgrade guide](https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html) for more information.

### New Features

### React

  * `useId` is a new hook for generating unique IDs on both the client and server, while avoiding hydration mismatches. It is primarily useful for component libraries integrating with accessibility APIs that require unique IDs. This solves an issue that already exists in React 17 and below, but it’s even more important in React 18 because of how the new streaming server renderer delivers HTML out-of-order.
  * `startTransition` and `useTransition` let you mark some state updates as not urgent. Other state updates are considered urgent by default. React will allow urgent state updates (for example, updating a text input) to interrupt non-urgent state updates (for example, rendering a list of search results).
  * `useDeferredValue` lets you defer re-rendering a non-urgent part of the tree. It is similar to debouncing, but has a few advantages compared to it. There is no fixed time delay, so React will attempt the deferred render right after the first render is reflected on the screen. The deferred render is interruptible and doesn't block user input.
  * `useSyncExternalStore` is a new hook that allows external stores to support concurrent reads by forcing updates to the store to be synchronous. It removes the need for `useEffect` when implementing subscriptions to external data sources, and is recommended for any library that integrates with state external to React.
  * `useInsertionEffect` is a new hook that allows CSS-in-JS libraries to address performance issues of injecting styles in render. Unless you’ve already built a CSS-in-JS library we don’t expect you to ever use this. This hook will run after the DOM is mutated, but before layout effects read the new layout. This solves an issue that already exists in React 17 and below, but is even more important in React 18 because React yields to the browser during concurrent rendering, giving it a chance to recalculate layout.



### React DOM Client

These new APIs are now exported from `react-dom/client`:

  * `createRoot`: New method to create a root to `render` or `unmount`. Use it instead of `ReactDOM.render`. New features in React 18 don't work without it.
  * `hydrateRoot`: New method to hydrate a server rendered application. Use it instead of `ReactDOM.hydrate` in conjunction with the new React DOM Server APIs. New features in React 18 don't work without it.



Both `createRoot` and `hydrateRoot` accept a new option called `onRecoverableError` in case you want to be notified when React recovers from errors during rendering or hydration for logging. By default, React will use `reportError`[](https://developer.mozilla.org/en-US/docs/Web/API/reportError), or `console.error` in the older browsers.

### React DOM Server

These new APIs are now exported from `react-dom/server` and have full support for streaming Suspense on the server:

  * `renderToPipeableStream`: for streaming in Node environments.
  * `renderToReadableStream`: for modern edge runtime environments, such as Deno and Cloudflare workers.



The existing `renderToString` method keeps working but is discouraged.

## Deprecations

  * `react-dom`: `ReactDOM.render` has been deprecated. Using it will warn and run your app in React 17 mode.
  * `react-dom`: `ReactDOM.hydrate` has been deprecated. Using it will warn and run your app in React 17 mode.
  * `react-dom`: `ReactDOM.unmountComponentAtNode` has been deprecated.
  * `react-dom`: `ReactDOM.renderSubtreeIntoContainer` has been deprecated.
  * `react-dom/server`: `ReactDOMServer.renderToNodeStream` has been deprecated.



## Breaking Changes

### React

  * **Automatic batching:** This release introduces a performance improvement that changes to the way React batches updates to do more batching automatically. See [Automatic batching for fewer renders in React 18](https://github.com/reactwg/react-18/discussions/21) for more info. In the rare case that you need to opt out, wrap the state update in `flushSync`.
  * **Stricter Strict Mode** : In the future, React will provide a feature that lets components preserve state between unmounts. To prepare for it, React 18 introduces a new development-only check to Strict Mode. React will automatically unmount and remount every component, whenever a component mounts for the first time, restoring the previous state on the second mount. If this breaks your app, consider removing Strict Mode until you can fix the components to be resilient to remounting with existing state.
  * **Consistent useEffect timing** : React now always synchronously flushes effect functions if the update was triggered during a discrete user input event such as a click or a keydown event. Previously, the behavior wasn't always predictable or consistent.
  * **Stricter hydration errors** : Hydration mismatches due to missing or extra text content are now treated like errors instead of warnings. React will no longer attempt to "patch up" individual nodes by inserting or deleting a node on the client in an attempt to match the server markup, and will revert to client rendering up to the closest `<Suspense>` boundary in the tree. This ensures the hydrated tree is consistent and avoids potential privacy and security holes that can be caused by hydration mismatches.
  * **Suspense trees are always consistent:** If a component suspends before it's fully added to the tree, React will not add it to the tree in an incomplete state or fire its effects. Instead, React will throw away the new tree completely, wait for the asynchronous operation to finish, and then retry rendering again from scratch. React will render the retry attempt concurrently, and without blocking the browser.
  * **Layout Effects with Suspense** : When a tree re-suspends and reverts to a fallback, React will now clean up layout effects, and then re-create them when the content inside the boundary is shown again. This fixes an issue which prevented component libraries from correctly measuring layout when used with Suspense.
  * **New JS Environment Requirements** : React now depends on modern browsers features including `Promise`, `Symbol`, and `Object.assign`. If you support older browsers and devices such as Internet Explorer which do not provide modern browser features natively or have non-compliant implementations, consider including a global polyfill in your bundled application.



### Scheduler (Experimental)

  * Remove unstable `scheduler/tracing` API



## Notable Changes

### React

  * **Components can now render`undefined` :** React no longer throws if you return `undefined` from a component. This makes the allowed component return values consistent with values that are allowed in the middle of a component tree. We suggest to use a linter to prevent mistakes like forgetting a `return` statement before JSX.
  * **In tests,`act` warnings are now opt-in:** If you're running end-to-end tests, the `act` warnings are unnecessary. We've introduced an [opt-in](https://github.com/reactwg/react-18/discussions/102) mechanism so you can enable them only for unit tests where they are useful and beneficial.
  * **No warning about`setState` on unmounted components:** Previously, React warned about memory leaks when you call `setState` on an unmounted component. This warning was added for subscriptions, but people primarily run into it in scenarios where setting state is fine, and workarounds make the code worse. We've [removed](https://github.com/facebook/react/pull/22114) this warning.
  * **No suppression of console logs:** When you use Strict Mode, React renders each component twice to help you find unexpected side effects. In React 17, we've suppressed console logs for one of the two renders to make the logs easier to read. In response to [community feedback](https://github.com/facebook/react/issues/21783) about this being confusing, we've removed the suppression. Instead, if you have React DevTools installed, the second log's renders will be displayed in grey, and there will be an option (off by default) to suppress them completely.
  * **Improved memory usage:** React now cleans up more internal fields on unmount, making the impact from unfixed memory leaks that may exist in your application code less severe.



### React DOM Server

  * **`renderToString`:** Will no longer error when suspending on the server. Instead, it will emit the fallback HTML for the closest `<Suspense>` boundary and then retry rendering the same content on the client. It is still recommended that you switch to a streaming API like `renderToPipeableStream` or `renderToReadableStream` instead.
  * **`renderToStaticMarkup`:** Will no longer error when suspending on the server. Instead, it will emit the fallback HTML for the closest `<Suspense>` boundary and retry rendering on the client.



## All Changes

## React

  * Add `useTransition` and `useDeferredValue` to separate urgent updates from transitions. ([#10426](https://github.com/facebook/react/pull/10426), [#10715](https://github.com/facebook/react/pull/10715), [#15593](https://github.com/facebook/react/pull/15593), [#15272](https://github.com/facebook/react/pull/15272), [#15578](https://github.com/facebook/react/pull/15578), [#15769](https://github.com/facebook/react/pull/15769), [#17058](https://github.com/facebook/react/pull/17058), [#18796](https://github.com/facebook/react/pull/18796), [#19121](https://github.com/facebook/react/pull/19121), [#19703](https://github.com/facebook/react/pull/19703), [#19719](https://github.com/facebook/react/pull/19719), [#19724](https://github.com/facebook/react/pull/19724), [#20672](https://github.com/facebook/react/pull/20672), [#20976](https://github.com/facebook/react/pull/20976) by [[@acdlite](https://github.com/acdlite)](<https://git>...



[Read more](/facebook/react/releases/tag/v18.0.0)

Assets 2

Loading

👍 711 aabuhijleh, chayeoi, medanat, yezz123, targos, ricardocanelas, hundehausen, lin72h, andreasnilssondev, AlekseiAndriushin, and 701 more reacted with thumbs up emoji 😄 123 ricardocanelas, lin72h, reichhartd, birdview-HongKi, must479, kytosai, tronikelis, JulesPatry, xxxxue, pedro-lb, and 113 more reacted with laugh emoji 🎉 313 ricardocanelas, hundehausen, lin72h, reichhartd, mario-jerkovic, mahmoudkandeel, RemyMachado, A1101101IR, saitergun, joulev, and 303 more reacted with hooray emoji ❤️ 242 ricardocanelas, lin72h, reichhartd, matuzalemsteles, mario-jerkovic, mahmoudkandeel, birdview-HongKi, josuazurbruegg, fpiaggio-optiwe, sshquack, and 232 more reacted with heart emoji 🚀 256 Danieltf100, medanat, leonardopliski, luoxuhai, aslupin, andipaetzold, RafaelBahiense, ricardocanelas, hundehausen, lin72h, and 246 more reacted with rocket emoji 👀 109 luoxuhai, yezz123, ricardocanelas, reichhartd, sudovijay, tronikelis, JulesPatry, Illu, xxxxue, pedro-lb, and 99 more reacted with eyes emoji

All reactions

  * 👍 711 reactions
  * 😄 123 reactions
  * 🎉 313 reactions
  * ❤️ 242 reactions
  * 🚀 256 reactions
  * 👀 109 reactions



960 people reacted

## 17.0.2 (March 22, 2021)

22 Mar 22:00 

[gaearon](/gaearon)

[ v17.0.2  ](/facebook/react/tree/v17.0.2)

[ `12adaff`](/facebook/react/commit/12adaffef7105e2714f82651ea51936c563fe15c)

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v17.0.2)

Loading

[View all tags](/facebook/react/tags)

[17.0.2 (March 22, 2021)](/facebook/react/releases/tag/v17.0.2)

### React DOM

  * Remove an unused dependency to address the `SharedArrayBuffer`[ cross-origin isolation warning](https://developer.chrome.com/blog/enabling-shared-array-buffer/). ([@koba04](https://github.com/koba04) and [@bvaughn](https://github.com/bvaughn) in [#20831](https://github.com/facebook/react/pull/20831), [#20832](https://github.com/facebook/react/pull/20832), and [#20840](https://github.com/facebook/react/pull/20840))



## Artifacts

  * react: <https://unpkg.com/react@17.0.2/umd/>
  * react-art: <https://unpkg.com/react-art@17.0.2/umd/>
  * react-dom: <https://unpkg.com/react-dom@17.0.2/umd/>
  * react-is: <https://unpkg.com/react-is@17.0.2/umd/>
  * react-test-renderer: <https://unpkg.com/react-test-renderer@17.0.2/umd/>
  * scheduler: <https://unpkg.com/scheduler@0.20.2/umd/>



Assets 2

Loading

👍 148 asumaran, moongue, niubaba63, ogawaryu, lkzwc, cdslily, Mayandev, cococov, Nikolozi-Code, luvagu, and 138 more reacted with thumbs up emoji 😄 42 asumaran, cococov, sungkwangkim, leandrowilliam, shourysharma, andrey1997acer, zeayal, NavidMansuri5155, pH-7, 365kim, and 32 more reacted with laugh emoji 🎉 51 asumaran, cococov, sungkwangkim, shourysharma, raysubham, andrey1997acer, zeayal, imaksp, NavidMansuri5155, pH-7, and 41 more reacted with hooray emoji ❤️ 53 asumaran, mohitsinhchavda, shourysharma, raysubham, andrey1997acer, zeayal, NavidMansuri5155, 365kim, masudparvezsajjad, zereight, and 43 more reacted with heart emoji 🚀 55 asumaran, maxpou, cococov, sungkwangkim, leandrowilliam, crazy-grizzly, mohitsinhchavda, shourysharma, raysubham, theory-of-soul, and 45 more reacted with rocket emoji 👀 40 asumaran, cococov, shourysharma, andrey1997acer, zeayal, NavidMansuri5155, jettandres, DJLuis97, 365kim, rodamaral, and 30 more reacted with eyes emoji

All reactions

  * 👍 148 reactions
  * 😄 42 reactions
  * 🎉 51 reactions
  * ❤️ 53 reactions
  * 🚀 55 reactions
  * 👀 40 reactions



187 people reacted

## 17.0.1 (October 22, 2020)

22 Mar 21:59 

[gaearon](/gaearon)

[ v17.0.1  ](/facebook/react/tree/v17.0.1)

[ `8e5adfb`](/facebook/react/commit/8e5adfbd7e605bda9c5e96c10e015b3dc0df688e)

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v17.0.1)

Loading

[View all tags](/facebook/react/tags)

[17.0.1 (October 22, 2020)](/facebook/react/releases/tag/v17.0.1)

### React DOM

  * Fix a crash in IE11. ([@gaearon](https://github.com/gaearon) in [#20071](https://github.com/facebook/react/pull/20071))



Assets 2

Loading

👍 2 chris6090 and ikhtearalamshawonmollah54321 reacted with thumbs up emoji 😄 14 hoa00, farm16, ArthurIanb, joshkautz, vituchini, liuhaiyang1997, Schweinepriester, theoludwig, huynhdev24, njosueofficol, and 4 more reacted with laugh emoji 🎉 2 chris6090 and ikhtearalamshawonmollah54321 reacted with hooray emoji ❤️ 14 SonNg2k, farzadrastgar, rex11458, sadeghbarati, Jmenache, 010265mohamadazat, jose1937JS, vahidalvandi, njosueofficol, krishangopalgupta, and 4 more reacted with heart emoji 🚀 3 dream2023, chris6090, and ikhtearalamshawonmollah54321 reacted with rocket emoji 👀 5 zereight, sadeghbarati, kstejas, vkzkvkzk, and chris6090 reacted with eyes emoji

All reactions

  * 👍 2 reactions
  * 😄 14 reactions
  * 🎉 2 reactions
  * ❤️ 14 reactions
  * 🚀 3 reactions
  * 👀 5 reactions



29 people reacted

## 17.0.0 (October 20, 2020)

20 Oct 20:45 

[gaearon](/gaearon)

[ v17.0.0  ](/facebook/react/tree/v17.0.0)

[ `89b6109`](/facebook/react/commit/89b610969d70d788f8c9769e3fa5b0044f5737ab)

Compare

Choose a tag to compare

Could not load tags

Nothing to show

[ {{ refName }} default ](/facebook/react/compare/{{ urlEncodedRefName }}...v17.0.0)

Loading

[View all tags](/facebook/react/tags)

[17.0.0 (October 20, 2020)](/facebook/react/releases/tag/v17.0.0)

Today, we are releasing React 17!

**[Learn more about React 17 and how to update to it on the official React blog.](https://reactjs.org/blog/2020/10/20/react-v17.html)**

### React

  * Add `react/jsx-runtime` and `react/jsx-dev-runtime` for the [new JSX transform](https://babeljs.io/blog/2020/03/16/7.9.0#a-new-jsx-transform-11154-https-githubcom-babel-babel-pull-11154). ([@lunaruan](https://github.com/lunaruan) in [#18299](https://github.com/facebook/react/pull/18299))
  * Build component stacks from native error frames. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18561](https://github.com/facebook/react/pull/18561))
  * Allow to specify `displayName` on context for improved stacks. ([@eps1lon](https://github.com/eps1lon) in [#18224](https://github.com/facebook/react/pull/18224))
  * Prevent `'use strict'` from leaking in the UMD bundles. ([@koba04](https://github.com/koba04) in [#19614](https://github.com/facebook/react/pull/19614))
  * Stop using `fb.me` for redirects. ([@cylim](https://github.com/cylim) in [#19598](https://github.com/facebook/react/pull/19598))



### React DOM

  * Delegate events to roots instead of `document`. ([@trueadm](https://github.com/trueadm) in [#18195](https://github.com/facebook/react/pull/18195) and [others](https://github.com/facebook/react/pulls?q=is%3Apr+author%3Atrueadm+modern+event+is%3Amerged))
  * Clean up all effects before running any next effects. ([@bvaughn](https://github.com/bvaughn) in [#17947](https://github.com/facebook/react/pull/17947))
  * Run `useEffect` cleanup functions asynchronously. ([@bvaughn](https://github.com/bvaughn) in [#17925](https://github.com/facebook/react/pull/17925))
  * Use browser `focusin` and `focusout` for `onFocus` and `onBlur`. ([@trueadm](https://github.com/trueadm) in [#19186](https://github.com/facebook/react/pull/19186))
  * Make all `Capture` events use the browser capture phase. ([@trueadm](https://github.com/trueadm) in [#19221](https://github.com/facebook/react/pull/19221))
  * Don't emulate bubbling of the `onScroll` event. ([@gaearon](https://github.com/gaearon) in [#19464](https://github.com/facebook/react/pull/19464))
  * Throw if `forwardRef` or `memo` component returns `undefined`. ([@gaearon](https://github.com/gaearon) in [#19550](https://github.com/facebook/react/pull/19550))
  * Remove event pooling. ([@trueadm](https://github.com/trueadm) in [#18969](https://github.com/facebook/react/pull/18969))
  * Stop exposing internals that won’t be needed by React Native Web. ([@necolas](https://github.com/necolas) in [#18483](https://github.com/facebook/react/pull/18483))
  * Attach all known event listeners when the root mounts. ([@gaearon](https://github.com/gaearon) in [#19659](https://github.com/facebook/react/pull/19659))
  * Disable `console` in the second render pass of DEV mode double render. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18547](https://github.com/facebook/react/pull/18547))
  * Deprecate the undocumented and misleading `ReactTestUtils.SimulateNative` API. ([@gaearon](https://github.com/gaearon) in [#13407](https://github.com/facebook/react/pull/13407))
  * Rename private field names used in the internals. ([@gaearon](https://github.com/gaearon) in [#18377](https://github.com/facebook/react/pull/18377))
  * Don't call User Timing API in development. ([@gaearon](https://github.com/gaearon) in [#18417](https://github.com/facebook/react/pull/18417))
  * Disable console during the repeated render in Strict Mode. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18547](https://github.com/facebook/react/pull/18547))
  * In Strict Mode, double-render components without Hooks too. ([@eps1lon](https://github.com/eps1lon) in [#18430](https://github.com/facebook/react/pull/18430))
  * Allow calling `ReactDOM.flushSync` during lifecycle methods (but warn). ([@sebmarkbage](https://github.com/sebmarkbage) in [#18759](https://github.com/facebook/react/pull/18759))
  * Add the `code` property to the keyboard event objects. ([@bl00mber](https://github.com/bl00mber) in [#18287](https://github.com/facebook/react/pull/18287))
  * Add the `disableRemotePlayback` property for `video` elements. ([@tombrowndev](https://github.com/tombrowndev) in [#18619](https://github.com/facebook/react/pull/18619))
  * Add the `enterKeyHint` property for `input` elements. ([@eps1lon](https://github.com/eps1lon) in [#18634](https://github.com/facebook/react/pull/18634))
  * Warn when no `value` is provided to `<Context.Provider>`. ([@charlie1404](https://github.com/charlie1404) in [#19054](https://github.com/facebook/react/pull/19054))
  * Warn when `memo` or `forwardRef` components return `undefined`. ([@bvaughn](https://github.com/bvaughn) in [#19550](https://github.com/facebook/react/pull/19550))
  * Improve the error message for invalid updates. ([@JoviDeCroock](https://github.com/JoviDeCroock) in [#18316](https://github.com/facebook/react/pull/18316))
  * Exclude forwardRef and memo from stack frames. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18559](https://github.com/facebook/react/pull/18559))
  * Improve the error message when switching between controlled and uncontrolled inputs. ([@vcarl](https://github.com/vcarl) in [#17070](https://github.com/facebook/react/pull/17070))
  * Keep `onTouchStart`, `onTouchMove`, and `onWheel` passive. ([@gaearon](https://github.com/gaearon) in [#19654](https://github.com/facebook/react/pull/19654))
  * Fix `setState` hanging in development inside a closed iframe. ([@gaearon](https://github.com/gaearon) in [#19220](https://github.com/facebook/react/pull/19220))
  * Fix rendering bailout for lazy components with `defaultProps`. ([@jddxf](https://github.com/jddxf) in [#18539](https://github.com/facebook/react/pull/18539))
  * Fix a false positive warning when `dangerouslySetInnerHTML` is `undefined`. ([@eps1lon](https://github.com/eps1lon) in [#18676](https://github.com/facebook/react/pull/18676))
  * Fix Test Utils with non-standard `require` implementation. ([@just-boris](https://github.com/just-boris) in [#18632](https://github.com/facebook/react/pull/18632))
  * Fix `onBeforeInput` reporting an incorrect `event.type`. ([@eps1lon](https://github.com/eps1lon) in [#19561](https://github.com/facebook/react/pull/19561))
  * Fix `event.relatedTarget` reported as `undefined` in Firefox. ([@claytercek](https://github.com/claytercek) in [#19607](https://github.com/facebook/react/pull/19607))
  * Fix "unspecified error" in IE11. ([@hemakshis](https://github.com/hemakshis) in [#19664](https://github.com/facebook/react/pull/19664))
  * Fix rendering into a shadow root. ([@Jack-Works](https://github.com/Jack-Works) in [#15894](https://github.com/facebook/react/pull/15894))
  * Fix `movementX/Y` polyfill with capture events. ([@gaearon](https://github.com/gaearon) in [#19672](https://github.com/facebook/react/pull/19672))
  * Use delegation for `onSubmit` and `onReset` events. ([@gaearon](https://github.com/gaearon) in [#19333](https://github.com/facebook/react/pull/19333))
  * Improve memory usage. ([@trueadm](https://github.com/trueadm) in [#18970](https://github.com/facebook/react/pull/18970))



### React DOM Server

  * Make `useCallback` behavior consistent with `useMemo` for the server renderer. ([@alexmckenley](https://github.com/alexmckenley) in [#18783](https://github.com/facebook/react/pull/18783))
  * Fix state leaking when a function component throws. ([@pmaccart](https://github.com/pmaccart) in [#19212](https://github.com/facebook/react/pull/19212))



### React Test Renderer

  * Improve `findByType` error message. ([@henryqdineen](https://github.com/henryqdineen) in [#17439](https://github.com/facebook/react/pull/17439))



### Concurrent Mode (Experimental)

  * Revamp the priority batching heuristics. ([@acdlite](https://github.com/acdlite) in [#18796](https://github.com/facebook/react/pull/18796))
  * Add the `unstable_` prefix before the experimental APIs. ([@acdlite](https://github.com/acdlite) in [#18825](https://github.com/facebook/react/pull/18825))
  * Remove `unstable_discreteUpdates` and `unstable_flushDiscreteUpdates`. ([@trueadm](https://github.com/trueadm) in [#18825](https://github.com/facebook/react/pull/18825))
  * Remove the `timeoutMs` argument. ([@acdlite](https://github.com/acdlite) in [#19703](https://github.com/facebook/react/pull/19703))
  * Disable `<div hidden />` prerendering in favor of a different future API. ([@acdlite](https://github.com/acdlite) in [#18917](https://github.com/facebook/react/pull/18917))
  * Add `unstable_expectedLoadTime` to Suspense for CPU-bound trees. ([@acdlite](https://github.com/acdlite) in [#19936](https://github.com/facebook/react/pull/19936))
  * Add an experimental `unstable_useOpaqueIdentifier` Hook. ([@lunaruan](https://github.com/lunaruan) in [#17322](https://github.com/facebook/react/pull/17322))
  * Add an experimental `unstable_startTransition` API. ([@rickhanlonii](https://github.com/rickhanlonii) in [#19696](https://github.com/facebook/react/pull/19696))
  * Using `act` in the test renderer no longer flushes Suspense fallbacks. ([@acdlite](https://github.com/acdlite) in [#18596](https://github.com/facebook/react/pull/18596))
  * Use global render timeout for CPU Suspense. ([@sebmarkbage](https://github.com/sebmarkbage) in [#19643](https://github.com/facebook/react/pull/19643))
  * Clear the existing root content before mounting. ([@bvaughn](https://github.com/bvaughn) in [#18730](https://github.com/facebook/react/pull/18730))
  * Fix a bug with error boundaries. ([@acdlite](https://github.com/acdlite) in [#18265](https://github.com/facebook/react/pull/18265))
  * Fix a bug causing dropped updates in a suspended tree. ([@acdlite](https://github.com/acdlite) in [#18384](https://github.com/facebook/react/pull/18384) and [#18457](https://github.com/facebook/react/pull/18457))
  * Fix a bug causing dropped render phase updates. ([@acdlite](https://github.com/acdlite) in [#18537](https://github.com/facebook/react/pull/18537))
  * Fix a bug in Suspens...



[Read more](/facebook/react/releases/tag/v17.0.0)

Assets 2

Loading

👍 22 kwiniarski97, eduardo-fernandes-marques, andriyor, sadeghbarati, bulabulaka, Jmenache, lucas-dolsan, yusoofsh, HazemKhaled, jamesalmeida, and 12 more reacted with thumbs up emoji 😄 2 subham007-coder and lin72h reacted with laugh emoji 🎉 7 perseus98, hansfpc, Shubhamsharma585, kyuhyunIm, chris6090, lin72h, and ikhtearalamshawonmollah54321 reacted with hooray emoji ❤️ 9 0xping, gonzalovazquez, theenadayalan-byjus, hansfpc, Shubhamsharma585, kyuhyunIm, chris6090, lin72h, and ikhtearalamshawonmollah54321 reacted with heart emoji 🚀 8 duzitug, hansfpc, gokul-pathak, Shubhamsharma585, kyuhyunIm, chris6090, lin72h, and ikhtearalamshawonmollah54321 reacted with rocket emoji 👀 5 huynhdev24, Shubhamsharma585, kyuhyunIm, Arnavdons, and chris6090 reacted with eyes emoji

All reactions

  * 👍 22 reactions
  * 😄 2 reactions
  * 🎉 7 reactions
  * ❤️ 9 reactions
  * 🚀 8 reactions
  * 👀 5 reactions



30 people reacted

Previous _1_ [2](/facebook/react/releases?page=2) [3](/facebook/react/releases?page=3) [4](/facebook/react/releases?page=4) [5](/facebook/react/releases?page=5) … [10](/facebook/react/releases?page=10) [11](/facebook/react/releases?page=11) [Next](/facebook/react/releases?page=2)

Previous [Next](/facebook/react/releases?page=2)

## Footer

[ ](https://github.com "GitHub") © 2024 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You can’t perform that action at this time. 
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

How A Small Team of Developers Created React at Facebook | React.js: The Documentary

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

95%

•

Up next

LiveUpcoming

CancelPlay Now

[From Node.js to Deno: How It All Began9:12](https://www.youtube.com/watch?v=zxitJn9MwYs)

[Node.js: The Documentary [OFFICIAL TRAILER]1:51](https://www.youtube.com/watch?v=SfWPqr04srM)

Honeypot | Europe's Developer-Focused Job Platform

honeypot.io

[Sign up](https://www.youtube.com/redirect?event=endscreen&redir_token=QUFFLUhqbFpTaVZORGtqUFBRcWlrVTdKanhoWDdwTTFWZ3xBQ3Jtc0ttVHl2THFBZ2J3NUFnUHJqbkVmQnBodThRNG9fZE1ncXdqdDJrdFo1NkdsWkFkVnJaQWxKRWhNNlc0MTI4b2lmeFIwS2ppUzgza1dFZFJGQVh5dzAzdDBjZzBIQkEtQkpRYVJBd2pYWnVUS0VjVEVoWQ&q=honeypot.io)

Honeypot

Subscribe

Subscribed

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?v=LB8KwiiUGy0 "Next \(SHIFT+n\)")

0:00 / 1:18:14•Watch full videoLive

•

•

Scroll for details

#  How A Small Team of Developers Created React at Facebook | React.js: The Documentary

[](/@Honeypotio)

[Honeypot](/@Honeypotio)

Honeypot 

238K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

37K

Share

Download

Download 

Save

1.4M views1 year ago

1,422,617 views • Premiered Feb 10, 2023 

Show less 

React is easily one of the single most popular libraries in use today. Given that it was made within a juggernaut like Facebook, you might have assumed it was always destined for success.…...more 

...more 

Transcript

Follow along using the transcript.

Show transcript

### [Honeypot 238K subscribers  ](/@Honeypotio)

[Videos](/channel/UCsUalyRg43M8D60mtHe6YcA/videos)

[About](/channel/UCsUalyRg43M8D60mtHe6YcA/about)

[Videos](/channel/UCsUalyRg43M8D60mtHe6YcA/videos)[About](/channel/UCsUalyRg43M8D60mtHe6YcA/about)[Twitter](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqazlNRDJPZWJORXJ3WW9tcEhxUjR5blJzUmpad3xBQ3Jtc0tuOFlNV1NTNnJicVY0REV4SjBjQkRxcmxrRGxCZm5lMFpwV01vOVQyc0pReHp2end1Z1J2dll1WlRLR3dQUGR6SzhjNzg3Q1pMQXhVNGNUVnpsZlpaTWpuR1hmTThNUzlZNUlQOFRrT01zcWpvcmdrbw&q=https%3A%2F%2Ftwitter.com%2Fhoneypotio)[Linkedin](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbmVEMF9aV0pIQXNfeEtmQ0ZDcW5IeVdNa2hQQXxBQ3Jtc0tsU0txTFZiYUJOcG9sM1pwVmlqUWNpS2ZJWlZDZFZRUHQ1VlpTQ3dnb0hFXzNnVm1XVUdMc3pGbXRNWFczbVowLU9FUk1TMkNFb3FuRjh1NS05ZWFwNmQyOHJOdXBTMElmOVhLNE05cVdMZjlsRndIaw&q=https%3A%2F%2Fwww.linkedin.com%2Fcompany%2F10210811%2F)[Instagram](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa18xSHVNUnFuZmxZb1RwTU4tcDhFY1UtNjBJUXxBQ3Jtc0tsMWtZSzZrY2pMMExadkU4TEh0N3dQYjE0WlktMDNNZjZwVVBKUkx6ekNNQzZYSURIR2hiVERKTkZkWGhiMEZfakpQd0g0MzQxbEY1QV82UHVQVTBlUWxlMlUtTlZkQ3JIbWQtczJqanBoUlhBWHVFdw&q=https%3A%2F%2Fwww.instagram.com%2Fhoneypot.cult%2F)[Facebook](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbVQ5cmJvVE5KczdOdkk1T2Z3aXpQa1E1cThEd3xBQ3Jtc0ttR0EwMWk4d0RKNU9FOUtaeUxoNGlkNFFrVmV5ZUxGMno4NGRMYnFNZ1dGQ2pHQVBxbk5FVTZBdFZCTnlnUXpYYlhzU0FXR2hLR3pqV2NHLXVvM0ZUTmFhWmhlQnRrTmxjYjEwUExfVnBUa1ptbkxPQQ&q=https%3A%2F%2Fwww.facebook.com%2FHoneypotio%2F)

[ 7:14 7:14  ](/watch?v=WvRcZkuXmpo) [ Andrew Clark on the Creation of Redux by Honeypot ](/watch?v=WvRcZkuXmpo)

Show less 

## Live chat replay

See what others said about this video while it was live.

Open panel

# How A Small Team of Developers Created React at Facebook | React.js: The Documentary

1,422,617 views1.4M views

Premiered Feb 10, 2023

37K

Share

Download

Download 

Save

##  Comments 1.1K

Top comments  Newest first 

##  Description

How A Small Team of Developers Created React at Facebook | React.js: The Documentary

React is easily one of the single most popular libraries in use today. Given that it was made within a juggernaut like Facebook, you might have assumed it was always destined for success. But what if we told you that React’s first brush with the public sphere was anything but glamorous? React.js: The Documentary brings you the full story behind the early days of React, focusing on the dedicated group of developers who helped bring it to the world stage. This story is told by an all-star cast of developers like Tom Occhino, Christopher Chedeau, Pete Hunt, Sebastian Markbåge, Dan Abramov, and many more. Check out the home for untold developer stories around open source, careers and all the other cool stuff developers are doing at cult.honeypot.io. Honeypot is a developer-focused job platform, on a mission to get developers great jobs. Wanna see what we're all about? Visit honeypot.io to find a job you love. To learn more about Honeypot: [https://bit.ly/3OGoDjG](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbkRtdVV3QWVSUTNiSFp0VDMxRV8ycWV0NjFFQXxBQ3Jtc0tuQVZ4bGJRZ0NmOWprWUxaR0dlNlh3VlpwRTN4MzJKa0hDckM0ZGxkY1pZMVdBeXMzVFVTM3ZScU1VMF9sbDRIVUdzVXgxZnFyTGF6RlFOWDNpdDl1Q04wRmcyZWpELXU3SzVaOUg1b1FxSDlNRnRFNA&q=https%3A%2F%2Fbit.ly%2F3OGoDjG&v=8pDqJVdNa44) Follow the cast: Adam Wolff: [ / dmwlff ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnF4Y2I0ZV9yT0o2M2lGWk9QOEpMcGRwbVU4QXxBQ3Jtc0tsbS0yRHFIbWhGenhHZFg4Zm83Z3VzVlBoeTVmcDQ0SElRM2Y3dTBZbDVfVUxlcEN4VDljNjZwVWF2QXNDTzdnVVRhY3J5QnZPc25JZFg1aDhUNElCMGtlSkQ4NVNRMkt5M2I2VUQ0X2JickZWVWp4TQ&q=https%3A%2F%2Ftwitter.com%2Fdmwlff&v=8pDqJVdNa44) Andrew Clark: [ / acdlite ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbTJnTmNZanhWNWNXSkp0QVIyWk1tS2JvS3dYd3xBQ3Jtc0trSmticXFZY3BQQVNDdlRmcnRDa0l5cFNfTzczaXZOVmJjWnFQWlpTeUJMM1UwRVlYRXBianhwNDhmYTFidURhQnBZSGlXQUJUR1o0LXBUenphOFFXSVFJQzhmUHZacWlEVHRGNVZnWGxaYld2T1czYw&q=https%3A%2F%2Ftwitter.com%2Facdlite&v=8pDqJVdNa44) Christopher Chedeau: [ / vjeux ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbVBOaTQ1TGE0Y1BZd0F3UU5nYlR0bVByN2xiQXxBQ3Jtc0trWGVCbldXbl9NZHRxajFVOU9ZUjN1azlOMzFQcmkxSWNZZ0dxV2ZSNWtnQU5lZkR1SXl5Z0ZrelFfR3FzaXlmeXZkWnBINUYtRDBLcVM1U1lzbldmUUQwQnBGQV9rWVlGNmgtOWU1NEZCUWw1b0Z3cw&q=https%3A%2F%2Ftwitter.com%2FVjeux&v=8pDqJVdNa44) Dan Abramov: [ / dan_abramov ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbVpEMnMxdUFmSWQ3cElFcWJuSllxWmpPbEo0d3xBQ3Jtc0traGFiQTdJcnlqSTEyZkJlMG9xeHdrYzM3dXprZGhDa0FuSy1rempHdGkySE8xME5hbjkyTHpOdGtOMmR3cDczNU85VlhnZU12bWdiQXIyYTUzQ1k3Q095YWdTUHpVQUp4cklhOG53NHFJR1Z4YkcxMA&q=https%3A%2F%2Ftwitter.com%2Fdan_abramov&v=8pDqJVdNa44) David Nolen: [ / swannodette ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2NldF90LWdicTdVNVJvLUYzYTcxMFcwN200UXxBQ3Jtc0trS05WZ1N1bmVnUUxSZlhoVmhGZk41YUM2MVRKSVEteDRRLTZiUHpDQXFKZGc4ZnJ2UjFTM3I3dE5sRkJ0aHdtVHFHSHJKci1HRFFJcnpVVllNUmVMWDdKWV9FYTFMWUpwR1VIaFJ0MEVrMlJ3OFM0OA&q=https%3A%2F%2Ftwitter.com%2Fswannodette&v=8pDqJVdNa44) Lee Byron: [ / leeb ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqazE5dWFPNWlONmZRNTBmR2Z4bUJ3aXg5SUtrZ3xBQ3Jtc0tsc09YMksyNlp5Q2c4WFBXb25LcWNxaUlNcWpiQTRvVjVnMklZTWZMT3RBSURvemJkcm0xNHZVU25BOG9kZ1VaREdESnBpZEJ3Y0hhVC0yQzFSdmNpZDhWeC1FQjRPOHdzM3VwX2g3VW5OTURLclBJVQ&q=https%3A%2F%2Ftwitter.com%2Fleeb&v=8pDqJVdNa44) Michael Chan: [ / chantastic ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2hvOTdXMU1kSVJUbXZBbGNsa2p1ZWltSEpOQXxBQ3Jtc0tsRXFoaHJRQ05EUXhRbTRUNDZ0akRvUF82ZjBZOTR6WlFSUFdlOWgzNkFvVVIyelFJMFhXTDNzcTFXYUlsRFVxVEtqaUhvV3NCMEVkc2s5RTNNdzFfcUJQTXllWmo0UGJhWWZwT0xiZi1waG9ER0Y1cw&q=https%3A%2F%2Ftwitter.com%2Fchantastic&v=8pDqJVdNa44) Pete Hunt: [ / floydophone ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbmFwSEtuQkxzX0hLLWxrSWRCZDNwVk1uMVVZQXxBQ3Jtc0trMVJLNWpEbVJjSDNzV2UwNFZ3Ylh5SnYwWFAzSzRDYUEtWjZ0TVRJWF83RDdvNFdzV2p5cnJURUdiSnpDMlIzXzgxZ2RnUWpIcFdXeUJZbzJrY0R0M01FZVRVRFZCQmFva3hWMVo3bkJOTENBaGJoWQ&q=https%3A%2F%2Ftwitter.com%2Ffloydophone&v=8pDqJVdNa44) Sebastian Markbåge: [ / sebmarkbage ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnhqdzZTYnRjNy1xbGZ6MDlUOXFndTRuUHlPUXxBQ3Jtc0ttRmhpMl9kd1M0STJHd01UTWJ1d2xQMV9mRWpCUVp4Yk5GbkdyMjl2ZVZkX1Y5Rzh1aDVWVWtNMksyelI2ZWVpWklITk1DSExWbEcxWnI0ZHE2Y3hnTS1kZ2kzSzFPQjBYSjBWbVE4aEtPcmNBaUN4Yw&q=https%3A%2F%2Ftwitter.com%2Fsebmarkbage&v=8pDqJVdNa44) Shane O'Sullivan: [ / chofter ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2taQTVUdEhaQmdXNGdVQ2VHTlNPU2FsM2h0d3xBQ3Jtc0tsWmtnWGZHa0U3eE5LeDZsV05hUE9BazVEX0pVVHFJeThpc3dIYjBkQ3FNTEZzdlRCRzBpVHVzZ01PZHJOb3ZxTkRBaXRUc2ZIRHptdncwRVFCSkNEWWx5ZnY3Q3V1a1VHX3AybndhWE55M1ZhSUZJMA&q=https%3A%2F%2Ftwitter.com%2FChofter&v=8pDqJVdNa44) and [https://chofter.com/](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbERWUWI5X3lLbGNUNlMwRGVxSEdlZXE5REFYd3xBQ3Jtc0ttUUcxWTFBTllOWFpYNThSb1FFa3ljOFhoQVRheVRDM0lQcmtESDdkUGV1by1UZVpFMmpjUEEzaHlmUjZTVXdFcF9PUlFJLUR5NVNTWnkyazJXcEoxQjlRYTZZTFFzbXJueW8xWDl6azBfbXE5aEJORQ&q=https%3A%2F%2Fchofter.com%2F&v=8pDqJVdNa44) Sophie Alpert: [ / sophiebits ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbFlxampVMGRnSVJtaGoySmZEbDJtRHhpbVh4QXxBQ3Jtc0tsNE1vREpxQ09OdzlGb1J3a1JXaE1xc0FvUUEwWk9yeTZYUDU5QWp3WV9vVkRldm9sWW9EeUtKRUpudUdUbmtIeHNyVTRBcnpGNXdwTEd4SlBnbzg1elE3U3JnTmlraFVBVXVVTHI3YWU2WDVyRHRFTQ&q=https%3A%2F%2Ftwitter.com%2Fsophiebits&v=8pDqJVdNa44) and [https://sophiebits.com/](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa0JjdjA3SVVuNFpFN2x5bjVsb09iTERmSUUzUXxBQ3Jtc0treVdSY00yb2taQlZ2MnFXUFNyTW9YcE5OcHZicS1ZdUdJaktPUi1JSWpwZjFDMTRPTHRiNkN0MFhjT3VTaWYyOFFwT1plMUdCWXJTclhJdlhScGtQV0FZSk1BUk0xQmRRZW5JRzhMSHBnM1F4MHBydw&q=https%3A%2F%2Fsophiebits.com%2F&v=8pDqJVdNa44) Tom Occhino: [ / tomocchino ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbm1hWjBRSTd5cHZxbWUwVDZ5bWtkNWFnV294d3xBQ3Jtc0tuNWR4RWZuT2dGaEVqZlJIM2VqcE91LWVIVzdjSkJGcE05U21xaFZuSjJYUmh6T242RnRnemdHMXZaa2xSWGk1UWEwWkNUQzI4bVNILXFqMEJxaGJ1Z3RfdzVfNlRvUkc2YmpSNzJJRjhRcE1BZXd2WQ&q=https%3A%2F%2Ftwitter.com%2Ftomocchino&v=8pDqJVdNa44) Tony Casparro: [ / iamtonyc ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbHpHdnYzeVU3ejRwQWgzdHQyYmxxXzZRYWFDZ3xBQ3Jtc0ttOFdUblpiTlNSTVlKc0N5SWgxazBxczRWaGFvMEZ3alVZYzVpekk2dWh2Rk94Z05PbXRGeFRrNTVGRGVvZE0yQi1rS204QnUzcU9hN3A3NUU1MXZFT1J0VmRaNmpWYUl6MHptN0xyMlZSRTJ1aEFuSQ&q=https%3A%2F%2Ftwitter.com%2FIamTonyC&v=8pDqJVdNa44) Many people contributed to React throughout the years and this documentary is just a little slice of that history. You can find full acknowledgements here: [https://reactjs.org/acknowledgements....](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnF3MmJJcHV3NV9BWklhNWJqSmxvZktueUROQXxBQ3Jtc0ttNVVuOVFnc1FWcW5sXzBGbVhjd1JQbzJyNXpHYldnMTk5VXdhTmx1ck1vRXdqcWxCODJrYVg4a0dINUlSU19pUTdERGNHRHBrclozdnVRb0lOVE9nYVo4cl9KVjFscjJqYVNWa2xFZ21oWHZIRHFKWQ&q=https%3A%2F%2Freactjs.org%2Facknowledgements.html&v=8pDqJVdNa44) Thanks to these amazing people for translating subtitles: Charlie: [ / charliesbot ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa3JQYUJxemI4UC1fWGFjbHpvRVY0aVZsaHRpUXxBQ3Jtc0tsV3V0Zkg0Z1RKWkhSN040Q3BieE1nZEpzTFR2OVdjLWp5UjM0T1VvTndKSFJHOVVEUFJyT3BkTHh3OEVmTEo2d2dpbHowUEZqVlZrYmxmU29scDg5VTVrTENrcFd2SERwblZxU25UUE5CMTNpbWFHdw&q=https%3A%2F%2Ftwitter.com%2Fcharliesbot&v=8pDqJVdNa44) Jose: [ / jbetosalinas ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa0ljdnZfOHpqd3I4cWVKZ1Nic1NkQlRtWDc1QXxBQ3Jtc0trVldLc0hleThQYlNub3pnalg1QkZxLUlLRlA5a2JoWTN1WW40V29XcEJBelRPdm12NzZtYzlFWE5WZHZnSVNQd2RTai1xdXRSM0pGWkowRnhpMUVhMWdRVlVnazFhSUdiN2l2TEVFZkM4UHNkVGM1cw&q=https%3A%2F%2Ftwitter.com%2Fjbetosalinas&v=8pDqJVdNa44) Gustavo Gonçalves Follow us: Twitter: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2lqQWNUVGpmaXNFc2trOEkwOV9zNTNSTkFYQXxBQ3Jtc0trNVR1QU5aaURDZWp0WXI0UUNlQkNyRlQxQUN0N2FBZzBDXzE3M29GbWpkaVJnTnh3OHFkMDhrbzZ5dWljcHFZQ2x5bzFiazQ0a2hfekF1N3c5RERJUFJDM3JZVmFZTTRJcmQ3X2VFQnU5SktFMzdEaw&q=https%3A%2F%2Ftwitter.com%2Fhoneypotio&v=8pDqJVdNa44) Facebook: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbUpQSkNvV0d0dkZXYVFJbllNT01Yc3dZQUwzUXxBQ3Jtc0tuQnEwaUdEa1BtRlIzd2FSSTV4bW03dEwwOGFRZnVTdk4ybTNSdzBVcHAtd0JXbDZwS2djMXJ2cTFzZUZHQmx3OFR4U0tnZFlrNzJlMlQxa3A5S3czeHlFSWVoUWM0bGlzTk41cWJNMDJzM0tROEdZbw&q=https%3A%2F%2Fwww.facebook.com%2FHoneypotio%2F&v=8pDqJVdNa44) LinkedIn: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2dFcmRaWWtWN0c4d1Mxd0RjUTNjMDFXWXNuUXxBQ3Jtc0tsNk00RHFMU2NMSl8yWUZEcDNvaFViZ2p2aDNqR3hiaHlNNWotdUNfWEprT0tlY2hhUFN5Vk5SOGE0OWRjRUZHVXlqMF9NcUhGSjBVbWFnenc5YS1IdTJHc0Q0YWJEY0YtQmFnZDRhMkp1eDlCU29nQQ&q=https%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fhoneypotio%2F&v=8pDqJVdNa44) Instagram: [ / honeypot.cult ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbS1iQ1FGeEhpanNkTHpSVVNOdzlDQ2VVaU9VUXxBQ3Jtc0tuUDJqYy1Rbk16am1IOHZGWTZrUUlsWWVKYXoyYk9VS29FeGZ0MjJBQlZhRHRia3owaWdiWUFtd0FfQmVSZVh3a2ZwczNxek9mMm9KcXdSV2U3SHpNeDZhNTU0X3lZdkJmemxTblhFZHM0d25kWGpNNA&q=https%3A%2F%2Fwww.instagram.com%2Fhoneypot.cult%2F&v=8pDqJVdNa44)

Show less ...more

React is easily one of the single most popular libraries in use today. Given that it was made within a juggernaut like Facebook, you might have assumed it was always destined for success. But what if we told you that React’s first brush with the public sphere was anything but glamorous? React.js: The Documentary brings you the full story behind the early days of React, focusing on the dedicated group of developers who helped bring it to the world stage. This story is told by an all-star cast of developers like Tom Occhino, Christopher Chedeau, Pete Hunt, Sebastian Markbåge, Dan Abramov, and many more. Check out the home for untold developer stories around open source, careers and all the other cool stuff developers are doing at cult.honeypot.io. Honeypot is a developer-focused job platform, on a mission to get developers great jobs. Wanna see what we're all about? Visit honeypot.io to find a job you love. To learn more about Honeypot: [https://bit.ly/3OGoDjG](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbkRtdVV3QWVSUTNiSFp0VDMxRV8ycWV0NjFFQXxBQ3Jtc0tuQVZ4bGJRZ0NmOWprWUxaR0dlNlh3VlpwRTN4MzJKa0hDckM0ZGxkY1pZMVdBeXMzVFVTM3ZScU1VMF9sbDRIVUdzVXgxZnFyTGF6RlFOWDNpdDl1Q04wRmcyZWpELXU3SzVaOUg1b1FxSDlNRnRFNA&q=https%3A%2F%2Fbit.ly%2F3OGoDjG&v=8pDqJVdNa44) Follow the cast: Adam Wolff: [ / dmwlff ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnF4Y2I0ZV9yT0o2M2lGWk9QOEpMcGRwbVU4QXxBQ3Jtc0tsbS0yRHFIbWhGenhHZFg4Zm83Z3VzVlBoeTVmcDQ0SElRM2Y3dTBZbDVfVUxlcEN4VDljNjZwVWF2QXNDTzdnVVRhY3J5QnZPc25JZFg1aDhUNElCMGtlSkQ4NVNRMkt5M2I2VUQ0X2JickZWVWp4TQ&q=https%3A%2F%2Ftwitter.com%2Fdmwlff&v=8pDqJVdNa44) Andrew Clark: [ / acdlite ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbTJnTmNZanhWNWNXSkp0QVIyWk1tS2JvS3dYd3xBQ3Jtc0trSmticXFZY3BQQVNDdlRmcnRDa0l5cFNfTzczaXZOVmJjWnFQWlpTeUJMM1UwRVlYRXBianhwNDhmYTFidURhQnBZSGlXQUJUR1o0LXBUenphOFFXSVFJQzhmUHZacWlEVHRGNVZnWGxaYld2T1czYw&q=https%3A%2F%2Ftwitter.com%2Facdlite&v=8pDqJVdNa44) Christopher Chedeau: [ / vjeux ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbVBOaTQ1TGE0Y1BZd0F3UU5nYlR0bVByN2xiQXxBQ3Jtc0trWGVCbldXbl9NZHRxajFVOU9ZUjN1azlOMzFQcmkxSWNZZ0dxV2ZSNWtnQU5lZkR1SXl5Z0ZrelFfR3FzaXlmeXZkWnBINUYtRDBLcVM1U1lzbldmUUQwQnBGQV9rWVlGNmgtOWU1NEZCUWw1b0Z3cw&q=https%3A%2F%2Ftwitter.com%2FVjeux&v=8pDqJVdNa44) Dan Abramov: [ / dan_abramov ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbVpEMnMxdUFmSWQ3cElFcWJuSllxWmpPbEo0d3xBQ3Jtc0traGFiQTdJcnlqSTEyZkJlMG9xeHdrYzM3dXprZGhDa0FuSy1rempHdGkySE8xME5hbjkyTHpOdGtOMmR3cDczNU85VlhnZU12bWdiQXIyYTUzQ1k3Q095YWdTUHpVQUp4cklhOG53NHFJR1Z4YkcxMA&q=https%3A%2F%2Ftwitter.com%2Fdan_abramov&v=8pDqJVdNa44) David Nolen: [ / swannodette ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2NldF90LWdicTdVNVJvLUYzYTcxMFcwN200UXxBQ3Jtc0trS05WZ1N1bmVnUUxSZlhoVmhGZk41YUM2MVRKSVEteDRRLTZiUHpDQXFKZGc4ZnJ2UjFTM3I3dE5sRkJ0aHdtVHFHSHJKci1HRFFJcnpVVllNUmVMWDdKWV9FYTFMWUpwR1VIaFJ0MEVrMlJ3OFM0OA&q=https%3A%2F%2Ftwitter.com%2Fswannodette&v=8pDqJVdNa44) Lee Byron: [ / leeb ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqazE5dWFPNWlONmZRNTBmR2Z4bUJ3aXg5SUtrZ3xBQ3Jtc0tsc09YMksyNlp5Q2c4WFBXb25LcWNxaUlNcWpiQTRvVjVnMklZTWZMT3RBSURvemJkcm0xNHZVU25BOG9kZ1VaREdESnBpZEJ3Y0hhVC0yQzFSdmNpZDhWeC1FQjRPOHdzM3VwX2g3VW5OTURLclBJVQ&q=https%3A%2F%2Ftwitter.com%2Fleeb&v=8pDqJVdNa44) Michael Chan: [ / chantastic ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2hvOTdXMU1kSVJUbXZBbGNsa2p1ZWltSEpOQXxBQ3Jtc0tsRXFoaHJRQ05EUXhRbTRUNDZ0akRvUF82ZjBZOTR6WlFSUFdlOWgzNkFvVVIyelFJMFhXTDNzcTFXYUlsRFVxVEtqaUhvV3NCMEVkc2s5RTNNdzFfcUJQTXllWmo0UGJhWWZwT0xiZi1waG9ER0Y1cw&q=https%3A%2F%2Ftwitter.com%2Fchantastic&v=8pDqJVdNa44) Pete Hunt: [ / floydophone ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbmFwSEtuQkxzX0hLLWxrSWRCZDNwVk1uMVVZQXxBQ3Jtc0trMVJLNWpEbVJjSDNzV2UwNFZ3Ylh5SnYwWFAzSzRDYUEtWjZ0TVRJWF83RDdvNFdzV2p5cnJURUdiSnpDMlIzXzgxZ2RnUWpIcFdXeUJZbzJrY0R0M01FZVRVRFZCQmFva3hWMVo3bkJOTENBaGJoWQ&q=https%3A%2F%2Ftwitter.com%2Ffloydophone&v=8pDqJVdNa44) Sebastian Markbåge: [ / sebmarkbage ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnhqdzZTYnRjNy1xbGZ6MDlUOXFndTRuUHlPUXxBQ3Jtc0ttRmhpMl9kd1M0STJHd01UTWJ1d2xQMV9mRWpCUVp4Yk5GbkdyMjl2ZVZkX1Y5Rzh1aDVWVWtNMksyelI2ZWVpWklITk1DSExWbEcxWnI0ZHE2Y3hnTS1kZ2kzSzFPQjBYSjBWbVE4aEtPcmNBaUN4Yw&q=https%3A%2F%2Ftwitter.com%2Fsebmarkbage&v=8pDqJVdNa44) Shane O'Sullivan: [ / chofter ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2taQTVUdEhaQmdXNGdVQ2VHTlNPU2FsM2h0d3xBQ3Jtc0tsWmtnWGZHa0U3eE5LeDZsV05hUE9BazVEX0pVVHFJeThpc3dIYjBkQ3FNTEZzdlRCRzBpVHVzZ01PZHJOb3ZxTkRBaXRUc2ZIRHptdncwRVFCSkNEWWx5ZnY3Q3V1a1VHX3AybndhWE55M1ZhSUZJMA&q=https%3A%2F%2Ftwitter.com%2FChofter&v=8pDqJVdNa44) and [https://chofter.com/](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbERWUWI5X3lLbGNUNlMwRGVxSEdlZXE5REFYd3xBQ3Jtc0ttUUcxWTFBTllOWFpYNThSb1FFa3ljOFhoQVRheVRDM0lQcmtESDdkUGV1by1UZVpFMmpjUEEzaHlmUjZTVXdFcF9PUlFJLUR5NVNTWnkyazJXcEoxQjlRYTZZTFFzbXJueW8xWDl6azBfbXE5aEJORQ&q=https%3A%2F%2Fchofter.com%2F&v=8pDqJVdNa44) Sophie Alpert: [ / sophiebits ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbFlxampVMGRnSVJtaGoySmZEbDJtRHhpbVh4QXxBQ3Jtc0tsNE1vREpxQ09OdzlGb1J3a1JXaE1xc0FvUUEwWk9yeTZYUDU5QWp3WV9vVkRldm9sWW9EeUtKRUpudUdUbmtIeHNyVTRBcnpGNXdwTEd4SlBnbzg1elE3U3JnTmlraFVBVXVVTHI3YWU2WDVyRHRFTQ&q=https%3A%2F%2Ftwitter.com%2Fsophiebits&v=8pDqJVdNa44) and [https://sophiebits.com/](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa0JjdjA3SVVuNFpFN2x5bjVsb09iTERmSUUzUXxBQ3Jtc0treVdSY00yb2taQlZ2MnFXUFNyTW9YcE5OcHZicS1ZdUdJaktPUi1JSWpwZjFDMTRPTHRiNkN0MFhjT3VTaWYyOFFwT1plMUdCWXJTclhJdlhScGtQV0FZSk1BUk0xQmRRZW5JRzhMSHBnM1F4MHBydw&q=https%3A%2F%2Fsophiebits.com%2F&v=8pDqJVdNa44) Tom Occhino: [ / tomocchino ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbm1hWjBRSTd5cHZxbWUwVDZ5bWtkNWFnV294d3xBQ3Jtc0tuNWR4RWZuT2dGaEVqZlJIM2VqcE91LWVIVzdjSkJGcE05U21xaFZuSjJYUmh6T242RnRnemdHMXZaa2xSWGk1UWEwWkNUQzI4bVNILXFqMEJxaGJ1Z3RfdzVfNlRvUkc2YmpSNzJJRjhRcE1BZXd2WQ&q=https%3A%2F%2Ftwitter.com%2Ftomocchino&v=8pDqJVdNa44) Tony Casparro: [ / iamtonyc ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbHpHdnYzeVU3ejRwQWgzdHQyYmxxXzZRYWFDZ3xBQ3Jtc0ttOFdUblpiTlNSTVlKc0N5SWgxazBxczRWaGFvMEZ3alVZYzVpekk2dWh2Rk94Z05PbXRGeFRrNTVGRGVvZE0yQi1rS204QnUzcU9hN3A3NUU1MXZFT1J0VmRaNmpWYUl6MHptN0xyMlZSRTJ1aEFuSQ&q=https%3A%2F%2Ftwitter.com%2FIamTonyC&v=8pDqJVdNa44) Many people contributed to React throughout the years and this documentary is just a little slice of that history. You can find full acknowledgements here: [https://reactjs.org/acknowledgements....](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbnF3MmJJcHV3NV9BWklhNWJqSmxvZktueUROQXxBQ3Jtc0ttNVVuOVFnc1FWcW5sXzBGbVhjd1JQbzJyNXpHYldnMTk5VXdhTmx1ck1vRXdqcWxCODJrYVg4a0dINUlSU19pUTdERGNHRHBrclozdnVRb0lOVE9nYVo4cl9KVjFscjJqYVNWa2xFZ21oWHZIRHFKWQ&q=https%3A%2F%2Freactjs.org%2Facknowledgements.html&v=8pDqJVdNa44) Thanks to these amazing people for translating subtitles: Charlie: [ / charliesbot ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa3JQYUJxemI4UC1fWGFjbHpvRVY0aVZsaHRpUXxBQ3Jtc0tsV3V0Zkg0Z1RKWkhSN040Q3BieE1nZEpzTFR2OVdjLWp5UjM0T1VvTndKSFJHOVVEUFJyT3BkTHh3OEVmTEo2d2dpbHowUEZqVlZrYmxmU29scDg5VTVrTENrcFd2SERwblZxU25UUE5CMTNpbWFHdw&q=https%3A%2F%2Ftwitter.com%2Fcharliesbot&v=8pDqJVdNa44) Jose: [ / jbetosalinas ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa0ljdnZfOHpqd3I4cWVKZ1Nic1NkQlRtWDc1QXxBQ3Jtc0trVldLc0hleThQYlNub3pnalg1QkZxLUlLRlA5a2JoWTN1WW40V29XcEJBelRPdm12NzZtYzlFWE5WZHZnSVNQd2RTai1xdXRSM0pGWkowRnhpMUVhMWdRVlVnazFhSUdiN2l2TEVFZkM4UHNkVGM1cw&q=https%3A%2F%2Ftwitter.com%2Fjbetosalinas&v=8pDqJVdNa44) Gustavo Gonçalves Follow us: Twitter: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2lqQWNUVGpmaXNFc2trOEkwOV9zNTNSTkFYQXxBQ3Jtc0trNVR1QU5aaURDZWp0WXI0UUNlQkNyRlQxQUN0N2FBZzBDXzE3M29GbWpkaVJnTnh3OHFkMDhrbzZ5dWljcHFZQ2x5bzFiazQ0a2hfekF1N3c5RERJUFJDM3JZVmFZTTRJcmQ3X2VFQnU5SktFMzdEaw&q=https%3A%2F%2Ftwitter.com%2Fhoneypotio&v=8pDqJVdNa44) Facebook: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbUpQSkNvV0d0dkZXYVFJbllNT01Yc3dZQUwzUXxBQ3Jtc0tuQnEwaUdEa1BtRlIzd2FSSTV4bW03dEwwOGFRZnVTdk4ybTNSdzBVcHAtd0JXbDZwS2djMXJ2cTFzZUZHQmx3OFR4U0tnZFlrNzJlMlQxa3A5S3czeHlFSWVoUWM0bGlzTk41cWJNMDJzM0tROEdZbw&q=https%3A%2F%2Fwww.facebook.com%2FHoneypotio%2F&v=8pDqJVdNa44) LinkedIn: [ / honeypotio ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2dFcmRaWWtWN0c4d1Mxd0RjUTNjMDFXWXNuUXxBQ3Jtc0tsNk00RHFMU2NMSl8yWUZEcDNvaFViZ2p2aDNqR3hiaHlNNWotdUNfWEprT0tlY2hhUFN5Vk5SOGE0OWRjRUZHVXlqMF9NcUhGSjBVbWFnenc5YS1IdTJHc0Q0YWJEY0YtQmFnZDRhMkp1eDlCU29nQQ&q=https%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fhoneypotio%2F&v=8pDqJVdNa44) Instagram: [ / honeypot.cult ](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbS1iQ1FGeEhpanNkTHpSVVNOdzlDQ2VVaU9VUXxBQ3Jtc0tuUDJqYy1Rbk16am1IOHZGWTZrUUlsWWVKYXoyYk9VS29FeGZ0MjJBQlZhRHRia3owaWdiWUFtd0FfQmVSZVh3a2ZwczNxek9mMm9KcXdSV2U3SHpNeDZhNTU0X3lZdkJmemxTblhFZHM0d25kWGpNNA&q=https%3A%2F%2Fwww.instagram.com%2Fhoneypot.cult%2F&v=8pDqJVdNa44)…...more 

...more Show less 

Transcript

Follow along using the transcript.

Show transcript

### [Honeypot 238K subscribers  ](/@Honeypotio)

[Videos](/channel/UCsUalyRg43M8D60mtHe6YcA/videos)

[About](/channel/UCsUalyRg43M8D60mtHe6YcA/about)

[Videos](/channel/UCsUalyRg43M8D60mtHe6YcA/videos)[About](/channel/UCsUalyRg43M8D60mtHe6YcA/about)[Twitter](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqazlNRDJPZWJORXJ3WW9tcEhxUjR5blJzUmpad3xBQ3Jtc0tuOFlNV1NTNnJicVY0REV4SjBjQkRxcmxrRGxCZm5lMFpwV01vOVQyc0pReHp2end1Z1J2dll1WlRLR3dQUGR6SzhjNzg3Q1pMQXhVNGNUVnpsZlpaTWpuR1hmTThNUzlZNUlQOFRrT01zcWpvcmdrbw&q=https%3A%2F%2Ftwitter.com%2Fhoneypotio)[Linkedin](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbmVEMF9aV0pIQXNfeEtmQ0ZDcW5IeVdNa2hQQXxBQ3Jtc0tsU0txTFZiYUJOcG9sM1pwVmlqUWNpS2ZJWlZDZFZRUHQ1VlpTQ3dnb0hFXzNnVm1XVUdMc3pGbXRNWFczbVowLU9FUk1TMkNFb3FuRjh1NS05ZWFwNmQyOHJOdXBTMElmOVhLNE05cVdMZjlsRndIaw&q=https%3A%2F%2Fwww.linkedin.com%2Fcompany%2F10210811%2F)[Instagram](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa18xSHVNUnFuZmxZb1RwTU4tcDhFY1UtNjBJUXxBQ3Jtc0tsMWtZSzZrY2pMMExadkU4TEh0N3dQYjE0WlktMDNNZjZwVVBKUkx6ekNNQzZYSURIR2hiVERKTkZkWGhiMEZfakpQd0g0MzQxbEY1QV82UHVQVTBlUWxlMlUtTlZkQ3JIbWQtczJqanBoUlhBWHVFdw&q=https%3A%2F%2Fwww.instagram.com%2Fhoneypot.cult%2F)[Facebook](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbVQ5cmJvVE5KczdOdkk1T2Z3aXpQa1E1cThEd3xBQ3Jtc0ttR0EwMWk4d0RKNU9FOUtaeUxoNGlkNFFrVmV5ZUxGMno4NGRMYnFNZ1dGQ2pHQVBxbk5FVTZBdFZCTnlnUXpYYlhzU0FXR2hLR3pqV2NHLXVvM0ZUTmFhWmhlQnRrTmxjYjEwUExfVnBUa1ptbkxPQQ&q=https%3A%2F%2Fwww.facebook.com%2FHoneypotio%2F)

[ 7:14 7:14  ](/watch?v=WvRcZkuXmpo) [ Andrew Clark on the Creation of Redux by Honeypot ](/watch?v=WvRcZkuXmpo)

##  Transcript

NaN / NaN

Show chat replay

[ 1:02:49 1:02:49 Now playing ](/watch?v=LB8KwiiUGy0)

### [ Node.js: The Documentary | An origin story  Honeypot Honeypot  • • 680K views 8 months ago ](/watch?v=LB8KwiiUGy0)

[ ](/watch?v=SqcY0GlETPk)

### [ React Tutorial for Beginners  Programming with Mosh Programming with Mosh  • • 3.6M views 1 year ago ](/watch?v=SqcY0GlETPk)

[ ](/watch?v=783ccP__No8)

### [ GraphQL: The Documentary  Honeypot Honeypot  • • 578K views 5 years ago ](/watch?v=783ccP__No8)

[ ](/watch?v=WXuK6gekU1Y)

### [ AlphaGo - The Movie | Full award-winning documentary  Google DeepMind Google DeepMind  • • 36M views 4 years ago ](/watch?v=WXuK6gekU1Y)

[ ](/watch?v=PaQkIoTrSLY)

### [ From Nerd Olympics to Tech Entrepreneurship: Mike Serbinis' Story  Mark MacLeod Mark MacLeod  • • 34 views 2 days ago New ](/watch?v=PaQkIoTrSLY)

[ ](/watch?v=U6s2pdxebSo)

### [ TypeScript Origins: The Documentary  OfferZen Origins OfferZen Origins  • • 298K views 1 year ago ](/watch?v=U6s2pdxebSo)

[ ](/watch?v=OrxmtDw4pVI)

### [ Vue.js: The Documentary  Honeypot Honeypot  • • 1.5M views 4 years ago ](/watch?v=OrxmtDw4pVI)
Tap to unmute

[Open App](vnd.youtube://m.youtube.com/watch?v=x7cQ3mrcKaY&feature=mweb_c3_open_app_11268432&itc_campaign=mweb_c3_open_app_11268432&redirect_app_store_ios=1&app=desktop)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[Sign in](https://accounts.google.com/ServiceLogin?service=youtube&uilel=3&passive=true&continue=https%3A%2F%2Fwww.youtube.com%2Fsignin%3Faction_handle_signin%3Dtrue%26app%3Ddesktop%26hl%3Den%26next%3Dhttps%253A%252F%252Fwww.youtube.com%252Fwatch%253Fv%253DKVZ-P-ZI6W4&hl=en&ec=65620)

[ ](/ "YouTube Home") IN 

React.js Conf 2015 Keynote - Introducing React Native

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Up next

LiveUpcoming

CancelPlay Now

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?v=7rDsRXj9-cU "Next \(SHIFT+n\)")

0:00 / 31:46•Watch full videoLive

•

•

Scroll for details

#  React.js Conf 2015 Keynote - Introducing React Native

[](/@MetaDevelopers)

[Meta Developers](/@MetaDevelopers)

Meta Developers 

173K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

2.5K

Share

Download

Download 

Save

306K views9 years ago

306,342 views • Jan 28, 2015 

Show less 

Tom Occhino reviews the past and present of React in 2015, and teases where it's going next.…...more 

...more 

## 

Key moments

View all

#### [Facebook Ads Org Facebook Ads Org 1:54 ](/watch?v=KVZ-P-ZI6W4&t=114s)

#### [Facebook Ads Org ](/watch?v=KVZ-P-ZI6W4&t=114s)

1:54

#### [Complicated Apps Complicated Apps 2:26 ](/watch?v=KVZ-P-ZI6W4&t=146s)

#### [Complicated Apps ](/watch?v=KVZ-P-ZI6W4&t=146s)

2:26

#### [Cascading Updates Cascading Updates 3:05 ](/watch?v=KVZ-P-ZI6W4&t=185s)

#### [Cascading Updates ](/watch?v=KVZ-P-ZI6W4&t=185s)

3:05

#### [Unpredictable Code Unpredictable Code 3:33 ](/watch?v=KVZ-P-ZI6W4&t=213s)

#### [Unpredictable Code ](/watch?v=KVZ-P-ZI6W4&t=213s)

3:33

#### [Huge step backwards Huge step backwards 9:07 ](/watch?v=KVZ-P-ZI6W4&t=547s)

#### [Huge step backwards ](/watch?v=KVZ-P-ZI6W4&t=547s)

9:07

#### [What makes React so powerful? What makes React so powerful? 12:54 ](/watch?v=KVZ-P-ZI6W4&t=774s)

#### [What makes React so powerful? ](/watch?v=KVZ-P-ZI6W4&t=774s)

12:54

#### [Server rendering? Server rendering? 13:16 ](/watch?v=KVZ-P-ZI6W4&t=796s)

#### [Server rendering? ](/watch?v=KVZ-P-ZI6W4&t=796s)

13:16

#### [React wraps an imperative API with a declarative one React wraps an imperative API with a declarative one 14:00 ](/watch?v=KVZ-P-ZI6W4&t=840s)

#### [React wraps an imperative API with a declarative one ](/watch?v=KVZ-P-ZI6W4&t=840s)

14:00

Transcript

Follow along using the transcript.

Show transcript

### [Meta Developers 173K subscribers  ](/@MetaDevelopers)

[Videos](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/videos)

[About](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/about)

[Videos](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/videos)[About](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/about)[Website](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa3NZWjJkV29XeDMtT3d6UloySlNoeVBjUUZxUXxBQ3Jtc0trVmU5YmRTdTk5RDVHaWZuZFhaMWhFQW1ZYkczMGtlSVlvamFXb2Y0NHRza2tvQkpuNEVrVGdlQnBCWXFfaDktcnJWV001cnV1aGFZVWdLdjlVTEhVSnZkeFlMdG9OTHFWMGdLNHNhUmJYX3BremtSOA&q=https%3A%2F%2Fdevelopers.facebook.com%2F)[Facebook](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbVBNNHdSdHJ3UUdFbjQzdndiUlp6TGhuU2M5QXxBQ3Jtc0tueFZxLWVxMzZpNG5xcG5TQThJbVczUVRmem80cGRJSkpOQnlVUWIyYnRIVjZLbGpkbGY2b0dZaGFkcThaZ3UwTGt6c3ZXVkc0SG1tTnNIUWpNaU5CSGFKMDhRV2w5NGEyZDl5NXJuMzczb2c0RE02NA&q=https%3A%2F%2Fwww.facebook.com%2FMetaforDevelopers)[Instagram](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbE1sRFlkWUU5S3kxY3NFV1U5X2hjdVJSVWYzUXxBQ3Jtc0tuSWhmMjlDeWJZTGJrTmZnaEJyN21RU3Bka3hVNFhWUTk4aXBuU1ZPSW9LcldNXzRxcUNNR25xMXRsS2VTR0lrWVdTWWJQdUtGVjQzOXFFSXYxVHJad29UZW8tTVRTZXpyNmp4YWRYNGRzUUphQjl4MA&q=https%3A%2F%2Fwww.instagram.com%2Fmetafordevelopers%2F)[LinkedIn](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa21EOVc3Sk5qWTJPYzFqNC1VczRNc05pck42QXxBQ3Jtc0trSDhHR2IwaXBFcEpQbVZ3Vk52cUVLYURGaFQzN0FRdk9oZ09LUHU0T18xcTJqQXBmVXdEZ1ctSGdNbU9PSTV5R2pjYWtQNUVjdWprTERpNjJNcGpxUHItYXhsOXhzZ1F3enJxcGllRmNTdXNhU3ZMRQ&q=https%3A%2F%2Fwww.linkedin.com%2Fshowcase%2F6647805%2F)

Show less 

# React.js Conf 2015 Keynote - Introducing React Native

306,342 views306K views

Jan 28, 2015

2.5K

Share

Download

Download 

Save

##  Comments 74

Top comments  Newest first 

##  Key moments

#### [Facebook Ads Org Facebook Ads Org 1:54 ](/watch?v=KVZ-P-ZI6W4&t=114s)

#### [Facebook Ads Org ](/watch?v=KVZ-P-ZI6W4&t=114s)

1:54

#### [Complicated Apps Complicated Apps 2:26 ](/watch?v=KVZ-P-ZI6W4&t=146s)

#### [Complicated Apps ](/watch?v=KVZ-P-ZI6W4&t=146s)

2:26

#### [Cascading Updates Cascading Updates 3:05 ](/watch?v=KVZ-P-ZI6W4&t=185s)

#### [Cascading Updates ](/watch?v=KVZ-P-ZI6W4&t=185s)

3:05

#### [Unpredictable Code Unpredictable Code 3:33 ](/watch?v=KVZ-P-ZI6W4&t=213s)

#### [Unpredictable Code ](/watch?v=KVZ-P-ZI6W4&t=213s)

3:33

#### [Huge step backwards Huge step backwards 9:07 ](/watch?v=KVZ-P-ZI6W4&t=547s)

#### [Huge step backwards ](/watch?v=KVZ-P-ZI6W4&t=547s)

9:07

#### [What makes React so powerful? What makes React so powerful? 12:54 ](/watch?v=KVZ-P-ZI6W4&t=774s)

#### [What makes React so powerful? ](/watch?v=KVZ-P-ZI6W4&t=774s)

12:54

#### [Server rendering? Server rendering? 13:16 ](/watch?v=KVZ-P-ZI6W4&t=796s)

#### [Server rendering? ](/watch?v=KVZ-P-ZI6W4&t=796s)

13:16

#### [React wraps an imperative API with a declarative one React wraps an imperative API with a declarative one 14:00 ](/watch?v=KVZ-P-ZI6W4&t=840s)

#### [React wraps an imperative API with a declarative one ](/watch?v=KVZ-P-ZI6W4&t=840s)

14:00

#### [declarative - predictable declarative - predictable 14:35 ](/watch?v=KVZ-P-ZI6W4&t=875s)

#### [declarative - predictable ](/watch?v=KVZ-P-ZI6W4&t=875s)

14:35

#### [predictable -- confidence predictable -- confidence 14:55 ](/watch?v=KVZ-P-ZI6W4&t=895s)

#### [predictable -- confidence ](/watch?v=KVZ-P-ZI6W4&t=895s)

14:55

#### [confidence – reliability confidence – reliability 15:34 ](/watch?v=KVZ-P-ZI6W4&t=934s)

#### [confidence – reliability ](/watch?v=KVZ-P-ZI6W4&t=934s)

15:34

#### [React's real power lies in how it makes you to write your code React's real power lies in how it makes you to write your code 16:07 ](/watch?v=KVZ-P-ZI6W4&t=967s)

#### [React's real power lies in how it makes you to write your code ](/watch?v=KVZ-P-ZI6W4&t=967s)

16:07

#### [Sophisticated gesture handling Sophisticated gesture handling 19:16 ](/watch?v=KVZ-P-ZI6W4&t=1156s)

#### [Sophisticated gesture handling ](/watch?v=KVZ-P-ZI6W4&t=1156s)

19:16

#### [Native environment Native environment 20:45 ](/watch?v=KVZ-P-ZI6W4&t=1245s)

#### [Native environment ](/watch?v=KVZ-P-ZI6W4&t=1245s)

20:45

#### [React Native React Native 22:55 ](/watch?v=KVZ-P-ZI6W4&t=1375s)

#### [React Native ](/watch?v=KVZ-P-ZI6W4&t=1375s)

22:55

#### [demo demo 23:08 ](/watch?v=KVZ-P-ZI6W4&t=1388s)

#### [demo ](/watch?v=KVZ-P-ZI6W4&t=1388s)

23:08

#### [What was that? What was that? 25:15 ](/watch?v=KVZ-P-ZI6W4&t=1515s)

#### [What was that? ](/watch?v=KVZ-P-ZI6W4&t=1515s)

25:15

#### [Everything on screen was native Everything on screen was native 25:20 ](/watch?v=KVZ-P-ZI6W4&t=1520s)

#### [Everything on screen was native ](/watch?v=KVZ-P-ZI6W4&t=1520s)

25:20

#### [No WebView No WebView 25:34 ](/watch?v=KVZ-P-ZI6W4&t=1534s)

#### [No WebView ](/watch?v=KVZ-P-ZI6W4&t=1534s)

25:34

#### [Completely powered by JavaScript Completely powered by JavaScript 25:37 ](/watch?v=KVZ-P-ZI6W4&t=1537s)

#### [Completely powered by JavaScript ](/watch?v=KVZ-P-ZI6W4&t=1537s)

25:37

#### [This is working This is working 28:33 ](/watch?v=KVZ-P-ZI6W4&t=1713s)

#### [This is working ](/watch?v=KVZ-P-ZI6W4&t=1713s)

28:33

#### [Write once run anywhere Write once run anywhere 28:56 ](/watch?v=KVZ-P-ZI6W4&t=1736s)

#### [Write once run anywhere ](/watch?v=KVZ-P-ZI6W4&t=1736s)

28:56

#### [Learn once, write anywhere Learn once, write anywhere 29:14 ](/watch?v=KVZ-P-ZI6W4&t=1754s)

#### [Learn once, write anywhere ](/watch?v=KVZ-P-ZI6W4&t=1754s)

29:14

#### [Tomorrow Morning Tomorrow Morning 29:52 ](/watch?v=KVZ-P-ZI6W4&t=1792s)

#### [Tomorrow Morning ](/watch?v=KVZ-P-ZI6W4&t=1792s)

29:52

#### [Where's the code? Where's the code? 30:03 ](/watch?v=KVZ-P-ZI6W4&t=1803s)

#### [Where's the code? ](/watch?v=KVZ-P-ZI6W4&t=1803s)

30:03

#### [What happens next? What happens next? 30:48 ](/watch?v=KVZ-P-ZI6W4&t=1848s)

#### [What happens next? ](/watch?v=KVZ-P-ZI6W4&t=1848s)

30:48

#### [Existing Frameworks Influenced: All of them Existing Frameworks Influenced: All of them 31:12 ](/watch?v=KVZ-P-ZI6W4&t=1872s)

#### [Existing Frameworks Influenced: All of them ](/watch?v=KVZ-P-ZI6W4&t=1872s)

31:12

Sync to video time 

Sync to video time

##  Description

React.js Conf 2015 Keynote - Introducing React Native

2.5KLikes

306,342Views

2015Jan 28

Tom Occhino reviews the past and present of React in 2015, and teases where it's going next.

Show less ...more

Tom Occhino reviews the past and present of React in 2015, and teases where it's going next.…...more 

...more Show less 

## 

Key moments

View all

#### [Facebook Ads Org Facebook Ads Org 1:54 ](/watch?v=KVZ-P-ZI6W4&t=114s)

#### [Facebook Ads Org ](/watch?v=KVZ-P-ZI6W4&t=114s)

1:54

#### [Complicated Apps Complicated Apps 2:26 ](/watch?v=KVZ-P-ZI6W4&t=146s)

#### [Complicated Apps ](/watch?v=KVZ-P-ZI6W4&t=146s)

2:26

#### [Cascading Updates Cascading Updates 3:05 ](/watch?v=KVZ-P-ZI6W4&t=185s)

#### [Cascading Updates ](/watch?v=KVZ-P-ZI6W4&t=185s)

3:05

#### [Unpredictable Code Unpredictable Code 3:33 ](/watch?v=KVZ-P-ZI6W4&t=213s)

#### [Unpredictable Code ](/watch?v=KVZ-P-ZI6W4&t=213s)

3:33

Transcript

Follow along using the transcript.

Show transcript

### [Meta Developers 173K subscribers  ](/@MetaDevelopers)

[Videos](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/videos)

[About](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/about)

[Videos](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/videos)[About](/channel/UCP_lo1MFyx5IXDeD9s_6nUw/about)[Website](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa3NZWjJkV29XeDMtT3d6UloySlNoeVBjUUZxUXxBQ3Jtc0trVmU5YmRTdTk5RDVHaWZuZFhaMWhFQW1ZYkczMGtlSVlvamFXb2Y0NHRza2tvQkpuNEVrVGdlQnBCWXFfaDktcnJWV001cnV1aGFZVWdLdjlVTEhVSnZkeFlMdG9OTHFWMGdLNHNhUmJYX3BremtSOA&q=https%3A%2F%2Fdevelopers.facebook.com%2F)[Facebook](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbVBNNHdSdHJ3UUdFbjQzdndiUlp6TGhuU2M5QXxBQ3Jtc0tueFZxLWVxMzZpNG5xcG5TQThJbVczUVRmem80cGRJSkpOQnlVUWIyYnRIVjZLbGpkbGY2b0dZaGFkcThaZ3UwTGt6c3ZXVkc0SG1tTnNIUWpNaU5CSGFKMDhRV2w5NGEyZDl5NXJuMzczb2c0RE02NA&q=https%3A%2F%2Fwww.facebook.com%2FMetaforDevelopers)[Instagram](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqbE1sRFlkWUU5S3kxY3NFV1U5X2hjdVJSVWYzUXxBQ3Jtc0tuSWhmMjlDeWJZTGJrTmZnaEJyN21RU3Bka3hVNFhWUTk4aXBuU1ZPSW9LcldNXzRxcUNNR25xMXRsS2VTR0lrWVdTWWJQdUtGVjQzOXFFSXYxVHJad29UZW8tTVRTZXpyNmp4YWRYNGRzUUphQjl4MA&q=https%3A%2F%2Fwww.instagram.com%2Fmetafordevelopers%2F)[LinkedIn](https://www.youtube.com/redirect?event=Watch_SD_EP&redir_token=QUFFLUhqa21EOVc3Sk5qWTJPYzFqNC1VczRNc05pck42QXxBQ3Jtc0trSDhHR2IwaXBFcEpQbVZ3Vk52cUVLYURGaFQzN0FRdk9oZ09LUHU0T18xcTJqQXBmVXdEZ1ctSGdNbU9PSTV5R2pjYWtQNUVjdWprTERpNjJNcGpxUHItYXhsOXhzZ1F3enJxcGllRmNTdXNhU3ZMRQ&q=https%3A%2F%2Fwww.linkedin.com%2Fshowcase%2F6647805%2F)

##  Transcript

NaN / NaN

[ 30:14 30:14 Now playing ](/watch?v=7rDsRXj9-cU)

### [ React.js Conf 2015 Keynote 2 - A Deep Dive into React Native  Meta Developers Meta Developers  • • 149K views 9 years ago ](/watch?v=7rDsRXj9-cU)

[ ](/watch?v=8pDqJVdNa44)

### [ How A Small Team of Developers Created React at Facebook | React.js: The Documentary  Honeypot Honeypot  • • 1.4M views 1 year ago ](/watch?v=8pDqJVdNa44)

[ ](/watch?v=vwgmBsMSwmo)

### [ Introducing Agentforce 2.0 with Marc Benioff | Salesforce  Salesforce Salesforce  • • 20K views 10 hours ago New ](/watch?v=vwgmBsMSwmo)

[ ](/watch?v=Q5SMmKb7qVI)

### [ React Conf Keynote (Day 2)  React Conf React Conf  • • 14K views 4 months ago ](/watch?v=Q5SMmKb7qVI)

[ ](/watch?v=6aQgiJHReCI)

### [ React 19 is finally out!  Theo - t3․gg Theo - t3․gg  • • 64K views 8 days ago ](/watch?v=6aQgiJHReCI)

[ ](/watch?v=MGuKhcnrqGA)

### [ React.js Conf 2016 - Nick Schrock - Keynote  Meta Developers Meta Developers  • • 69K views 8 years ago ](/watch?v=MGuKhcnrqGA)

[ ](/watch?v=19g66ezsKAg)

### [ Next.js Conf 2024 Opening Keynote  Vercel Vercel  • • 17K views 1 month ago ](/watch?v=19g66ezsKAg)
Tap to unmute
[Data Fetching with React Server Components](https://m.youtube.com/watch?v=TQQPAU21ZUw)

Search

Share

Copy link

Info

Shopping

Tap to unmute

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.
[Skip to content](#geist-skip-nav)

[](https://vercel.com/home?utm_source=next-site&utm_medium=banner&utm_campaign=home "Go to Vercel homepage")

[](/?uwu=true "Go to the homepage")

[](/ "Go to the homepage")

Search documentation...`CtrlK`Search...`⌘K`

[](https://vercel.com/home?utm_source=next-site&utm_medium=banner&utm_campaign=home "Go to Vercel homepage")

[](/?uwu=true "Go to the homepage")

[](/ "Go to the homepage")

[Showcase](/showcase)[Docs](/docs "Documentation")[Blog](/blog)[Templates](https://vercel.com/templates/next.js?utm_source=next-site&utm_medium=navbar&utm_campaign=next_site_nav_templates)[Enterprise](https://vercel.com/contact/sales/nextjs?utm_source=next-site&utm_medium=navbar&utm_campaign=next_site_nav_enterprise)

Search documentation...`CtrlK`Search...`⌘K`[Deploy](https://vercel.com/new/clone?utm_source=next-site&utm_medium=banner&b=main&s=https%3A%2F%2Fgithub.com%2Fvercel%2Fvercel%2Ftree%2Fmain%2Fexamples%2Fnextjs&showOptionalTeamCreation=false&template=nextjs&teamCreateStatus=hidden&utm_campaign=home)[Learn](/learn)

# The React Framework for the Web

Used by some of the world's largest companies, Next.js enables you to create **high-quality web applications** with the power of React components.

[Get Started](/docs)[Learn Next.js](/learn?utm_source=next-site&utm_medium=homepage-cta&utm_campaign=home)

▲ ~ npx create-next-app@latest

## What's in Next.js?

Everything you need to build great products on the web.

[Original1440px375pxBuilt-in OptimizationsAutomatic Image, Font, and Script Optimizations for improved UX and Core Web Vitals.](/docs/app/building-your-application/optimizing/images)[Data FetchingMake your React component async and await your data. Next.js supports both server and client data fetching.](/docs/app/building-your-application/data-fetching)[Server ActionsRun server code by calling a function. Skip the API. Then, easily revalidate cached data and update your UI in one network roundtrip.](/docs/app/building-your-application/data-fetching/forms-and-mutations)[Advanced Routing & Nested LayoutsCreate routes using the file system, including support for more advanced routing patterns and UI layouts.](/docs/app/building-your-application/routing)

[Dynamic HTML StreamingInstantly stream UI from the server, integrated with the App Router and React Suspense.](/docs/app/building-your-application/routing/loading-ui-and-streaming)[CSS SupportStyle your application with your favorite tools, including support for CSS Modules, Tailwind CSS, and popular community libraries.](/docs/app/building-your-application/styling)[Route HandlersBuild API endpoints to securely connect with third-party services for handling auth or listening for webhooks.](/docs/app/building-your-application/routing/router-handlers)[MiddlewareTake control of the incoming request. Use code to define routing and access rules for authentication, experimentation, and internationalization.](/docs/app/building-your-application/routing/middleware)

[React Server ComponentsAdd components without sending additional client-side JavaScript. Built on the latest React features.](/docs/app/building-your-application/rendering/server-components)[Client and Server RenderingFlexible rendering and caching options, including Incremental Static Regeneration (ISR), on a per-page level.](/docs/app/building-your-application/rendering)[Next.js 15The power of full-stack to the frontend. Read the release notes.](/blog/next-15)

[Built-in OptimizationsAutomatic Image, Font, and Script Optimizations for improved UX and Core Web Vitals.](/docs/app/building-your-application/optimizing/images)[React Server ComponentsAdd components without sending additional client-side JavaScript. Built on the latest React features.](/docs/app/building-your-application/rendering/server-components)[Data FetchingMake your React component async and await your data. Next.js supports both server and client data fetching.](/docs/app/building-your-application/data-fetching)[Server ActionsRun server code by calling a function. Skip the API. Then, easily revalidate cached data and update your UI in one network roundtrip.](/docs/app/building-your-application/data-fetching/forms-and-mutations)[Advanced Routing & Nested LayoutsCreate routes using the file system, including support for more advanced routing patterns and UI layouts.](/docs/app/building-your-application/routing)

[Dynamic HTML StreamingInstantly stream UI from the server, integrated with the App Router and React Suspense.](/docs/app/building-your-application/routing/loading-ui-and-streaming)[CSS SupportStyle your application with your favorite tools, including support for CSS Modules, Tailwind CSS, and popular community libraries.](/docs/app/building-your-application/styling)[Route HandlersBuild API endpoints to securely connect with third-party services for handling auth or listening for webhooks.](/docs/app/building-your-application/routing/router-handlers)[MiddlewareTake control of the incoming request. Use code to define routing and access rules for authentication, experimentation, and internationalization.](/docs/app/building-your-application/routing/middleware)[Client and Server RenderingFlexible rendering and caching options, including Incremental Static Regeneration (ISR), on a per-page level.](/docs/app/building-your-application/rendering)[Next.js 15The power of full-stack to the frontend. Read the release notes.](/blog/next-15)

[Built-in OptimizationsAutomatic Image, Font, and Script Optimizations for improved UX and Core Web Vitals.](/docs/app/building-your-application/optimizing/images)[Dynamic HTML StreamingInstantly stream UI from the server, integrated with the App Router and React Suspense.](/docs/app/building-your-application/routing/loading-ui-and-streaming)[React Server ComponentsAdd components without sending additional client-side JavaScript. Built on the latest React features.](/docs/app/building-your-application/rendering/server-components)

[Data FetchingMake your React component async and await your data. Next.js supports both server and client data fetching.](/docs/app/building-your-application/data-fetching)[Server ActionsRun server code by calling a function. Skip the API. Then, easily revalidate cached data and update your UI in one network roundtrip.](/docs/app/building-your-application/data-fetching/forms-and-mutations)[Advanced Routing & Nested LayoutsCreate routes using the file system, including support for more advanced routing patterns and UI layouts.](/docs/app/building-your-application/routing)[CSS SupportStyle your application with your favorite tools, including support for CSS Modules, Tailwind CSS, and popular community libraries.](/docs/app/building-your-application/styling)[Route HandlersBuild API endpoints to securely connect with third-party services for handling auth or listening for webhooks.](/docs/app/building-your-application/routing/router-handlers)[MiddlewareTake control of the incoming request. Use code to define routing and access rules for authentication, experimentation, and internationalization.](/docs/app/building-your-application/routing/middleware)[Client and Server RenderingFlexible rendering and caching options, including Incremental Static Regeneration (ISR), on a per-page level.](/docs/app/building-your-application/rendering)

[Next.js 15The power of full-stack to the frontend. Read the release notes.](/blog/next-15)

## Built on a foundation of fast, production-grade tooling

Powered By

[ReactThe library for web and native user interfaces. Next.js is built on the latest React features, including Server Components and Actions.](https://react.dev)[TurbopackAn incremental bundler optimized for JavaScript and TypeScript, written in Rust , and built into Next.js.](https://turbo.build)[Speedy Web CompilerAn extensible Rust based platform for the next generation of fast developer tools, and can be used for both compilation and minification.](https://swc.rs)

## Get started in seconds

Deploy Next.js to Vercel

StarterEcommerceBlogAIPortfolioSaaSMulti-tenant AppsRealtime AppsDocumentationVirtual EventWeb3

Vercel is a frontend cloud from the creators of Next.js, making it easy to get started with Next.js quickly.

Jumpstart your Next.js development with pre-built solutions from Vercel and our community.

[Deploy a Template on Vercel](https://vercel.com/templates/next.js?utm_source=next-site&utm_medium=deploy-template-on-vercel-cta&utm_campaign=homepage-new)

Next.js Boilerplate

A Next.js starter from create-next-app.

Image Gallery Starter

An image gallery built on Next.js and Cloudinary.

Next.js Commerce

An all-in-one starter kit for high-performance ecommerce sites.

## The framework of choice when it matters

[Audible](/showcase)[Sonos](/showcase)

[Dice](/showcase)

[Notion](/showcase)

[Today](/showcase)[ProductHunt](/showcase)

[Nike](/showcase)[Washington Post](/showcase)

[Sonos](/showcase)[Audible](/showcase)[Nike](/showcase)

[Notion](/showcase)[ProductHunt](/showcase)[Washington Post](/showcase)

For **performance** , **efficiency** and **developer experience**. Next.js is trusted by some of the biggest names on the web.

[View the Next.js Showcase](/showcase)

## Customer Testimonials

> ### “With Next.js, we now consistently average 0.09 or lower for Cumulative Layout Shift, placing our site in the top tier for user experience and Core Web Vitals.”

Senior Software Engineer, Frontend

> ### “Our UI for Frame.io responds to user input within 100ms and all animations run at a consistent 60fps with Next.js.”

Charlton Roberts, Product Engineering

> ### “Next.js has been a game-changer for our agency work and team collaboration. Its powerful features have allowed us to build high-performance websites quickly and efficiently like never before.”

Daniel Lopes, Frontend Developer

[](https://vercel.com/home?utm_source=next-site&utm_medium=footer&utm_campaign=next-website "Go to the Vercel website")

[](https://github.com/vercel/next.js)[](https://bsky.app/profile/nextjs.org)

#### Resources

[Docs](/docs)[Learn](/learn)[Showcase](/showcase)[Blog](/blog)[Analytics](https://vercel.com/analytics?utm_source=next-site&utm_medium=footer&utm_campaign=home)[Next.js Conf](/conf)[Previews](https://vercel.com/products/previews?utm_source=next-site&utm_medium=footer&utm_campaign=home)

#### More

[Next.js Commerce](https://vercel.com/templates/next.js/nextjs-commerce?utm_source=next-site&utm_medium=footer&utm_campaign=home)[Contact Sales](https://vercel.com/contact/sales?utm_source=next-site&utm_medium=footer&utm_campaign=home)[GitHub](https://github.com/vercel/next.js)[Releases](https://github.com/vercel/next.js/releases)[Telemetry](/telemetry)[Governance](/governance)

#### About Vercel

[Next.js + Vercel](https://vercel.com/solutions/nextjs?utm_source=next-site&utm_medium=footer&utm_campaign=home)[Open Source Software](https://vercel.com/oss?utm_source=next-site&utm_medium=footer&utm_campaign=home)[GitHub](https://github.com/vercel)[Bluesky](https://bsky.app/profile/vercel.com)

#### Legal

[Privacy Policy](https://vercel.com/legal/privacy-policy)Cookie Preferences

#### Subscribe to our newsletter

Stay updated on new releases and features, guides, and case studies.

Subscribe

© 2024 Vercel, Inc.

[](https://github.com/vercel/next.js)[](https://bsky.app/profile/nextjs.org)
[](/)[Docs](/docs/en/main)[Blog](/blog)[Showcase](/showcase)[Resources](/resources)

[Docs](/docs/en/main)[Blog](/blog)[Showcase](/showcase)[Resources](/resources)

# Welcome to Remix

## Focused on web standards and modern web app UX, you’re simply going to build better websites

Remix is a full stack web framework that lets you focus on the user interface and work back through web standards to deliver a fast, slick, and resilient user experience. People are gonna love using your stuff.

[Get Started](/docs/start/quickstart)[Read the Docs](/docs)

```
export async function loader({ request }) {
 return getProjects();
}
export async function action({ request }) {
 const form = await request.formData();
 return createProject({
  title: form.get("title"),
 });
}
export default function Projects() {
 const projects = useLoaderData();
 const { state } = useNavigation();
 const busy = state === "submitting";
 return (
  <div>
   {projects.map((project) => (
    <Link to={project.slug}>
     {project.title}
    </Link>
   ))}
   <Form method="post">
    <input name="title" />
    <button type="submit" disabled={busy}>
     {busy
      ? "Creating..."
      : "Create New Project"}
    </button>
   </Form>
  </div>
 );
}

```


```
export async function loader({ request }) {
 return getProjects();
}
export async function action({ request }) {
 const form = await request.formData();
 return createProject({ title: form.get("title") });
}
export default function Projects() {
 const projects = useLoaderData();
 const { state } = useNavigation();
 const busy = state === "submitting";
 return (
  <div>
   {projects.map((project) => (
    <Link to={project.slug}>{project.title}</Link>
   ))}
   <Form method="post">
    <input name="title" />
    <button type="submit" disabled={busy}>
     {busy ? "Creating..." : "Create New Project"}
    </button>
   </Form>
  </div>
 );
}

```


## Testimonials

Twitter Logo

, 

Radix UI

> I've been waiting for something to encourage progressive enhancement in the React space *forever* and Remix truly is so much more. Proving we don't need to sacrifice React or choose SSG for a lightning fast, accessible UI, and the DX makes it all too easy 🤤

Cloudflare

> holy 💩 Remix is good

Discord, prev React Core

> I just rewrote my first Remix app on top of Cloudflare Workers and Supabase and it’s so damn good

Software Developer

> My mind is still blown away with Remix! So easy and elegant 😩. I love how it also focuses on Accessibility (Progressive Enhancement...) 🤯, A few days ago I was like wazzup with remix, we got Next.js and Svelte 😴 ... and now I'm fired up like crazy 😂. This is so good 🤤

Daffy, prev Vercel

> What’s really cool with Remix loaders is that you can do most of your data transformation and calculations there, like check if a list is empty, limit the number of records, only send specific attributes, so your React component just receives the data and renders it, no logic needed

Fullstack Dev, Frontside

> Remix is going to put developers on the Hot Path to build accessible, scaleable, and performant apps, that have stellar user experiences and amazing developer ergonomics. It's not only going to be a win for developers, but also a big win for the end-users!

Fullstack Developer

> In my opinion @remix_run will be game changer for corporate teams hesitant to adopt full stack JavaScript. The core concepts are so intuitive you can pick it up in a day, and it will even integrate into your existing stack.

Software Engineer, Box

> I love what @mjackson and @ryanflorence are doing with Remix! Deploying to AWS Lambda in under 30 seconds 🤯

Web Developer

> Building with @remix_run has been awesome so far. Having used Next.js for applications for years, the nested layouts are a wonderful feature. I also haven't learned this much about the web in years.

Web Developer

> I love using @remix_run for my website. Remix has improved my productivity as a front-end developer by empowering me to seamlessly switch between front-end and back-end code.

App Developer

> If you're doing #webdevelopment you should check out Remix 🔥 It's a new (old) paradigm for web dev, which simplifies our code, especially state management😅, speeds up our page loads, and gives us a mental model and framework we can rely on to create our best work

![](/wave.png)![](/loading.gif)

## While you were waiting for your static site to build, distributed web infra­structure got really good. Break through the static.

Remix is a seamless server and browser runtime that provides snappy page loads and instant transitions by leveraging distributed systems and native browser features instead of clunky static builds. Built on the Web Fetch API (instead of Node) **it can run anywhere**. It already runs natively on Cloudflare Workers, and of course supports serverless and traditional Node.js environments, so you can come as you are.

Page speed is only one aspect of our true goal though. We're after **better user experiences**. As you’ve pushed the boundaries of the web, your tools haven’t caught up to your appetite. **Remix is ready** to serve you from the initial request to the fanciest UX your designers can think up. Check it out 👀

## Remix has a cheat code:Nested Routes.

↑↑↓↓←→←→BA↵

Websites usually have levels of navigation that control child views.

Not only are these components pretty much always coupled to URL segments...

...they’re also the semantic boundary of data loading and code splitting.

Hover or tap the buttons to see how they’re all related

👇

<Root><Sales><Invoices><Invoice id={id}>

example.com/sales/invoices/102000

Fakebooks

Dashboard

Accounts

Sales

Expenses

Reports

Sales

Overview

Subscriptions

Invoices

Customers

Deposits

Overdue

$10,800

Due Soon

$62,000

Invoice List

Santa Monica

$10,800

1995

Overdue

Stankonia

$8,000

2000

Due Today

Ocean Avenue

$9,500

2003

Paid

Tubthumper

$14,000

1997

Due in 10 Days

Wide Open Sp...

$4,600

1998

Due in 8 Days

Stankonia

$8,000

Due Today • Invoiced 10/31/2000

Pro Plan

$6,000

Custom

$2,000

Net Total

$8,000

## What about loading states?

Through nested routes, Remix can eliminate nearly every loading state.

Most web apps fetch inside of components, creating request waterfalls, slower loads, and jank.

Remix loads data in parallel on the server and sends a fully formed HTML document. Way faster, jank free.

Without Remix

about:blank

document

root.js

user.json

sales.js

sales/nav.json

invoices.js

invoice.js

invoice/{id}.json

With Remix

about:blank

document

root.js

sales.js

invoices.js

invoice.js

(Keep scrolling to compare)

Say good­bye to Spinnageddon

Say good­bye to Spinnageddon

## Pre-fetching Everything

Nested routes allow Remix to make your app as fast as instant.

Remix can prefetch everything in parallel before the user clicks a link.

Public Data. User Data. Modules. Heck, even CSS.

Zero loading states. Zero skeleton UI. Zero jank.

Alright, you caught us, they’re just prefetch link tags, #useThePlatform

example.com/dashboard

Fakebooks

Dashboard

Accounts

Sales

Expenses

Reports

Dashboard

Recent Activity

Alerts

Messages

New Invoice

Customer

Stankonia

Net Total

$8,000

New Invoice

Customer

Ocean Avenue

Net Total

$9,500

## Data loading

... ![](/yawn.png)

You ever notice most of the code in your app is for changing data?

Imagine if React only had props and no way to set state. What’s the point? If a web framework helps you load data but doesn’t help you update it, what’s the point? Remix doesn’t drop you off at the `<form onSubmit>` cliff. (What the heck does `event.preventDefault` do anyway?)

Resilient, progressively enhanced data updates are built in.

It’s so simple it’s kind of silly. Just make a form...

...and an action on a route module. It looks like traditional HTML forms but enables fully dynamic web experiences you're after.

Remix runs the action server side, revalidates data client side, and even handles race conditions from resubmissions.

Get fancy with transition hooks and make some pending UI. Remix handles all the state, you simply ask for it.

Or get jiggy with some optimistic UI. Remix provides the data being sent to the server so you can skip the busy spinners for mutations, too.

HTML forms for mutations. Who knew?

```
export default function NewInvoice() {
 return (
  <Form method="post">
   <input type="text" name="company" />
   <input type="text" name="amount" />
   <button type="submit">Create</button>
  </Form>
 );
}

```


## Error Handling

:)

Your websites run into problems, but with Remix they don’t need to be refreshed. Error handling is hard to remember and hard to do. That’s why it’s built in.

Remix handles errors while Server Rendering. Errors while Client Rendering. Even errors in your server side data handling.

![](/qrcode.png)

## Route Error Boundaries keep the happy path happy.

Each route module can export an error boundary next to the default route component.

If an error is thrown, client or server side, users see the boundary instead of the default component.

Routes w/o trouble render normally, so users have more options than slamming refresh.

If a route has no boundary, errors bubble up. Just put one at the top and chill out about errors in code review, yeah?

```
export default function InvoiceRoute() {
 const invoice = useLoaderData();
 return <Invoice data={invoice} />;
}

```


That's probably enough for now. What are you waiting for?

[Go Play!](/docs)

[GitHub Logo](https://github.com/remix-run)[YouTube logo](https://youtube.com/remix_run)[](https://rmx.as/discord)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

1/19

React 18 Keynote

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=HS6vIYkSNks "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=ytudH8je5ko "Next \(SHIFT+n\)")

0:00 / 33:48•Watch full videoLive

•

•

Scroll for details

#  React 18 Keynote

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

1.9K

Share

Download

Download 

Save

128K views3 years ago

128,024 views • Dec 9, 2021 

Show less 

Andrew Clark, Lauren Tan, Juan Tejada & Ricky Hanlon…...more 

...more 

## 

Key moments

View all

#### [React's APIs are rooted primarily in design principles, not programming React's APIs are rooted primarily in design principles, not programming 2:06 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

#### [React's APIs are rooted primarily in design principles, not programming ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

2:06

#### [When you use React, it feels like you're directly authoring the user experience When you use React, it feels like you're directly authoring the user experience 3:50 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

#### [When you use React, it feels like you're directly authoring the user experience ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

3:50

#### [Specifying the loading state Specifying the loading state 12:27 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

#### [Specifying the loading state ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

12:27

#### [Day 1 improvements Automatic batching Day 1 improvements Automatic batching 18:36 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

#### [Day 1 improvements Automatic batching ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

18:36

#### [Concurrent rendering...? Concurrent rendering...? 19:24 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1164s)

#### [Concurrent rendering...? ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1164s)

19:24

#### [A behind-the-scenes capability in React that powers features like Suspense A behind-the-scenes capability in React that powers features like Suspense 19:40 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1180s)

#### [A behind-the-scenes capability in React that powers features like Suspense ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1180s)

19:40

#### ["Concurrent mode" Abandoned adoption strategy "Concurrent mode" Abandoned adoption strategy 21:14 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1274s)

#### ["Concurrent mode" Abandoned adoption strategy ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1274s)

21:14

#### [Concurrent features New adoption strategy Concurrent features New adoption strategy 21:38 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1298s)

#### [Concurrent features New adoption strategy ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1298s)

21:38

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# React 18 Keynote

128,024 views128K views

Dec 9, 2021

1.9K

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [React's APIs are rooted primarily in design principles, not programming React's APIs are rooted primarily in design principles, not programming 2:06 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

#### [React's APIs are rooted primarily in design principles, not programming ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

2:06

#### [When you use React, it feels like you're directly authoring the user experience When you use React, it feels like you're directly authoring the user experience 3:50 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

#### [When you use React, it feels like you're directly authoring the user experience ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

3:50

#### [Specifying the loading state Specifying the loading state 12:27 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

#### [Specifying the loading state ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

12:27

#### [Day 1 improvements Automatic batching Day 1 improvements Automatic batching 18:36 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

#### [Day 1 improvements Automatic batching ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

18:36

#### [Concurrent rendering...? Concurrent rendering...? 19:24 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1164s)

#### [Concurrent rendering...? ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1164s)

19:24

#### [A behind-the-scenes capability in React that powers features like Suspense A behind-the-scenes capability in React that powers features like Suspense 19:40 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1180s)

#### [A behind-the-scenes capability in React that powers features like Suspense ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1180s)

19:40

#### ["Concurrent mode" Abandoned adoption strategy "Concurrent mode" Abandoned adoption strategy 21:14 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1274s)

#### ["Concurrent mode" Abandoned adoption strategy ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1274s)

21:14

#### [Concurrent features New adoption strategy Concurrent features New adoption strategy 21:38 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1298s)

#### [Concurrent features New adoption strategy ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1298s)

21:38

#### [React 18 Beta React 18 Beta 22:22 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1342s)

#### [React 18 Beta ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1342s)

22:22

#### [React 18 RC React 18 RC 22:38 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1358s)

#### [React 18 RC ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1358s)

22:38

#### [Final round of public testing Final round of public testing 22:47 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1367s)

#### [Final round of public testing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1367s)

22:47

#### [Server Components Server Components 23:37 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1417s)

#### [Server Components ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1417s)

23:37

#### [Concurrent rendering was originally inspired by problems found in React Native Concurrent rendering was originally inspired by problems found in React Native 26:18 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1578s)

#### [Concurrent rendering was originally inspired by problems found in React Native ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1578s)

26:18

#### [Where is React Native today? Where is React Native today? 30:47 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1847s)

#### [Where is React Native today? ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1847s)

30:47

Sync to video time 

Sync to video time

##  Description

React 18 Keynote

1.9KLikes

128,024Views

2021Dec 9

Andrew Clark, Lauren Tan, Juan Tejada & Ricky Hanlon

Show less ...more

Andrew Clark, Lauren Tan, Juan Tejada & Ricky Hanlon…...more 

...more Show less 

## 

Key moments

View all

#### [React's APIs are rooted primarily in design principles, not programming React's APIs are rooted primarily in design principles, not programming 2:06 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

#### [React's APIs are rooted primarily in design principles, not programming ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=126s)

2:06

#### [When you use React, it feels like you're directly authoring the user experience When you use React, it feels like you're directly authoring the user experience 3:50 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

#### [When you use React, it feels like you're directly authoring the user experience ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=230s)

3:50

#### [Specifying the loading state Specifying the loading state 12:27 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

#### [Specifying the loading state ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=747s)

12:27

#### [Day 1 improvements Automatic batching Day 1 improvements Automatic batching 18:36 ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

#### [Day 1 improvements Automatic batching ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&t=1116s)

18:36

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:React 18 for app developers

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

1 / 191 / 19

Loop playlist 

Shuffle playlist 

[ ▶ [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=ytudH8je5ko)

### [ React 18 for app developers  React Conf React Conf  • • 65K views 3 years ago ](/watch?v=ytudH8je5ko)

[ ](/watch?v=lyEKhv8-3n0)

### [ React Conf Keynote (Day 1)  React Conf React Conf  • • 7.7K views 4 months ago ](/watch?v=lyEKhv8-3n0)

[ ](/watch?v=ByBPyMBTzM0)

### [ Concurrent Rendering in React - Andrew Clark and Brian Vaughn - React Conf 2018  React Conf React Conf  • • 79K views 6 years ago ](/watch?v=ByBPyMBTzM0)

[ ](/watch?v=gfU1iZnjRZM)

### [ Next.js Conf Keynote (Next.js 14)  Vercel Vercel  • • 58K views 1 year ago ](/watch?v=gfU1iZnjRZM)

[ ](/watch?v=NZoRlVi3MjQ)

### [ The Story of Concurrent React  uidotdev uidotdev  • • 161K views 2 years ago ](/watch?v=NZoRlVi3MjQ)

[ ](/watch?v=pj5N-Khihgc)

### [ Streaming Server Rendering with Suspense  React Conf React Conf  • • 48K views 3 years ago ](/watch?v=pj5N-Khihgc)

[ ](/watch?v=R0B2HsSM78s)

### [ React Unpacked: A Roadmap to React 19 | Sam Selikoff  React Conf React Conf  • • 6.3K views 4 months ago ](/watch?v=R0B2HsSM78s)

[ ](/watch?v=TQQPAU21ZUw)

### [ Data Fetching with React Server Components  Meta Open Source Meta Open Source  • • 264K views 3 years ago ](/watch?v=TQQPAU21ZUw)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

2/19

React 18 for app developers

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=FZ0cG47msEk "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=pj5N-Khihgc "Next \(SHIFT+n\)")

0:00 / 19:08•Watch full videoLive

•

•

Scroll for details

#  React 18 for app developers

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

961

Share

Download

Download 

Save

65K views3 years ago

65,767 views • Dec 9, 2021 

Show less 

Shruti Kapoor…...more 

...more 

## 

Key moments

View all

#### [Before React 18: not batched Before React 18: not batched 1:58 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

#### [Before React 18: not batched ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

1:58

#### [Automatic batching in React 18 Automatic batching in React 18 2:16 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

#### [Automatic batching in React 18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

2:16

#### [Server rendering Server rendering 3:18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

#### [Server rendering ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

3:18

#### [Suspense on the server Suspense on the server 3:54 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

#### [Suspense on the server ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

3:54

#### [New APls (concurrent features) New APls (concurrent features) 5:44 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=344s)

#### [New APls (concurrent features) ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=344s)

5:44

#### [How to upgrade to React 18 How to upgrade to React 18 7:24 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=444s)

#### [How to upgrade to React 18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=444s)

7:24

#### [Edge cases to watch out for Edge cases to watch out for 17:42 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=1062s)

#### [Edge cases to watch out for ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=1062s)

17:42

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# React 18 for app developers

65,767 views65K views

Dec 9, 2021

961

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [Before React 18: not batched Before React 18: not batched 1:58 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

#### [Before React 18: not batched ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

1:58

#### [Automatic batching in React 18 Automatic batching in React 18 2:16 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

#### [Automatic batching in React 18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

2:16

#### [Server rendering Server rendering 3:18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

#### [Server rendering ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

3:18

#### [Suspense on the server Suspense on the server 3:54 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

#### [Suspense on the server ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

3:54

#### [New APls (concurrent features) New APls (concurrent features) 5:44 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=344s)

#### [New APls (concurrent features) ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=344s)

5:44

#### [How to upgrade to React 18 How to upgrade to React 18 7:24 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=444s)

#### [How to upgrade to React 18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=444s)

7:24

#### [Edge cases to watch out for Edge cases to watch out for 17:42 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=1062s)

#### [Edge cases to watch out for ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=1062s)

17:42

Sync to video time 

Sync to video time

##  Description

React 18 for app developers

961Likes

65,767Views

2021Dec 9

Shruti Kapoor

Show less ...more

Shruti Kapoor…...more 

...more Show less 

## 

Key moments

View all

#### [Before React 18: not batched Before React 18: not batched 1:58 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

#### [Before React 18: not batched ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=118s)

1:58

#### [Automatic batching in React 18 Automatic batching in React 18 2:16 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

#### [Automatic batching in React 18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=136s)

2:16

#### [Server rendering Server rendering 3:18 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

#### [Server rendering ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=198s)

3:18

#### [Suspense on the server Suspense on the server 3:54 ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

#### [Suspense on the server ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&t=234s)

3:54

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Streaming Server Rendering with Suspense

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

2 / 192 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ ▶ [ ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=pj5N-Khihgc)

### [ Streaming Server Rendering with Suspense  React Conf React Conf  • • 48K views 3 years ago ](/watch?v=pj5N-Khihgc)

[ ](/watch?v=FZ0cG47msEk)

### [ React 18 Keynote  React Conf React Conf  • • 128K views 3 years ago ](/watch?v=FZ0cG47msEk)

[ ](/watch?v=lhVGdErZuN4)

### [ Re-introducing Relay  React Conf React Conf  • • 22K views 3 years ago ](/watch?v=lhVGdErZuN4)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=lGEMwh32soc)

### [ React without memo  React Conf React Conf  • • 140K views 3 years ago ](/watch?v=lGEMwh32soc)

[ ](/watch?v=oxDfrke8rZg)

### [ React Developer Tooling  React Conf React Conf  • • 19K views 3 years ago ](/watch?v=oxDfrke8rZg)

[ ](/watch?v=lvhPq5chokM)

### [ Forget About Memo | Lauren Tan  React Conf React Conf  • • 3.7K views 4 months ago ](/watch?v=lvhPq5chokM)
Tap to unmute

[Open App](vnd.youtube://m.youtube.com/watch?v=pj5N-Khihgc&feature=mweb_c3_open_app_11268432&itc_campaign=mweb_c3_open_app_11268432&redirect_app_store_ios=1&app=desktop)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

4/19

The first React Working Group

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=pj5N-Khihgc "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=oxDfrke8rZg "Next \(SHIFT+n\)")

0:00 / 14:41•Watch full videoLive

•

•

Scroll for details

#  The first React Working Group

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

84

Share

Download

Download 

Save

12K views3 years ago

12,473 views • Dec 9, 2021 

Show less 

Aakansha Doshi…...more 

...more 

## 

Key moments

View all

#### [Meeting between React & Redux Team Meeting between React & Redux Team 5:13 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

#### [Meeting between React & Redux Team ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

5:13

#### [Internals of Concurrent Scheduling Internals of Concurrent Scheduling 9:53 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

#### [Internals of Concurrent Scheduling ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

9:53

#### [How React keeps browser interactive during hydration? How React keeps browser interactive during hydration? 10:15 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

#### [How React keeps browser interactive during hydration? ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

10:15

#### [Prepare libraries for concurrent support. Prepare libraries for concurrent support. 10:46 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

#### [Prepare libraries for concurrent support. ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

10:46

#### [Beginner friendly Questions Beginner friendly Questions 12:32 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=752s)

#### [Beginner friendly Questions ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=752s)

12:32

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# The first React Working Group

12,473 views12K views

Dec 9, 2021

84

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [Meeting between React & Redux Team Meeting between React & Redux Team 5:13 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

#### [Meeting between React & Redux Team ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

5:13

#### [Internals of Concurrent Scheduling Internals of Concurrent Scheduling 9:53 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

#### [Internals of Concurrent Scheduling ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

9:53

#### [How React keeps browser interactive during hydration? How React keeps browser interactive during hydration? 10:15 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

#### [How React keeps browser interactive during hydration? ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

10:15

#### [Prepare libraries for concurrent support. Prepare libraries for concurrent support. 10:46 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

#### [Prepare libraries for concurrent support. ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

10:46

#### [Beginner friendly Questions Beginner friendly Questions 12:32 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=752s)

#### [Beginner friendly Questions ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=752s)

12:32

Sync to video time 

Sync to video time

##  Description

The first React Working Group

84Likes

12,473Views

2021Dec 9

Aakansha Doshi

Show less ...more

Aakansha Doshi…...more 

...more Show less 

## 

Key moments

View all

#### [Meeting between React & Redux Team Meeting between React & Redux Team 5:13 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

#### [Meeting between React & Redux Team ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=313s)

5:13

#### [Internals of Concurrent Scheduling Internals of Concurrent Scheduling 9:53 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

#### [Internals of Concurrent Scheduling ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=593s)

9:53

#### [How React keeps browser interactive during hydration? How React keeps browser interactive during hydration? 10:15 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

#### [How React keeps browser interactive during hydration? ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=615s)

10:15

#### [Prepare libraries for concurrent support. Prepare libraries for concurrent support. 10:46 ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

#### [Prepare libraries for concurrent support. ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&t=646s)

10:46

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:React Developer Tooling

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

4 / 194 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ ▶ [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

25 videos

### [React Conf 2024](/watch?v=p6auCiVoa3c&list=PLNG_1j3cPCaapCRvpsyQ2CrNtnTtLf2jz)

[React Conf](/@ReactConfOfficial) • [Playlist](/@ReactConfOfficial)

[View full playlist](/playlist?list=PLNG_1j3cPCaapCRvpsyQ2CrNtnTtLf2jz)

[ ](/watch?v=cxbVN1F-aag)

### [ Let’s break React’s rules | Charlotte Isambert  React Conf React Conf  • • 2K views 4 months ago ](/watch?v=cxbVN1F-aag)

[ ](/watch?v=pOo7x8OiAec)

### [ And Now You Understand React Server Components | Kent C. Dodds  React Conf React Conf  • • 13K views 4 months ago ](/watch?v=pOo7x8OiAec)

[ ](/watch?v=oxDfrke8rZg)

### [ React Developer Tooling  React Conf React Conf  • • 19K views 3 years ago ](/watch?v=oxDfrke8rZg)

[ ](/watch?v=AJOGzVygGcY)

### [ What's new in React 19 | Lydia Hallie  React Conf React Conf  • • 51K views 4 months ago ](/watch?v=AJOGzVygGcY)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=iCkPaE4nxaw)

### [ React team Q&A  React Conf React Conf  • • 1.2K views 4 months ago ](/watch?v=iCkPaE4nxaw)
Tap to unmute

[Open App](intent://m.youtube.com/watch?v=oxDfrke8rZg&feature=mweb_c3_open_app_11268432&itc_campaign=mweb_c3_open_app_11268432&redirect_app_store_ios=1&app=desktop#Intent;package=com.google.android.youtube;scheme=vnd.youtube;launchFlags=268435456;end)
React without memo

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Up next

LiveUpcoming

CancelPlay Now

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

0:00 / 12:00•Watch full videoLive

•

•

Scroll for details

•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/)

Search 

Search 

[ ](/)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

7/19

React Docs Keynote

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=lGEMwh32soc "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=-7odLW_hG7s "Next \(SHIFT+n\)")

0:00 / 10:06•Watch full videoLive

•

•

Scroll for details

#  React Docs Keynote

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

221

Share

Download

Download 

Save

12K views3 years ago

12,268 views • Dec 9, 2021 

Show less 

Rachel Nabors…...more 

...more 

## 

Key moments

View all

#### [React Docs Keynote React Docs Keynote 0:35 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

#### [React Docs Keynote ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

0:35

#### [Illustrations Illustrations 6:01 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

#### [Illustrations ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

6:01

#### [Diagrams Diagrams 6:13 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

#### [Diagrams ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

6:13

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# React Docs Keynote

12,268 views12K views

Dec 9, 2021

221

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [React Docs Keynote React Docs Keynote 0:35 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

#### [React Docs Keynote ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

0:35

#### [Illustrations Illustrations 6:01 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

#### [Illustrations ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

6:01

#### [Diagrams Diagrams 6:13 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

#### [Diagrams ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

6:13

Sync to video time 

Sync to video time

##  Description

React Docs Keynote

221Likes

12,268Views

2021Dec 9

Rachel Nabors

Show less ...more

Rachel Nabors…...more 

...more Show less 

## 

Key moments

View all

#### [React Docs Keynote React Docs Keynote 0:35 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

#### [React Docs Keynote ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=35s)

0:35

#### [Illustrations Illustrations 6:01 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

#### [Illustrations ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=361s)

6:01

#### [Diagrams Diagrams 6:13 ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

#### [Diagrams ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&t=373s)

6:13

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Things I learnt from the new React docs

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

7 / 197 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ 12:52 12:52 Now playing ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ 12:01 12:01 Now playing ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ ▶ [ 10:07 10:07 Now playing ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ 9:20 9:20 Now playing ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=lyEKhv8-3n0)

### [ React Conf Keynote (Day 1)  React Conf React Conf  • • 7.7K views 4 months ago ](/watch?v=lyEKhv8-3n0)

[ ](/watch?v=pj5N-Khihgc)

### [ Streaming Server Rendering with Suspense  React Conf React Conf  • • 48K views 3 years ago ](/watch?v=pj5N-Khihgc)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=-7odLW_hG7s)

### [ Things I learnt from the new React docs  React Conf React Conf  • • 7.6K views 3 years ago ](/watch?v=-7odLW_hG7s)

[ ](/watch?v=FZ0cG47msEk)

### [ React 18 Keynote  React Conf React Conf  • • 128K views 3 years ago ](/watch?v=FZ0cG47msEk)

[ ](/watch?v=ytudH8je5ko)

### [ React 18 for app developers  React Conf React Conf  • • 65K views 3 years ago ](/watch?v=ytudH8je5ko)

[ ](/watch?v=KMjVTYmWnW0)

### [ Webinar: Learn the basics of Nextflow Tower Cloud (June 2023)  Seqera Seqera  • • 173 views 2 weeks ago ](/watch?v=KMjVTYmWnW0)

[ ](/watch?v=Ul3y1LXxzdU)

### [ Learn React Router v6 In 45 Minutes  Web Dev Simplified Web Dev Simplified  • • 574K views 2 years ago ](/watch?v=Ul3y1LXxzdU)

[ ](/watch?v=HPoC-k7Rxwo)

### [ Goodbye, useEffect: David Khourshid  Real World React Real World React  • • 235K views 2 years ago ](/watch?v=HPoC-k7Rxwo)
[Things I learnt from the new React docs](https://m.youtube.com/watch?v=-7odLW_hG7s)

Search

Share

Copy link

Info

Shopping

Tap to unmute

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.
Tap to unmute

[Open App](vnd.youtube://m.youtube.com/watch?v=5X-WEQflCL0&feature=mweb_c3_open_app_11268432&itc_campaign=mweb_c3_open_app_11268432&redirect_app_store_ios=1&app=desktop)
Tap to unmute

[Open App](intent://m.youtube.com/watch?v=7cPWmID5XAk&feature=mweb_c3_open_app_11268432&itc_campaign=mweb_c3_open_app_11268432&redirect_app_store_ios=1&app=desktop#Intent;package=com.google.android.youtube;scheme=vnd.youtube;launchFlags=268435456;end)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

11/19

Interactive playgrounds with React

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=7cPWmID5XAk "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=lhVGdErZuN4 "Next \(SHIFT+n\)")

0:00 / 9:00•Watch full videoLive

•

•

Scroll for details

#  Interactive playgrounds with React

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

330

Share

Download

Download 

Save

14K views3 years ago

14,492 views • Dec 9, 2021 

Show less 

Delba De Oliveira…...more 

...more 

## 

Key moments

View all

#### [An interactive, learning experience with a tight feedback loop. An interactive, learning experience with a tight feedback loop. 1:37 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

#### [An interactive, learning experience with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

1:37

#### [USER INTERFACE COMPLEX TOPIC USER INTERFACE COMPLEX TOPIC 3:15 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

#### [USER INTERFACE COMPLEX TOPIC ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

3:15

#### [Interactive, learning experiences with a tight feedback loop. Interactive, learning experiences with a tight feedback loop. 3:32 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

#### [Interactive, learning experiences with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

3:32

#### [Static & Dynamic Static & Dynamic 5:47 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

#### [Static & Dynamic ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

5:47

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# Interactive playgrounds with React

14,492 views14K views

Dec 9, 2021

330

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [An interactive, learning experience with a tight feedback loop. An interactive, learning experience with a tight feedback loop. 1:37 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

#### [An interactive, learning experience with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

1:37

#### [USER INTERFACE COMPLEX TOPIC USER INTERFACE COMPLEX TOPIC 3:15 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

#### [USER INTERFACE COMPLEX TOPIC ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

3:15

#### [Interactive, learning experiences with a tight feedback loop. Interactive, learning experiences with a tight feedback loop. 3:32 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

#### [Interactive, learning experiences with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

3:32

#### [Static & Dynamic Static & Dynamic 5:47 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

#### [Static & Dynamic ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

5:47

Sync to video time 

Sync to video time

##  Description

Interactive playgrounds with React

330Likes

14,492Views

2021Dec 9

Delba De Oliveira

Show less ...more

Delba De Oliveira…...more 

...more Show less 

## 

Key moments

View all

#### [An interactive, learning experience with a tight feedback loop. An interactive, learning experience with a tight feedback loop. 1:37 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

#### [An interactive, learning experience with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=97s)

1:37

#### [USER INTERFACE COMPLEX TOPIC USER INTERFACE COMPLEX TOPIC 3:15 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

#### [USER INTERFACE COMPLEX TOPIC ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=195s)

3:15

#### [Interactive, learning experiences with a tight feedback loop. Interactive, learning experiences with a tight feedback loop. 3:32 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

#### [Interactive, learning experiences with a tight feedback loop. ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=212s)

3:32

#### [Static & Dynamic Static & Dynamic 5:47 ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

#### [Static & Dynamic ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&t=347s)

5:47

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Re-introducing Relay

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

11 / 1911 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ ▶ [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=lhVGdErZuN4)

### [ Re-introducing Relay  React Conf React Conf  • • 22K views 3 years ago ](/watch?v=lhVGdErZuN4)

[ ](/watch?v=DFwLGLmLuFg)

### [ Caching in NextJs ft Delba Oliveira from Vercel  Hamed Bahram Hamed Bahram  • • 20K views 5 months ago ](/watch?v=DFwLGLmLuFg)

[ ](/watch?v=ytudH8je5ko)

### [ React 18 for app developers  React Conf React Conf  • • 65K views 3 years ago ](/watch?v=ytudH8je5ko)

[ ](/watch?v=z1F6Dv5Pw4M)

### [ Perplexity AI: A Game-Changer for Teacher Research  Teacher's Tech Teacher's Tech  • • 4.1K views 7 months ago ](/watch?v=z1F6Dv5Pw4M)

[ ](/watch?v=AJOGzVygGcY)

### [ What's new in React 19 | Lydia Hallie  React Conf React Conf  • • 51K views 4 months ago ](/watch?v=AJOGzVygGcY)

[ ](/watch?v=pOo7x8OiAec)

### [ And Now You Understand React Server Components | Kent C. Dodds  React Conf React Conf  • • 13K views 4 months ago ](/watch?v=pOo7x8OiAec)

[ ](/watch?v=sPM2WiwA1us)

### [ GSoC 2025 Complete Roadmap | Google Summer of Code  Apna College Apna College  • • 335K views 2 weeks ago ](/watch?v=sPM2WiwA1us)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

12/19

Re-introducing Relay

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=zL8cz2W0z34 "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=9L4FFrvwJwY "Next \(SHIFT+n\)")

0:00 / 19:34•Watch full videoLive

•

•

Scroll for details

#  Re-introducing Relay

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

620

Share

Download

Download 

Save

22K views3 years ago

22,710 views • Dec 9, 2021 

Show less 

Robert Balicki…...more 

...more 

## 

Key moments

View all

#### [Implicit dependency between query declaration and subcomponents Implicit dependency between query declaration and subcomponents 4:05 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

#### [Implicit dependency between query declaration and subcomponents ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

4:05

#### [Every component can be reasoned about in isolation Every component can be reasoned about in isolation 6:41 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

#### [Every component can be reasoned about in isolation ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

6:41

#### [Slow-to-calculate fields Slow-to-calculate fields 8:04 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

#### [Slow-to-calculate fields ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

8:04

#### [Components and loading states are separate concerns Components and loading states are separate concerns 10:20 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

#### [Components and loading states are separate concerns ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

10:20

#### [Pre-generated instructions Pre-generated instructions 15:12 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=912s)

#### [Pre-generated instructions ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=912s)

15:12

#### [5x on average 7x at p95 5x on average 7x at p95 17:03 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=1023s)

#### [5x on average 7x at p95 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=1023s)

17:03

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# Re-introducing Relay

22,710 views22K views

Dec 9, 2021

620

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [Implicit dependency between query declaration and subcomponents Implicit dependency between query declaration and subcomponents 4:05 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

#### [Implicit dependency between query declaration and subcomponents ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

4:05

#### [Every component can be reasoned about in isolation Every component can be reasoned about in isolation 6:41 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

#### [Every component can be reasoned about in isolation ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

6:41

#### [Slow-to-calculate fields Slow-to-calculate fields 8:04 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

#### [Slow-to-calculate fields ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

8:04

#### [Components and loading states are separate concerns Components and loading states are separate concerns 10:20 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

#### [Components and loading states are separate concerns ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

10:20

#### [Pre-generated instructions Pre-generated instructions 15:12 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=912s)

#### [Pre-generated instructions ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=912s)

15:12

#### [5x on average 7x at p95 5x on average 7x at p95 17:03 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=1023s)

#### [5x on average 7x at p95 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=1023s)

17:03

Sync to video time 

Sync to video time

##  Description

Re-introducing Relay

620Likes

22,710Views

2021Dec 9

Robert Balicki

Show less ...more

Robert Balicki…...more 

...more Show less 

## 

Key moments

View all

#### [Implicit dependency between query declaration and subcomponents Implicit dependency between query declaration and subcomponents 4:05 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

#### [Implicit dependency between query declaration and subcomponents ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=245s)

4:05

#### [Every component can be reasoned about in isolation Every component can be reasoned about in isolation 6:41 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

#### [Every component can be reasoned about in isolation ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=401s)

6:41

#### [Slow-to-calculate fields Slow-to-calculate fields 8:04 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

#### [Slow-to-calculate fields ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=484s)

8:04

#### [Components and loading states are separate concerns Components and loading states are separate concerns 10:20 ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

#### [Components and loading states are separate concerns ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&t=620s)

10:20

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:React Native Desktop

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

12 / 1912 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ 12:52 12:52 Now playing ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ 12:01 12:01 Now playing ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ 10:07 10:07 Now playing ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ 9:20 9:20 Now playing ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ ▶ [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=FZ0cG47msEk)

### [ React 18 Keynote  React Conf React Conf  • • 128K views 3 years ago ](/watch?v=FZ0cG47msEk)

[ ](/watch?v=Tl0S7QkxFE4)

### [ Data Fetching With Suspense In Relay | Joe Savona  React Conf React Conf  • • 30K views 5 years ago ](/watch?v=Tl0S7QkxFE4)

[ ](/watch?v=xnvzz7Z658I)

### [ Deep dive on Relay GraphQL client for React  Hasura Hasura  • • 14K views 4 years ago ](/watch?v=xnvzz7Z658I)

[ ](/watch?v=lyEKhv8-3n0)

### [ React Conf Keynote (Day 1)  React Conf React Conf  • • 7.7K views 4 months ago ](/watch?v=lyEKhv8-3n0)

[ ](/watch?v=ytudH8je5ko)

### [ React 18 for app developers  React Conf React Conf  • • 65K views 3 years ago ](/watch?v=ytudH8je5ko)

[ ](/watch?v=WxPtYJRjLL0)

### [ F8 2019: Building the New Facebook.com with React, GraphQL and Relay  Meta Developers Meta Developers  • • 31K views 5 years ago ](/watch?v=WxPtYJRjLL0)

[ ](/watch?v=9L4FFrvwJwY)

### [ React Native Desktop  React Conf React Conf  • • 19K views 3 years ago ](/watch?v=9L4FFrvwJwY)

[ ](/watch?v=NdWTDZ7dg-8)

### [ Design Representation  Hardware Modeling Using Verilog Hardware Modeling Using Verilog  • • 105K views 7 years ago ](/watch?v=NdWTDZ7dg-8)

[ ](/watch?v=If1Lw4pLLEo)

### [ Spring Framework Tutorial | Full Course  Telusko Telusko  • • 2.2M views 5 years ago ](/watch?v=If1Lw4pLLEo)

[ ](/watch?v=1_dLaSjzOMY)

### [ Write Clean Code with React Suspense | React Error Boundaries Explained  Dave Gray Dave Gray  • • 28K views 1 year ago ](/watch?v=1_dLaSjzOMY)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[Sign in](https://accounts.google.com/ServiceLogin?service=youtube&uilel=3&passive=true&continue=https%3A%2F%2Fwww.youtube.com%2Fsignin%3Faction_handle_signin%3Dtrue%26app%3Ddesktop%26hl%3Den%26next%3Dhttps%253A%252F%252Fwww.youtube.com%252Fwatch%253Fv%253D9L4FFrvwJwY%2526list%253DPLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa%2526index%253D13&hl=en&ec=65620)

[ ](/ "YouTube Home") IN 

13/19

React Native Desktop

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=lhVGdErZuN4 "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=NLj73vrc2I8 "Next \(SHIFT+n\)")

0:00 / 15:32•Watch full videoLive

•

•

Scroll for details

#  React Native Desktop

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

306

Share

Download

Download 

Save

19K views3 years ago

19,398 views • Dec 9, 2021 

Show less 

Eric Rozell & Steven Moyes…...more 

...more 

## 

Key moments

View all

#### [React Native Desktop React Native Desktop 0:36 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

#### [React Native Desktop ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

0:36

#### [Miniview Miniview 3:46 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

#### [Miniview ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

3:46

#### [Participant Reordering Participant Reordering 4:14 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

#### [Participant Reordering ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

4:14

#### [How and Why Is Microsoft Using React Native How and Why Is Microsoft Using React Native 7:50 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

#### [How and Why Is Microsoft Using React Native ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

7:50

#### [Xbox Apps Xbox Apps 8:43 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=523s)

#### [Xbox Apps ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=523s)

8:43

#### [Powerapps Player Powerapps Player 9:21 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=561s)

#### [Powerapps Player ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=561s)

9:21

#### [Demo Demo 10:52 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=652s)

#### [Demo ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=652s)

10:52

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# React Native Desktop

19,398 views19K views

Dec 9, 2021

306

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [React Native Desktop React Native Desktop 0:36 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

#### [React Native Desktop ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

0:36

#### [Miniview Miniview 3:46 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

#### [Miniview ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

3:46

#### [Participant Reordering Participant Reordering 4:14 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

#### [Participant Reordering ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

4:14

#### [How and Why Is Microsoft Using React Native How and Why Is Microsoft Using React Native 7:50 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

#### [How and Why Is Microsoft Using React Native ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

7:50

#### [Xbox Apps Xbox Apps 8:43 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=523s)

#### [Xbox Apps ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=523s)

8:43

#### [Powerapps Player Powerapps Player 9:21 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=561s)

#### [Powerapps Player ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=561s)

9:21

#### [Demo Demo 10:52 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=652s)

#### [Demo ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=652s)

10:52

Sync to video time 

Sync to video time

##  Description

React Native Desktop

306Likes

19,398Views

2021Dec 9

Eric Rozell & Steven Moyes

Show less ...more

Eric Rozell & Steven Moyes…...more 

...more Show less 

## 

Key moments

View all

#### [React Native Desktop React Native Desktop 0:36 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

#### [React Native Desktop ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=36s)

0:36

#### [Miniview Miniview 3:46 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

#### [Miniview ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=226s)

3:46

#### [Participant Reordering Participant Reordering 4:14 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

#### [Participant Reordering ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=254s)

4:14

#### [How and Why Is Microsoft Using React Native How and Why Is Microsoft Using React Native 7:50 ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

#### [How and Why Is Microsoft Using React Native ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&t=470s)

7:50

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:On-device Machine Learning for React Native

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

13 / 1913 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ 12:52 12:52 Now playing ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ 12:01 12:01 Now playing ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ 10:07 10:07 Now playing ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ 9:20 9:20 Now playing ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ 10:44 10:44 Now playing ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ 11:09 11:09 Now playing ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ 9:01 9:01 Now playing ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ 19:35 19:35 Now playing ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ ▶ [ 15:33 15:33 Now playing ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ 14:01 14:01 Now playing ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ 19:23 19:23 Now playing ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ 8:32 8:32 Now playing ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ 10:33 10:33 Now playing ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ 10:15 10:15 Now playing ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ 9:38 9:38 Now playing ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

24:40

### [From Gaming to Productivity: how Microsoft is using React Native across a portfolio of experiences](/watch?v=EgpHCLCwebU)

[Callstack Engineers](/@CallstackEngineers)

2.8K views • 1 year ago

17:19

### [ELECTRON: why people HATE it, why devs USE it](/watch?v=G1K0Mb-rLBU)

[The Linux Experiment](/@TheLinuxEXP)

195K views • 2 years ago

22:54

### [What’s next for React Native for Desktop? — Saad Najmi, Steven Moyes | React Universe Conf 2024](/watch?v=1leGdmEse9Y)

[Callstack Engineers](/@CallstackEngineers)

292 views • 2 months ago

19:35

### [Re-introducing Relay](/watch?v=lhVGdErZuN4)

[React Conf](/@ReactConfOfficial)

22K views • 3 years ago

40:20

### [MS Build SK119 React Native: Build cross platform apps that target Windows, Mac, and more!](/watch?v=QMFbrHZnvvw)

[Microsoft 365 Developer](/@Microsoft365Developer)

24K views • 4 years ago

59:26

### [Is your business ready for AI? We can help!](/watch?v=wd4jgaHaZh0)

[The I.T. Company Ltd.](/@thei.t.companyltd.5368)

25 views • 7 days ago

8:15

### [Australia v India 2024-25 | Third Test | Day Five](/watch?v=pGvp5Q-1Yag)

[cricket.com.au](/@cricketcomau)

2.5M views • 4 hours ago

New

18:12

### [Gabriel Donadel – Launching Desktop Apps to Orbit with React Native | App.js Conf 2024](/watch?v=K7yC3JKfWYU)

[Software Mansion](/@SoftwareMansion)

2.7K views • 6 months ago

1:11:48

### [Create a Desktop App With JavaScript & Electron](/watch?v=ML743nrkMHw)

[Traversy Media](/@TraversyMedia)

382K views • 2 years ago
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

14/19

On-device Machine Learning for React Native

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Up next

LiveUpcoming

CancelPlay Now

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=9L4FFrvwJwY "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=oPfSC5bQPR8 "Next \(SHIFT+n\)")

0:00 / 14:00•Watch full videoLive

•

•

Scroll for details

#  On-device Machine Learning for React Native

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

195

Share

Download

Download 

Save

12K views3 years ago

12,132 views • Dec 9, 2021 

Show less 

Roman Rädle…...more 

...more 

## 

Key moments

View all

#### [Image Classification Model Image Classification Model 3:57 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

#### [Image Classification Model ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

3:57

#### [Image Classification Image Classification 4:12 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

#### [Image Classification ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

4:12

#### [Type Safety Type Safety 7:33 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

#### [Type Safety ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

7:33

#### [React Hooks React Hooks 8:54 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

#### [React Hooks ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

8:54

#### [Camera Component Camera Component 11:52 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=712s)

#### [Camera Component ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=712s)

11:52

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# On-device Machine Learning for React Native

12,132 views12K views

Dec 9, 2021

195

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [Image Classification Model Image Classification Model 3:57 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

#### [Image Classification Model ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

3:57

#### [Image Classification Image Classification 4:12 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

#### [Image Classification ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

4:12

#### [Type Safety Type Safety 7:33 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

#### [Type Safety ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

7:33

#### [React Hooks React Hooks 8:54 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

#### [React Hooks ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

8:54

#### [Camera Component Camera Component 11:52 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=712s)

#### [Camera Component ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=712s)

11:52

Sync to video time 

Sync to video time

##  Description

On-device Machine Learning for React Native

195Likes

12,132Views

2021Dec 9

Roman Rädle

Show less ...more

Roman Rädle…...more 

...more Show less 

## 

Key moments

View all

#### [Image Classification Model Image Classification Model 3:57 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

#### [Image Classification Model ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=237s)

3:57

#### [Image Classification Image Classification 4:12 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

#### [Image Classification ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=252s)

4:12

#### [Type Safety Type Safety 7:33 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

#### [Type Safety ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=453s)

7:33

#### [React Hooks React Hooks 8:54 ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

#### [React Hooks ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&t=534s)

8:54

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:React 18 for External Store Libraries

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

14 / 1914 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ 12:52 12:52 Now playing ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ 12:01 12:01 Now playing ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ 10:07 10:07 Now playing ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ 9:20 9:20 Now playing ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ 10:44 10:44 Now playing ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ ▶ [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=0-S5a0eXPoc)

### [ React Native Tutorial for Beginners - Build a React Native App  Programming with Mosh Programming with Mosh  • • 3.2M views 4 years ago ](/watch?v=0-S5a0eXPoc)

[ ](/watch?v=oPfSC5bQPR8)

### [ React 18 for External Store Libraries  React Conf React Conf  • • 19K views 3 years ago ](/watch?v=oPfSC5bQPR8)

[ ](/watch?v=2LqrfEzuIMk)

### [ How to Deploy Machine Learning Model using Flask (Iris Dataset) | Python  Hackers Realm Hackers Realm  • • 20K views 2 years ago ](/watch?v=2LqrfEzuIMk)

[ ](/watch?v=Ij5MoUnLQ0E)

### [ ONNX and ONNX Runtime  Microsoft Research Microsoft Research  • • 26K views 5 years ago ](/watch?v=Ij5MoUnLQ0E)

[ ](/watch?v=tFnNBhr0WTw)

### [ Build your own AI Shopping App with React Native and Supabase Vector  Simon Grimm Simon Grimm  • • 7.7K views 1 year ago ](/watch?v=tFnNBhr0WTw)

[ ](/watch?v=lhVGdErZuN4)

### [ Re-introducing Relay  React Conf React Conf  • • 22K views 3 years ago ](/watch?v=lhVGdErZuN4)

[ ](/watch?v=S--SD4QbGps)

### [ Build a Machine Learning App From Scratch with Flask & Docker  Patrick Loeber Patrick Loeber  • • 55K views 2 years ago ](/watch?v=S--SD4QbGps)

[ ](/watch?v=-ovliZG617g)

### [ Redux Toolkit - Complete Tutorial ( with Project ) 🔥🔥  RoadsideCoder RoadsideCoder  • • 23K views 3 months ago ](/watch?v=-ovliZG617g)

[ ](/watch?v=2FeymQoKvrk)

### [ Build and Deploy Your Own ChatGPT AI App in JavaScript | OpenAI, Machine Learning  JavaScript Mastery JavaScript Mastery  • • 861K views 1 year ago ](/watch?v=2FeymQoKvrk)

[ ](/watch?v=pC7mCEHiYQw)

### [ How to deploy your custom tensorflow model to react native  Oh Yicong Oh Yicong  • • 25K views 4 years ago ](/watch?v=pC7mCEHiYQw)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

15/19

React 18 for External Store Libraries

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=NLj73vrc2I8 "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=dcm8fjBfro8 "Next \(SHIFT+n\)")

0:00 / 19:22•Watch full videoLive

•

•

Scroll for details

#  React 18 for External Store Libraries

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

377

Share

Download

Download 

Save

19K views3 years ago

19,815 views • Dec 9, 2021 

Show less 

Daishi Kato…...more 

...more 

## 

Key moments

View all

#### [About the Speaker About the Speaker 0:35 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

#### [About the Speaker ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

0:35

#### [Concurrent Rendering and Libraries Concurrent Rendering and Libraries 2:10 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

#### [Concurrent Rendering and Libraries ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

2:10

#### [Tearing with Concurrent Rendering Tearing with Concurrent Rendering 3:04 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

#### [Tearing with Concurrent Rendering ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

3:04

#### [What are External Stores? What are External Stores? 3:34 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

#### [What are External Stores? ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

3:34

#### [Package: use-sync-external-store Package: use-sync-external-store 6:52 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=412s)

#### [Package: use-sync-external-store ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=412s)

6:52

#### [What Are External Stores Again? What Are External Stores Again? 16:30 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=990s)

#### [What Are External Stores Again? ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=990s)

16:30

#### [Get Ready for React 18 Get Ready for React 18 18:33 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=1113s)

#### [Get Ready for React 18 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=1113s)

18:33

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# React 18 for External Store Libraries

19,815 views19K views

Dec 9, 2021

377

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Key moments

#### [About the Speaker About the Speaker 0:35 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

#### [About the Speaker ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

0:35

#### [Concurrent Rendering and Libraries Concurrent Rendering and Libraries 2:10 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

#### [Concurrent Rendering and Libraries ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

2:10

#### [Tearing with Concurrent Rendering Tearing with Concurrent Rendering 3:04 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

#### [Tearing with Concurrent Rendering ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

3:04

#### [What are External Stores? What are External Stores? 3:34 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

#### [What are External Stores? ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

3:34

#### [Package: use-sync-external-store Package: use-sync-external-store 6:52 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=412s)

#### [Package: use-sync-external-store ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=412s)

6:52

#### [What Are External Stores Again? What Are External Stores Again? 16:30 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=990s)

#### [What Are External Stores Again? ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=990s)

16:30

#### [Get Ready for React 18 Get Ready for React 18 18:33 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=1113s)

#### [Get Ready for React 18 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=1113s)

18:33

Sync to video time 

Sync to video time

##  Description

React 18 for External Store Libraries

377Likes

19,815Views

2021Dec 9

Daishi Kato

Show less ...more

Daishi Kato…...more 

...more Show less 

## 

Key moments

View all

#### [About the Speaker About the Speaker 0:35 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

#### [About the Speaker ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=35s)

0:35

#### [Concurrent Rendering and Libraries Concurrent Rendering and Libraries 2:10 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

#### [Concurrent Rendering and Libraries ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=130s)

2:10

#### [Tearing with Concurrent Rendering Tearing with Concurrent Rendering 3:04 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

#### [Tearing with Concurrent Rendering ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=184s)

3:04

#### [What are External Stores? What are External Stores? 3:34 ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

#### [What are External Stores? ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&t=214s)

3:34

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Building accessible components with React 18

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

15 / 1915 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ ▶ [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=ytudH8je5ko)

### [ React 18 for app developers  React Conf React Conf  • • 65K views 3 years ago ](/watch?v=ytudH8je5ko)

[ ](/watch?v=FZ0cG47msEk)

### [ React 18 Keynote  React Conf React Conf  • • 128K views 3 years ago ](/watch?v=FZ0cG47msEk)

[ ](/watch?v=pj5N-Khihgc)

### [ Streaming Server Rendering with Suspense  React Conf React Conf  • • 48K views 3 years ago ](/watch?v=pj5N-Khihgc)

[ ](/watch?v=LOH1l-MP_9k)

### [ ALL React Hooks Explained in 12 Minutes  Code Bootcamp Code Bootcamp  • • 169K views 8 months ago ](/watch?v=LOH1l-MP_9k)

[ ](/watch?v=zL8cz2W0z34)

### [ Interactive playgrounds with React  React Conf React Conf  • • 14K views 3 years ago ](/watch?v=zL8cz2W0z34)

[ ](/watch?v=r8Dg0KVnfMA)

### [ Learn React Query In 50 Minutes  Web Dev Simplified Web Dev Simplified  • • 315K views 1 year ago ](/watch?v=r8Dg0KVnfMA)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

16/19

Building accessible components with React 18

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Up next

LiveUpcoming

CancelPlay Now

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=oPfSC5bQPR8 "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=S4a0QlsH0pU "Next \(SHIFT+n\)")

0:00 / 8:31•Watch full videoLive

•

Intro

•

Scroll for details

#  Building accessible components with React 18

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

480

Share

Download

Download 

Save

14K views3 years ago

14,977 views • Dec 9, 2021 

Show less 

Diego Haz…...more 

...more 

## 

Chapters

View all

#### [Intro Intro 0:00 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

#### [Intro ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

0:00

#### [Overview Overview 0:27 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

#### [Overview ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

0:27

#### [Problems Problems 0:56 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

#### [Problems ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

0:56

#### [NVDA NVDA 2:15 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

#### [NVDA ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

2:15

#### [Arcade Arcade 2:43 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=163s)

#### [Arcade ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=163s)

2:43

#### [Combo Box Combo Box 4:20 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=260s)

#### [Combo Box ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=260s)

4:20

#### [Dynamic Component Dynamic Component 5:12 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=312s)

#### [Dynamic Component ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=312s)

5:12

#### [Improvements Improvements 6:21 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=381s)

#### [Improvements ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=381s)

6:21

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# Building accessible components with React 18

14,977 views14K views

Dec 9, 2021

480

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Chapters

These chapters are auto-generated #### [Intro Intro 0:00 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

#### [Intro ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

0:00

#### [Overview Overview 0:27 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

#### [Overview ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

0:27

#### [Problems Problems 0:56 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

#### [Problems ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

0:56

#### [NVDA NVDA 2:15 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

#### [NVDA ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

2:15

#### [Arcade Arcade 2:43 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=163s)

#### [Arcade ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=163s)

2:43

#### [Combo Box Combo Box 4:20 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=260s)

#### [Combo Box ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=260s)

4:20

#### [Dynamic Component Dynamic Component 5:12 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=312s)

#### [Dynamic Component ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=312s)

5:12

#### [Improvements Improvements 6:21 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=381s)

#### [Improvements ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=381s)

6:21

Sync to video time 

Sync to video time

##  Description

Building accessible components with React 18

480Likes

14,977Views

2021Dec 9

Diego Haz

Show less ...more

Diego Haz…...more 

...more Show less 

## 

Chapters

View all

#### [Intro Intro 0:00 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

#### [Intro ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=0s)

0:00

#### [Overview Overview 0:27 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

#### [Overview ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=27s)

0:27

#### [Problems Problems 0:56 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

#### [Problems ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=56s)

0:56

#### [NVDA NVDA 2:15 ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

#### [NVDA ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&t=135s)

2:15

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Accessible Japanese Form Components with React

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

16 / 1916 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ ▶ [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=lhVGdErZuN4)

### [ Re-introducing Relay  React Conf React Conf  • • 22K views 3 years ago ](/watch?v=lhVGdErZuN4)

[ ](/watch?v=lGEMwh32soc)

### [ React without memo  React Conf React Conf  • • 140K views 3 years ago ](/watch?v=lGEMwh32soc)

[ ](/watch?v=QuLfCUh-iwI)

### [ 3 React Mistakes, 1 App Killer  Jack Herrington Jack Herrington  • • 116K views 1 year ago ](/watch?v=QuLfCUh-iwI)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=eXRlVpw1SIQ)

### [ Creating High-Quality React Components: Best Practices for Reusability  Josh tried coding Josh tried coding  • • 112K views 1 year ago ](/watch?v=eXRlVpw1SIQ)

[ ](/watch?v=lTPh6NGLAmk)

### [ Why You Should Use React Aria Components...  Jolly Coding Jolly Coding  • • 16K views 6 months ago ](/watch?v=lTPh6NGLAmk)

[ ](/watch?v=lkFeFzhOEoc)

### [ React accessibility essentials for developers  LogRocket LogRocket  • • 4.5K views 2 years ago ](/watch?v=lkFeFzhOEoc)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

17/19

Accessible Japanese Form Components with React

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=dcm8fjBfro8 "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=b3l4WxipFsE "Next \(SHIFT+n\)")

0:00 / 10:32•Watch full videoLive

•

Introduction

•

Scroll for details

#  Accessible Japanese Form Components with React

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

68

Share

Download

Download 

Save

4.4K views3 years ago

4,485 views • Dec 9, 2021 

Show less 

Tafu Nakazaki…...more 

...more 

## 

Chapters

View all

#### [Introduction Introduction 0:00 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

#### [Introduction ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

0:00

#### [Problematic administrative procedures Problematic administrative procedures 0:47 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

#### [Problematic administrative procedures ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

0:47

#### [Challenges in human resource and management Challenges in human resource and management 2:29 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

#### [Challenges in human resource and management ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

2:29

#### [Challenges complexity Challenges complexity 4:27 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

#### [Challenges complexity ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

4:27

#### [Challenges user diversity Challenges user diversity 5:46 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=346s)

#### [Challenges user diversity ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=346s)

5:46

#### [Conclusion Conclusion 10:17 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=617s)

#### [Conclusion ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=617s)

10:17

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# Accessible Japanese Form Components with React

4,485 views4.4K views

Dec 9, 2021

68

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Chapters

These chapters are auto-generated #### [Introduction Introduction 0:00 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

#### [Introduction ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

0:00

#### [Problematic administrative procedures Problematic administrative procedures 0:47 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

#### [Problematic administrative procedures ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

0:47

#### [Challenges in human resource and management Challenges in human resource and management 2:29 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

#### [Challenges in human resource and management ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

2:29

#### [Challenges complexity Challenges complexity 4:27 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

#### [Challenges complexity ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

4:27

#### [Challenges user diversity Challenges user diversity 5:46 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=346s)

#### [Challenges user diversity ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=346s)

5:46

#### [Conclusion Conclusion 10:17 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=617s)

#### [Conclusion ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=617s)

10:17

Sync to video time 

Sync to video time

##  Description

Accessible Japanese Form Components with React

68Likes

4,485Views

2021Dec 9

Tafu Nakazaki

Show less ...more

Tafu Nakazaki…...more 

...more Show less 

## 

Chapters

View all

#### [Introduction Introduction 0:00 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

#### [Introduction ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=0s)

0:00

#### [Problematic administrative procedures Problematic administrative procedures 0:47 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

#### [Problematic administrative procedures ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=47s)

0:47

#### [Challenges in human resource and management Challenges in human resource and management 2:29 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

#### [Challenges in human resource and management ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=149s)

2:29

#### [Challenges complexity Challenges complexity 4:27 ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

#### [Challenges complexity ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&t=267s)

4:27

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:UI Tools for artists

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

17 / 1917 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ ▶ [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ 18 [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=lkFeFzhOEoc)

### [ React accessibility essentials for developers  LogRocket LogRocket  • • 4.5K views 2 years ago ](/watch?v=lkFeFzhOEoc)

[ ](/watch?v=lyEKhv8-3n0)

### [ React Conf Keynote (Day 1)  React Conf React Conf  • • 7.7K views 4 months ago ](/watch?v=lyEKhv8-3n0)

[ ](/watch?v=z8xUCzToff8)

### [ Accessibility Fundamentals with Rob Dodson  SFHTML5 SFHTML5  • • 104K views 6 years ago ](/watch?v=z8xUCzToff8)

[ ](/watch?v=ZcwA0xt8FlQ)

### [ Vanilla React | Ryan Florence  React Conf React Conf  • • 23K views 4 months ago ](/watch?v=ZcwA0xt8FlQ)

[ ](/watch?v=b3l4WxipFsE)

### [ UI Tools for artists  React Conf React Conf  • • 5.7K views 3 years ago ](/watch?v=b3l4WxipFsE)

[ ](/watch?v=AJOGzVygGcY)

### [ What's new in React 19 | Lydia Hallie  React Conf React Conf  • • 51K views 4 months ago ](/watch?v=AJOGzVygGcY)

[ ](/watch?v=pGvp5Q-1Yag)

### [ Australia v India 2024-25 | Third Test | Day Five  cricket.com.au cricket.com.au  • • 2.5M views 4 hours ago New ](/watch?v=pGvp5Q-1Yag)

[ ](/watch?v=e2nkq3h1P68)

### [ Learn Accessibility - Full a11y Tutorial  freeCodeCamp.org freeCodeCamp.org  • • 76K views 10 months ago ](/watch?v=e2nkq3h1P68)

[ ](/watch?v=lTPh6NGLAmk)

### [ Why You Should Use React Aria Components...  Jolly Coding Jolly Coding  • • 16K views 6 months ago ](/watch?v=lTPh6NGLAmk)
•

NaN / NaN

•

NaN / NaN

Play (k) 

Back  [ ](/ "YouTube Home") IN 

Skip navigation

Search 

Search 

Search with your voice 

[ ](/ "YouTube Home") IN 

18/19

UI Tools for artists

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

2x

If playback doesn't begin shortly, try restarting your device.

•

Up next

LiveUpcoming

CancelPlay Now

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

0:00

[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=S4a0QlsH0pU "Previous \(SHIFT+p\)")[](https://www.youtube.com/watch?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&v=HS6vIYkSNks "Next \(SHIFT+n\)")

0:00 / 10:14•Watch full videoLive

•

•

Scroll for details

#  UI Tools for artists

[](/@ReactConfOfficial)

[React Conf](/@ReactConfOfficial)

React Conf 

27.8K subscribers

<__slot-el>

Subscribe

<__slot-el>

Subscribed

83

Share

Download

Download 

Save

5.7K views3 years ago

5,718 views • Dec 9, 2021 

Show less 

Lyle Troxell…...more 

...more 

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

Show less 

# UI Tools for artists

5,718 views5.7K views

Dec 9, 2021

83

Share

Download

Download 

Save

Comments are turned off. [Learn more](https://support.google.com/youtube/answer/9706180?hl=en)

##  Description

UI Tools for artists

83Likes

5,718Views

2021Dec 9

Lyle Troxell

Show less ...more

Lyle Troxell…...more 

...more Show less 

Transcript

Follow along using the transcript.

Show transcript

### [React Conf 27.8K subscribers  ](/@ReactConfOfficial)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)

[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

[Videos](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/videos)[About](/channel/UC1hOCRBN2mnXgN5reSoO3pQ/about)

##  Transcript

### [React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)

### Next:Hydrogen + React 18

[React Conf 2021](/playlist?list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)[React Conf](/@ReactConfOfficial)

18 / 1918 / 19

Loop playlist 

Shuffle playlist 

[ 1 [ 33:49 33:49 Now playing ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) React 18 Keynote  React Conf  ](/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1&pp=iAQB) [ 2 [ 19:09 19:09 Now playing ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) React 18 for app developers  React Conf  ](/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2&pp=iAQB) [ 3 [ 18:36 18:36 Now playing ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) Streaming Server Rendering with Suspense  React Conf  ](/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3&pp=iAQB) [ 4 [ 14:42 14:42 Now playing ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) The first React Working Group  React Conf  ](/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4&pp=iAQB) [ 5 [ 12:52 12:52 Now playing ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) React Developer Tooling  React Conf  ](/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5&pp=iAQB) [ 6 [ 12:01 12:01 Now playing ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) React without memo  React Conf  ](/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6&pp=iAQB) [ 7 [ 10:07 10:07 Now playing ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) React Docs Keynote  React Conf  ](/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7&pp=iAQB) [ 8 [ 9:20 9:20 Now playing ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) Things I learnt from the new React docs  React Conf  ](/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8&pp=iAQB) [ 9 [ 10:44 10:44 Now playing ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) Learning in the Browser  React Conf  ](/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9&pp=iAQB) [ 10 [ ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) The ROI of Designing with React  React Conf  ](/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10&pp=iAQB) [ 11 [ ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) Interactive playgrounds with React  React Conf  ](/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11&pp=iAQB) [ 12 [ ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) Re-introducing Relay  React Conf  ](/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12&pp=iAQB) [ 13 [ ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) React Native Desktop  React Conf  ](/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13&pp=iAQB) [ 14 [ ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) On-device Machine Learning for React Native  React Conf  ](/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14&pp=iAQB) [ 15 [ ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) React 18 for External Store Libraries  React Conf  ](/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15&pp=iAQB) [ 16 [ ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) Building accessible components with React 18  React Conf  ](/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16&pp=iAQB) [ 17 [ ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) Accessible Japanese Form Components with React  React Conf  ](/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17&pp=iAQB) [ ▶ [ ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) UI Tools for artists  React Conf  ](/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18&pp=iAQB) [ 19 [ ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB) Hydrogen + React 18  React Conf  ](/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19&pp=iAQB)

[ ](/watch?v=lhVGdErZuN4)

### [ Re-introducing Relay  React Conf React Conf  • • 22K views 3 years ago ](/watch?v=lhVGdErZuN4)

[ ](/watch?v=pj5N-Khihgc)

### [ Streaming Server Rendering with Suspense  React Conf React Conf  • • 48K views 3 years ago ](/watch?v=pj5N-Khihgc)

[ ](/watch?v=5X-WEQflCL0)

### [ Learning in the Browser  React Conf React Conf  • • 5.7K views 3 years ago ](/watch?v=5X-WEQflCL0)

[ ](/watch?v=CS2hxS9MdSo)

### [ Manipur: Police Seize Starlink Device Made by Elon Musk’s SpaceX | Vantage with Palki Sharma  Firstpost Firstpost  • • 263K views 18 hours ago New ](/watch?v=CS2hxS9MdSo)

[ ](/watch?v=YLo6g58vUm0)

### [ Welcome to design systems - Lesson 1 : Introduction to design systems  Figma Figma  • • 247K views 1 year ago ](/watch?v=YLo6g58vUm0)

[ ](/watch?v=pGvp5Q-1Yag)

### [ Australia v India 2024-25 | Third Test | Day Five  cricket.com.au cricket.com.au  • • 2.5M views 4 hours ago New ](/watch?v=pGvp5Q-1Yag)

[ ](/watch?v=oJA1CXmVtgE)

### [ Nirmala Sitharaman VS Priyanka Gandhi🔥 : War Of Words Between Them | Lok Sabha | News Buzz  News Buzz News Buzz  • • 288K views 21 hours ago New ](/watch?v=oJA1CXmVtgE)

[ ](/watch?v=n2waUD7hXbM)

### [ ஒரே நாடு ஒரே தேர்தல்.. ``நேற்றே முடிவு தெரிந்துவிட்டது'' - பாஜகவுக்கு காத்திருந்த அதிர்ச்சி  Thanthi TV Thanthi TV  • • 33K views 6 hours ago New ](/watch?v=n2waUD7hXbM)

[ ](/watch?v=Ivwn0zN8y-4)

### [ 3D Art for 2D Artists: How to stop worrying, and begin to play in the 3rd dimension  Cave Darr Cave Darr  • • 331 views 2 weeks ago ](/watch?v=Ivwn0zN8y-4)
Tap to unmute
[Skip to main content](#__docusaurus_skipToContent_fallback)

The New Architecture has arrived - [learn more](/blog/2024/10/23/the-new-architecture-is-here)

[**React Native**](/)

[Development](#)

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



[Contributing](/contributing/overview)[Community](/community/overview)[Showcase](/showcase)[Blog](/blog)[](https://github.com/facebook/react-native)

Search

[Star](https://github.com/facebook/react-native)

# React Native

## Learn once, write anywhere.

[Get Started](/docs/environment-setup)[Learn the Basics](/docs/getting-started)

# Create native apps for Android, iOS, and more using React

### React Native brings the best parts of developing with React to native development. It's a best-in-class JavaScript library for building user interfaces.

index.js

```
function HomeScreen() {  return (   <View>    <Text> Hello World 👋 🌍!</Text>  </View>  ); }
```


**Written in JavaScript, rendered with native code.** React primitives render to native platform UI, meaning your app uses the same native platform APIs other apps do.

# Native development for everyone

### React Native lets you create truly native apps and doesn't compromise your users' experiences. It provides a core set of platform agnostic native components like `View`, `Text`, and `Image` that map directly to the platform's native UI building blocks.

# Get a head start with a framework

### React Native brings the React programming paradigm to platforms like Android and iOS. It doesn’t prescribe how to do routing, or how to access each of the numerous platform APIs. To build a new app with React Native, we recommend a framework like [Expo](https://expo.dev).

#### File-based routing

Create stack, modal, drawer, and tab screens with minimal boilerplate using your filesystem.

#### Use any library, SDK, or native code

Generate native changes or write your own native code. Use over 50 modules to create your app.

#### Developer tools

Get started quickly with Expo Go, then continue with expo-dev-client: a module that adds Expo’s tools to apps that require native changes.

# Watch and learn

### Watch talks by the React team and learn how to get the most out of React Native. Find the latest on .

#### FB 2019: Mobile innovation with React Native

45:29

#### Why React Native?

1:42

# Meta supported. Community driven.

Meta released React Native in 2015 and has been maintaining it ever since.

In 2018, React Native had the [2nd highest](https://octoverse.github.com/2018/projects#repositories) number of contributors for any repository in GitHub. Today, React Native is supported by contributions from individuals and companies around the world including [Callstack](https://callstack.com/), [Expo](https://expo.io/), [Infinite Red](https://infinite.red/), [Microsoft](https://www.microsoft.com/) and [Software Mansion](https://swmansion.com/).

Our community is always shipping exciting new projects and exploring platforms beyond Android and iOS with repos like [React Native Windows](https://github.com/microsoft/react-native-windows#readme), [React Native macOS](https://github.com/microsoft/react-native-macos#readme) and [React Native Web](https://github.com/necolas/react-native-web#readme).

React Native is being used in thousands of apps, but it's likely you've already used it in one of these apps:

  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://blog.coinbase.com/optimizing-react-native-7e7bf7ac3a34)
  * [](https://formidable.com/work/puma-scaling-across-the-globe/)
  * [](https://github.com/wordpress-mobile/gutenberg-mobile)
  * [](https://engineering.tableau.com/react-native-at-tableau-3-years-in-89d43c38354c)
  * [](https://blog.flipkart.tech/the-journey-of-react-native-flipkart-47dcd0c3d1c6)
  * [](https://medium.com/mercari-engineering/why-we-decided-to-rewrite-our-ios-android-apps-from-scratch-in-react-native-9f1737558299)
  * [](https://discord.com/blog/how-discord-achieves-native-ios-performance-with-react-native)
  * [](https://www.techatbloomberg.com/blog/bloomberg-used-react-native-develop-new-consumer-app/)
  * [](https://medium.com/@Pinterest_Engineering/supporting-react-native-at-pinterest-f8c2233f90e6)
  * [](https://www.tesla.com/blog)
  * [](https://medium.com/walmartlabs/react-native-at-walmartlabs-cdd140589560#.ueonqqloc)
  * [](https://www.tencent.com/en-us/business.html)
  * [](https://github.com/mattermost/mattermost-mobile)



and [many more](/showcase).

# Welcome to the React Native community

[Get Started](/docs/environment-setup)

Develop

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



Participate

  * [Showcase](/showcase)
  * [Contributing](/contributing/overview)
  * [Community](/community/overview)
  * [Directory](https://reactnative.directory/)
  * [Stack Overflow](https://stackoverflow.com/questions/tagged/react-native)



Find us

  * [Blog](/blog)
  * [GitHub](https://github.com/facebook/react-native)



Explore More

  * [ReactJS](https://react.dev/)
  * [Privacy Policy](https://opensource.fb.com/legal/privacy/)
  * [Terms of Service](https://opensource.fb.com/legal/terms/)



[](https://opensource.fb.com/)

Copyright © 2024 Meta Platforms, Inc.
[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Fexpo%2Fexpo)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Fexpo%2Fexpo)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=expo%2Fexpo) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ expo ](/expo) / **[expo](/expo/expo) ** Public

  * [ Notifications ](/login?return_to=%2Fexpo%2Fexpo) You must be signed in to change notification settings
  * [ Fork 5.7k ](/login?return_to=%2Fexpo%2Fexpo)
  * [ Star  35.5k ](/login?return_to=%2Fexpo%2Fexpo)




An open-source framework for making universal native apps with React. Expo runs on Android, iOS, and the web. 

[docs.expo.dev](https://docs.expo.dev "https://docs.expo.dev")

### License

[ MIT license ](/expo/expo/blob/main/LICENSE)

[ 35.5k stars ](/expo/expo/stargazers) [ 5.7k forks ](/expo/expo/forks) [ Branches ](/expo/expo/branches) [ Tags ](/expo/expo/tags) [ Activity ](/expo/expo/activity)

[ Star  ](/login?return_to=%2Fexpo%2Fexpo)

[ Notifications ](/login?return_to=%2Fexpo%2Fexpo) You must be signed in to change notification settings

  * [ Code ](/expo/expo)
  * [ Issues 446 ](/expo/expo/issues)
  * [ Pull requests 225 ](/expo/expo/pulls)
  * [ Discussions ](/expo/expo/discussions)
  * [ Actions ](/expo/expo/actions)
  * [ Projects 0 ](/expo/expo/projects)
  * [ Wiki ](/expo/expo/wiki)
  * [ Security ](/expo/expo/security)
  * [ Insights ](/expo/expo/pulse)



Additional navigation options

  * [ Code  ](/expo/expo)
  * [ Issues  ](/expo/expo/issues)
  * [ Pull requests  ](/expo/expo/pulls)
  * [ Discussions  ](/expo/expo/discussions)
  * [ Actions  ](/expo/expo/actions)
  * [ Projects  ](/expo/expo/projects)
  * [ Wiki  ](/expo/expo/wiki)
  * [ Security  ](/expo/expo/security)
  * [ Insights  ](/expo/expo/pulse)



# expo/expo

main

[**618** Branches](/expo/expo/branches)[**0** Tags](/expo/expo/tags)

[](/expo/expo/branches)[](/expo/expo/tags)

Go to file

Code

## Folders and files

Name| Name| Last commit message| Last commit date  
---|---|---|---  
  
## Latest commit

[](/Kudo)[Kudo](/expo/expo/commits?author=Kudo)[[dev-menu][dev-launcher] fix broken local development on android (](/expo/expo/commit/d9b65b28e55d0e223b51ea4164a173696931e4af)[#33714](https://github.com/expo/expo/pull/33714)Dec 18, 2024[d9b65b2](/expo/expo/commit/d9b65b28e55d0e223b51ea4164a173696931e4af) · Dec 18, 2024

## History

[24,776 Commits](/expo/expo/commits/main/)[](/expo/expo/commits/main/)  
[.github](/expo/expo/tree/main/.github ".github")| [.github](/expo/expo/tree/main/.github ".github")  
[.vscode](/expo/expo/tree/main/.vscode ".vscode")| [.vscode](/expo/expo/tree/main/.vscode ".vscode")  
[apps](/expo/expo/tree/main/apps "apps")| [apps](/expo/expo/tree/main/apps "apps")  
[bin](/expo/expo/tree/main/bin "bin")| [bin](/expo/expo/tree/main/bin "bin")  
[docs](/expo/expo/tree/main/docs "docs")| [docs](/expo/expo/tree/main/docs "docs")  
[fastlane](/expo/expo/tree/main/fastlane "fastlane")| [fastlane](/expo/expo/tree/main/fastlane "fastlane")  
[guides](/expo/expo/tree/main/guides "guides")| [guides](/expo/expo/tree/main/guides "guides")  
[packages](/expo/expo/tree/main/packages "packages")| [packages](/expo/expo/tree/main/packages "packages")  
[patches](/expo/expo/tree/main/patches "patches")| [patches](/expo/expo/tree/main/patches "patches")  
[react-native-lab](/expo/expo/tree/main/react-native-lab "react-native-lab")| [react-native-lab](/expo/expo/tree/main/react-native-lab "react-native-lab")  
[scripts](/expo/expo/tree/main/scripts "scripts")| [scripts](/expo/expo/tree/main/scripts "scripts")  
[secrets](/expo/expo/tree/main/secrets "secrets")| [secrets](/expo/expo/tree/main/secrets "secrets")  
[template-files](/expo/expo/tree/main/template-files "template-files")| [template-files](/expo/expo/tree/main/template-files "template-files")  
[templates](/expo/expo/tree/main/templates "templates")| [templates](/expo/expo/tree/main/templates "templates")  
[tools](/expo/expo/tree/main/tools "tools")| [tools](/expo/expo/tree/main/tools "tools")  
[.dockerignore](/expo/expo/blob/main/.dockerignore ".dockerignore")| [.dockerignore](/expo/expo/blob/main/.dockerignore ".dockerignore")  
[.envrc](/expo/expo/blob/main/.envrc ".envrc")| [.envrc](/expo/expo/blob/main/.envrc ".envrc")  
[.eslintignore](/expo/expo/blob/main/.eslintignore ".eslintignore")| [.eslintignore](/expo/expo/blob/main/.eslintignore ".eslintignore")  
[.eslintrc.js](/expo/expo/blob/main/.eslintrc.js ".eslintrc.js")| [.eslintrc.js](/expo/expo/blob/main/.eslintrc.js ".eslintrc.js")  
[.gitattributes](/expo/expo/blob/main/.gitattributes ".gitattributes")| [.gitattributes](/expo/expo/blob/main/.gitattributes ".gitattributes")  
[.gitignore](/expo/expo/blob/main/.gitignore ".gitignore")| [.gitignore](/expo/expo/blob/main/.gitignore ".gitignore")  
[.gitmodules](/expo/expo/blob/main/.gitmodules ".gitmodules")| [.gitmodules](/expo/expo/blob/main/.gitmodules ".gitmodules")  
[.lfsconfig](/expo/expo/blob/main/.lfsconfig ".lfsconfig")| [.lfsconfig](/expo/expo/blob/main/.lfsconfig ".lfsconfig")  
[.prettierignore](/expo/expo/blob/main/.prettierignore ".prettierignore")| [.prettierignore](/expo/expo/blob/main/.prettierignore ".prettierignore")  
[.prettierrc](/expo/expo/blob/main/.prettierrc ".prettierrc")| [.prettierrc](/expo/expo/blob/main/.prettierrc ".prettierrc")  
[.swiftlint.yml](/expo/expo/blob/main/.swiftlint.yml ".swiftlint.yml")| [.swiftlint.yml](/expo/expo/blob/main/.swiftlint.yml ".swiftlint.yml")  
[.watchmanconfig](/expo/expo/blob/main/.watchmanconfig ".watchmanconfig")| [.watchmanconfig](/expo/expo/blob/main/.watchmanconfig ".watchmanconfig")  
[CHANGELOG.md](/expo/expo/blob/main/CHANGELOG.md "CHANGELOG.md")| [CHANGELOG.md](/expo/expo/blob/main/CHANGELOG.md "CHANGELOG.md")  
[CONTRIBUTING.md](/expo/expo/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")| [CONTRIBUTING.md](/expo/expo/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")  
[Gemfile](/expo/expo/blob/main/Gemfile "Gemfile")| [Gemfile](/expo/expo/blob/main/Gemfile "Gemfile")  
[Gemfile.lock](/expo/expo/blob/main/Gemfile.lock "Gemfile.lock")| [Gemfile.lock](/expo/expo/blob/main/Gemfile.lock "Gemfile.lock")  
[LICENSE](/expo/expo/blob/main/LICENSE "LICENSE")| [LICENSE](/expo/expo/blob/main/LICENSE "LICENSE")  
[README.md](/expo/expo/blob/main/README.md "README.md")| [README.md](/expo/expo/blob/main/README.md "README.md")  
[SECURITY.md](/expo/expo/blob/main/SECURITY.md "SECURITY.md")| [SECURITY.md](/expo/expo/blob/main/SECURITY.md "SECURITY.md")  
[SUPPORT.md](/expo/expo/blob/main/SUPPORT.md "SUPPORT.md")| [SUPPORT.md](/expo/expo/blob/main/SUPPORT.md "SUPPORT.md")  
[THIRD-PARTY-LICENSES](/expo/expo/blob/main/THIRD-PARTY-LICENSES "THIRD-PARTY-LICENSES")| [THIRD-PARTY-LICENSES](/expo/expo/blob/main/THIRD-PARTY-LICENSES "THIRD-PARTY-LICENSES")  
[buildAndroidTarballLocally.sh](/expo/expo/blob/main/buildAndroidTarballLocally.sh "buildAndroidTarballLocally.sh")| [buildAndroidTarballLocally.sh](/expo/expo/blob/main/buildAndroidTarballLocally.sh "buildAndroidTarballLocally.sh")  
[changelogVersions.json](/expo/expo/blob/main/changelogVersions.json "changelogVersions.json")| [changelogVersions.json](/expo/expo/blob/main/changelogVersions.json "changelogVersions.json")  
[dev-home-config.json](/expo/expo/blob/main/dev-home-config.json "dev-home-config.json")| [dev-home-config.json](/expo/expo/blob/main/dev-home-config.json "dev-home-config.json")  
[package.json](/expo/expo/blob/main/package.json "package.json")| [package.json](/expo/expo/blob/main/package.json "package.json")  
[tsconfig.json](/expo/expo/blob/main/tsconfig.json "tsconfig.json")| [tsconfig.json](/expo/expo/blob/main/tsconfig.json "tsconfig.json")  
[tsconfig.node.json](/expo/expo/blob/main/tsconfig.node.json "tsconfig.node.json")| [tsconfig.node.json](/expo/expo/blob/main/tsconfig.node.json "tsconfig.node.json")  
[yarn.lock](/expo/expo/blob/main/yarn.lock "yarn.lock")| [yarn.lock](/expo/expo/blob/main/yarn.lock "yarn.lock")  
View all files  
  
## Repository files navigation

  * [README](#)
  * [MIT license](#)
  * [Security](#)



[ ](https://expo.dev/)

# Expo

[](#expo)

[ ](https://www.npmjs.com/package/expo) [ ](https://chat.expo.dev) [ ](https://github.com/expo/expo/blob/main/LICENSE) [ ](http://www.npmtrends.com/expo)

[**Try Expo in the Browser**](https://snack.expo.dev) • [Read the Documentation](https://docs.expo.dev) • [Learn more on our blog](https://expo.dev/blog) • [Request a feature](https://expo.canny.io/feature-requests)

###### Follow us on

[](#follow-us-on)

[ ](https://github.com/expo) [ ](https://bsky.app/profile/expo.dev)

## Introduction

[](#introduction)

Expo is an open-source platform for making universal native apps that run on Android, iOS, and the web. It includes a universal runtime and libraries that let you build native apps by writing React and JavaScript.

This repository includes the Expo SDK, Modules API, Go app, CLI, Router, documentation, and various other supporting tools. [Expo Application Services (EAS)](https://expo.dev/eas) is a platform of hosted services that are deeply integrated with Expo open source tools. EAS helps you build, ship, and iterate on your app as an individual or a team.

Read the [Expo Community Guidelines](https://expo.dev/guidelines) before interacting in the repository. Thank you for helping keep the Expo community open and welcoming!

## Table of contents

[](#table-of-contents)

  * [📚 Documentation](#-documentation)
  * [🗺 Project Layout](#-project-layout)
  * [🏅 Badges](#-badges)
  * [👏 Contributing](#-contributing)
  * [❓ FAQ](#-faq)
  * [💙 The Team](#-the-team)
  * [License](#license)



## 📚 Documentation

[](#-documentation)

Learn about building and deploying universal apps [in our official docs!](https://docs.expo.dev)

  * [Getting Started](https://docs.expo.dev/)
  * [API Reference](https://docs.expo.dev/versions/latest/)
  * [Using Custom Native Modules](https://docs.expo.dev/workflow/customizing/)



## 🗺 Project Layout

[](#-project-layout)

  * `packages`[](/expo/expo/blob/main/packages) All the source code for Expo modules, if you want to edit a library or just see how it works this is where you'll find it.
  * `apps`[](/expo/expo/blob/main/apps) This is where you can find Expo projects which are linked to the development modules. You'll do most of your testing in here.
  * `apps/expo-go`[](/expo/expo/blob/main/apps/expo-go) This is where you can find the source code for Expo Go.
  * `apps/expo-go/ios/Exponent.xcworkspace`[](/expo/expo/blob/main/apps/expo-go/ios) is the Xcode workspace. When developing iOS, always open this instead of `Exponent.xcodeproj` because the workspace also loads the CocoaPods dependencies.
  * `docs`[](/expo/expo/blob/main/docs) The source code for **<https://docs.expo.dev>**
  * `templates`[](/expo/expo/blob/main/templates) The template projects you get when you run `npx create-expo-app`
  * `react-native-lab`[](/expo/expo/blob/main/react-native-lab) This is our fork of `react-native` used to build Expo Go.
  * `guides`[](/expo/expo/blob/main/guides) In-depth tutorials for advanced topics like contributing to the client.
  * `tools`[](/expo/expo/blob/main/tools) contain build and configuration tools.
  * `template-files`[](/expo/expo/blob/main/template-files) contains templates for files that require private keys. They are populated using the keys in `template-files/keys.json`.
  * `template-files/ios/dependencies.json`[](/expo/expo/blob/main/template-files/ios/dependencies.json) specifies the CocoaPods dependencies of the app.



## 🏅 Badges

[](#-badges)

Let everyone know your app can be run instantly in the _Expo Go_ app! 

[](https://expo.dev/client)

[](https://expo.dev/client)

```
[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-000.svg?style=flat-square&logo=EXPO&labelColor=f3f3f3&logoColor=000)](https://expo.dev/client)
[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-4630EB.svg?style=flat-square&logo=EXPO&labelColor=f3f3f3&logoColor=000)](https://expo.dev/client)
```


## 👏 Contributing

[](#-contributing)

If you like Expo and want to help make it better then check out our [contributing guide](/expo/expo/blob/main/CONTRIBUTING.md)! Check out the [CLI package](https://github.com/expo/expo/tree/main/packages/%40expo/cli) to work on the Expo CLI.

## ❓ FAQ

[](#-faq)

If you have questions about Expo and want answers, then check out our [Frequently Asked Questions](https://docs.expo.dev/faq/)!

If you still have questions you can ask them on our [Discord and Forums](https://chat.expo.dev) or X .

## 💙 The Team

[](#-the-team)

Curious about who makes Expo? Here are our [team members](https://expo.dev/about)!

## License

[](#license)

The Expo source code is made available under the [MIT license](/expo/expo/blob/main/LICENSE). Some of the dependencies are licensed differently, with the BSD license, for example.

[](https://user-images.githubusercontent.com/9664363/185428788-d762fd5d-97b3-4f59-8db7-f72405be9677.gif) [ ](https://user-images.githubusercontent.com/9664363/185428788-d762fd5d-97b3-4f59-8db7-f72405be9677.gif) [ ](https://user-images.githubusercontent.com/9664363/185428788-d762fd5d-97b3-4f59-8db7-f72405be9677.gif)

## About

An open-source framework for making universal native apps with React. Expo runs on Android, iOS, and the web. 

[docs.expo.dev](https://docs.expo.dev "https://docs.expo.dev")

### Topics

[ react ](/topics/react "Topic: react") [ javascript ](/topics/javascript "Topic: javascript") [ android ](/topics/android "Topic: android") [ ios ](/topics/ios "Topic: ios") [ mobile ](/topics/mobile "Topic: mobile") [ framework ](/topics/framework "Topic: framework") [ typescript ](/topics/typescript "Topic: typescript") [ react-native ](/topics/react-native "Topic: react-native") [ web ](/topics/web "Topic: web") [ frontend ](/topics/frontend "Topic: frontend") [ native ](/topics/native "Topic: native") [ universal ](/topics/universal "Topic: universal") [ web-framework ](/topics/web-framework "Topic: web-framework") [ native-apps ](/topics/native-apps "Topic: native-apps") [ app-framework ](/topics/app-framework "Topic: app-framework") [ expo ](/topics/expo "Topic: expo")

### Resources

[ Readme ](#readme-ov-file)

### License

[ MIT license ](#MIT-1-ov-file)

### Security policy

[ Security policy ](#security-ov-file)

[ Activity](/expo/expo/activity)

[ Custom properties](/expo/expo/custom-properties)

### Stars

[ **35.5k** stars](/expo/expo/stargazers)

### Watchers

[ **305** watching](/expo/expo/watchers)

### Forks

[ **5.7k** forks](/expo/expo/forks)

[ Report repository ](/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2Fexpo%2Fexpo&report=expo+%28user%29)

##  [Used by 1.1m](/expo/expo/network/dependents)

[ + 1,067,006  ](/expo/expo/network/dependents)

##  [Contributors 1,468](/expo/expo/graphs/contributors)

  * [ ](https://github.com/brentvatne)
  * [ ](https://github.com/tsapeta)
  * [ ](https://github.com/EvanBacon)
  * [ ](https://github.com/lukmccall)
  * [ ](https://github.com/amandeepmittal)
  * [ ](https://github.com/terribleben)
  * [ ](https://github.com/esamelson)
  * [ ](https://github.com/Kudo)
  * [ ](https://github.com/expo-bot)
  * [ ](https://github.com/sjchmiela)
  * [ ](https://github.com/Simek)
  * [ ](https://github.com/ide)
  * [ ](https://github.com/wschurman)
  * [ ](https://github.com/byCedric)



[+ 1,454 contributors](/expo/expo/graphs/contributors)

## Languages

  * [ TypeScript 38.8% ](/expo/expo/search?l=typescript)
  * [ JavaScript 28.1% ](/expo/expo/search?l=javascript)
  * [ Kotlin 12.5% ](/expo/expo/search?l=kotlin)
  * [ Swift 8.2% ](/expo/expo/search?l=swift)
  * [ Objective-C 5.2% ](/expo/expo/search?l=objective-c)
  * [ Java 2.9% ](/expo/expo/search?l=java)
  * Other 4.3%



## Footer

[ ](https://github.com "GitHub") © 2024 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You can’t perform that action at this time. 
[Skip to main content](#__docusaurus_skipToContent_fallback)

The New Architecture has arrived - [learn more](/blog/2024/10/23/the-new-architecture-is-here)

[**React Native**](/)

[Development](#)

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



[Contributing](/contributing/overview)[Community](/community/overview)[Showcase](/showcase)[Blog](/blog)[](https://github.com/facebook/react-native)

Search

[Star](https://github.com/facebook/react-native)

# React Native

## Learn once, write anywhere.

[Get Started](/docs/environment-setup)[Learn the Basics](/docs/getting-started)

# Create native apps for Android, iOS, and more using React

### React Native brings the best parts of developing with React to native development. It's a best-in-class JavaScript library for building user interfaces.

index.js

```
function HomeScreen() {  return (   <View>    <Text> Hello World 👋 🌍!</Text>  </View>  ); }
```


**Written in JavaScript, rendered with native code.** React primitives render to native platform UI, meaning your app uses the same native platform APIs other apps do.

# Native development for everyone

### React Native lets you create truly native apps and doesn't compromise your users' experiences. It provides a core set of platform agnostic native components like `View`, `Text`, and `Image` that map directly to the platform's native UI building blocks.

# Get a head start with a framework

### React Native brings the React programming paradigm to platforms like Android and iOS. It doesn’t prescribe how to do routing, or how to access each of the numerous platform APIs. To build a new app with React Native, we recommend a framework like [Expo](https://expo.dev).

#### File-based routing

Create stack, modal, drawer, and tab screens with minimal boilerplate using your filesystem.

#### Use any library, SDK, or native code

Generate native changes or write your own native code. Use over 50 modules to create your app.

#### Developer tools

Get started quickly with Expo Go, then continue with expo-dev-client: a module that adds Expo’s tools to apps that require native changes.

# Watch and learn

### Watch talks by the React team and learn how to get the most out of React Native. Find the latest on .

#### FB 2019: Mobile innovation with React Native

45:29

#### Why React Native?

1:42

# Meta supported. Community driven.

Meta released React Native in 2015 and has been maintaining it ever since.

In 2018, React Native had the [2nd highest](https://octoverse.github.com/2018/projects#repositories) number of contributors for any repository in GitHub. Today, React Native is supported by contributions from individuals and companies around the world including [Callstack](https://callstack.com/), [Expo](https://expo.io/), [Infinite Red](https://infinite.red/), [Microsoft](https://www.microsoft.com/) and [Software Mansion](https://swmansion.com/).

Our community is always shipping exciting new projects and exploring platforms beyond Android and iOS with repos like [React Native Windows](https://github.com/microsoft/react-native-windows#readme), [React Native macOS](https://github.com/microsoft/react-native-macos#readme) and [React Native Web](https://github.com/necolas/react-native-web#readme).

React Native is being used in thousands of apps, but it's likely you've already used it in one of these apps:

  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://blog.coinbase.com/optimizing-react-native-7e7bf7ac3a34)
  * [](https://formidable.com/work/puma-scaling-across-the-globe/)
  * [](https://github.com/wordpress-mobile/gutenberg-mobile)
  * [](https://engineering.tableau.com/react-native-at-tableau-3-years-in-89d43c38354c)
  * [](https://blog.flipkart.tech/the-journey-of-react-native-flipkart-47dcd0c3d1c6)
  * [](https://medium.com/mercari-engineering/why-we-decided-to-rewrite-our-ios-android-apps-from-scratch-in-react-native-9f1737558299)
  * [](https://discord.com/blog/how-discord-achieves-native-ios-performance-with-react-native)
  * [](https://www.techatbloomberg.com/blog/bloomberg-used-react-native-develop-new-consumer-app/)
  * [](https://medium.com/@Pinterest_Engineering/supporting-react-native-at-pinterest-f8c2233f90e6)
  * [](https://www.tesla.com/blog)
  * [](https://medium.com/walmartlabs/react-native-at-walmartlabs-cdd140589560#.ueonqqloc)
  * [](https://www.tencent.com/en-us/business.html)
  * [](https://github.com/mattermost/mattermost-mobile)



and [many more](/showcase).

# Welcome to the React Native community

[Get Started](/docs/environment-setup)

Develop

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



Participate

  * [Showcase](/showcase)
  * [Contributing](/contributing/overview)
  * [Community](/community/overview)
  * [Directory](https://reactnative.directory/)
  * [Stack Overflow](https://stackoverflow.com/questions/tagged/react-native)



Find us

  * [Blog](/blog)
  * [GitHub](https://github.com/facebook/react-native)



Explore More

  * [ReactJS](https://react.dev/)
  * [Privacy Policy](https://opensource.fb.com/legal/privacy/)
  * [Terms of Service](https://opensource.fb.com/legal/terms/)



[](https://opensource.fb.com/)

Copyright © 2024 Meta Platforms, Inc.
[](/)

Meta Open Source

## Welcome to our community

Empowering diverse communities through open source technology.

[Explore projects](/projects)

### Meta Embraces Open Source

Meta is committed to the notion that open source not only provides great technology for developers, but also brings the best out in people. Meta believes in the following tenets:

#### Collaboration

Open source allows developers from around the world to proactively work together to achieve common goals.

#### Community

Open source provides opportunities for the creation of diverse communities in support of the betterment of everyone.

#### Technology

Open source has produced historic technologies, including operating systems, frameworks and programming languages.

Featured Media

[The Diff Episode 10: Talking Open Source with Paul O'ShannessyDecember 7, 2021](https://www.youtube.com/watch?v=QR84BJt4fw0)

[Explain Like I'm 5: Season 3September 28, 2021](https://youtube.com/playlist?list=PLzIwronG0sE49zLk608yB5GKKT8WbEhnZ)

[See all media](/media)

Popular Projects

[DocumentationDocusaurusSetup a website for your documentation quickly and easily.View Project](https://docusaurus.io)

[FrameworksReactA JavaScript framework for building awesome user interfaces.View Project](https://reactjs.org)

[FrameworksPyTorchA Python-based machine learning framework for dynamic neural networks.View Project](https://pytorch.org)

[See more projects](/projects)

[](https://nasa.github.io/cumulus/docs/cumulus-docs-readme)

[](https://developers.diem.com)

[](https://slack.engineering/hacklang-at-slack-a-better-php/)

[](https://www.opencompute.org/membership/membership-organizational-directory?keyword=AT%26T)

[](https://aws.amazon.com/blogs/aws/announcing-torchserve-an-open-source-model-server-for-pytorch/)

[](https://www.carbondesignsystem.com/developing/frameworks/react/)

Showcase

## Globally trusted

Open source is used by teams of all shapes and sizes to create, iterate, and grow.

[See Showcase](/showcase)

[](https://meta.com)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



Site Map[Projects](/projects)[FAQ](/get-involved#faq)[About](/about)[Get Involved](/get-involved)

Information[Linux](/linux)[Careers](https://metacareers.com)[Bug Bounty Program](https://bugbounty.meta.com)

Connect[GitHub](https://github.com/facebook)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



© 2024 Meta

  * [Code of Conduct](/code-of-conduct)
  * [Privacy Policy](/legal/privacy)
  * [Cookie Policy](/legal/cookie-policy)
  * [Terms of Use](/legal/terms)
  * [Trademark Policy](/legal/trademark)


Don’t miss what’s happening

People on X are the first to know.

[Log in](/login)

[Sign up](/i/flow/signup)

Welcome to x.com!

We are letting you know that we are changing our URL, but your privacy and data protection settings remain the same.

For more details, see our Privacy Policy: 

# [](/)

[Settings](/settings)

## Profile

See new posts
[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact%2Fblob%2Fmain%2FCODE_OF_CONDUCT.md)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact%2Fblob%2Fmain%2FCODE_OF_CONDUCT.md)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Fblob%2Fshow&source=header-repo&source_repo=facebook%2Freact) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ facebook ](/facebook) / **[react](/facebook/react) ** Public

  * [ Notifications ](/login?return_to=%2Ffacebook%2Freact) You must be signed in to change notification settings
  * [ Fork 47.2k ](/login?return_to=%2Ffacebook%2Freact)
  * [ Star  231k ](/login?return_to=%2Ffacebook%2Freact)




  * [ Code ](/facebook/react)
  * [ Issues 764 ](/facebook/react/issues)
  * [ Pull requests 176 ](/facebook/react/pulls)
  * [ Actions ](/facebook/react/actions)
  * [ Projects 0 ](/facebook/react/projects)
  * [ Wiki ](/facebook/react/wiki)
  * [ Security ](/facebook/react/security)
  * [ Insights ](/facebook/react/pulse)



Additional navigation options

  * [ Code  ](/facebook/react)
  * [ Issues  ](/facebook/react/issues)
  * [ Pull requests  ](/facebook/react/pulls)
  * [ Actions  ](/facebook/react/actions)
  * [ Projects  ](/facebook/react/projects)
  * [ Wiki  ](/facebook/react/wiki)
  * [ Security  ](/facebook/react/security)
  * [ Insights  ](/facebook/react/pulse)



## Files

main

  * .codesandbox

  * .github

  * compiler

  * fixtures

  * packages

  * scripts

  * .editorconfig

  * .eslintignore

  * .eslintrc.js

  * .git-blame-ignore-revs

  * .gitattributes

  * .gitignore

  * .mailmap

  * .nvmrc

  * .prettierignore

  * .prettierrc.js

  * .watchmanconfig

  * CHANGELOG-canary.md

  * CHANGELOG.md

  * CODE_OF_CONDUCT.md

  * CONTRIBUTING.md

  * LICENSE

  * README.md

  * ReactVersions.js

  * SECURITY.md

  * babel.config.js

  * dangerfile.js

  * netlify.toml

  * package.json

  * react.code-workspace

  * yarn.lock




## Breadcrumbs

  1. [react](/facebook/react/tree/main)



/

# CODE_OF_CONDUCT.md

Blame

Blame

## Latest commit

[](/zahad-a-s)[zahad-a-s](/facebook/react/commits?author=zahad-a-s)

[revert last grammatical edit (](/facebook/react/commit/7a227276e653b481b73ed9e9178244b53d61f730)[#25067](https://github.com/facebook/react/pull/25067)[)](/facebook/react/commit/7a227276e653b481b73ed9e9178244b53d61f730)

Aug 11, 2022

[7a22727](/facebook/react/commit/7a227276e653b481b73ed9e9178244b53d61f730) · Aug 11, 2022

## History

[History](/facebook/react/commits/main/CODE_OF_CONDUCT.md)

[](/facebook/react/commits/main/CODE_OF_CONDUCT.md)

80 lines (60 loc) · 3.46 KB

## Breadcrumbs

  1. [react](/facebook/react/tree/main)



/

# CODE_OF_CONDUCT.md

Top

## File metadata and controls

  * Preview

  * Code

  * Blame




80 lines (60 loc) · 3.46 KB

[Raw](https://github.com/facebook/react/raw/refs/heads/main/CODE_OF_CONDUCT.md)

# Code of Conduct

[](#code-of-conduct)

## Our Pledge

[](#our-pledge)

In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.

## Our Standards

[](#our-standards)

Examples of behavior that contributes to creating a positive environment include:

  * Using welcoming and inclusive language
  * Being respectful of differing viewpoints and experiences
  * Gracefully accepting constructive criticism
  * Focusing on what is best for the community
  * Showing empathy towards other community members



Examples of unacceptable behavior by participants include:

  * The use of sexualized language or imagery and unwelcome sexual attention or advances
  * Trolling, insulting/derogatory comments, and personal or political attacks
  * Public or private harassment
  * Publishing others' private information, such as a physical or electronic address, without explicit permission
  * Other conduct which could reasonably be considered inappropriate in a professional setting



## Our Responsibilities

[](#our-responsibilities)

Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.

Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.

## Scope

[](#scope)

This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.

This Code of Conduct also applies outside the project spaces when there is a reasonable belief that an individual's behavior may have a negative impact on the project or its community.

## Enforcement

[](#enforcement)

Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at opensource-conduct@fb.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.

Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.

## Attribution

[](#attribution)

This Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org), version 1.4, available at <https://www.contributor-covenant.org/version/1/4/code-of-conduct.html>

For answers to common questions about this code of conduct, see <https://www.contributor-covenant.org/faq>

## Footer

[ ](https://github.com "GitHub") © 2024 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You can’t perform that action at this time. 
[](/)

# Meta Open Source - Privacy Policy

 _Effective April 25, 2023_

This Privacy Policy describes Meta Platforms, Inc. (**"Meta"** , **"we"** , **"us"** or **"our"**) practices for handling your information in connection with this website and our open source-related websites (**"Websites"**) and any content, related documentation, information and services (e.g. apps, tutorials, tools to support the developer workflow, access to resources, etc.) made available to you on this website (collectively, the **"Services"**). This Privacy Policy describes the personal information we process to support our Services.

For clarity, this Privacy Policy only applies to the Websites and does not apply to any:

  1. use of open source code, documentation or specifications made available on GitHub, which are governed by the terms of the applicable open source license;
  2. pull requests, issues and any other interactions or features related to participation in open source projects on GitHub, which are governed by GitHub's terms and conditions; or
  3. use of any other Meta website, service or product, which are governed by the terms and conditions applicable to those offerings.



#### What Kinds of Information Do We Collect?

When you interact with us through our Services, we may collect or receive the following types of information:

**_Information you provide directly to us._** For certain activities, we may collect the following types of information:

  * **_Contact information,_** such as name, email address and contact details; and
  * ** _Other information_** you provide to us, such as when you send us correspondence or otherwise participate on the Services.



**_Information we collect automatically._** Depending on the type of device you use and how you interact with us, we may also collect certain information automatically when you use our Services, such as:

  * **_Device attributes,_** including information such as the operating system, hardware and software versions, battery level, signal strength, available storage space, browser type, app and file names and types, and plugins.
  * **_Device operations,_** including information about operations performed on the Services as well as pages visited.
  * **_Identifiers,_** including information such as unique identifiers, device IDs, and other identifiers, and Family Device IDs associated with the same device or account.
  * **_Network and connections,_** information such as the name of your mobile operator or ISP, language, time zone, mobile phone number, IP address, connection speed, information about other devices that are nearby or on your network, and Wi-Fi hotspots you connect to using our Services.
  * **_Cookie data,_** data from cookies and other similar technologies that are stored on your device, including cookie IDs and settings. Learn more about how we use cookies by reading our [Cookie Policy](/legal/cookie-policy).



**_Information you provide to us through our app (where applicable)._** Some of our Services include the provision of an app. In such cases, we may receive certain video and text content that you choose to provide to us through our app. We may analyze this depending on the context and content in accordance with the purposes described below.

**_Integrations with other services from third parties._** Some of our Services allow you to enable or log in via various online services (collectively, **"Login Services"**). By including these Login Services, we aim to make your online experiences richer and more personalized. When you add a Login Service account to our Services or log in to our Services using such an account, we may collect relevant information necessary to enable our Services to facilitate your login, such as your email address. We may also share your information with that Login Service to facilitate or enhance the delivery of that platform or our Services.

As part of an integration with a Login Service, that Login Service may provide us with access to certain information that you have provided to their platform, and we will use, store, and disclose such information in accordance with this Privacy Policy. However, please remember that the manner in which platforms use, store, and disclose your information is governed by the policies that apply to those platforms. Information collected by Login Services is subject to their own terms and policies, not this one.

**_Social media features._** Our Services may use social media features, such as the Facebook "like" button, the "Tweet" button and other sharing widgets (**"Social Media Features"**). You may be given the option by such Social Media Features to post information about your activities on a website to a profile page of yours that is provided by a third party social media network in order to share with others within your network. Social Media Features are either hosted by the respective social media network or hosted directly on our Websites. To the extent the Social Media Features are hosted by the respective social media network(s) and you click through to these from our Websites, the latter may receive information showing that you have visited our Websites. If you are logged in to your social media account, it is possible that the respective social media network can link your visit to our Websites with your social media profile. Your interactions with Social Media Features are governed by the privacy policies of the companies providing the relevant Social Media Features.

#### Cookies and Similar Technologies

Cookies are small pieces of text used to store information on web browsers. Cookies are used to store and receive identifiers and other information on computers, phones and other devices. We use cookies and similar technologies, for such things as maintaining and monitoring the infrastructure of the Services, ensuring security protections, analyzing how our Services perform and other analytics purposes, and fulfilling other legitimate purposes as further described in this Privacy Policy. We also use analytics cookies to better understand how our Services are being used by tracking how you interact with the Services and where you click.

We use cookies served by Google Analytics to collect limited data directly from end-user browsers to enable us to better understand your use of the Services, including making use of the demographics and interests reports services of Google Analytics. Further information on how Google collects and uses this data, including processing in the United States, can be found at <https://www.google.com/policies/privacy/partners/>. You can opt-out of all Google supported analytics within the Services by going to the following webpage: <https://tools.google.com/dlpage/gaoptout>.

Learn more about how we use cookies by reading our [Cookie Policy](/legal/cookie-policy).

#### How Do We Use Information?

We will use the information described above for the purpose of operating and providing the Websites and our Services. Specifically, we will use the information for the following purposes:

  * **_Provide, personalize and improve our Services._** We use your information to provide the Websites and fulfill your requests for resources, services, and information; analyze content that you provide to us and provide suggestions for what is in such content; analyze the use of the Services and user data to understand, improve and operate the Services; and customize the content you see when you use the Services;
  * **_Communicate with you._** We use your email address to communicate with you about the Services and let you know about our terms and policies. If you subscribe to a newsletter, we will use your email address to send you such newsletter. We also use your information to respond to you when you contact us;
  * **_Promote safety, integrity and security._** We use the information that we have to verify accounts and activity, combat harmful conduct, maintain the integrity of our Services, and promote safety and security on our Websites. For example, we use data that we have to investigate suspicious activity or breaches of the [Terms of Use](/legal/terms);
  * **_For any other purposes_** disclosed to you at the time we collect your information or pursuant to your consent.



#### How We Share Information

There are certain circumstances in which we may share your information with certain third parties without further notice to you, as set forth below:

  * **_Service providers and third-party vendors._** We share your information with third-party vendors and service providers that support the Services, for example cloud hosting providers (to provide data storage and processing services), communications providers (to process new queries and to manage our emails) and analytics providers to perform analysis on the Services. These service providers are limited from using your information for any purpose other than to perform services for us.
  * **_Legal purposes._** We may disclose information for legal purposes, such as to respond to subpoenas, court orders, legal process, law enforcement requests, legal claims or government inquiries, detect fraud, and to protect and defend the rights, interests, safety, and security of Meta, our affiliates, owner, users, or the public.
  * **_Business transfers._** We may share your information in connection with a substantial corporate transaction, such as the sale of a website, a merger, consolidation, asset sale, or in the unlikely event of bankruptcy.
  * **_With your consent._** We may share information for any other purposes disclosed to you at the time we collect the information or pursuant to your consent. If you choose to engage in public activities on the Websites, you should be aware that any information you share there can be read, collected, or used by other users of these areas. You should use caution in disclosing personal information while participating in these areas. We are not responsible for the information you choose to submit in these public areas.



#### Children's Information

Meta does not knowingly collect or store information from children under the age of 13, unless permitted by law. We will delete any information we may have inadvertently received from a child under 13 upon notice. If you have reason to believe that a child under the age of 13 has provided personal information to Meta through our Services please contact us.

#### Third-Party Links

Our Websites may contain links to other sites that we do not own or operate (e.g. GitHub). Except as provided in this Privacy Policy, we do not provide your information to these third parties without your consent. The linked websites have separate and independent privacy statements, notices and terms of use, which we recommend you carefully review. We do not have any control over such websites, and therefore have no liability or responsibility for the linked websites' personal information practices.

#### Data Retention

We retain information relating to the Services until it is no longer necessary to serve the purposes for which it was collected, such as to provide the Services to you or improve the Services. Reasons we may retain some information for longer periods include:

  * A legal request or obligation, including obligations of Meta Companies or to comply with applicable law;
  * A governmental investigation;
  * An investigation of possible violations of our terms or policies;
  * To prevent harm;
  * For safety, security and integrity purposes;
  * To protect ourselves, including our rights, property or products;
  * If it's needed in relation to a legal claim, complaint, litigation or regulatory proceedings.



#### Additional Information for United States Residents

If you are a United States resident, you can learn more about the consumer privacy rights that may be available to you by reviewing the .

#### Additional Information for Individuals in the European Region and the United Kingdom

If you are a user in a territory or country listed below (the "European Region") or the United Kingdom, the following information also applies to you and supplements the information contained above in the Privacy Policy.

Andorra, Austria, Azores, Belgium, Bulgaria, Canary Islands, Channel Islands, Croatia, Czech Republic, Denmark, Estonia, Finland, France, French Guiana, Germany, Greece, Guadeloupe, Hungary, Iceland, Ireland, Isle of Man, Italy, Latvia, Liechtenstein, Lithuania, Luxembourg, Madeira, Malta, Martinique, Mayotte, Monaco, Netherlands, Norway, Poland, Portugal, Republic of Cyprus, Réunion, Romania, San Marino, Saint Barthélemy, Saint-Martin, Slovakia, Slovenia, Spain, Sweden, Switzerland, and Vatican City and the UK sovereign bases in Cyprus (Akrotiri and Dhekelia).

If you live in the European Region, the data controller responsible for your information when you use the Websites is Meta Platforms Ireland Ltd. If you live in the United Kingdom, the data controller responsible for your information when you use the Websites is Meta Platforms, Inc.

**_Our legal basis for processing data._** We collect, use and share data in the ways described above based on the following:

  * **_Contractual necessity._** The majority of the processing of personal data described in this Privacy Policy is justified on the basis that it is necessary for the performance of a contract and specifically, for the purposes of our [Terms of Use](/legal/terms). For example, we rely on this legal basis to create your account, grant you access to our Services and to communicate with you regarding the Services.
  * **_Legitimate interests._** Our processing of personal data as described in this Privacy Policy is justified on the basis that it is necessary for the legitimate interests or the legitimate interests of a third party, where not outweighed by your interests or fundamental rights and freedoms. We rely on this legal basis to further understand who is accessing and using the Services; prevent and address fraud, unauthorized use of the Services, breaches of our terms and policies, or other harmful or illegal activity; protect ourselves (including our rights, property or products), our users or others, including as part of investigations or regulatory enquiries; or to prevent death or imminent bodily harm.
  * **_Compliance with a legal obligation._** We rely on this legal basis for processing data when the law requires it, including, for example, if there is a valid legal request for certain data.



**_Data Transfers._** We transfer personal data both internally within Meta and externally with our partners. Information controlled by Meta Platforms Ireland Ltd. or Meta Platforms, Inc. may be transferred or transmitted to, or stored and processed in, the United States or other countries for the purposes described in this policy. These data transfers are necessary to provide the services set forth in the [Terms of Use](/legal/terms).

Meta Platforms Ireland Ltd. will protect your data when it is transferred outside the European Region by implementing appropriate safeguards to protect your personal data, where required, such as using the European Commission's Standard Contractual Clauses for the transfer of personal data outside the EEA. Meta Platforms, Inc. will protect your data when it is transferred to countries outside of the United Kingdom by implementing appropriate safeguards to protect your personal data, where required, such as using the International Data Transfer Agreement or the International Data Transfer Addendum which have been approved by the UK Parliament.

**_Your Rights_**

Under the GDPR and UK GDPR, you have the right to data portability, right to access, right to rectify, and right to erase your data under certain circumstances. You also have the right to object to and restrict certain processing of your data. In evaluating an objection, we will evaluate several factors, including: reasonable user expectations; the benefits and risks to you and third parties; and other available means to achieve the same purpose that may be less invasive and do not require disproportional effort. Your objection will be upheld and we will cease processing your information, unless continued processing is based on compelling legitimate grounds or is needed for legal reasons.

Please note that to protect your information, we may need to verify your identity before processing your request. In some cases, we may need to collect additional information to verify your identity, such as a government issued ID. To exercise your rights under the GDPR or UK GDPR, you can email opensource@meta.com or contact us by mail at the address provided below.

**_Contact information for individuals in the European Region only_**

The data controller responsible for your information is Meta Platforms Ireland Ltd., which you can contact by writing to:

Meta Platforms Ireland Ltd.ATTN: Privacy OperationsMerrion RoadDublin 4, D04 X2K5Ireland

Contact the Data Protection Officer for Meta Platforms Ireland Ltd. You also have the right to lodge a complaint with Meta Platforms Ireland Ltd.'s lead supervisory authority, the Irish Data Protection Commissioner, or your local supervisory authority.

**_Contact information for individuals in the United Kingdom only_**

If you are in the United Kingdom, the data controller responsible for your information is Meta Platforms, Inc., which you can contact , or by writing to:

Meta Platforms, Inc.ATTN: Privacy Operations1601 Willow RoadMenlo Park, CA 94025

Contact the Data Protection Officer for Meta Platforms, Inc. You also have the right to lodge a complaint with the UK's Information Commissioner's Office.

#### Changes to this Policy

We will notify you before we make material changes to this Policy. If we make non-material changes, we may update or modify this Privacy Policy at any time without prior notice.

We recommend that you review the Privacy Policy each time you visit the Websites to stay informed of our privacy practices. Any changes will be effective when we post the revised policy.

#### Questions

If you have any questions about this Privacy Policy or our practices, please contact us at opensource@meta.com or by mail at:

Meta, Inc.ATTN: Privacy Operations1601 Willow RoadMenlo Park, CA 94025

Table of contents[](#undefined)[](#undefined)[](#undefined)[](#undefined)[What Kinds of Information Do We Collect?](#what-kinds-of-information-do-we-collect)[Cookies and Similar Technologies](#cookies-and-similar-technologies)[How Do We Use Information?](#how-do-we-use-information)[How We Share Information](#how-we-share-information)[Children's Information](#childrens-information)[Third-Party Links](#third-party-links)[Data Retention](#data-retention)[Additional Information for United States Residents](#additional-information-for-united-states-residents)[Additional Information for Individuals in the European Region and the United Kingdom](#additional-information-for-individuals-in-the-european-region-and-the-united-kingdom)[Changes to this Policy](#changes-to-this-policy)[Questions](#questions)

[](https://meta.com)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



Site Map[Projects](/projects)[FAQ](/get-involved#faq)[About](/about)[Get Involved](/get-involved)

Information[Linux](/linux)[Careers](https://metacareers.com)[Bug Bounty Program](https://bugbounty.meta.com)

Connect[GitHub](https://github.com/facebook)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



© 2024 Meta

  * [Code of Conduct](/code-of-conduct)
  * [Privacy Policy](/legal/privacy)
  * [Cookie Policy](/legal/cookie-policy)
  * [Terms of Use](/legal/terms)
  * [Trademark Policy](/legal/trademark)


[](/)

# Meta Open Source - Terms of Use

 _Effective December 1, 2020_

These Terms of Use ("**Terms** ") govern your use of this website hosted and provided by Meta Platforms, Inc. ("**Meta** ", "**us** " or "**we** "), ("**Website** ") and any services offered through the Website ("**Services** ").

These Terms are a legal contract between you and us so it is important that you review them carefully.

For clarity, these Terms only apply to this Website and do not apply to any:

  1. use of open source code, documentation or specifications made available on GitHub, which are governed by the terms of the applicable open source license;
  2. pull requests, issues and any other interactions or features related to participation in open source projects on GitHub, which are governed by GitHub's terms and conditions; or
  3. use of any other Meta website, service or product, which are governed by the terms and conditions applicable to those offerings.



We may change these Terms or modify any features of the Website or the Services at any time. Any such change or modification will be effective immediately upon posting on our Website. You accept these Terms by browsing this Website and/or using the Services, and you accept any changes to the Terms by continuing to use the Website after we post any such changes.

If you do not agree to these Terms, please do not access or use the Website.

If you need to contact us for any reason, please do so at opensource@meta.com

#### 1. What you can do on this Website

We make this Website available to you and others to help everyone better understand our open source projects. In exchange, we need you to make the following commitments:

**(a) Who can use the Website**

We try to make our Website broadly available to everyone, but you cannot use our Website if:

  * You are a minor in your country of residence except if your parents or guardians have agreed to these Terms on your behalf.
  * You are prohibited from accessing the Website under applicable laws.

**(b) What you can share and do on the Website**

You agree not to engage in the conduct described below (or to facilitate or support others in doing so):

  1. You may not use our Website, do or share anything:
     * That violates these Terms (and other terms and policies that apply to your use of the Website);
     * That is unlawful in any country, misleading, discriminatory or fraudulent; and/or
     * That infringes or violates someone else's rights, including their intellectual property rights.
  2. You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of the Services or Website.

**(c) Access to the Website**

The Website is made available free of charge and the Services are available only for informational purposes. We make no representations or warranties of any kind as to the accuracy, currency, or completeness of the information and other materials made available through the Website and are not liable for any decisions you may make in reliance on this content.

#### 2. Links To Third-Party Content

The Website or Services may contain links to third-party content. For example, our user communities may be hosted by third party platforms over which we have no control and for which we have no responsibility. Therefore, please review each of these platforms or websites' terms of use and privacy policies before participating.

We do not control, endorse, sponsor, recommend, or otherwise accept responsibility for any content, terms of use, policies on or use of any third party website.

#### 3. Limits on Liability

We work hard to provide the best Website and Services we can and to specify clear guidelines for everyone who uses them. Our Website and Services, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, that they will function without disruptions, delays, or imperfections or content will be accurate, current and complete. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT IN RELATION TO THE WEBSITE, THE SERVICES AND THEIR CONTENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content). Some jurisdictions do not allow the exclusion or limitation of implied warranties, in which case parts of this disclaimer may not apply to you.

We cannot predict when issues might arise with our Website and Services. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms, the Website or the Services, even if we have been advised of the possibility of such damages. Our aggregate liability arising out of or relating to these Terms, the Website or the Services will not exceed $100.

We do not exclude or limit in any way our liability to you where it would be unlawful to do so therefore depending on the country where you reside some of these exclusions and limitations may not apply to you.

#### 4. Disputes

We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.

For any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms, the Website and/or the Services ("**claim** "), you agree that it will be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County. You also agree to submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.

The preceding provision regarding applicable law and venue does not apply if you are a consumer based in the European Union. If you are a consumer based in the European Union, these Terms will be subject to the laws of your country of residence and you may bring a claim in front of those courts.

#### 5. Privacy

Under data protection legislation, we are required to provide you with certain information about who we are, how we process your personal data and for what purposes and your rights in relation to your personal data and how to exercise them. This information is provided in our [Privacy Policy](/legal/privacy) and it is important that you read that information. Please also review our [Cookie Policy](/legal/cookie-policy), which tells you which cookies we use on the Website and how to manage them.

#### 6. Other important terms

These Terms make up the entire agreement between you and Meta Platforms, Inc. regarding your use of our Services and this Website. They supersede any prior agreements.

If any portion of these Terms is found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.

You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.

You agree that no joint venture, partnership, employment, or agency relationship exists between you and us as a result of these Terms or your access to and use of the Website or Services.

These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.

We reserve all rights not expressly granted to you.

Table of contents[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[1. What you can do on this Website](#what-you-can-do-on-this-website)[2. Links To Third-Party Content](#links-to-third-party-content)[3. Limits on Liability](#limits-on-liability)[4. Disputes](#disputes)[5. Privacy](#privacy)[6. Other important terms](#other-important-terms)

[](https://meta.com)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



Site Map[Projects](/projects)[FAQ](/get-involved#faq)[About](/about)[Get Involved](/get-involved)

Information[Linux](/linux)[Careers](https://metacareers.com)[Bug Bounty Program](https://bugbounty.meta.com)

Connect[GitHub](https://github.com/facebook)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



© 2024 Meta

  * [Code of Conduct](/code-of-conduct)
  * [Privacy Policy](/legal/privacy)
  * [Cookie Policy](/legal/cookie-policy)
  * [Terms of Use](/legal/terms)
  * [Trademark Policy](/legal/trademark)



Don’t miss what’s happening

People on X are the first to know.

[Log in](/login)

[Sign up](/i/flow/signup)

Welcome to x.com!

We are letting you know that we are changing our URL, but your privacy and data protection settings remain the same.

For more details, see our Privacy Policy: 

# [](/)

[Settings](/settings)

[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=facebook%2Freact) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ facebook ](/facebook) / **[react](/facebook/react) ** Public

  * [ Notifications ](/login?return_to=%2Ffacebook%2Freact) You must be signed in to change notification settings
  * [ Fork 47.2k ](/login?return_to=%2Ffacebook%2Freact)
  * [ Star  231k ](/login?return_to=%2Ffacebook%2Freact)




The library for web and native user interfaces. 

[react.dev](https://react.dev "https://react.dev")

### License

[ MIT license ](/facebook/react/blob/main/LICENSE)

[ 231k stars ](/facebook/react/stargazers) [ 47.2k forks ](/facebook/react/forks) [ Branches ](/facebook/react/branches) [ Tags ](/facebook/react/tags) [ Activity ](/facebook/react/activity)

[ Star  ](/login?return_to=%2Ffacebook%2Freact)

[ Notifications ](/login?return_to=%2Ffacebook%2Freact) You must be signed in to change notification settings

  * [ Code ](/facebook/react)
  * [ Issues 764 ](/facebook/react/issues)
  * [ Pull requests 176 ](/facebook/react/pulls)
  * [ Actions ](/facebook/react/actions)
  * [ Projects 0 ](/facebook/react/projects)
  * [ Wiki ](/facebook/react/wiki)
  * [ Security ](/facebook/react/security)
  * [ Insights ](/facebook/react/pulse)



Additional navigation options

  * [ Code  ](/facebook/react)
  * [ Issues  ](/facebook/react/issues)
  * [ Pull requests  ](/facebook/react/pulls)
  * [ Actions  ](/facebook/react/actions)
  * [ Projects  ](/facebook/react/projects)
  * [ Wiki  ](/facebook/react/wiki)
  * [ Security  ](/facebook/react/security)
  * [ Insights  ](/facebook/react/pulse)



# facebook/react

main

[**358** Branches](/facebook/react/branches)[**145** Tags](/facebook/react/tags)

[](/facebook/react/branches)[](/facebook/react/tags)

Go to file

Code

## Folders and files

Name| Name| Last commit message| Last commit date  
---|---|---|---  
  
## Latest commit

[](/sebmarkbage)[sebmarkbage](/facebook/react/commits?author=sebmarkbage)[[Flight] Mark Errored Server Components (](/facebook/react/commit/50f00fd876b0b92b243cd8b54a222f9577446392)[#31879](https://github.com/facebook/react/pull/31879)[)](/facebook/react/commit/50f00fd876b0b92b243cd8b54a222f9577446392)Dec 28, 2024[50f00fd](/facebook/react/commit/50f00fd876b0b92b243cd8b54a222f9577446392) · Dec 28, 2024

## History

[19,815 Commits](/facebook/react/commits/main/)[](/facebook/react/commits/main/)  
[.codesandbox](/facebook/react/tree/main/.codesandbox ".codesandbox")| [.codesandbox](/facebook/react/tree/main/.codesandbox ".codesandbox")| [Codesandbox: upgrade to Node.js 18 (](/facebook/react/commit/88313ffd57a5df2666520c9a528eafdf2914d5f2 "Codesandbox: upgrade to Node.js 18 \(#26330\)
Turns out Codesandbox didn't support `String.prototype.replaceAll` in
#26329.
This updates the config to use Node.js 18 for Codesandbox builds.")[#26330](https://github.com/facebook/react/pull/26330)[)](/facebook/react/commit/88313ffd57a5df2666520c9a528eafdf2914d5f2 "Codesandbox: upgrade to Node.js 18 \(#26330\)
Turns out Codesandbox didn't support `String.prototype.replaceAll` in
#26329.
This updates the config to use Node.js 18 for Codesandbox builds.")| Mar 7, 2023  
[.github](/facebook/react/tree/main/.github ".github")| [.github](/facebook/react/tree/main/.github ".github")| [Update runtime workflow to use HEAD commit (](/facebook/react/commit/9463d51e515544bb3119dd4cec46ce2177cf4c62 "Update runtime workflow to use HEAD commit \(#31850\)
This updates the CI workflow for the runtime build and tests to use the
HEAD commit of the PR branch rather than the Fake News merge commit that
the `@actions/checkout` action bafflingly defaults to.
Testing against the merge commit never made sense to me as a behavior
because as soon as someone updates upstream, it's out of date anyway.
It should just match the exact commit that the developer pushed, and the
once that appears in the GitHub UI.")[#31850](https://github.com/facebook/react/pull/31850)[)](/facebook/react/commit/9463d51e515544bb3119dd4cec46ce2177cf4c62 "Update runtime workflow to use HEAD commit \(#31850\)
This updates the CI workflow for the runtime build and tests to use the
HEAD commit of the PR branch rather than the Fake News merge commit that
the `@actions/checkout` action bafflingly defaults to.
Testing against the merge commit never made sense to me as a behavior
because as soon as someone updates upstream, it's out of date anyway.
It should just match the exact commit that the developer pushed, and the
once that appears in the GitHub UI.")| Dec 19, 2024  
[compiler](/facebook/react/tree/main/compiler "compiler")| [compiler](/facebook/react/tree/main/compiler "compiler")| [[rcr] Relax react peer dep requirement (](/facebook/react/commit/4309bde2b4faa044dc6266142378a330c030e053 "\[rcr\] Relax react peer dep requirement \(#31915\)
There's no real reason to restrict the React peer dep to
non-experimental, so relax it.
---
\[//\]: # \(BEGIN SAPLING FOOTER\)
Stack created with \[Sapling\]\(https://sapling-scm.com\). Best reviewed
with \[ReviewStack\]\(https://reviewstack.dev/facebook/react/pull/31915\).
* #31919
* #31918
* #31917
* #31916
* __->__ #31915
* #31920")[#31915](https://github.com/facebook/react/pull/31915)[)](/facebook/react/commit/4309bde2b4faa044dc6266142378a330c030e053 "\[rcr\] Relax react peer dep requirement \(#31915\)
There's no real reason to restrict the React peer dep to
non-experimental, so relax it.
---
\[//\]: # \(BEGIN SAPLING FOOTER\)
Stack created with \[Sapling\]\(https://sapling-scm.com\). Best reviewed
with \[ReviewStack\]\(https://reviewstack.dev/facebook/react/pull/31915\).
* #31919
* #31918
* #31917
* #31916
* __->__ #31915
* #31920")| Dec 28, 2024  
[fixtures](/facebook/react/tree/main/fixtures "fixtures")| [fixtures](/facebook/react/tree/main/fixtures "fixtures")| [Add Profiler mode to fixtures even if React DevTools is not installed (](/facebook/react/commit/d4ac7689f94f8ed53b779a651d62a2b9af20e6c0 "Add Profiler mode to fixtures even if React DevTools is not installed \(#31877\)
Currently you need to do one of either:
1. Install React DevTools
2. Install React Refresh
3. Add Profiler component
To opt in to component level profiling.
It was a bit confusing that some of the fixtures was doing 2 which made
them work while other was depending on if you had DevTools.
Really React Refresh shouldn't really opt you in I think.")[…](https://github.com/facebook/react/pull/31877)| Dec 28, 2024  
[packages](/facebook/react/tree/main/packages "packages")| [packages](/facebook/react/tree/main/packages "packages")| [[Flight] Mark Errored Server Components (](/facebook/react/commit/50f00fd876b0b92b243cd8b54a222f9577446392 "\[Flight\] Mark Errored Server Components \(#31879\)
This is similar to #31876 but for Server Components.
It marks them as errored and puts the error message in the Summary
properties.
<img width="1511" alt="Screenshot 2024-12-20 at 5 05 35 PM"
src="https://github.com/user-attachments/assets/92f11e42-0e23-41c7-bfd4-09effb25e024"
/>
This only looks at the current chunk for rejections. That means that
there might still be promises deeper that rejected but it's only the
immediate return value of the Server Component that's considered a
rejection of the component itself.")[#31879](https://github.com/facebook/react/pull/31879)[)](/facebook/react/commit/50f00fd876b0b92b243cd8b54a222f9577446392 "\[Flight\] Mark Errored Server Components \(#31879\)
This is similar to #31876 but for Server Components.
It marks them as errored and puts the error message in the Summary
properties.
<img width="1511" alt="Screenshot 2024-12-20 at 5 05 35 PM"
src="https://github.com/user-attachments/assets/92f11e42-0e23-41c7-bfd4-09effb25e024"
/>
This only looks at the current chunk for rejections. That means that
there might still be promises deeper that rejected but it's only the
immediate return value of the Server Component that's considered a
rejection of the component itself.")| Dec 28, 2024  
[scripts](/facebook/react/tree/main/scripts "scripts")| [scripts](/facebook/react/tree/main/scripts "scripts")| [[asserts helpers] react package (](/facebook/react/commit/94867f33be327a52bfffda89a14c85897180e43e "\[asserts helpers\] react package \(#31853\)
Based off https://github.com/facebook/react/pull/31844
Commit to review:
https://github.com/facebook/react/commit/11aa104e3e70c0accc21f785060b812beb145089
Converts the rest of the `react` package.")[#31853](https://github.com/facebook/react/pull/31853)[)](/facebook/react/commit/94867f33be327a52bfffda89a14c85897180e43e "\[asserts helpers\] react package \(#31853\)
Based off https://github.com/facebook/react/pull/31844
Commit to review:
https://github.com/facebook/react/commit/11aa104e3e70c0accc21f785060b812beb145089
Converts the rest of the `react` package.")| Dec 24, 2024  
[.editorconfig](/facebook/react/blob/main/.editorconfig ".editorconfig")| [.editorconfig](/facebook/react/blob/main/.editorconfig ".editorconfig")| [Remove trim_trailing_whitespace from editorconfig (](/facebook/react/commit/33c7bd9ae3b4f998a477fe0ea8ebdf2f2ee8a144 "Remove trim_trailing_whitespace from editorconfig \(#31413\)
This setting breaks `toMatchInlineSnapshot` by removing whitespace in
snapshots.")[#31413](https://github.com/facebook/react/pull/31413)[)](/facebook/react/commit/33c7bd9ae3b4f998a477fe0ea8ebdf2f2ee8a144 "Remove trim_trailing_whitespace from editorconfig \(#31413\)
This setting breaks `toMatchInlineSnapshot` by removing whitespace in
snapshots.")| Nov 5, 2024  
[.eslintignore](/facebook/react/blob/main/.eslintignore ".eslintignore")| [.eslintignore](/facebook/react/blob/main/.eslintignore ".eslintignore")| [Fix ESLint and Prettier configs for React Compiler (](/facebook/react/commit/c93c30f9d4c6339708636c3fbf9189acfe96443f "Fix ESLint and Prettier configs for React Compiler \(#29073\)
Fixes the top-level ESLint and Prettier configs to ignore the compiler.
For now the compiler has its own prettier and linting setup with
different versions/configs.")[#29073](https://github.com/facebook/react/pull/29073)[)](/facebook/react/commit/c93c30f9d4c6339708636c3fbf9189acfe96443f "Fix ESLint and Prettier configs for React Compiler \(#29073\)
Fixes the top-level ESLint and Prettier configs to ignore the compiler.
For now the compiler has its own prettier and linting setup with
different versions/configs.")| May 16, 2024  
[.eslintrc.js](/facebook/react/blob/main/.eslintrc.js ".eslintrc.js")| [.eslintrc.js](/facebook/react/blob/main/.eslintrc.js ".eslintrc.js")| [Implement react-server-dom-parcel (](/facebook/react/commit/ca587425fe21b644bebb336f058f1a0d9763631b "Implement react-server-dom-parcel \(#31725\)
This adds a new `react-server-dom-parcel-package`, which is an RSC
integration for the Parcel bundler. It is mostly copied from the
existing webpack/turbopack integrations, with some changes to utilize
Parcel runtime APIs for loading and executing bundles/modules.
See https://github.com/parcel-bundler/parcel/pull/10043 for the Parcel
side of this, which includes the plugin needed to generate client and
server references. https://github.com/parcel-bundler/rsc-examples also
includes examples of various ways to use RSCs with Parcel.
Differences from other integrations:
* Client and server modules are all part of the same graph, and we use
Parcel's
\[environments\]\(https://parceljs.org/plugin-system/transformer/#the-environment\)
to distinguish them. The server is the Parcel build entry point, and it
imports and renders server components in route handlers. When a `"use
client"` directive is seen, the environment changes and Parcel creates a
new client bundle for the page, combining all client modules together.
CSS from both client and server components are also combined
automatically.
* There is no separate manifest file that needs to be passed around by
the user. A \[Runtime\]\(https://parceljs.org/plugin-system/runtime/\)
plugin injects client and server references as needed into the relevant
bundles, and registers server action ids using `react-server-dom-parcel`
automatically.
* A special `<Resources>` component is also generated by Parcel to
render the `<script>` and `<link rel="stylesheet">` elements needed for
a page, using the relevant info from the bundle graph.
Note: I've already published a 0.0.x version of this package to npm for
testing purposes but happy to add whoever needs access to it as well.
### Questions
* How to test this in the React repo. I'll have integration tests in
Parcel, but setting up all the different mocks and environments to
simulate that here seems challenging. I could try to copy how
Webpack/Turbopack do it but it's a bit different.
* Where to put TypeScript types. Right now I have some ambient types in
my \[example
repo\]\(https://github.com/parcel-bundler/rsc-examples/blob/main/types.d.ts\)
but it would be nice for users not to copy and paste these. Can I
include them in the package or do they need to maintained separately in
definitelytyped? I would really prefer not to have to maintain code in
three different repos ideally.
---------
Co-authored-by: Sebastian Markbage <sebastian@calyptus.eu>")[#31725](https://github.com/facebook/react/pull/31725)[)](/facebook/react/commit/ca587425fe21b644bebb336f058f1a0d9763631b "Implement react-server-dom-parcel \(#31725\)
This adds a new `react-server-dom-parcel-package`, which is an RSC
integration for the Parcel bundler. It is mostly copied from the
existing webpack/turbopack integrations, with some changes to utilize
Parcel runtime APIs for loading and executing bundles/modules.
See https://github.com/parcel-bundler/parcel/pull/10043 for the Parcel
side of this, which includes the plugin needed to generate client and
server references. https://github.com/parcel-bundler/rsc-examples also
includes examples of various ways to use RSCs with Parcel.
Differences from other integrations:
* Client and server modules are all part of the same graph, and we use
Parcel's
\[environments\]\(https://parceljs.org/plugin-system/transformer/#the-environment\)
to distinguish them. The server is the Parcel build entry point, and it
imports and renders server components in route handlers. When a `"use
client"` directive is seen, the environment changes and Parcel creates a
new client bundle for the page, combining all client modules together.
CSS from both client and server components are also combined
automatically.
* There is no separate manifest file that needs to be passed around by
the user. A \[Runtime\]\(https://parceljs.org/plugin-system/runtime/\)
plugin injects client and server references as needed into the relevant
bundles, and registers server action ids using `react-server-dom-parcel`
automatically.
* A special `<Resources>` component is also generated by Parcel to
render the `<script>` and `<link rel="stylesheet">` elements needed for
a page, using the relevant info from the bundle graph.
Note: I've already published a 0.0.x version of this package to npm for
testing purposes but happy to add whoever needs access to it as well.
### Questions
* How to test this in the React repo. I'll have integration tests in
Parcel, but setting up all the different mocks and environments to
simulate that here seems challenging. I could try to copy how
Webpack/Turbopack do it but it's a bit different.
* Where to put TypeScript types. Right now I have some ambient types in
my \[example
repo\]\(https://github.com/parcel-bundler/rsc-examples/blob/main/types.d.ts\)
but it would be nice for users not to copy and paste these. Can I
include them in the package or do they need to maintained separately in
definitelytyped? I would really prefer not to have to maintain code in
three different repos ideally.
---------
Co-authored-by: Sebastian Markbage <sebastian@calyptus.eu>")| Dec 12, 2024  
[.git-blame-ignore-revs](/facebook/react/blob/main/.git-blame-ignore-revs ".git-blame-ignore-revs")| [.git-blame-ignore-revs](/facebook/react/blob/main/.git-blame-ignore-revs ".git-blame-ignore-revs")| [Add run prettier commit to .git-blame-ignore-revs](/facebook/react/commit/d439f279ff0517417e062cae8ebb77a67fe21fa9 "Add run prettier commit to .git-blame-ignore-revs
ghstack-source-id: a10c3b3d6412873023747d6f253f8793fa689b60
Pull Request resolved: https://github.com/facebook/react/pull/30391")| Jul 19, 2024  
[.gitattributes](/facebook/react/blob/main/.gitattributes ".gitattributes")| [.gitattributes](/facebook/react/blob/main/.gitattributes ".gitattributes")| [.gitattributes to ensure LF line endings when we should](/facebook/react/commit/8abca77381fbd31ffc2ff2b4fa12020768b8fc07 ".gitattributes to ensure LF line endings when we should")| Jan 18, 2014  
[.gitignore](/facebook/react/blob/main/.gitignore ".gitignore")| [.gitignore](/facebook/react/blob/main/.gitignore ".gitignore")| [feat[devtools]: add package for fusebox integration (](/facebook/react/commit/96c58466109c2944adb817001fec38088a7c431e "feat\[devtools\]: add package for fusebox integration \(#28553\)
## Summary
Stacked on https://github.com/facebook/react/pull/28552. Review only the
\[last commit at the
top\]\(https://github.com/facebook/react/pull/28553/commits/c69952f1bf6e23252d47e0f7eb98efbbb2cc2c55\).
These changes add new package `react-devtools-fusebox`, which is the
entrypoint for the RDT Frontend, which will be used in Chrome DevTools
panel. The main differences from other frontend shells \(extension,
standalone\) are:
1. This package builds scripts in ESM format, this is required by Chrome
DevTools, see webpack config:
https://github.com/facebook/react/blob/c69952f1bf6e23252d47e0f7eb98efbbb2cc2c55/packages/react-devtools-fusebox/webpack.config.frontend.js#L50-L52
2. The build includes styles in a separate `.css` file, which is
required for Chrome DevTools: styles are loaded lazily once panel is
mounted.")[#28553](https://github.com/facebook/react/pull/28553)[)](/facebook/react/commit/96c58466109c2944adb817001fec38088a7c431e "feat\[devtools\]: add package for fusebox integration \(#28553\)
## Summary
Stacked on https://github.com/facebook/react/pull/28552. Review only the
\[last commit at the
top\]\(https://github.com/facebook/react/pull/28553/commits/c69952f1bf6e23252d47e0f7eb98efbbb2cc2c55\).
These changes add new package `react-devtools-fusebox`, which is the
entrypoint for the RDT Frontend, which will be used in Chrome DevTools
panel. The main differences from other frontend shells \(extension,
standalone\) are:
1. This package builds scripts in ESM format, this is required by Chrome
DevTools, see webpack config:
https://github.com/facebook/react/blob/c69952f1bf6e23252d47e0f7eb98efbbb2cc2c55/packages/react-devtools-fusebox/webpack.config.frontend.js#L50-L52
2. The build includes styles in a separate `.css` file, which is
required for Chrome DevTools: styles are loaded lazily once panel is
mounted.")| Apr 12, 2024  
[.mailmap](/facebook/react/blob/main/.mailmap ".mailmap")| [.mailmap](/facebook/react/blob/main/.mailmap ".mailmap")| [updates mailmap entries (](/facebook/react/commit/ebb2253428315bfa3237df403082b0d2ec2f9c5c "updates mailmap entries \(#19824\)")[#19824](https://github.com/facebook/react/pull/19824)[)](/facebook/react/commit/ebb2253428315bfa3237df403082b0d2ec2f9c5c "updates mailmap entries \(#19824\)")| Sep 12, 2020  
[.nvmrc](/facebook/react/blob/main/.nvmrc ".nvmrc")| [.nvmrc](/facebook/react/blob/main/.nvmrc ".nvmrc")| [[ci] Standardize node version and timezones](/facebook/react/commit/922c7971ba3e52adf46678774bef3022d1aad4e0 "\[ci\] Standardize node version and timezones
Quick change to standardize on a single timezone across all workflows
and to use the same version of node \(18.20.1\).
Also updates .nvmrc
ghstack-source-id: e1d43006ec018acfcd88444feadde1b1d260de9d
Pull Request resolved: https://github.com/facebook/react/pull/30323")| Jul 12, 2024  
[.prettierignore](/facebook/react/blob/main/.prettierignore ".prettierignore")| [.prettierignore](/facebook/react/blob/main/.prettierignore ".prettierignore")| [[prettier] Ignore compiler/target (](/facebook/react/commit/0f1127b552790e6dc0b65650680237ba4c94d977 "\[prettier\] Ignore compiler/target \(#31168\)
Add missing directory to prettierignore.
---
\[//\]: # \(BEGIN SAPLING FOOTER\)
Stack created with \[Sapling\]\(https://sapling-scm.com\). Best reviewed
with \[ReviewStack\]\(https://reviewstack.dev/facebook/react/pull/31168\).
* #31167
* #31166
* #31165
* #31164
* #31148
* __->__ #31168")[#31168](https://github.com/facebook/react/pull/31168)[)](/facebook/react/commit/0f1127b552790e6dc0b65650680237ba4c94d977 "\[prettier\] Ignore compiler/target \(#31168\)
Add missing directory to prettierignore.
---
\[//\]: # \(BEGIN SAPLING FOOTER\)
Stack created with \[Sapling\]\(https://sapling-scm.com\). Best reviewed
with \[ReviewStack\]\(https://reviewstack.dev/facebook/react/pull/31168\).
* #31167
* #31166
* #31165
* #31164
* #31148
* __->__ #31168")| Oct 10, 2024  
[.prettierrc.js](/facebook/react/blob/main/.prettierrc.js ".prettierrc.js")| [.prettierrc.js](/facebook/react/blob/main/.prettierrc.js ".prettierrc.js")| [[BE] switch to hermes parser for prettier (](/facebook/react/commit/70484844bfd47382ad0011e0066ccf25d1a84464 "\[BE\] switch to hermes parser for prettier \(#30421\)
This will allow us to parse new flow syntax since the `flow` parser is
no longer updated.
I had to exclude some files and have them fall back to `flow` parser
since they contain invalid graphql syntax that makes the plugin crash.")[#30421](https://github.com/facebook/react/pull/30421)[)](/facebook/react/commit/70484844bfd47382ad0011e0066ccf25d1a84464 "\[BE\] switch to hermes parser for prettier \(#30421\)
This will allow us to parse new flow syntax since the `flow` parser is
no longer updated.
I had to exclude some files and have them fall back to `flow` parser
since they contain invalid graphql syntax that makes the plugin crash.")| Jul 23, 2024  
[.watchmanconfig](/facebook/react/blob/main/.watchmanconfig ".watchmanconfig")| [.watchmanconfig](/facebook/react/blob/main/.watchmanconfig ".watchmanconfig")| [.watchmanconfig must be valid json (](/facebook/react/commit/29b45596354035754d598d8b23a8233f3d2414f0 ".watchmanconfig must be valid json \(#16118\)
faceworldproblems?")[#16118](https://github.com/facebook/react/pull/16118)[)](/facebook/react/commit/29b45596354035754d598d8b23a8233f3d2414f0 ".watchmanconfig must be valid json \(#16118\)
faceworldproblems?")| Jul 12, 2019  
[CHANGELOG-canary.md](/facebook/react/blob/main/CHANGELOG-canary.md "CHANGELOG-canary.md")| [CHANGELOG-canary.md](/facebook/react/blob/main/CHANGELOG-canary.md "CHANGELOG-canary.md")| [Add useActionState to CHANGELOG-canary.md (](/facebook/react/commit/0a444356748ec1619acfbb60f9b112451c709343 "Add useActionState to CHANGELOG-canary.md \(#28632\)
Co-authored-by: Sébastien Lorber <slorber@users.noreply.github.com>")[#28632](https://github.com/facebook/react/pull/28632)[)](/facebook/react/commit/0a444356748ec1619acfbb60f9b112451c709343 "Add useActionState to CHANGELOG-canary.md \(#28632\)
Co-authored-by: Sébastien Lorber <slorber@users.noreply.github.com>")| Mar 26, 2024  
[CHANGELOG.md](/facebook/react/blob/main/CHANGELOG.md "CHANGELOG.md")| [CHANGELOG.md](/facebook/react/blob/main/CHANGELOG.md "CHANGELOG.md")| [Fix headings in React 19 CHANGELOG (](/facebook/react/commit/7283a213dbbc31029e65005276f12202558558fc "Fix headings in React 19 CHANGELOG \(#31683\)
Co-authored-by: eps1lon <sebastian.silbermann@vercel.com>")[#31683](https://github.com/facebook/react/pull/31683)[)](/facebook/react/commit/7283a213dbbc31029e65005276f12202558558fc "Fix headings in React 19 CHANGELOG \(#31683\)
Co-authored-by: eps1lon <sebastian.silbermann@vercel.com>")| Dec 6, 2024  
[CODE_OF_CONDUCT.md](/facebook/react/blob/main/CODE_OF_CONDUCT.md "CODE_OF_CONDUCT.md")| [CODE_OF_CONDUCT.md](/facebook/react/blob/main/CODE_OF_CONDUCT.md "CODE_OF_CONDUCT.md")| [revert last grammatical edit (](/facebook/react/commit/7a227276e653b481b73ed9e9178244b53d61f730 "revert last grammatical edit \(#25067\)
on line 29, #24798 edited \(others'\) to \(other's\); however, the subject here is plural \(e.g. "others in the community"\), thus \(others'\) is grammatically correct")[#25067](https://github.com/facebook/react/pull/25067)[)](/facebook/react/commit/7a227276e653b481b73ed9e9178244b53d61f730 "revert last grammatical edit \(#25067\)
on line 29, #24798 edited \(others'\) to \(other's\); however, the subject here is plural \(e.g. "others in the community"\), thus \(others'\) is grammatically correct")| Aug 11, 2022  
[CONTRIBUTING.md](/facebook/react/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")| [CONTRIBUTING.md](/facebook/react/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")| [Fix: Updated link in CONTRIBUTING (](/facebook/react/commit/2d80a0cd690bb5650b6c8a6c079a87b5dc42bd15 "Fix: Updated link in CONTRIBUTING \(#25381\)")[#25381](https://github.com/facebook/react/pull/25381)[)](/facebook/react/commit/2d80a0cd690bb5650b6c8a6c079a87b5dc42bd15 "Fix: Updated link in CONTRIBUTING \(#25381\)")| Oct 3, 2022  
[LICENSE](/facebook/react/blob/main/LICENSE "LICENSE")| [LICENSE](/facebook/react/blob/main/LICENSE "LICENSE")| [[Codemod] Update copyright header to Meta (](/facebook/react/commit/9cdf8a99edcfd94d7420835ea663edca04237527 "\[Codemod\] Update copyright header to Meta \(#25315\)
* Facebook -> Meta in copyright
rg --files | xargs sed -i 's#Copyright \(c\) Facebook, Inc. and its affiliates.#Copyright \(c\) Meta Platforms, Inc. and affiliates.#g'
* Manual tweaks")[#25315](https://github.com/facebook/react/pull/25315)[)](/facebook/react/commit/9cdf8a99edcfd94d7420835ea663edca04237527 "\[Codemod\] Update copyright header to Meta \(#25315\)
* Facebook -> Meta in copyright
rg --files | xargs sed -i 's#Copyright \(c\) Facebook, Inc. and its affiliates.#Copyright \(c\) Meta Platforms, Inc. and affiliates.#g'
* Manual tweaks")| Oct 18, 2022  
[README.md](/facebook/react/blob/main/README.md "README.md")| [README.md](/facebook/react/blob/main/README.md "README.md")| [[ez] Remove circleci badge from readme](/facebook/react/commit/4e482f490405c0c601d8712a0625fd17c04978e4 "\[ez\] Remove circleci badge from readme
CircleCI is no longer in use in this repo: a6b5ed01ae98a18507cb92d8e932a8ca321602e6
ghstack-source-id: b6234f11d143d2c65832e17ccf180b255dc23c9d
Pull Request resolved: https://github.com/facebook/react/pull/30502")| Jul 29, 2024  
[ReactVersions.js](/facebook/react/blob/main/ReactVersions.js "ReactVersions.js")| [ReactVersions.js](/facebook/react/blob/main/ReactVersions.js "ReactVersions.js")| [Fix canary version strings (](/facebook/react/commit/e854ce3b1551a4ac97012336c2e2076ab0cc0636 "Fix canary version strings \(#31721\)
We're still publishing RCs and creating canary version strings using the
RC naming convention. Setting the `canaryChannelLabel` back to canary
fixes the version names and tags after the 19 stable release.")[#31721](https://github.com/facebook/react/pull/31721)[)](/facebook/react/commit/e854ce3b1551a4ac97012336c2e2076ab0cc0636 "Fix canary version strings \(#31721\)
We're still publishing RCs and creating canary version strings using the
RC naming convention. Setting the `canaryChannelLabel` back to canary
fixes the version names and tags after the 19 stable release.")| Dec 13, 2024  
[SECURITY.md](/facebook/react/blob/main/SECURITY.md "SECURITY.md")| [SECURITY.md](/facebook/react/blob/main/SECURITY.md "SECURITY.md")| [Create SECURITY.md (](/facebook/react/commit/1b6e269751c28030429503a60590114e252fc86c "Create SECURITY.md \(#15784\)
Adds SECURITY.md as mentioned in #15722.")[#15784](https://github.com/facebook/react/pull/15784)[)](/facebook/react/commit/1b6e269751c28030429503a60590114e252fc86c "Create SECURITY.md \(#15784\)
Adds SECURITY.md as mentioned in #15722.")| Jan 10, 2020  
[babel.config.js](/facebook/react/blob/main/babel.config.js "babel.config.js")| [babel.config.js](/facebook/react/blob/main/babel.config.js "babel.config.js")| [Upgrade tests to use react/jsx-runtime (](/facebook/react/commit/952aa74f8e45ed35ac6bf1de10ad5ed5410deac6 "Upgrade tests to use react/jsx-runtime \(#28252\)
Instead of createElement.
We should have done this when we initially released jsx-runtime but
better late than never. The general principle is that our tests should
be written using the most up-to-date idioms that we recommend for users,
except when explicitly testing an edge case or legacy behavior, like for
backwards compatibility.
Most of the diff is related to tweaking test output and isn't very
interesting.
I did have to workaround an issue related to component stacks. The
component stack logic depends on shared state that lives in the React
module. The problem is that most of our tests reset the React module
state and re-require a fresh instance of React, React DOM, etc. However,
the JSX runtime is not re-required because it's injected by the compiler
as a static import. This means its copy of the shared state is no longer
the same as the one used by React, causing any warning logged by the JSX
runtime to not include a component stack. \(This same issue also breaks
string refs, but since we're removing those soon I'm not so concerned
about that.\) The solution I went with for now is to mock the JSX runtime
with a proxy that re-requires the module on every function invocation. I
don't love this but it will have to do for now. What we should really do
is migrate our tests away from manually resetting the module state and
use import syntax instead.")[#28252](https://github.com/facebook/react/pull/28252)[)](/facebook/react/commit/952aa74f8e45ed35ac6bf1de10ad5ed5410deac6 "Upgrade tests to use react/jsx-runtime \(#28252\)
Instead of createElement.
We should have done this when we initially released jsx-runtime but
better late than never. The general principle is that our tests should
be written using the most up-to-date idioms that we recommend for users,
except when explicitly testing an edge case or legacy behavior, like for
backwards compatibility.
Most of the diff is related to tweaking test output and isn't very
interesting.
I did have to workaround an issue related to component stacks. The
component stack logic depends on shared state that lives in the React
module. The problem is that most of our tests reset the React module
state and re-require a fresh instance of React, React DOM, etc. However,
the JSX runtime is not re-required because it's injected by the compiler
as a static import. This means its copy of the shared state is no longer
the same as the one used by React, causing any warning logged by the JSX
runtime to not include a component stack. \(This same issue also breaks
string refs, but since we're removing those soon I'm not so concerned
about that.\) The solution I went with for now is to mock the JSX runtime
with a proxy that re-requires the module on every function invocation. I
don't love this but it will have to do for now. What we should really do
is migrate our tests away from manually resetting the module state and
use import syntax instead.")| Feb 6, 2024  
[dangerfile.js](/facebook/react/blob/main/dangerfile.js "dangerfile.js")| [dangerfile.js](/facebook/react/blob/main/dangerfile.js "dangerfile.js")| [[ci] Cleanup more references to circleci](/facebook/react/commit/8fe510752f150a34be4409f474ca7de0746b7b18 "\[ci\] Cleanup more references to circleci
ghstack-source-id: 85a5f17b2b9dee35bb747ce2da13bffaed0fa34a
Pull Request resolved: https://github.com/facebook/react/pull/30509")| Jul 30, 2024  
[netlify.toml](/facebook/react/blob/main/netlify.toml "netlify.toml")| [netlify.toml](/facebook/react/blob/main/netlify.toml "netlify.toml")| [[UMD] Remove umd builds (](/facebook/react/commit/da6ba53b10d8240fc251ba14a3e5878604d3dc7d "\[UMD\] Remove umd builds \(#28735\)
In React 19 React will finally stop publishing UMD builds. This is
motivated primarily by the lack of use of UMD format and the added
complexity of maintaining build infra for these releases. Additionally
with ESM becoming more prevalent in browsers and services like esm.sh
which can host React as an ESM module there are other options for doing
script tag based react loading.
This PR removes all the UMD build configs and forks.
There are some fixtures that still have references to UMD builds however
many of them already do not work \(for instance they are using legacy
features like ReactDOM.render\) and rather than block the removal on
these fixtures being brought up to date we'll just move forward and fix
or removes fixtures as necessary in the future.")[#28735](https://github.com/facebook/react/pull/28735)[)](/facebook/react/commit/da6ba53b10d8240fc251ba14a3e5878604d3dc7d "\[UMD\] Remove umd builds \(#28735\)
In React 19 React will finally stop publishing UMD builds. This is
motivated primarily by the lack of use of UMD format and the added
complexity of maintaining build infra for these releases. Additionally
with ESM becoming more prevalent in browsers and services like esm.sh
which can host React as an ESM module there are other options for doing
script tag based react loading.
This PR removes all the UMD build configs and forks.
There are some fixtures that still have references to UMD builds however
many of them already do not work \(for instance they are using legacy
features like ReactDOM.render\) and rather than block the removal on
these fixtures being brought up to date we'll just move forward and fix
or removes fixtures as necessary in the future.")| Apr 17, 2024  
[package.json](/facebook/react/blob/main/package.json "package.json")| [package.json](/facebook/react/blob/main/package.json "package.json")| [Bump rollup from 3.20.0 to 3.29.5 (](/facebook/react/commit/db320ea4d910d360ccb83850ccdbc464a77fc1c5 "Bump rollup from 3.20.0 to 3.29.5 \(#31072\)
Bumps \[rollup\]\(https://github.com/rollup/rollup\) from 3.20.0 to 3.29.5.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a
href="https://github.com/rollup/rollup/releases">rollup's
releases</a>.</em></p>
<blockquote>
<h2>v3.29.4</h2>
<h2>3.29.4</h2>
<p><em>2023-09-28</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix static analysis when an exported function uses callbacks \(<a
href="https://redirect.github.com/rollup/rollup/issues/5158">#5158</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5158">#5158</a>:
Deoptimize all parameters when losing track of a function \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>v3.29.3</h2>
<h2>3.29.3</h2>
<p><em>2023-09-24</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix a bug where code was wrongly tree-shaken after mutating function
parameters \(<a
href="https://redirect.github.com/rollup/rollup/issues/5153">#5153</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5145">#5145</a>:
docs: improve the docs repl appearance in the light mode \(<a
href="https://github.com/TrickyPi"><code>@​TrickyPi</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5148">#5148</a>:
chore\(deps\): update dependency
<code>@​vue/eslint-config-typescript</code> to v12 \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5149">#5149</a>:
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5153">#5153</a>:
Fully deoptimize first level path when deoptimizing nested parameter
paths \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>v3.29.2</h2>
<h2>3.29.2</h2>
<p><em>2023-09-15</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Export <code>TreeshakingPreset</code> type \(<a
href="https://redirect.github.com/rollup/rollup/issues/5131">#5131</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5131">#5131</a>:
fix: exports <code>TreeshakingPreset</code> \(<a
href="https://github.com/moltar"><code>@​moltar</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5134">#5134</a>:
docs: steps to enable symlinks on windows \(<a
href="https://github.com/thebanjomatic"><code>@​thebanjomatic</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5137">#5137</a>:
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
</ul>
<h2>v3.29.1</h2>
<h2>3.29.1</h2>
<p><em>2023-09-10</em></p>
<h3>Bug Fixes</h3>
<!-- raw HTML omitted -->
</blockquote>
<p>... \(truncated\)</p>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href="https://github.com/rollup/rollup/blob/master/CHANGELOG.md">rollup's
changelog</a>.</em></p>
<blockquote>
<h1>rollup changelog</h1>
<h2>4.22.4</h2>
<p><em>2024-09-21</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix a vulnerability in generated code that affects IIFE, UMD and CJS
bundles when run in a browser context \(<a
href="https://redirect.github.com/rollup/rollup/issues/5671">#5671</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5670">#5670</a>:
refactor: Use object.prototype to check for reserved properties \(<a
href="https://github.com/YuHyeonWook"><code>@​YuHyeonWook</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5671">#5671</a>:
Fix DOM Clobbering CVE \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.3</h2>
<p><em>2024-09-21</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Ensure that mutations in modules without side effects are observed
while properly handling transitive dependencies \(<a
href="https://redirect.github.com/rollup/rollup/issues/5669">#5669</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5669">#5669</a>:
Ensure impure dependencies of pure modules are added \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.2</h2>
<p><em>2024-09-20</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Revert fix for side effect free modules until other issues are
investigated \(<a
href="https://redirect.github.com/rollup/rollup/issues/5667">#5667</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5667">#5667</a>:
Partially revert <a
href="https://redirect.github.com/rollup/rollup/issues/5658">#5658</a>
and re-apply <a
href="https://redirect.github.com/rollup/rollup/issues/5644">#5644</a>
\(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.1</h2>
<p><em>2024-09-20</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Revert <a
href="https://redirect.github.com/rollup/rollup/issues/5644">#5644</a>
&quot;stable chunk hashes&quot; while issues are being investigated</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5663">#5663</a>:
chore\(deps\): update dependency inquirer to v11 \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\], <a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<!-- raw HTML omitted -->
</blockquote>
<p>... \(truncated\)</p>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href="https://github.com/rollup/rollup/commit/dfd233d3a9feb18aa69b49b6c1da0248a4f1c6e3"><code>dfd233d</code></a>
3.29.5</li>
<li><a
href="https://github.com/rollup/rollup/commit/2ef77c00ec2635d42697cff2c0567ccc8db34fb4"><code>2ef77c0</code></a>
Fix DOM Clobbering CVE</li>
<li><a
href="https://github.com/rollup/rollup/commit/a6448b99f725d457e35821b73a865b5c4d4c6a61"><code>a6448b9</code></a>
3.29.4</li>
<li><a
href="https://github.com/rollup/rollup/commit/4e92d60fa90cead39481e3703d26e5d812f43bd1"><code>4e92d60</code></a>
Deoptimize all parameters when losing track of a function \(<a
href="https://redirect.github.com/rollup/rollup/issues/5158">#5158</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/801ffd1a9bebe550b6a0ce665bdca1ead06313de"><code>801ffd1</code></a>
3.29.3</li>
<li><a
href="https://github.com/rollup/rollup/commit/353e4628284b1ef4d8a8b47d895881e5ce6546f4"><code>353e462</code></a>
Fully deoptimize first level path when deoptimizing nested parameter
paths \(#...</li>
<li><a
href="https://github.com/rollup/rollup/commit/a1a89e77fbe06a23229486194970f0813593e9df"><code>a1a89e7</code></a>
chore\(deps\): update dependency
<code>@​vue/eslint-config-typescript</code> to v12 \(<a
href="https://redirect.github.com/rollup/rollup/issues/5148">#5148</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/cc14f7070af8c02ac2d477bda043f3203955291d"><code>cc14f70</code></a>
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://redirect.github.com/rollup/rollup/issues/5149">#5149</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/1e8355b2b68811da24e1d96dea32176b403dc377"><code>1e8355b</code></a>
docs: improve the docs repl appearance in the light mode \(<a
href="https://redirect.github.com/rollup/rollup/issues/5145">#5145</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/5950fc8a6bf6c9f8ef1c7ae05bb8c43d5c313212"><code>5950fc8</code></a>
Adapt branches in REPL workflow</li>
<li>Additional commits viewable in <a
href="https://github.com/rollup/rollup/compare/v3.20.0...v3.29.5">compare
view</a></li>
</ul>
</details>
<br />

\[!\[Dependabot compatibility
score\]\(https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=rollup&package-manager=npm_and_yarn&previous-version=3.20.0&new-version=3.29.5\)\]\(https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores\)
Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.
\[//\]: # \(dependabot-automerge-start\)
\[//\]: # \(dependabot-automerge-end\)
---
<details>
<summary>Dependabot commands and options</summary>
<br />
You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version \(unless you reopen
the PR or upgrade to it yourself\)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version \(unless you reopen
the PR or upgrade to it yourself\)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency \(unless you reopen the
PR or upgrade to it yourself\)
You can disable automated security fix PRs for this repo from the
\[Security Alerts
page\]\(https://github.com/facebook/react/network/alerts\).
</details>
Signed-off-by: dependabot\[bot\] <support@github.com>
Co-authored-by: dependabot\[bot\] <49699333+dependabot\[bot\]@users.noreply.github.com>")[#31072](https://github.com/facebook/react/pull/31072)[)](/facebook/react/commit/db320ea4d910d360ccb83850ccdbc464a77fc1c5 "Bump rollup from 3.20.0 to 3.29.5 \(#31072\)
Bumps \[rollup\]\(https://github.com/rollup/rollup\) from 3.20.0 to 3.29.5.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a
href="https://github.com/rollup/rollup/releases">rollup's
releases</a>.</em></p>
<blockquote>
<h2>v3.29.4</h2>
<h2>3.29.4</h2>
<p><em>2023-09-28</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix static analysis when an exported function uses callbacks \(<a
href="https://redirect.github.com/rollup/rollup/issues/5158">#5158</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5158">#5158</a>:
Deoptimize all parameters when losing track of a function \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>v3.29.3</h2>
<h2>3.29.3</h2>
<p><em>2023-09-24</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix a bug where code was wrongly tree-shaken after mutating function
parameters \(<a
href="https://redirect.github.com/rollup/rollup/issues/5153">#5153</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5145">#5145</a>:
docs: improve the docs repl appearance in the light mode \(<a
href="https://github.com/TrickyPi"><code>@​TrickyPi</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5148">#5148</a>:
chore\(deps\): update dependency
<code>@​vue/eslint-config-typescript</code> to v12 \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5149">#5149</a>:
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5153">#5153</a>:
Fully deoptimize first level path when deoptimizing nested parameter
paths \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>v3.29.2</h2>
<h2>3.29.2</h2>
<p><em>2023-09-15</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Export <code>TreeshakingPreset</code> type \(<a
href="https://redirect.github.com/rollup/rollup/issues/5131">#5131</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5131">#5131</a>:
fix: exports <code>TreeshakingPreset</code> \(<a
href="https://github.com/moltar"><code>@​moltar</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5134">#5134</a>:
docs: steps to enable symlinks on windows \(<a
href="https://github.com/thebanjomatic"><code>@​thebanjomatic</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5137">#5137</a>:
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\]\)</li>
</ul>
<h2>v3.29.1</h2>
<h2>3.29.1</h2>
<p><em>2023-09-10</em></p>
<h3>Bug Fixes</h3>
<!-- raw HTML omitted -->
</blockquote>
<p>... \(truncated\)</p>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href="https://github.com/rollup/rollup/blob/master/CHANGELOG.md">rollup's
changelog</a>.</em></p>
<blockquote>
<h1>rollup changelog</h1>
<h2>4.22.4</h2>
<p><em>2024-09-21</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Fix a vulnerability in generated code that affects IIFE, UMD and CJS
bundles when run in a browser context \(<a
href="https://redirect.github.com/rollup/rollup/issues/5671">#5671</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5670">#5670</a>:
refactor: Use object.prototype to check for reserved properties \(<a
href="https://github.com/YuHyeonWook"><code>@​YuHyeonWook</code></a>\)</li>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5671">#5671</a>:
Fix DOM Clobbering CVE \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.3</h2>
<p><em>2024-09-21</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Ensure that mutations in modules without side effects are observed
while properly handling transitive dependencies \(<a
href="https://redirect.github.com/rollup/rollup/issues/5669">#5669</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5669">#5669</a>:
Ensure impure dependencies of pure modules are added \(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.2</h2>
<p><em>2024-09-20</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Revert fix for side effect free modules until other issues are
investigated \(<a
href="https://redirect.github.com/rollup/rollup/issues/5667">#5667</a>\)</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5667">#5667</a>:
Partially revert <a
href="https://redirect.github.com/rollup/rollup/issues/5658">#5658</a>
and re-apply <a
href="https://redirect.github.com/rollup/rollup/issues/5644">#5644</a>
\(<a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<h2>4.22.1</h2>
<p><em>2024-09-20</em></p>
<h3>Bug Fixes</h3>
<ul>
<li>Revert <a
href="https://redirect.github.com/rollup/rollup/issues/5644">#5644</a>
&quot;stable chunk hashes&quot; while issues are being investigated</li>
</ul>
<h3>Pull Requests</h3>
<ul>
<li><a
href="https://redirect.github.com/rollup/rollup/pull/5663">#5663</a>:
chore\(deps\): update dependency inquirer to v11 \(<a
href="https://github.com/renovate"><code>@​renovate</code></a>\[bot\], <a
href="https://github.com/lukastaegert"><code>@​lukastaegert</code></a>\)</li>
</ul>
<!-- raw HTML omitted -->
</blockquote>
<p>... \(truncated\)</p>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href="https://github.com/rollup/rollup/commit/dfd233d3a9feb18aa69b49b6c1da0248a4f1c6e3"><code>dfd233d</code></a>
3.29.5</li>
<li><a
href="https://github.com/rollup/rollup/commit/2ef77c00ec2635d42697cff2c0567ccc8db34fb4"><code>2ef77c0</code></a>
Fix DOM Clobbering CVE</li>
<li><a
href="https://github.com/rollup/rollup/commit/a6448b99f725d457e35821b73a865b5c4d4c6a61"><code>a6448b9</code></a>
3.29.4</li>
<li><a
href="https://github.com/rollup/rollup/commit/4e92d60fa90cead39481e3703d26e5d812f43bd1"><code>4e92d60</code></a>
Deoptimize all parameters when losing track of a function \(<a
href="https://redirect.github.com/rollup/rollup/issues/5158">#5158</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/801ffd1a9bebe550b6a0ce665bdca1ead06313de"><code>801ffd1</code></a>
3.29.3</li>
<li><a
href="https://github.com/rollup/rollup/commit/353e4628284b1ef4d8a8b47d895881e5ce6546f4"><code>353e462</code></a>
Fully deoptimize first level path when deoptimizing nested parameter
paths \(#...</li>
<li><a
href="https://github.com/rollup/rollup/commit/a1a89e77fbe06a23229486194970f0813593e9df"><code>a1a89e7</code></a>
chore\(deps\): update dependency
<code>@​vue/eslint-config-typescript</code> to v12 \(<a
href="https://redirect.github.com/rollup/rollup/issues/5148">#5148</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/cc14f7070af8c02ac2d477bda043f3203955291d"><code>cc14f70</code></a>
chore\(deps\): lock file maintenance minor/patch updates \(<a
href="https://redirect.github.com/rollup/rollup/issues/5149">#5149</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/1e8355b2b68811da24e1d96dea32176b403dc377"><code>1e8355b</code></a>
docs: improve the docs repl appearance in the light mode \(<a
href="https://redirect.github.com/rollup/rollup/issues/5145">#5145</a>\)</li>
<li><a
href="https://github.com/rollup/rollup/commit/5950fc8a6bf6c9f8ef1c7ae05bb8c43d5c313212"><code>5950fc8</code></a>
Adapt branches in REPL workflow</li>
<li>Additional commits viewable in <a
href="https://github.com/rollup/rollup/compare/v3.20.0...v3.29.5">compare
view</a></li>
</ul>
</details>
<br />

\[!\[Dependabot compatibility
score\]\(https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=rollup&package-manager=npm_and_yarn&previous-version=3.20.0&new-version=3.29.5\)\]\(https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores\)
Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.
\[//\]: # \(dependabot-automerge-start\)
\[//\]: # \(dependabot-automerge-end\)
---
<details>
<summary>Dependabot commands and options</summary>
<br />
You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version \(unless you reopen
the PR or upgrade to it yourself\)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version \(unless you reopen
the PR or upgrade to it yourself\)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency \(unless you reopen the
PR or upgrade to it yourself\)
You can disable automated security fix PRs for this repo from the
\[Security Alerts
page\]\(https://github.com/facebook/react/network/alerts\).
</details>
Signed-off-by: dependabot\[bot\] <support@github.com>
Co-authored-by: dependabot\[bot\] <49699333+dependabot\[bot\]@users.noreply.github.com>")| Sep 26, 2024  
[react.code-workspace](/facebook/react/blob/main/react.code-workspace "react.code-workspace")| [react.code-workspace](/facebook/react/blob/main/react.code-workspace "react.code-workspace")| [created a vscode workspace file for the repo (](/facebook/react/commit/dfd30974aba0d7740e084f70a8af1cd4c54bb273 "created a vscode workspace file for the repo \(#29830\)
### Summary
Similarly to what has been done on the `react-native` repo in
https://github.com/facebook/react-native/pull/43851, this PR adds a
`react.code-workspace` workspace file when using VSCode.
This disables the built-in TypeScript Language Service for `.js`, `.ts`,
and `.json` files, recommends extensions, enables `formatOnSave`,
excludes certain files in search, and configures Flow language support.
### Motivation
This is a DevX benefit for **React contributors** using open source VS
Code. Without this, it takes quite a long time to set up the environment
in vscode to work well.
For me the following two points took around an hour each to figure out,
but for others it may take even more \(screenshots can be found below\):
* Search with "files to include" was searching in ignored files
\(compiled/generated\)
* Configure language validation and prettier both in "packages" that use
flow and in the "compiler" folder that uses typescript.
### Recommended extensions
NOTE: The recommended extensions list is currently minimal — happy to
extend this now or in future, but let's aim to keep these conservative
at the moment.
* Flow — language support
* EditorConfig — formatting based on `.editorconfig`, all file types
* Prettier — formatting for JS* files
* ESLint — linter for JS* files
### Why `react.code-workspace`?
`.code-workspace` files have slight extra behaviours over a `.vscode/`
directory:
* Allows user to opt-in or skip.
* Allows double-click launching from file managers.
* Allows base folder \(and any subfolders in future\) to be opened with
local file tree scope \(useful in fbsource!\)
* \(Minor point\) Single config file over multiple files.
https://code.visualstudio.com/docs/editor/workspaces
### Test plan
Against a new un-configured copy of Visual Studio Code Insiders.
**Without workspace config**
❌ .js files raise errors by default \(built-in TypeScript language
service\)
❌ When using the Flow VS Code extension, the wrong version \(global\) of
Flow is used.
<img width="978" alt="Screenshot 2024-06-10 at 16 03 59"
src="https://github.com/facebook/react/assets/5188459/17e19ba4-bac2-48ea-9b35-6b4b6242bcc1">
❌ Searching in excluded files when the "include" field is specified
<img width="502" alt="Screenshot 2024-06-10 at 15 41 24"
src="https://github.com/facebook/react/assets/5188459/00248755-7905-41bc-b303-498ddba82108">
**With workspace config**
✅ Built-in TypeScript Language Service is disabled for .js files, but
still enabled for .ts\[x\] files
!\[Screen Recording 2024-06-13 at 12 21
24\]\(https://github.com/facebook/react/assets/5188459/6048218c-f316-44cd-8771-d2d0e848991d\)
✅ Flow language support is configured correctly against flow version in
package.json
<img width="993" alt="Screenshot 2024-06-10 at 16 03 44"
src="https://github.com/facebook/react/assets/5188459/b54e143c-a013-4e73-8995-3af7b5a03e36">
✅ Does not search in excluded files when the "include" field is
specified
<img width="555" alt="Screenshot 2024-06-10 at 15 39 18"
src="https://github.com/facebook/react/assets/5188459/dd3e5344-84fb-4b5d-8689-4c8bd28168e0">
✅ Workspace config is suggested when folder is opened in VS Code
!\[image\]\(https://github.com/facebook/react/assets/5188459/7434261f-1057-4954-9885-b057a10684ad\)
✅ Dialog is shown on workspace launch with recommended VS Code
extensions
<img width="580" alt="Screenshot 2024-06-10 at 15 40 52"
src="https://github.com/facebook/react/assets/5188459/c6406fb6-92a0-47f1-8497-4ffe899bb6a9">")[#29830](https://github.com/facebook/react/pull/29830)[)](/facebook/react/commit/dfd30974aba0d7740e084f70a8af1cd4c54bb273 "created a vscode workspace file for the repo \(#29830\)
### Summary
Similarly to what has been done on the `react-native` repo in
https://github.com/facebook/react-native/pull/43851, this PR adds a
`react.code-workspace` workspace file when using VSCode.
This disables the built-in TypeScript Language Service for `.js`, `.ts`,
and `.json` files, recommends extensions, enables `formatOnSave`,
excludes certain files in search, and configures Flow language support.
### Motivation
This is a DevX benefit for **React contributors** using open source VS
Code. Without this, it takes quite a long time to set up the environment
in vscode to work well.
For me the following two points took around an hour each to figure out,
but for others it may take even more \(screenshots can be found below\):
* Search with "files to include" was searching in ignored files
\(compiled/generated\)
* Configure language validation and prettier both in "packages" that use
flow and in the "compiler" folder that uses typescript.
### Recommended extensions
NOTE: The recommended extensions list is currently minimal — happy to
extend this now or in future, but let's aim to keep these conservative
at the moment.
* Flow — language support
* EditorConfig — formatting based on `.editorconfig`, all file types
* Prettier — formatting for JS* files
* ESLint — linter for JS* files
### Why `react.code-workspace`?
`.code-workspace` files have slight extra behaviours over a `.vscode/`
directory:
* Allows user to opt-in or skip.
* Allows double-click launching from file managers.
* Allows base folder \(and any subfolders in future\) to be opened with
local file tree scope \(useful in fbsource!\)
* \(Minor point\) Single config file over multiple files.
https://code.visualstudio.com/docs/editor/workspaces
### Test plan
Against a new un-configured copy of Visual Studio Code Insiders.
**Without workspace config**
❌ .js files raise errors by default \(built-in TypeScript language
service\)
❌ When using the Flow VS Code extension, the wrong version \(global\) of
Flow is used.
<img width="978" alt="Screenshot 2024-06-10 at 16 03 59"
src="https://github.com/facebook/react/assets/5188459/17e19ba4-bac2-48ea-9b35-6b4b6242bcc1">
❌ Searching in excluded files when the "include" field is specified
<img width="502" alt="Screenshot 2024-06-10 at 15 41 24"
src="https://github.com/facebook/react/assets/5188459/00248755-7905-41bc-b303-498ddba82108">
**With workspace config**
✅ Built-in TypeScript Language Service is disabled for .js files, but
still enabled for .ts\[x\] files
!\[Screen Recording 2024-06-13 at 12 21
24\]\(https://github.com/facebook/react/assets/5188459/6048218c-f316-44cd-8771-d2d0e848991d\)
✅ Flow language support is configured correctly against flow version in
package.json
<img width="993" alt="Screenshot 2024-06-10 at 16 03 44"
src="https://github.com/facebook/react/assets/5188459/b54e143c-a013-4e73-8995-3af7b5a03e36">
✅ Does not search in excluded files when the "include" field is
specified
<img width="555" alt="Screenshot 2024-06-10 at 15 39 18"
src="https://github.com/facebook/react/assets/5188459/dd3e5344-84fb-4b5d-8689-4c8bd28168e0">
✅ Workspace config is suggested when folder is opened in VS Code
!\[image\]\(https://github.com/facebook/react/assets/5188459/7434261f-1057-4954-9885-b057a10684ad\)
✅ Dialog is shown on workspace launch with recommended VS Code
extensions
<img width="580" alt="Screenshot 2024-06-10 at 15 40 52"
src="https://github.com/facebook/react/assets/5188459/c6406fb6-92a0-47f1-8497-4ffe899bb6a9">")| Jun 13, 2024  
[yarn.lock](/facebook/react/blob/main/yarn.lock "yarn.lock")| [yarn.lock](/facebook/react/blob/main/yarn.lock "yarn.lock")| [Bump next prerelease version numbers (](/facebook/react/commit/c86542b240375f95dfd14af5b8ec39e29881e74d "Bump next prerelease version numbers \(#31676\)
Updates the version numbers in the prerelease \(canary and experimental\)
channels.
---------
Co-authored-by: Jack Pope <jackpope1@gmail.com>")[#31676](https://github.com/facebook/react/pull/31676)[)](/facebook/react/commit/c86542b240375f95dfd14af5b8ec39e29881e74d "Bump next prerelease version numbers \(#31676\)
Updates the version numbers in the prerelease \(canary and experimental\)
channels.
---------
Co-authored-by: Jack Pope <jackpope1@gmail.com>")| Dec 13, 2024  
View all files  
  
## Repository files navigation

  * [README](#)
  * [Code of conduct](#)
  * [MIT license](#)
  * [Security](#)



# [React](https://react.dev/) · [](https://github.com/facebook/react/blob/main/LICENSE) [](https://www.npmjs.com/package/react) [![\(Runtime\) Build and Test](https://github.com/facebook/react/actions/workflows/runtime_build_and_test.yml/badge.svg)](https://github.com/facebook/react/actions/workflows/runtime_build_and_test.yml) [![\(Compiler\) TypeScript](https://github.com/facebook/react/actions/workflows/compiler_typescript.yml/badge.svg?branch=main)](https://github.com/facebook/react/actions/workflows/compiler_typescript.yml) [](https://legacy.reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

[](#react------)

React is a JavaScript library for building user interfaces.

  * **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
  * **Component-Based:** Build encapsulated components that manage their own state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
  * **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using [Node](https://nodejs.org/en) and power mobile apps using [React Native](https://reactnative.dev/).



[Learn how to use React in your project](https://react.dev/learn).

## Installation

[](#installation)

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need** :

  * Use [Quick Start](https://react.dev/learn) to get a taste of React.
  * [Add React to an Existing Project](https://react.dev/learn/add-react-to-an-existing-project) to use as little or as much React as you need.
  * [Create a New React App](https://react.dev/learn/start-a-new-react-project) if you're looking for a powerful JavaScript toolchain.



## Documentation

[](#documentation)

You can find the React documentation [on the website](https://react.dev/).

Check out the [Getting Started](https://react.dev/learn) page for a quick overview.

The documentation is divided into several sections:

  * [Quick Start](https://react.dev/learn)
  * [Tutorial](https://react.dev/learn/tutorial-tic-tac-toe)
  * [Thinking in React](https://react.dev/learn/thinking-in-react)
  * [Installation](https://react.dev/learn/installation)
  * [Describing the UI](https://react.dev/learn/describing-the-ui)
  * [Adding Interactivity](https://react.dev/learn/adding-interactivity)
  * [Managing State](https://react.dev/learn/managing-state)
  * [Advanced Guides](https://react.dev/learn/escape-hatches)
  * [API Reference](https://react.dev/reference/react)
  * [Where to Get Support](https://react.dev/community)
  * [Contributing Guide](https://legacy.reactjs.org/docs/how-to-contribute.html)



You can improve it by sending pull requests to [this repository](https://github.com/reactjs/react.dev).

## Examples

[](#examples)

We have several examples [on the website](https://react.dev/). Here is the first one to get you started:

```
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
 return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```


This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://react.dev/learn#writing-markup-with-jsx). JSX is not required to use React, but it makes code more readable, and writing it feels like writing HTML.

## Contributing

[](#contributing)

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

[](#code-of-conduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://legacy.reactjs.org/docs/how-to-contribute.html)

[](#contributing-guide)

Read our [contributing guide](https://legacy.reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### [Good First Issues](https://github.com/facebook/react/labels/good%20first%20issue)

[](#good-first-issues)

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

[](#license)

React is [MIT licensed](/facebook/react/blob/main/LICENSE).

## About

The library for web and native user interfaces. 

[react.dev](https://react.dev "https://react.dev")

### Topics

[ react ](/topics/react "Topic: react") [ javascript ](/topics/javascript "Topic: javascript") [ library ](/topics/library "Topic: library") [ ui ](/topics/ui "Topic: ui") [ frontend ](/topics/frontend "Topic: frontend") [ declarative ](/topics/declarative "Topic: declarative")

### Resources

[ Readme ](#readme-ov-file)

### License

[ MIT license ](#MIT-1-ov-file)

### Code of conduct

[ Code of conduct ](#coc-ov-file)

### Security policy

[ Security policy ](#security-ov-file)

[ Activity](/facebook/react/activity)

[ Custom properties](/facebook/react/custom-properties)

### Stars

[ **231k** stars](/facebook/react/stargazers)

### Watchers

[ **6.6k** watching](/facebook/react/watchers)

### Forks

[ **47.2k** forks](/facebook/react/forks)

[ Report repository ](/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact&report=facebook+%28user%29)

##  [Releases 103](/facebook/react/releases)

[ 19.0.0 (December 5, 2024) Latest  Dec 5, 2024 ](/facebook/react/releases/tag/v19.0.0)

[+ 102 releases](/facebook/react/releases)

##  [Used by 25.8m](/facebook/react/network/dependents)

[ + 25,798,629  ](/facebook/react/network/dependents)

##  [Contributors 1,676](/facebook/react/graphs/contributors)

  * [ ](https://github.com/zpao)
  * [ ](https://github.com/gaearon)
  * [ ](https://github.com/sebmarkbage)
  * [ ](https://github.com/acdlite)
  * [ ](https://github.com/sophiebits)
  * [ ](https://github.com/josephsavona)
  * [ ](https://github.com/poteto)
  * [ ](https://github.com/jimfb)
  * [ ](https://github.com/trueadm)
  * [ ](https://github.com/bvaughn)
  * [ ](https://github.com/gsathya)
  * [ ](https://github.com/petehunt)
  * [ ](https://github.com/mofeiZ)
  * [ ](https://github.com/kassens)



[+ 1,662 contributors](/facebook/react/graphs/contributors)

## Languages

  * [ JavaScript 63.4% ](/facebook/react/search?l=javascript)
  * [ TypeScript 22.5% ](/facebook/react/search?l=typescript)
  * [ Rust 10.7% ](/facebook/react/search?l=rust)
  * [ HTML 1.4% ](/facebook/react/search?l=html)
  * [ CSS 0.9% ](/facebook/react/search?l=css)
  * [ C++ 0.6% ](/facebook/react/search?l=c%2B%2B)
  * Other 0.5%



## Footer

[ ](https://github.com "GitHub") © 2024 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You can’t perform that action at this time. 
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

# React

The library for web and native user interfaces

[Learn React](/learn)[API Reference](/reference/react)

## Create user interfaces from components

React lets you build user interfaces out of individual pieces called components. Create your own React components like `Thumbnail`, `LikeButton`, and `Video`. Then combine them into entire screens, pages, and apps.

### Video.js

```


function Video({ video }) {

 return (

  <div>

   <Thumbnail video={video} />

   <a href={video.url}>

    <h3>{video.title}</h3>

    <p>{video.description}</p>

   </a>

   <LikeButton video={video} />

  </div>

 );

}


```


My videoVideo description

Whether you work on your own or with thousands of other developers, using React feels the same. It is designed to let you seamlessly combine components written by independent people, teams, and organizations.

## Write components with code and markup

React components are JavaScript functions. Want to show some content conditionally? Use an `if` statement. Displaying a list? Try array `map()`. Learning React is learning programming.

### VideoList.js

```


function VideoList({ videos, emptyHeading }) {

 const count = videos.length;

 let heading = emptyHeading;

 if (count > 0) {

  const noun = count > 1 ? 'Videos' : 'Video';

  heading = count + ' ' + noun;

 }

 return (

  <section>

   <h2>{heading}</h2>

   {videos.map(video =>

    <Video key={video.id} video={video} />

   )}

  </section>

 );

}


```


## 3 Videos

First videoVideo description

Second videoVideo description

Third videoVideo description

This markup syntax is called JSX. It is a JavaScript syntax extension popularized by React. Putting JSX markup close to related rendering logic makes React components easy to create, maintain, and delete.

## Add interactivity wherever you need it

React components receive data and return what should appear on the screen. You can pass them new data in response to an interaction, like when the user types into an input. React will then update the screen to match the new data.

### SearchableVideoList.js

```


import { useState } from 'react';

function SearchableVideoList({ videos }) {

 const [searchText, setSearchText] = useState('');

 const foundVideos = filterVideos(videos, searchText);

 return (

  <>

   <SearchInput

    value={searchText}

    onChange={newText => setSearchText(newText)} />

   <VideoList

    videos={foundVideos}

    emptyHeading={`No matches for “${searchText}”`} />

  </>

 );

}


```


example.com/videos.html

# React Videos

A brief history of React

Search

## 5 Videos

[](https://www.youtube.com/watch?v=8pDqJVdNa44)### [React: The DocumentaryThe origin story of React](https://www.youtube.com/watch?v=8pDqJVdNa44)

[](https://www.youtube.com/watch?v=x7cQ3mrcKaY)### [Rethinking Best PracticesPete Hunt (2013)](https://www.youtube.com/watch?v=x7cQ3mrcKaY)

[](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)### [Introducing React NativeTom Occhino (2015)](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)

[](https://www.youtube.com/watch?v=V-QO-KO90iQ)### [Introducing React HooksSophie Alpert and Dan Abramov (2018)](https://www.youtube.com/watch?v=V-QO-KO90iQ)

[](https://www.youtube.com/watch?v=TQQPAU21ZUw)### [Introducing Server ComponentsDan Abramov and Lauren Tan (2020)](https://www.youtube.com/watch?v=TQQPAU21ZUw)

You don’t have to build your whole page in React. Add React to your existing HTML page, and render interactive React components anywhere on it.

[Add React to your page](/learn/add-react-to-an-existing-project)

## Go full-stack with a framework

React is a library. It lets you put components together, but it doesn’t prescribe how to do routing and data fetching. To build an entire app with React, we recommend a full-stack React framework like [Next.js](https://nextjs.org) or [Remix](https://remix.run).

### confs/[slug].js

```


import { db } from './database.js';

import { Suspense } from 'react';

async function ConferencePage({ slug }) {

 const conf = await db.Confs.find({ slug });

 return (

  <ConferenceLayout conf={conf}>

   <Suspense fallback={<TalksLoading />}>

    <Talks confId={conf.id} />

   </Suspense>

  </ConferenceLayout>

 );

}

async function Talks({ confId }) {

 const talks = await db.Talks.findAll({ confId });

 const videos = talks.map(talk => talk.video);

 return <SearchableVideoList videos={videos} />;

}


```


example.com/confs/react-conf-2021

React Conf 2021React Conf 2019

Search

## 19 Videos

[React Conf](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)### [React 18 KeynoteThe React Team](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)

[React Conf](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)### [React 18 for App DevelopersShruti Kapoor](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)

[React Conf](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)### [Streaming Server Rendering with SuspenseShaundai Person](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)

[React Conf](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)### [The First React Working GroupAakansha Doshi](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)

[React Conf](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)### [React Developer ToolingBrian Vaughn](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)

[React Conf](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)### [React without memoXuan Huang (黄玄)](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)

[React Conf](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)### [React Docs KeynoteRachel Nabors](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)

[React Conf](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)### [Things I Learnt from the New React DocsDebbie O'Brien](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)

[React Conf](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)### [Learning in the BrowserSarah Rainsberger](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)

[React Conf](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)### [The ROI of Designing with ReactLinton Ye](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)

[React Conf](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)### [Interactive Playgrounds with ReactDelba de Oliveira](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)

[React Conf](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)### [Re-introducing RelayRobert Balicki](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)

[React Conf](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)### [React Native DesktopEric Rozell and Steven Moyes](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)

[React Conf](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)### [On-device Machine Learning for React NativeRoman Rädle](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)

[React Conf](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)### [React 18 for External Store LibrariesDaishi Kato](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)

[React Conf](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)### [Building Accessible Components with React 18Diego Haz](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)

[React Conf](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)### [Accessible Japanese Form Components with ReactTafu Nakazaki](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)

[React Conf](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)### [UI Tools for ArtistsLyle Troxell](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)

[React Conf](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)### [Hydrogen + React 18Helen Lin](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)

React is also an architecture. Frameworks that implement it let you fetch data in asynchronous components that run on the server or even during the build. Read data from a file or a database, and pass it down to your interactive components.

[Get started with a framework](/learn/start-a-new-react-project)

## Use the best from every platform

People love web and native apps for different reasons. React lets you build both web apps and native apps using the same skills. It leans upon each platform’s unique strengths to let your interfaces feel just right on every platform.

example.com

#### Stay true to the web

People expect web app pages to load fast. On the server, React lets you start streaming HTML while you’re still fetching data, progressively filling in the remaining content before any JavaScript code loads. On the client, React can use standard web APIs to keep your UI responsive even in the middle of rendering.

9:40 AM

#### Go truly native

People expect native apps to look and feel like their platform. [React Native](https://reactnative.dev) and [Expo](https://github.com/expo/expo) let you build apps in React for Android, iOS, and more. They look and feel native because their UIs _are_ truly native. It’s not a web view—your React components render real Android and iOS views provided by the platform.

With React, you can be a web _and_ a native developer. Your team can ship to many platforms without sacrificing the user experience. Your organization can bridge the platform silos, and form teams that own entire features end-to-end.

[Build for native platforms](https://reactnative.dev/)

## Upgrade when the future is ready

React approaches changes with care. Every React commit is tested on business-critical surfaces with over a billion users. Over 100,000 React components at Meta help validate every migration strategy.

The React team is always researching how to improve React. Some research takes years to pay off. React has a high bar for taking a research idea into production. Only proven approaches become a part of React.

[Read more React news](/blog)

Latest React News

## [React 19December 05, 2024](/blog/2024/12/05/react-19)

## [React Compiler Beta Release and RoadmapOctober 21, 2024](/blog/2024/10/21/react-compiler-beta-release)

## [React Conf 2024 RecapMay 22, 2024](/blog/2024/05/22/react-conf-2024-recap)

## [React 19 RCApril 25, 2024](/blog/2024/04/25/react-19)

[Read more React news](/blog)

## Join a community of millions

You’re not alone. Two million developers from all over the world visit the React docs every month. React is something that people and teams can agree on.

This is why React is more than a library, an architecture, or even an ecosystem. React is a community. It’s a place where you can ask for help, find opportunities, and meet new friends. You will meet both developers and designers, beginners and experts, researchers and artists, teachers and students. Our backgrounds may be very different, but React lets us all create user interfaces together.

## Welcome to the React community

[Get Started](/learn)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

# React

The library for web and native user interfaces

[Learn React](/learn)[API Reference](/reference/react)

## Create user interfaces from components

React lets you build user interfaces out of individual pieces called components. Create your own React components like `Thumbnail`, `LikeButton`, and `Video`. Then combine them into entire screens, pages, and apps.

### Video.js

```


function Video({ video }) {

 return (

  <div>

   <Thumbnail video={video} />

   <a href={video.url}>

    <h3>{video.title}</h3>

    <p>{video.description}</p>

   </a>

   <LikeButton video={video} />

  </div>

 );

}


```


My videoVideo description

Whether you work on your own or with thousands of other developers, using React feels the same. It is designed to let you seamlessly combine components written by independent people, teams, and organizations.

## Write components with code and markup

React components are JavaScript functions. Want to show some content conditionally? Use an `if` statement. Displaying a list? Try array `map()`. Learning React is learning programming.

### VideoList.js

```


function VideoList({ videos, emptyHeading }) {

 const count = videos.length;

 let heading = emptyHeading;

 if (count > 0) {

  const noun = count > 1 ? 'Videos' : 'Video';

  heading = count + ' ' + noun;

 }

 return (

  <section>

   <h2>{heading}</h2>

   {videos.map(video =>

    <Video key={video.id} video={video} />

   )}

  </section>

 );

}


```


## 3 Videos

First videoVideo description

Second videoVideo description

Third videoVideo description

This markup syntax is called JSX. It is a JavaScript syntax extension popularized by React. Putting JSX markup close to related rendering logic makes React components easy to create, maintain, and delete.

## Add interactivity wherever you need it

React components receive data and return what should appear on the screen. You can pass them new data in response to an interaction, like when the user types into an input. React will then update the screen to match the new data.

### SearchableVideoList.js

```


import { useState } from 'react';

function SearchableVideoList({ videos }) {

 const [searchText, setSearchText] = useState('');

 const foundVideos = filterVideos(videos, searchText);

 return (

  <>

   <SearchInput

    value={searchText}

    onChange={newText => setSearchText(newText)} />

   <VideoList

    videos={foundVideos}

    emptyHeading={`No matches for “${searchText}”`} />

  </>

 );

}


```


example.com/videos.html

# React Videos

A brief history of React

Search

## 5 Videos

[](https://www.youtube.com/watch?v=8pDqJVdNa44)### [React: The DocumentaryThe origin story of React](https://www.youtube.com/watch?v=8pDqJVdNa44)

[](https://www.youtube.com/watch?v=x7cQ3mrcKaY)### [Rethinking Best PracticesPete Hunt (2013)](https://www.youtube.com/watch?v=x7cQ3mrcKaY)

[](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)### [Introducing React NativeTom Occhino (2015)](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)

[](https://www.youtube.com/watch?v=V-QO-KO90iQ)### [Introducing React HooksSophie Alpert and Dan Abramov (2018)](https://www.youtube.com/watch?v=V-QO-KO90iQ)

[](https://www.youtube.com/watch?v=TQQPAU21ZUw)### [Introducing Server ComponentsDan Abramov and Lauren Tan (2020)](https://www.youtube.com/watch?v=TQQPAU21ZUw)

You don’t have to build your whole page in React. Add React to your existing HTML page, and render interactive React components anywhere on it.

[Add React to your page](/learn/add-react-to-an-existing-project)

## Go full-stack with a framework

React is a library. It lets you put components together, but it doesn’t prescribe how to do routing and data fetching. To build an entire app with React, we recommend a full-stack React framework like [Next.js](https://nextjs.org) or [Remix](https://remix.run).

### confs/[slug].js

```


import { db } from './database.js';

import { Suspense } from 'react';

async function ConferencePage({ slug }) {

 const conf = await db.Confs.find({ slug });

 return (

  <ConferenceLayout conf={conf}>

   <Suspense fallback={<TalksLoading />}>

    <Talks confId={conf.id} />

   </Suspense>

  </ConferenceLayout>

 );

}

async function Talks({ confId }) {

 const talks = await db.Talks.findAll({ confId });

 const videos = talks.map(talk => talk.video);

 return <SearchableVideoList videos={videos} />;

}


```


example.com/confs/react-conf-2021

React Conf 2021React Conf 2019

Search

## 19 Videos

[React Conf](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)### [React 18 KeynoteThe React Team](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)

[React Conf](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)### [React 18 for App DevelopersShruti Kapoor](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)

[React Conf](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)### [Streaming Server Rendering with SuspenseShaundai Person](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)

[React Conf](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)### [The First React Working GroupAakansha Doshi](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)

[React Conf](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)### [React Developer ToolingBrian Vaughn](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)

[React Conf](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)### [React without memoXuan Huang (黄玄)](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)

[React Conf](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)### [React Docs KeynoteRachel Nabors](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)

[React Conf](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)### [Things I Learnt from the New React DocsDebbie O'Brien](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)

[React Conf](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)### [Learning in the BrowserSarah Rainsberger](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)

[React Conf](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)### [The ROI of Designing with ReactLinton Ye](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)

[React Conf](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)### [Interactive Playgrounds with ReactDelba de Oliveira](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)

[React Conf](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)### [Re-introducing RelayRobert Balicki](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)

[React Conf](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)### [React Native DesktopEric Rozell and Steven Moyes](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)

[React Conf](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)### [On-device Machine Learning for React NativeRoman Rädle](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)

[React Conf](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)### [React 18 for External Store LibrariesDaishi Kato](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)

[React Conf](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)### [Building Accessible Components with React 18Diego Haz](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)

[React Conf](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)### [Accessible Japanese Form Components with ReactTafu Nakazaki](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)

[React Conf](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)### [UI Tools for ArtistsLyle Troxell](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)

[React Conf](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)### [Hydrogen + React 18Helen Lin](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)

React is also an architecture. Frameworks that implement it let you fetch data in asynchronous components that run on the server or even during the build. Read data from a file or a database, and pass it down to your interactive components.

[Get started with a framework](/learn/start-a-new-react-project)

## Use the best from every platform

People love web and native apps for different reasons. React lets you build both web apps and native apps using the same skills. It leans upon each platform’s unique strengths to let your interfaces feel just right on every platform.

example.com

#### Stay true to the web

People expect web app pages to load fast. On the server, React lets you start streaming HTML while you’re still fetching data, progressively filling in the remaining content before any JavaScript code loads. On the client, React can use standard web APIs to keep your UI responsive even in the middle of rendering.

9:40 AM

#### Go truly native

People expect native apps to look and feel like their platform. [React Native](https://reactnative.dev) and [Expo](https://github.com/expo/expo) let you build apps in React for Android, iOS, and more. They look and feel native because their UIs _are_ truly native. It’s not a web view—your React components render real Android and iOS views provided by the platform.

With React, you can be a web _and_ a native developer. Your team can ship to many platforms without sacrificing the user experience. Your organization can bridge the platform silos, and form teams that own entire features end-to-end.

[Build for native platforms](https://reactnative.dev/)

## Upgrade when the future is ready

React approaches changes with care. Every React commit is tested on business-critical surfaces with over a billion users. Over 100,000 React components at Meta help validate every migration strategy.

The React team is always researching how to improve React. Some research takes years to pay off. React has a high bar for taking a research idea into production. Only proven approaches become a part of React.

[Read more React news](/blog)

Latest React News

## [React 19December 05, 2024](/blog/2024/12/05/react-19)

## [React Compiler Beta Release and RoadmapOctober 21, 2024](/blog/2024/10/21/react-compiler-beta-release)

## [React Conf 2024 RecapMay 22, 2024](/blog/2024/05/22/react-conf-2024-recap)

## [React 19 RCApril 25, 2024](/blog/2024/04/25/react-19)

[Read more React news](/blog)

## Join a community of millions

You’re not alone. Two million developers from all over the world visit the React docs every month. React is something that people and teams can agree on.

This is why React is more than a library, an architecture, or even an ecosystem. React is a community. It’s a place where you can ask for help, find opportunities, and meet new friends. You will meet both developers and designers, beginners and experts, researchers and artists, teachers and students. Our backgrounds may be very different, but React lets us all create user interfaces together.

## Welcome to the React community

[Get Started](/learn)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

# React

The library for web and native user interfaces

[Learn React](/learn)[API Reference](/reference/react)

## Create user interfaces from components

React lets you build user interfaces out of individual pieces called components. Create your own React components like `Thumbnail`, `LikeButton`, and `Video`. Then combine them into entire screens, pages, and apps.

### Video.js

```


function Video({ video }) {

 return (

  <div>

   <Thumbnail video={video} />

   <a href={video.url}>

    <h3>{video.title}</h3>

    <p>{video.description}</p>

   </a>

   <LikeButton video={video} />

  </div>

 );

}


```


My videoVideo description

Whether you work on your own or with thousands of other developers, using React feels the same. It is designed to let you seamlessly combine components written by independent people, teams, and organizations.

## Write components with code and markup

React components are JavaScript functions. Want to show some content conditionally? Use an `if` statement. Displaying a list? Try array `map()`. Learning React is learning programming.

### VideoList.js

```


function VideoList({ videos, emptyHeading }) {

 const count = videos.length;

 let heading = emptyHeading;

 if (count > 0) {

  const noun = count > 1 ? 'Videos' : 'Video';

  heading = count + ' ' + noun;

 }

 return (

  <section>

   <h2>{heading}</h2>

   {videos.map(video =>

    <Video key={video.id} video={video} />

   )}

  </section>

 );

}


```


## 3 Videos

First videoVideo description

Second videoVideo description

Third videoVideo description

This markup syntax is called JSX. It is a JavaScript syntax extension popularized by React. Putting JSX markup close to related rendering logic makes React components easy to create, maintain, and delete.

## Add interactivity wherever you need it

React components receive data and return what should appear on the screen. You can pass them new data in response to an interaction, like when the user types into an input. React will then update the screen to match the new data.

### SearchableVideoList.js

```


import { useState } from 'react';

function SearchableVideoList({ videos }) {

 const [searchText, setSearchText] = useState('');

 const foundVideos = filterVideos(videos, searchText);

 return (

  <>

   <SearchInput

    value={searchText}

    onChange={newText => setSearchText(newText)} />

   <VideoList

    videos={foundVideos}

    emptyHeading={`No matches for “${searchText}”`} />

  </>

 );

}


```


example.com/videos.html

# React Videos

A brief history of React

Search

## 5 Videos

[](https://www.youtube.com/watch?v=8pDqJVdNa44)### [React: The DocumentaryThe origin story of React](https://www.youtube.com/watch?v=8pDqJVdNa44)

[](https://www.youtube.com/watch?v=x7cQ3mrcKaY)### [Rethinking Best PracticesPete Hunt (2013)](https://www.youtube.com/watch?v=x7cQ3mrcKaY)

[](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)### [Introducing React NativeTom Occhino (2015)](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)

[](https://www.youtube.com/watch?v=V-QO-KO90iQ)### [Introducing React HooksSophie Alpert and Dan Abramov (2018)](https://www.youtube.com/watch?v=V-QO-KO90iQ)

[](https://www.youtube.com/watch?v=TQQPAU21ZUw)### [Introducing Server ComponentsDan Abramov and Lauren Tan (2020)](https://www.youtube.com/watch?v=TQQPAU21ZUw)

You don’t have to build your whole page in React. Add React to your existing HTML page, and render interactive React components anywhere on it.

[Add React to your page](/learn/add-react-to-an-existing-project)

## Go full-stack with a framework

React is a library. It lets you put components together, but it doesn’t prescribe how to do routing and data fetching. To build an entire app with React, we recommend a full-stack React framework like [Next.js](https://nextjs.org) or [Remix](https://remix.run).

### confs/[slug].js

```


import { db } from './database.js';

import { Suspense } from 'react';

async function ConferencePage({ slug }) {

 const conf = await db.Confs.find({ slug });

 return (

  <ConferenceLayout conf={conf}>

   <Suspense fallback={<TalksLoading />}>

    <Talks confId={conf.id} />

   </Suspense>

  </ConferenceLayout>

 );

}

async function Talks({ confId }) {

 const talks = await db.Talks.findAll({ confId });

 const videos = talks.map(talk => talk.video);

 return <SearchableVideoList videos={videos} />;

}


```


example.com/confs/react-conf-2021

React Conf 2021React Conf 2019

Search

## 19 Videos

[React Conf](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)### [React 18 KeynoteThe React Team](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)

[React Conf](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)### [React 18 for App DevelopersShruti Kapoor](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)

[React Conf](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)### [Streaming Server Rendering with SuspenseShaundai Person](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)

[React Conf](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)### [The First React Working GroupAakansha Doshi](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)

[React Conf](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)### [React Developer ToolingBrian Vaughn](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)

[React Conf](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)### [React without memoXuan Huang (黄玄)](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)

[React Conf](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)### [React Docs KeynoteRachel Nabors](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)

[React Conf](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)### [Things I Learnt from the New React DocsDebbie O'Brien](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)

[React Conf](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)### [Learning in the BrowserSarah Rainsberger](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)

[React Conf](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)### [The ROI of Designing with ReactLinton Ye](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)

[React Conf](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)### [Interactive Playgrounds with ReactDelba de Oliveira](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)

[React Conf](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)### [Re-introducing RelayRobert Balicki](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)

[React Conf](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)### [React Native DesktopEric Rozell and Steven Moyes](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)

[React Conf](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)### [On-device Machine Learning for React NativeRoman Rädle](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)

[React Conf](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)### [React 18 for External Store LibrariesDaishi Kato](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)

[React Conf](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)### [Building Accessible Components with React 18Diego Haz](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)

[React Conf](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)### [Accessible Japanese Form Components with ReactTafu Nakazaki](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)

[React Conf](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)### [UI Tools for ArtistsLyle Troxell](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)

[React Conf](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)### [Hydrogen + React 18Helen Lin](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)

React is also an architecture. Frameworks that implement it let you fetch data in asynchronous components that run on the server or even during the build. Read data from a file or a database, and pass it down to your interactive components.

[Get started with a framework](/learn/start-a-new-react-project)

## Use the best from every platform

People love web and native apps for different reasons. React lets you build both web apps and native apps using the same skills. It leans upon each platform’s unique strengths to let your interfaces feel just right on every platform.

example.com

#### Stay true to the web

People expect web app pages to load fast. On the server, React lets you start streaming HTML while you’re still fetching data, progressively filling in the remaining content before any JavaScript code loads. On the client, React can use standard web APIs to keep your UI responsive even in the middle of rendering.

9:40 AM

#### Go truly native

People expect native apps to look and feel like their platform. [React Native](https://reactnative.dev) and [Expo](https://github.com/expo/expo) let you build apps in React for Android, iOS, and more. They look and feel native because their UIs _are_ truly native. It’s not a web view—your React components render real Android and iOS views provided by the platform.

With React, you can be a web _and_ a native developer. Your team can ship to many platforms without sacrificing the user experience. Your organization can bridge the platform silos, and form teams that own entire features end-to-end.

[Build for native platforms](https://reactnative.dev/)

## Upgrade when the future is ready

React approaches changes with care. Every React commit is tested on business-critical surfaces with over a billion users. Over 100,000 React components at Meta help validate every migration strategy.

The React team is always researching how to improve React. Some research takes years to pay off. React has a high bar for taking a research idea into production. Only proven approaches become a part of React.

[Read more React news](/blog)

Latest React News

## [React 19December 05, 2024](/blog/2024/12/05/react-19)

## [React Compiler Beta Release and RoadmapOctober 21, 2024](/blog/2024/10/21/react-compiler-beta-release)

## [React Conf 2024 RecapMay 22, 2024](/blog/2024/05/22/react-conf-2024-recap)

## [React 19 RCApril 25, 2024](/blog/2024/04/25/react-19)

[Read more React news](/blog)

## Join a community of millions

You’re not alone. Two million developers from all over the world visit the React docs every month. React is something that people and teams can agree on.

This is why React is more than a library, an architecture, or even an ecosystem. React is a community. It’s a place where you can ask for help, find opportunities, and meet new friends. You will meet both developers and designers, beginners and experts, researchers and artists, teachers and students. Our backgrounds may be very different, but React lets us all create user interfaces together.

## Welcome to the React community

[Get Started](/learn)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")
  * [Installation ](/learn/installation "Installation")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")
  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")
  * [Managing State ](/learn/managing-state "Managing State")
  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

### REACT API

  * [Hooks ](/reference/react "Hooks")
  * [Components ](/reference/react/components "Components")
  * [APIs ](/reference/react/apis "APIs")
  * [Legacy APIs ](/reference/react/legacy "Legacy APIs")

### REACT DOM API

  * [Components ](/reference/react-dom/components "Components")
  * [APIs ](/reference/react-dom "APIs")
  * [Client APIs ](/reference/react-dom/client "Client APIs")
  * [Server APIs ](/reference/react-dom/server "Server APIs")

### GET INVOLVED

  * [React Community ](/community "React Community")

### STAY INFORMED

  * [React Blog ](/blog "React Blog")



Is this page useful?

[React Docs](/)

# React Versions[](#undefined "Link for this heading")

The React docs at [react.dev](https://react.dev) provide documentation for the latest version of React.

We aim to keep the docs updated within major versions, and do not publish versions for each minor or patch version. When a new major is released, we archive the docs for the previous version as `x.react.dev`. See our [versioning policy](/community/versioning-policy) for more info.

You can find an archive of previous major versions below.

## Latest version: 19.0 [](#latest-version "Link for Latest version: 19.0 ")

  * [react.dev](https://react.dev)



## Previous versions [](#previous-versions "Link for Previous versions ")

  * [18.react.dev](https://18.react.dev)
  * [17.react.dev](https://17.react.dev)
  * [16.react.dev](https://16.react.dev)
  * [15.react.dev](https://15.react.dev)



### Note

#### Legacy Docs [](#legacy-docs "Link for Legacy Docs ")

In 2023, we [launched our new docs](/blog/2023/03/16/introducing-react-dev) for React 18 as [react.dev](https://react.dev). The legacy React 18 docs are available at [legacy.reactjs.org](https://legacy.reactjs.org). Versions 17 and below are hosted on legacy sites.

For versions older than React 15, see [15.react.dev](https://15.react.dev).

## Changelog [](#changelog "Link for Changelog ")

### React 19 [](#react-19 "Link for React 19 ")

**Blog Posts**

  * [React v19](/blog/2024/12/05/react-19)
  * [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide)
  * [React Compiler Beta Release](/blog/2024/10/21/react-compiler-beta-release)



**Talks**

  * [React 19 Keynote](https://www.youtube.com/watch?v=lyEKhv8-3n0)
  * [A Roadmap to React 19](https://www.youtube.com/watch?v=R0B2HsSM78s)
  * [What’s new in React 19](https://www.youtube.com/watch?v=AJOGzVygGcY)
  * [React for Two Computers](https://www.youtube.com/watch?v=ozI4V_29fj4)
  * [React Compiler Deep Dive](https://www.youtube.com/watch?v=uA_PVyZP7AI)
  * [React Compiler Case Studies](https://www.youtube.com/watch?v=lvhPq5chokM)
  * [React 19 Deep Dive: Coordinating HTML](https://www.youtube.com/watch?v=IBBN-s77YSI)



**Releases**

  * [v19.0.0 (December, 2024)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1900-december-5-2024)



### React 18 [](#react-18 "Link for React 18 ")

**Blog Posts**

  * [React v18.0](/blog/2022/03/29/react-v18)
  * [How to Upgrade to React 18](/blog/2022/03/08/react-18-upgrade-guide)
  * [The Plan for React 18](/blog/2021/06/08/the-plan-for-react-18)



**Talks**

  * [React 18 Keynote](https://www.youtube.com/watch?v=FZ0cG47msEk)
  * [React 18 for app developers](https://www.youtube.com/watch?v=ytudH8je5ko)
  * [Streaming Server Rendering with Suspense](https://www.youtube.com/watch?v=pj5N-Khihgc)
  * [React without memo](https://www.youtube.com/watch?v=lGEMwh32soc)
  * [React Docs Keynote](https://www.youtube.com/watch?v=mneDaMYOKP8)
  * [React Developer Tooling](https://www.youtube.com/watch?v=oxDfrke8rZg)
  * [The first React Working Group](https://www.youtube.com/watch?v=qn7gRClrC9U)
  * [React 18 for External Store Libraries](https://www.youtube.com/watch?v=oPfSC5bQPR8)



**Releases**

  * [v18.3.1 (April, 2024)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1831-april-26-2024)
  * [v18.3.0 (April, 2024)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1830-april-25-2024)
  * [v18.2.0 (June, 2022)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1820-june-14-2022)
  * [v18.1.0 (April, 2022)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1810-april-26-2022)
  * [v18.0.0 (March 2022)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1800-march-29-2022)



### React 17 [](#react-17 "Link for React 17 ")

**Blog Posts**

  * [React v17.0](https://legacy.reactjs.org/blog/2020/10/20/react-v17.html)
  * [Introducing the New JSX Transform](https://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html)
  * [React v17.0 Release Candidate: No New Features](https://legacy.reactjs.org/blog/2020/08/10/react-v17-rc.html)



**Releases**

  * [v17.0.2 (March 2021)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1702-march-22-2021)
  * [v17.0.1 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1701-october-22-2020)
  * [v17.0.0 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1700-october-20-2020)



### React 16 [](#react-16 "Link for React 16 ")

**Blog Posts**

  * [React v16.0](https://legacy.reactjs.org/blog/2017/09/26/react-v16.0.html)
  * [DOM Attributes in React 16](https://legacy.reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html)
  * [Error Handling in React 16](https://legacy.reactjs.org/blog/2017/07/26/error-handling-in-react-16.html)
  * [React v16.2.0: Improved Support for Fragments](https://legacy.reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html)
  * [React v16.4.0: Pointer Events](https://legacy.reactjs.org/blog/2018/05/23/react-v-16-4.html)
  * [React v16.4.2: Server-side vulnerability fix](https://legacy.reactjs.org/blog/2018/08/01/react-v-16-4-2.html)
  * [React v16.6.0: lazy, memo and contextType](https://legacy.reactjs.org/blog/2018/10/23/react-v-16-6.html)
  * [React v16.7: No, This Is Not the One With Hooks](https://legacy.reactjs.org/blog/2018/12/19/react-v-16-7.html)
  * [React v16.8: The One With Hooks](https://legacy.reactjs.org/blog/2019/02/06/react-v16.8.0.html)
  * [React v16.9.0 and the Roadmap Update](https://legacy.reactjs.org/blog/2019/08/08/react-v16.9.0.html)
  * [React v16.13.0](https://legacy.reactjs.org/blog/2020/02/26/react-v16.13.0.html)



**Releases**

  * [v16.14.0 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16140-october-14-2020)
  * [v16.13.1 (March 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16131-march-19-2020)
  * [v16.13.0 (February 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16130-february-26-2020)
  * [v16.12.0 (November 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16120-november-14-2019)
  * [v16.11.0 (October 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16110-october-22-2019)
  * [v16.10.2 (October 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16102-october-3-2019)
  * [v16.10.1 (September 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16101-september-28-2019)
  * [v16.10.0 (September 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16100-september-27-2019)
  * [v16.9.0 (August 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1690-august-8-2019)
  * [v16.8.6 (March 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1686-march-27-2019)
  * [v16.8.5 (March 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1685-march-22-2019)
  * [v16.8.4 (March 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1684-march-5-2019)
  * [v16.8.3 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1683-february-21-2019)
  * [v16.8.2 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1682-february-14-2019)
  * [v16.8.1 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1681-february-6-2019)
  * [v16.8.0 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1680-february-6-2019)
  * [v16.7.0 (December 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1670-december-19-2018)
  * [v16.6.3 (November 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1663-november-12-2018)
  * [v16.6.2 (November 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1662-november-12-2018)
  * [v16.6.1 (November 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1661-november-6-2018)
  * [v16.6.0 (October 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1660-october-23-2018)
  * [v16.5.2 (September 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1652-september-18-2018)
  * [v16.5.1 (September 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1651-september-13-2018)
  * [v16.5.0 (September 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1650-september-5-2018)
  * [v16.4.2 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1642-august-1-2018)
  * [v16.4.1 (June 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1641-june-13-2018)
  * [v16.4.0 (May 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1640-may-23-2018)
  * [v16.3.3 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1633-august-1-2018)
  * [v16.3.2 (April 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1632-april-16-2018)
  * [v16.3.1 (April 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1631-april-3-2018)
  * [v16.3.0 (March 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1630-march-29-2018)
  * [v16.2.1 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1621-august-1-2018)
  * [v16.2.0 (November 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1620-november-28-2017)
  * [v16.1.2 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1612-august-1-2018)
  * [v16.1.1 (November 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1611-november-13-2017)
  * [v16.1.0 (November 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1610-november-9-2017)
  * [v16.0.1 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1601-august-1-2018)
  * [v16.0 (September 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1600-september-26-2017)



### React 15 [](#react-15 "Link for React 15 ")

**Blog Posts**

  * [React v15.0](https://legacy.reactjs.org/blog/2016/04/07/react-v15.html)
  * [React v15.0 Release Candidate 2](https://legacy.reactjs.org/blog/2016/03/16/react-v15-rc2.html)
  * [React v15.0 Release Candidate](https://legacy.reactjs.org/blog/2016/03/07/react-v15-rc1.html)
  * [New Versioning Scheme](https://legacy.reactjs.org/blog/2016/02/19/new-versioning-scheme.html)
  * [Discontinuing IE 8 Support in React DOM](https://legacy.reactjs.org/blog/2016/01/12/discontinuing-ie8-support.html)
  * [Introducing React’s Error Code System](https://legacy.reactjs.org/blog/2016/07/11/introducing-reacts-error-code-system.html)
  * [React v15.0.1](https://legacy.reactjs.org/blog/2016/04/08/react-v15.0.1.html)
  * [React v15.4.0](https://legacy.reactjs.org/blog/2016/11/16/react-v15.4.0.html)
  * [React v15.5.0](https://legacy.reactjs.org/blog/2017/04/07/react-v15.5.0.html)
  * [React v15.6.0](https://legacy.reactjs.org/blog/2017/06/13/react-v15.6.0.html)
  * [React v15.6.2](https://legacy.reactjs.org/blog/2017/09/25/react-v15.6.2.html)



**Releases**

  * [v15.7.0 (October 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1570-october-14-2020)
  * [v15.6.2 (September 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1562-september-25-2017)
  * [v15.6.1 (June 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1561-june-14-2017)
  * [v15.6.0 (June 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1560-june-13-2017)
  * [v15.5.4 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1554-april-11-2017)
  * [v15.5.3 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1553-april-7-2017)
  * [v15.5.2 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1552-april-7-2017)
  * [v15.5.1 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1551-april-7-2017)
  * [v15.5.0 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1550-april-7-2017)
  * [v15.4.2 (January 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1542-january-6-2017)
  * [v15.4.1 (November 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1541-november-22-2016)
  * [v15.4.0 (November 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1540-november-16-2016)
  * [v15.3.2 (September 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1532-september-19-2016)
  * [v15.3.1 (August 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1531-august-19-2016)
  * [v15.3.0 (July 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1530-july-29-2016)
  * [v15.2.1 (July 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1521-july-8-2016)
  * [v15.2.0 (July 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1520-july-1-2016)
  * [v15.1.0 (May 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1510-may-20-2016)
  * [v15.0.2 (April 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1502-april-29-2016)
  * [v15.0.1 (April 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1501-april-8-2016)
  * [v15.0.0 (April 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1500-april-7-2016)



### React 0.14 [](#react-14 "Link for React 0.14 ")

**Blog Posts**

  * [React v0.14](https://legacy.reactjs.org/blog/2015/10/07/react-v0.14.html)
  * [React v0.14 Release Candidate](https://legacy.reactjs.org/blog/2015/09/10/react-v0.14-rc1.html)
  * [React v0.14 Beta 1](https://legacy.reactjs.org/blog/2015/07/03/react-v0.14-beta-1.html)
  * [New React Developer Tools](https://legacy.reactjs.org/blog/2015/09/02/new-react-developer-tools.html)
  * [New React Devtools Beta](https://legacy.reactjs.org/blog/2015/08/03/new-react-devtools-beta.html)
  * [React v0.14.1](https://legacy.reactjs.org/blog/2015/10/28/react-v0.14.1.html)
  * [React v0.14.2](https://legacy.reactjs.org/blog/2015/11/02/react-v0.14.2.html)
  * [React v0.14.3](https://legacy.reactjs.org/blog/2015/11/18/react-v0.14.3.html)
  * [React v0.14.4](https://legacy.reactjs.org/blog/2015/12/29/react-v0.14.4.html)
  * [React v0.14.8](https://legacy.reactjs.org/blog/2016/03/29/react-v0.14.8.html)



**Releases**

  * [v0.14.10 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#01410-october-14-2020)
  * [v0.14.8 (March 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0148-march-29-2016)
  * [v0.14.7 (January 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0147-january-28-2016)
  * [v0.14.6 (January 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0146-january-6-2016)
  * [v0.14.5 (December 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0145-december-29-2015)
  * [v0.14.4 (December 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0144-december-29-2015)
  * [v0.14.3 (November 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0143-november-18-2015)
  * [v0.14.2 (November 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0142-november-2-2015)
  * [v0.14.1 (October 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0141-october-28-2015)
  * [v0.14.0 (October 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0140-october-7-2015)



### React 0.13 [](#react-13 "Link for React 0.13 ")

**Blog Posts**

  * [React Native v0.4](https://legacy.reactjs.org/blog/2015/04/17/react-native-v0.4.html)
  * [React v0.13](https://legacy.reactjs.org/blog/2015/03/10/react-v0.13.html)
  * [React v0.13 RC2](https://legacy.reactjs.org/blog/2015/03/03/react-v0.13-rc2.html)
  * [React v0.13 RC](https://legacy.reactjs.org/blog/2015/02/24/react-v0.13-rc1.html)
  * [React v0.13.0 Beta 1](https://legacy.reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html)
  * [Streamlining React Elements](https://legacy.reactjs.org/blog/2015/02/24/streamlining-react-elements.html)
  * [Introducing Relay and GraphQL](https://legacy.reactjs.org/blog/2015/02/20/introducing-relay-and-graphql.html)
  * [Introducing React Native](https://legacy.reactjs.org/blog/2015/03/26/introducing-react-native.html)
  * [React v0.13.1](https://legacy.reactjs.org/blog/2015/03/16/react-v0.13.1.html)
  * [React v0.13.2](https://legacy.reactjs.org/blog/2015/04/18/react-v0.13.2.html)
  * [React v0.13.3](https://legacy.reactjs.org/blog/2015/05/08/react-v0.13.3.html)



**Releases**

  * [v0.13.3 (May 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0133-may-8-2015)
  * [v0.13.2 (April 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0132-april-18-2015)
  * [v0.13.1 (March 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0131-march-16-2015)
  * [v0.13.0 (March 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0130-march-10-2015)



### React 0.12 [](#react-12 "Link for React 0.12 ")

**Blog Posts**

  * [React v0.12](https://legacy.reactjs.org/blog/2014/10/28/react-v0.12.html)
  * [React v0.12 RC](https://legacy.reactjs.org/blog/2014/10/16/react-v0.12-rc1.html)
  * [Introducing React Elements](https://legacy.reactjs.org/blog/2014/10/14/introducing-react-elements.html)
  * [React v0.12.2](https://legacy.reactjs.org/blog/2014/12/18/react-v0.12.2.html)



**Releases**

  * [v0.12.2 (December 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0122-december-18-2014)
  * [v0.12.1 (November 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0121-november-18-2014)
  * [v0.12.0 (October 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0120-october-28-2014)



### React 0.11 [](#react-11 "Link for React 0.11 ")

**Blog Posts**

  * [React v0.11](https://legacy.reactjs.org/blog/2014/07/17/react-v0.11.html)
  * [React v0.11 RC](https://legacy.reactjs.org/blog/2014/07/13/react-v0.11-rc1.html)
  * [One Year of Open-Source React](https://legacy.reactjs.org/blog/2014/05/29/one-year-of-open-source-react.html)
  * [The Road to 1.0](https://legacy.reactjs.org/blog/2014/03/28/the-road-to-1.0.html)
  * [React v0.11.1](https://legacy.reactjs.org/blog/2014/07/25/react-v0.11.1.html)
  * [React v0.11.2](https://legacy.reactjs.org/blog/2014/09/16/react-v0.11.2.html)
  * [Introducing the JSX Specificaion](https://legacy.reactjs.org/blog/2014/09/03/introducing-the-jsx-specification.html)



**Releases**

  * [v0.11.2 (September 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0112-september-16-2014)
  * [v0.11.1 (July 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0111-july-24-2014)
  * [v0.11.0 (July 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0110-july-17-2014)



### React 0.10 and below [](#react-10-and-below "Link for React 0.10 and below ")

**Blog Posts**

  * [React v0.10](https://legacy.reactjs.org/blog/2014/03/21/react-v0.10.html)
  * [React v0.10 RC](https://legacy.reactjs.org/blog/2014/03/19/react-v0.10-rc1.html)
  * [React v0.9](https://legacy.reactjs.org/blog/2014/02/20/react-v0.9.html)
  * [React v0.9 RC](https://legacy.reactjs.org/blog/2014/02/16/react-v0.9-rc1.html)
  * [React Chrome Developer Tools](https://legacy.reactjs.org/blog/2014/01/02/react-chrome-developer-tools.html)
  * [React v0.8](https://legacy.reactjs.org/blog/2013/12/19/react-v0.8.0.html)
  * [React v0.5.2, v0.4.2](https://legacy.reactjs.org/blog/2013/12/18/react-v0.5.2-v0.4.2.html)
  * [React v0.5.1](https://legacy.reactjs.org/blog/2013/10/29/react-v0-5-1.html)
  * [React v0.5](https://legacy.reactjs.org/blog/2013/10/16/react-v0.5.0.html)
  * [React v0.4.1](https://legacy.reactjs.org/blog/2013/07/26/react-v0-4-1.html)
  * [React v0.4.0](https://legacy.reactjs.org/blog/2013/07/17/react-v0-4-0.html)
  * [New in React v0.4: Prop Validation and Default Values](https://legacy.reactjs.org/blog/2013/07/11/react-v0-4-prop-validation-and-default-values.html)
  * [New in React v0.4: Autobind by Default](https://legacy.reactjs.org/blog/2013/07/02/react-v0-4-autobind-by-default.html)
  * [React v0.3.3](https://legacy.reactjs.org/blog/2013/07/02/react-v0-4-autobind-by-default.html)



**Releases**

  * [v0.10.0 (March 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0100-march-21-2014)
  * [v0.9.0 (February 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#090-february-20-2014)
  * [v0.8.0 (December 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#080-december-19-2013)
  * [v0.5.2 (December 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#052-042-december-18-2013)
  * [v0.5.1 (October 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#051-october-29-2013)
  * [v0.5.0 (October 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#050-october-16-2013)
  * [v0.4.1 (July 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#041-july-26-2013)
  * [v0.4.0 (July 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#040-july-17-2013)
  * [v0.3.3 (June 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#033-june-20-2013)
  * [v0.3.2 (May 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#032-may-31-2013)
  * [v0.3.1 (May 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#031-may-30-2013)
  * [v0.3.0 (May 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#031-may-30-2013)



### Initial Commit [](#initial-commit "Link for Initial Commit ")

React was open-sourced on May 29, 2013. The initial commit is: `75897c`[: Initial public release](https://github.com/facebook/react/commit/75897c2dcd1dd3a6ca46284dd37e13d22b4b16b4)

See the first blog post: [Why did we build React?](https://legacy.reactjs.org/blog/2013/06/05/why-react.html)

React was open sourced at Facebook Seattle in 2013:

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Latest version: 19.0 ](#latest-version)
  * [Previous versions ](#previous-versions)
  * [Changelog ](#changelog)
  * [React 19 ](#react-19)
  * [React 18 ](#react-18)
  * [React 17 ](#react-17)
  * [React 16 ](#react-16)
  * [React 15 ](#react-15)
  * [React 0.14 ](#react-14)
  * [React 0.13 ](#react-13)
  * [React 0.12 ](#react-12)
  * [React 0.11 ](#react-11)
  * [React 0.10 and below ](#react-10-and-below)
  * [Initial Commit ](#initial-commit)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Quick Start[](#undefined "Link for this heading")

Welcome to the React documentation! This page will give you an introduction to 80% of the React concepts that you will use on a daily basis.

### You will learn

  * How to create and nest components
  * How to add markup and styles
  * How to display data
  * How to render conditions and lists
  * How to respond to events and update the screen
  * How to share data between components



## Creating and nesting components [](#components "Link for Creating and nesting components ")

React apps are made out of _components_. A component is a piece of the UI (user interface) that has its own logic and appearance. A component can be as small as a button, or as large as an entire page.

React components are JavaScript functions that return markup:

```


function MyButton() {

 return (

  <button>I'm a button</button>

 );

}


```


Now that you’ve declared `MyButton`, you can nest it into another component:

```


export default function MyApp() {

 return (

  <div>

   <h1>Welcome to my app</h1>

   <MyButton />

  </div>

 );

}


```


Notice that `<MyButton />` starts with a capital letter. That’s how you know it’s a React component. React component names must always start with a capital letter, while HTML tags must be lowercase.

Have a look at the result:

App.js

App.js

Download ResetFork

99

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

function MyButton() {

return (

<button>

I'm a button

</button>

);

}

export default function MyApp() {

return (

<div>

<h1>Welcome to my app</h1>

<MyButton />

</div>

);

}

[Open on CodeSandboxOpen Sandbox](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

Show more

The `export default` keywords specify the main component in the file. If you’re not familiar with some piece of JavaScript syntax, [MDN](https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export) and [javascript.info](https://javascript.info/import-export) have great references.

## Writing markup with JSX [](#writing-markup-with-jsx "Link for Writing markup with JSX ")

The markup syntax you’ve seen above is called _JSX_. It is optional, but most React projects use JSX for its convenience. All of the [tools we recommend for local development](/learn/installation) support JSX out of the box.

JSX is stricter than HTML. You have to close tags like `<br />`. Your component also can’t return multiple JSX tags. You have to wrap them into a shared parent, like a `<div>...</div>` or an empty `<>...</>` wrapper:

```


function AboutPage() {

 return (

  <>

   <h1>About</h1>

   <p>Hello there.<br />How do you do?</p>

  </>

 );

}


```


If you have a lot of HTML to port to JSX, you can use an [online converter.](https://transform.tools/html-to-jsx)

## Adding styles [](#adding-styles "Link for Adding styles ")

In React, you specify a CSS class with `className`. It works the same way as the HTML `class`[](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class) attribute:

```


<img className="avatar" />


```


Then you write the CSS rules for it in a separate CSS file:

```


/* In your CSS */

.avatar {

 border-radius: 50%;

}


```


React does not prescribe how you add CSS files. In the simplest case, you’ll add a `<link>`[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link) tag to your HTML. If you use a build tool or a framework, consult its documentation to learn how to add a CSS file to your project.

## Displaying data [](#displaying-data "Link for Displaying data ")

JSX lets you put markup into JavaScript. Curly braces let you “escape back” into JavaScript so that you can embed some variable from your code and display it to the user. For example, this will display `user.name`:

```


return (

 <h1>

  {user.name}

 </h1>

);


```


You can also “escape into JavaScript” from JSX attributes, but you have to use curly braces _instead of_ quotes. For example, `className="avatar"` passes the `"avatar"` string as the CSS class, but `src={user.imageUrl}` reads the JavaScript `user.imageUrl` variable value, and then passes that value as the `src` attribute:

```


return (

 <img

  className="avatar"

  src={user.imageUrl}

 />

);


```


You can put more complex expressions inside the JSX curly braces too, for example, [string concatenation](https://javascript.info/operators#string-concatenation-with-binary):

App.js

App.js

Download ResetFork

```
const user = {
 name: 'Hedy Lamarr',
 imageUrl: 'https://i.imgur.com/yXOvdOSs.jpg',
 imageSize: 90,
};
export default function Profile() {
 return (
  <>
   <h1>{user.name}</h1>
   <img
    className="avatar"
    src={user.imageUrl}
    alt={'Photo of ' + user.name}
    style={{
     width: user.imageSize,
     height: user.imageSize
    }}
   />
  </>
 );
}

```


Show more

In the above example, `style={{}}` is not a special syntax, but a regular `{}` object inside the `style={ }` JSX curly braces. You can use the `style` attribute when your styles depend on JavaScript variables.

## Conditional rendering [](#conditional-rendering "Link for Conditional rendering ")

In React, there is no special syntax for writing conditions. Instead, you’ll use the same techniques as you use when writing regular JavaScript code. For example, you can use an `if`[](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) statement to conditionally include JSX:

```


let content;

if (isLoggedIn) {

 content = <AdminPanel />;

} else {

 content = <LoginForm />;

}

return (

 <div>

  {content}

 </div>

);


```


If you prefer more compact code, you can use the [conditional `?` operator.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator) Unlike `if`, it works inside JSX:

```


<div>

 {isLoggedIn ? (

  <AdminPanel />

 ) : (

  <LoginForm />

 )}

</div>


```


When you don’t need the `else` branch, you can also use a shorter [logical `&&` syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#short-circuit_evaluation):

```


<div>

 {isLoggedIn && <AdminPanel />}

</div>


```


All of these approaches also work for conditionally specifying attributes. If you’re unfamiliar with some of this JavaScript syntax, you can start by always using `if...else`.

## Rendering lists [](#rendering-lists "Link for Rendering lists ")

You will rely on JavaScript features like `for`[ loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) and the [array `map()` function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) to render lists of components.

For example, let’s say you have an array of products:

```


const products = [

 { title: 'Cabbage', id: 1 },

 { title: 'Garlic', id: 2 },

 { title: 'Apple', id: 3 },

];


```


Inside your component, use the `map()` function to transform an array of products into an array of `<li>` items:

```


const listItems = products.map(product =>

 <li key={product.id}>

  {product.title}

 </li>

);

return (

 <ul>{listItems}</ul>

);


```


Notice how `<li>` has a `key` attribute. For each item in a list, you should pass a string or a number that uniquely identifies that item among its siblings. Usually, a key should be coming from your data, such as a database ID. React uses your keys to know what happened if you later insert, delete, or reorder the items.

App.js

App.js

Download ResetFork

```
const products = [
 { title: 'Cabbage', isFruit: false, id: 1 },
 { title: 'Garlic', isFruit: false, id: 2 },
 { title: 'Apple', isFruit: true, id: 3 },
];
export default function ShoppingList() {
 const listItems = products.map(product =>
  <li
   key={product.id}
   style={{
    color: product.isFruit ? 'magenta' : 'darkgreen'
   }}
  >
   {product.title}
  </li>
 );
 return (
  <ul>{listItems}</ul>
 );
}

```


Show more

## Responding to events [](#responding-to-events "Link for Responding to events ")

You can respond to events by declaring _event handler_ functions inside your components:

```


function MyButton() {

 function handleClick() {

  alert('You clicked me!');

 }

 return (

  <button onClick={handleClick}>

   Click me

  </button>

 );

}


```


Notice how `onClick={handleClick}` has no parentheses at the end! Do not _call_ the event handler function: you only need to _pass it down_. React will call your event handler when the user clicks the button.

## Updating the screen [](#updating-the-screen "Link for Updating the screen ")

Often, you’ll want your component to “remember” some information and display it. For example, maybe you want to count the number of times a button is clicked. To do this, add _state_ to your component.

First, import `useState`[](/reference/react/useState) from React:

```


import { useState } from 'react';


```


Now you can declare a _state variable_ inside your component:

```


function MyButton() {

 const [count, setCount] = useState(0);

 // ...


```


You’ll get two things from `useState`: the current state (`count`), and the function that lets you update it (`setCount`). You can give them any names, but the convention is to write `[something, setSomething]`.

The first time the button is displayed, `count` will be `0` because you passed `0` to `useState()`. When you want to change state, call `setCount()` and pass the new value to it. Clicking this button will increment the counter:

```


function MyButton() {

 const [count, setCount] = useState(0);

 function handleClick() {

  setCount(count + 1);

 }

 return (

  <button onClick={handleClick}>

   Clicked {count} times

  </button>

 );

}


```


React will call your component function again. This time, `count` will be `1`. Then it will be `2`. And so on.

If you render the same component multiple times, each will get its own state. Click each button separately:

App.js

App.js

Download ResetFork

```
import { useState } from 'react';
export default function MyApp() {
 return (
  <div>
   <h1>Counters that update separately</h1>
   <MyButton />
   <MyButton />
  </div>
 );
}
function MyButton() {
 const [count, setCount] = useState(0);
 function handleClick() {
  setCount(count + 1);
 }
 return (
  <button onClick={handleClick}>
   Clicked {count} times
  </button>
 );
}

```


Show more

Notice how each button “remembers” its own `count` state and doesn’t affect other buttons.

## Using Hooks [](#using-hooks "Link for Using Hooks ")

Functions starting with `use` are called _Hooks_. `useState` is a built-in Hook provided by React. You can find other built-in Hooks in the [API reference.](/reference/react) You can also write your own Hooks by combining the existing ones.

Hooks are more restrictive than other functions. You can only call Hooks _at the top_ of your components (or other Hooks). If you want to use `useState` in a condition or a loop, extract a new component and put it there.

## Sharing data between components [](#sharing-data-between-components "Link for Sharing data between components ")

In the previous example, each `MyButton` had its own independent `count`, and when each button was clicked, only the `count` for the button clicked changed:

Initially, each `MyButton`’s `count` state is `0`

The first `MyButton` updates its `count` to `1`

However, often you’ll need components to _share data and always update together_.

To make both `MyButton` components display the same `count` and update together, you need to move the state from the individual buttons “upwards” to the closest component containing all of them.

In this example, it is `MyApp`:

Initially, `MyApp`’s `count` state is `0` and is passed down to both children

On click, `MyApp` updates its `count` state to `1` and passes it down to both children

Now when you click either button, the `count` in `MyApp` will change, which will change both of the counts in `MyButton`. Here’s how you can express this in code.

First, _move the state up_ from `MyButton` into `MyApp`:

```


export default function MyApp() {

 const [count, setCount] = useState(0);

 function handleClick() {

  setCount(count + 1);

 }

 return (

  <div>

   <h1>Counters that update separately</h1>

   <MyButton />

   <MyButton />

  </div>

 );

}

function MyButton() {

 // ... we're moving code from here ...

}


```


Then, _pass the state down_ from `MyApp` to each `MyButton`, together with the shared click handler. You can pass information to `MyButton` using the JSX curly braces, just like you previously did with built-in tags like `<img>`:

```


export default function MyApp() {

 const [count, setCount] = useState(0);

 function handleClick() {

  setCount(count + 1);

 }

 return (

  <div>

   <h1>Counters that update together</h1>

   <MyButton count={count} onClick={handleClick} />

   <MyButton count={count} onClick={handleClick} />

  </div>

 );

}


```


The information you pass down like this is called _props_. Now the `MyApp` component contains the `count` state and the `handleClick` event handler, and _passes both of them down as props_ to each of the buttons.

Finally, change `MyButton` to _read_ the props you have passed from its parent component:

```


function MyButton({ count, onClick }) {

 return (

  <button onClick={onClick}>

   Clicked {count} times

  </button>

 );

}


```


When you click the button, the `onClick` handler fires. Each button’s `onClick` prop was set to the `handleClick` function inside `MyApp`, so the code inside of it runs. That code calls `setCount(count + 1)`, incrementing the `count` state variable. The new `count` value is passed as a prop to each button, so they all show the new value. This is called “lifting state up”. By moving state up, you’ve shared it between components.

App.js

App.js

Download ResetFork

```
import { useState } from 'react';
export default function MyApp() {
 const [count, setCount] = useState(0);
 function handleClick() {
  setCount(count + 1);
 }
 return (
  <div>
   <h1>Counters that update together</h1>
   <MyButton count={count} onClick={handleClick} />
   <MyButton count={count} onClick={handleClick} />
  </div>
 );
}
function MyButton({ count, onClick }) {
 return (
  <button onClick={onClick}>
   Clicked {count} times
  </button>
 );
}

```


Show more

## Next Steps [](#next-steps "Link for Next Steps ")

By now, you know the basics of how to write React code!

Check out the [Tutorial](/learn/tutorial-tic-tac-toe) to put them into practice and build your first mini-app with React.

[NextTutorial: Tic-Tac-Toe](/learn/tutorial-tic-tac-toe)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Creating and nesting components ](#components)
  * [Writing markup with JSX ](#writing-markup-with-jsx)
  * [Adding styles ](#adding-styles)
  * [Displaying data ](#displaying-data)
  * [Conditional rendering ](#conditional-rendering)
  * [Rendering lists ](#rendering-lists)
  * [Responding to events ](#responding-to-events)
  * [Updating the screen ](#updating-the-screen)
  * [Using Hooks ](#using-hooks)
  * [Sharing data between components ](#sharing-data-between-components)
  * [Next Steps ](#next-steps)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### react@19

  * [Overview ](/reference/react "Overview")
  * [Hooks ](/reference/react/hooks "Hooks")

    * [useActionState ](/reference/react/useActionState "useActionState")
    * [useCallback ](/reference/react/useCallback "useCallback")
    * [useContext ](/reference/react/useContext "useContext")
    * [useDebugValue ](/reference/react/useDebugValue "useDebugValue")
    * [useDeferredValue ](/reference/react/useDeferredValue "useDeferredValue")
    * [useEffect ](/reference/react/useEffect "useEffect")
    * [useId ](/reference/react/useId "useId")
    * [useImperativeHandle ](/reference/react/useImperativeHandle "useImperativeHandle")
    * [useInsertionEffect ](/reference/react/useInsertionEffect "useInsertionEffect")
    * [useLayoutEffect ](/reference/react/useLayoutEffect "useLayoutEffect")
    * [useMemo ](/reference/react/useMemo "useMemo")
    * [useOptimistic ](/reference/react/useOptimistic "useOptimistic")
    * [useReducer ](/reference/react/useReducer "useReducer")
    * [useRef ](/reference/react/useRef "useRef")
    * [useState ](/reference/react/useState "useState")
    * [useSyncExternalStore ](/reference/react/useSyncExternalStore "useSyncExternalStore")
    * [useTransition ](/reference/react/useTransition "useTransition")

  * [Components ](/reference/react/components "Components")

    * [<Fragment> (<>) ](/reference/react/Fragment "<Fragment> \(<>\)")
    * [<Profiler> ](/reference/react/Profiler "<Profiler>")
    * [<StrictMode> ](/reference/react/StrictMode "<StrictMode>")
    * [<Suspense> ](/reference/react/Suspense "<Suspense>")

  * [APIs ](/reference/react/apis "APIs")

    * [act ](/reference/react/act "act")
    * [cache ](/reference/react/cache "cache")
    * [createContext ](/reference/react/createContext "createContext")
    * [lazy ](/reference/react/lazy "lazy")
    * [memo ](/reference/react/memo "memo")
    * [startTransition ](/reference/react/startTransition "startTransition")
    * [use ](/reference/react/use "use")
    * [experimental_taintObjectReference  - This feature is available in the latest Canary](/reference/react/experimental_taintObjectReference "experimental_taintObjectReference")
    * [experimental_taintUniqueValue  - This feature is available in the latest Canary](/reference/react/experimental_taintUniqueValue "experimental_taintUniqueValue")

### react-dom@19

  * [Hooks ](/reference/react-dom/hooks "Hooks")

    * [useFormStatus ](/reference/react-dom/hooks/useFormStatus "useFormStatus")

  * [Components ](/reference/react-dom/components "Components")

    * [Common (e.g. <div>) ](/reference/react-dom/components/common "Common \(e.g. <div>\)")
    * [<form> ](/reference/react-dom/components/form "<form>")
    * [<input> ](/reference/react-dom/components/input "<input>")
    * [<option> ](/reference/react-dom/components/option "<option>")
    * [<progress> ](/reference/react-dom/components/progress "<progress>")
    * [<select> ](/reference/react-dom/components/select "<select>")
    * [<textarea> ](/reference/react-dom/components/textarea "<textarea>")
    * [<link> ](/reference/react-dom/components/link "<link>")
    * [<meta> ](/reference/react-dom/components/meta "<meta>")
    * [<script> ](/reference/react-dom/components/script "<script>")
    * [<style> ](/reference/react-dom/components/style "<style>")
    * [<title> ](/reference/react-dom/components/title "<title>")

  * [APIs ](/reference/react-dom "APIs")

    * [createPortal ](/reference/react-dom/createPortal "createPortal")
    * [flushSync ](/reference/react-dom/flushSync "flushSync")
    * [preconnect ](/reference/react-dom/preconnect "preconnect")
    * [prefetchDNS ](/reference/react-dom/prefetchDNS "prefetchDNS")
    * [preinit ](/reference/react-dom/preinit "preinit")
    * [preinitModule ](/reference/react-dom/preinitModule "preinitModule")
    * [preload ](/reference/react-dom/preload "preload")
    * [preloadModule ](/reference/react-dom/preloadModule "preloadModule")

  * [Client APIs ](/reference/react-dom/client "Client APIs")

    * [createRoot ](/reference/react-dom/client/createRoot "createRoot")
    * [hydrateRoot ](/reference/react-dom/client/hydrateRoot "hydrateRoot")

  * [Server APIs ](/reference/react-dom/server "Server APIs")

    * [renderToPipeableStream ](/reference/react-dom/server/renderToPipeableStream "renderToPipeableStream")
    * [renderToReadableStream ](/reference/react-dom/server/renderToReadableStream "renderToReadableStream")
    * [renderToStaticMarkup ](/reference/react-dom/server/renderToStaticMarkup "renderToStaticMarkup")
    * [renderToString ](/reference/react-dom/server/renderToString "renderToString")

  * [Static APIs ](/reference/react-dom/static "Static APIs")

    * [prerender ](/reference/react-dom/static/prerender "prerender")
    * [prerenderToNodeStream ](/reference/react-dom/static/prerenderToNodeStream "prerenderToNodeStream")

### Rules of React

  * [Overview ](/reference/rules "Overview")

    * [Components and Hooks must be pure ](/reference/rules/components-and-hooks-must-be-pure "Components and Hooks must be pure")
    * [React calls Components and Hooks ](/reference/rules/react-calls-components-and-hooks "React calls Components and Hooks")
    * [Rules of Hooks ](/reference/rules/rules-of-hooks "Rules of Hooks")

### React Server Components

  * [Server Components ](/reference/rsc/server-components "Server Components")
  * [Server Functions ](/reference/rsc/server-functions "Server Functions")
  * [Directives ](/reference/rsc/directives "Directives")

    * ['use client' ](/reference/rsc/use-client "'use client'")
    * ['use server' ](/reference/rsc/use-server "'use server'")

### Legacy APIs

  * [Legacy React APIs ](/reference/react/legacy "Legacy React APIs")

    * [Children ](/reference/react/Children "Children")
    * [cloneElement ](/reference/react/cloneElement "cloneElement")
    * [Component ](/reference/react/Component "Component")
    * [createElement ](/reference/react/createElement "createElement")
    * [createRef ](/reference/react/createRef "createRef")
    * [forwardRef ](/reference/react/forwardRef "forwardRef")
    * [isValidElement ](/reference/react/isValidElement "isValidElement")
    * [PureComponent ](/reference/react/PureComponent "PureComponent")




Is this page useful?

[API Reference](/reference/react)

# React Reference Overview[](#undefined "Link for this heading")

This section provides detailed reference documentation for working with React. For an introduction to React, please visit the [Learn](/learn) section.

The React reference documentation is broken down into functional subsections:

## React [](#react "Link for React ")

Programmatic React features:

  * [Hooks](/reference/react/hooks) - Use different React features from your components.
  * [Components](/reference/react/components) - Built-in components that you can use in your JSX.
  * [APIs](/reference/react/apis) - APIs that are useful for defining components.
  * [Directives](/reference/rsc/directives) - Provide instructions to bundlers compatible with React Server Components.



## React DOM [](#react-dom "Link for React DOM ")

React-dom contains features that are only supported for web applications (which run in the browser DOM environment). This section is broken into the following:

  * [Hooks](/reference/react-dom/hooks) - Hooks for web applications which run in the browser DOM environment.
  * [Components](/reference/react-dom/components) - React supports all of the browser built-in HTML and SVG components.
  * [APIs](/reference/react-dom) - The `react-dom` package contains methods supported only in web applications.
  * [Client APIs](/reference/react-dom/client) - The `react-dom/client` APIs let you render React components on the client (in the browser).
  * [Server APIs](/reference/react-dom/server) - The `react-dom/server` APIs let you render React components to HTML on the server.



## Rules of React [](#rules-of-react "Link for Rules of React ")

React has idioms — or rules — for how to express patterns in a way that is easy to understand and yields high-quality applications:

  * [Components and Hooks must be pure](/reference/rules/components-and-hooks-must-be-pure) – Purity makes your code easier to understand, debug, and allows React to automatically optimize your components and hooks correctly.
  * [React calls Components and Hooks](/reference/rules/react-calls-components-and-hooks) – React is responsible for rendering components and hooks when necessary to optimize the user experience.
  * [Rules of Hooks](/reference/rules/rules-of-hooks) – Hooks are defined using JavaScript functions, but they represent a special type of reusable UI logic with restrictions on where they can be called.



## Legacy APIs [](#legacy-apis "Link for Legacy APIs ")

  * [Legacy APIs](/reference/react/legacy) - Exported from the `react` package, but not recommended for use in newly written code.



[NextHooks](/reference/react/hooks)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [React ](#react)
  * [React DOM ](#react-dom)
  * [Rules of React ](#rules-of-react)
  * [Legacy APIs ](#legacy-apis)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# React Community[](#undefined "Link for this heading")

React has a community of millions of developers. On this page we’ve listed some React-related communities that you can be a part of; see the other pages in this section for additional online and in-person learning materials.

## Code of Conduct [](#code-of-conduct "Link for Code of Conduct ")

Before participating in React’s communities, [please read our Code of Conduct.](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md) We have adopted the [Contributor Covenant](https://www.contributor-covenant.org/) and we expect that all community members adhere to the guidelines within.

## Stack Overflow [](#stack-overflow "Link for Stack Overflow ")

Stack Overflow is a popular forum to ask code-level questions or if you’re stuck with a specific error. Read through the [existing questions](https://stackoverflow.com/questions/tagged/reactjs) tagged with **reactjs** or [ask your own](https://stackoverflow.com/questions/ask?tags=reactjs)!

## Popular Discussion Forums [](#popular-discussion-forums "Link for Popular Discussion Forums ")

There are many online forums which are a great place for discussion about best practices and application architecture as well as the future of React. If you have an answerable code-level question, Stack Overflow is usually a better fit.

Each community consists of many thousands of React users.

  * [DEV’s React community](https://dev.to/t/react)
  * [Hashnode’s React community](https://hashnode.com/n/reactjs)
  * [Reactiflux online chat](https://discord.gg/reactiflux)



## News [](#news "Link for News ")

For the latest news about React, and the [official React blog](/blog) on this website.

[NextReact Conferences](/community/conferences)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Code of Conduct ](#code-of-conduct)
  * [Stack Overflow ](#stack-overflow)
  * [Popular Discussion Forums ](#popular-discussion-forums)
  * [News ](#news)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React Blog[](#undefined "Link for this heading")

This blog is the official source for the updates from the React team. Anything important, including release notes or deprecation notices, will be posted here first. You can also follow the account on Twitter, but you won’t miss anything essential if you only read this blog.

## [React v19 December 5, 2024In the React 19 Upgrade Guide, we shared step-by-step instructions for upgrading your app to React 19. In this post, we’ll give an overview of the new features in React 19, and how you can adopt them …Read more](/blog/2024/12/05/react-19)## [React Compiler Beta ReleaseOctober 21, 2024We announced an experimental release of React Compiler at React Conf 2024. We’ve made a lot of progress since then, and in this post we want to share what’s next for React Compiler …Read more](/blog/2024/10/21/react-compiler-beta-release)## [React Conf 2024 RecapMay 22, 2024Last week we hosted React Conf 2024, a two-day conference in Henderson, Nevada where 700+ attendees gathered in-person to discuss the latest in UI engineering. This was our first in-person conference since 2019, and we were thrilled to be able to bring the community together again …Read more](/blog/2024/05/22/react-conf-2024-recap)## [React 19 Upgrade GuideApril 25, 2024The improvements added to React 19 require some breaking changes, but we’ve worked to make the upgrade as smooth as possible, and we don’t expect the changes to impact most apps. In this post, we will guide you through the steps for upgrading libraries to React 19 …Read more](/blog/2024/04/25/react-19-upgrade-guide)## [React Labs: What We've Been Working On – February 2024February 15, 2024In React Labs posts, we write about projects in active research and development. Since our last update, we’ve made significant progress on React Compiler, new features, and React 19, and we’d like to share what we learned.Read more](/blog/2024/02/15/react-labs-what-we-have-been-working-on-february-2024)## [React Canaries: Incremental Feature Rollout Outside MetaMay 3, 2023Traditionally, new React features used to only be available at Meta first, and land in the open source releases later. We’d like to offer the React community an option to adopt individual new features as soon as their design is close to final—similar to how Meta uses React internally. We are introducing a new officially supported Canary release channel. It lets curated setups like frameworks decouple adoption of individual React features from the React release schedule.Read more](/blog/2023/05/03/react-canaries)## [React Labs: What We've Been Working On – March 2023March 22, 2023In React Labs posts, we write about projects in active research and development. Since our last update, we’ve made significant progress on React Server Components, Asset Loading, Optimizing Compiler, Offscreen Rendering, and Transition Tracing, and we’d like to share what we learned.Read more](/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023)## [Introducing react.devMarch 16, 2023Today we are thrilled to launch react.dev, the new home for React and its documentation. In this post, we would like to give you a tour of the new site.Read more](/blog/2023/03/16/introducing-react-dev)## [React Labs: What We've Been Working On – June 2022June 15, 2022React 18 was years in the making, and with it brought valuable lessons for the React team. Its release was the result of many years of research and exploring many paths. Some of those paths were successful; many more were dead-ends that led to new insights. One lesson we’ve learned is that it’s frustrating for the community to wait for new features without having insight into these paths that we’re exploring…Read more](/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022)## [React v18.0March 29, 2022React 18 is now available on npm! In our last post, we shared step-by-step instructions for upgrading your app to React 18. In this post, we’ll give an overview of what’s new in React 18, and what it means for the future…Read more](/blog/2022/03/29/react-v18)## [How to Upgrade to React 18March 8, 2022As we shared in the release post, React 18 introduces features powered by our new concurrent renderer, with a gradual adoption strategy for existing applications. In this post, we will guide you through the steps for upgrading to React 18…Read more](/blog/2022/03/08/react-18-upgrade-guide)## [React Conf 2021 RecapDecember 17, 2021Last week we hosted our 6th React Conf. In previous years, we’ve used the React Conf stage to deliver industry changing announcements such as React Native and React Hooks. This year, we shared our multi-platform vision for React, starting with the release of React 18 and gradual adoption of concurrent features…Read more](/blog/2021/12/17/react-conf-2021-recap)## [The Plan for React 18June 8, 2021The React team is excited to share a few updates:

  * We’ve started work on the React 18 release, which will be our next major version.
  * We’ve created a Working Group to prepare the community for gradual adoption of new features in React 18.
  * We’ve published a React 18 Alpha so that library authors can try it and provide feedback…

Read more](/blog/2021/06/08/the-plan-for-react-18)## [Introducing Zero-Bundle-Size React Server ComponentsDecember 21, 20202020 has been a long year. As it comes to an end we wanted to share a special Holiday Update on our research into zero-bundle-size React Server Components. To introduce React Server Components, we have prepared a talk and a demo. If you want, you can check them out during the holidays, or later when work picks back up in the new year…Read more](/blog/2020/12/21/data-fetching-with-react-server-components)

### All release notes [](#all-release-notes "Link for All release notes ")

Not every React release deserves its own blog post, but you can find a detailed changelog for every release in the `CHANGELOG.md`[](https://github.com/facebook/react/blob/main/CHANGELOG.md) file in the React repository, as well as on the [Releases](https://github.com/facebook/react/releases) page.

### Older posts [](#older-posts "Link for Older posts ")

See the [older posts.](https://reactjs.org/blog/all.html)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Translations[](#undefined "Link for this heading")

React docs are translated by the global community into many languages all over the world.

## Source site [](#main-site "Link for Source site ")

All translations are provided from the canonical source docs:

  * [English](https://react.dev/) — [Contribute](https://github.com/reactjs/react.dev/)



## Full translations [](#full-translations "Link for Full translations ")

  * [French (Français)](https://fr.react.dev/) — [Contribute](https://github.com/reactjs/fr.react.dev)
  * [Japanese (日本語)](https://ja.react.dev/) — [Contribute](https://github.com/reactjs/ja.react.dev)
  * [Korean (한국어)](https://ko.react.dev/) — [Contribute](https://github.com/reactjs/ko.react.dev)
  * [Simplified Chinese (简体中文)](https://zh-hans.react.dev/) — [Contribute](https://github.com/reactjs/zh-hans.react.dev)
  * [Spanish (Español)](https://es.react.dev/) — [Contribute](https://github.com/reactjs/es.react.dev)
  * [Turkish (Türkçe)](https://tr.react.dev/) — [Contribute](https://github.com/reactjs/tr.react.dev)



## In-progress translations [](#in-progress-translations "Link for In-progress translations ")

For the progress of each translation, see: [Is React Translated Yet?](https://translations.react.dev/)

  * [Arabic (العربية)](https://ar.react.dev/) — [Contribute](https://github.com/reactjs/ar.react.dev)
  * [Azerbaijani (Azərbaycanca)](https://az.react.dev/) — [Contribute](https://github.com/reactjs/az.react.dev)
  * [Belarusian (Беларуская)](https://be.react.dev/) — [Contribute](https://github.com/reactjs/be.react.dev)
  * [Bengali (বাংলা)](https://bn.react.dev/) — [Contribute](https://github.com/reactjs/bn.react.dev)
  * [Czech (Čeština)](https://cs.react.dev/) — [Contribute](https://github.com/reactjs/cs.react.dev)
  * [Finnish (Suomi)](https://fi.react.dev/) — [Contribute](https://github.com/reactjs/fi.react.dev)
  * [German (Deutsch)](https://de.react.dev/) — [Contribute](https://github.com/reactjs/de.react.dev)
  * [Gujarati (ગુજરાતી)](https://gu.react.dev/) — [Contribute](https://github.com/reactjs/gu.react.dev)
  * [Hebrew (עברית)](https://he.react.dev/) — [Contribute](https://github.com/reactjs/he.react.dev)
  * [Hindi (हिन्दी)](https://hi.react.dev/) — [Contribute](https://github.com/reactjs/hi.react.dev)
  * [Hungarian (magyar)](https://hu.react.dev/) — [Contribute](https://github.com/reactjs/hu.react.dev)
  * [Icelandic (Íslenska)](https://is.react.dev/) — [Contribute](https://github.com/reactjs/is.react.dev)
  * [Indonesian (Bahasa Indonesia)](https://id.react.dev/) — [Contribute](https://github.com/reactjs/id.react.dev)
  * [Italian (Italiano)](https://it.react.dev/) — [Contribute](https://github.com/reactjs/it.react.dev)
  * [Kazakh (Қазақша)](https://kk.react.dev/) — [Contribute](https://github.com/reactjs/kk.react.dev)
  * [Lao (ພາສາລາວ)](https://lo.react.dev/) — [Contribute](https://github.com/reactjs/lo.react.dev)
  * [Macedonian (Македонски)](https://mk.react.dev/) — [Contribute](https://github.com/reactjs/mk.react.dev)
  * [Malayalam (മലയാളം)](https://ml.react.dev/) — [Contribute](https://github.com/reactjs/ml.react.dev)
  * [Mongolian (Монгол хэл)](https://mn.react.dev/) — [Contribute](https://github.com/reactjs/mn.react.dev)
  * [Persian (فارسی)](https://fa.react.dev/) — [Contribute](https://github.com/reactjs/fa.react.dev)
  * [Polish (Polski)](https://pl.react.dev/) — [Contribute](https://github.com/reactjs/pl.react.dev)
  * [Portuguese (Brazil) (Português do Brasil)](https://pt-br.react.dev/) — [Contribute](https://github.com/reactjs/pt-br.react.dev)
  * [Russian (Русский)](https://ru.react.dev/) — [Contribute](https://github.com/reactjs/ru.react.dev)
  * [Serbian (Srpski)](https://sr.react.dev/) — [Contribute](https://github.com/reactjs/sr.react.dev)
  * [Sinhala (සිංහල)](https://si.react.dev/) — [Contribute](https://github.com/reactjs/si.react.dev)
  * [Swahili (Kiswahili)](https://sw.react.dev/) — [Contribute](https://github.com/reactjs/sw.react.dev)
  * [Tamil (தமிழ்)](https://ta.react.dev/) — [Contribute](https://github.com/reactjs/ta.react.dev)
  * [Telugu (తెలుగు)](https://te.react.dev/) — [Contribute](https://github.com/reactjs/te.react.dev)
  * [Traditional Chinese (繁體中文)](https://zh-hant.react.dev/) — [Contribute](https://github.com/reactjs/zh-hant.react.dev)
  * [Ukrainian (Українська)](https://uk.react.dev/) — [Contribute](https://github.com/reactjs/uk.react.dev)
  * [Urdu (اردو)](https://ur.react.dev/) — [Contribute](https://github.com/reactjs/ur.react.dev)
  * [Vietnamese (Tiếng Việt)](https://vi.react.dev/) — [Contribute](https://github.com/reactjs/vi.react.dev)



## How to contribute [](#how-to-contribute "Link for How to contribute ")

You can contribute to the translation efforts!

The community conducts the translation work for the React docs on each language-specific fork of react.dev. Typical translation work involves directly translating a Markdown file and creating a pull request. Click the “contribute” link above to the GitHub repository for your language, and follow the instructions there to help with the translation effort.

If you want to start a new translation for your language, visit: [translations.react.dev](https://github.com/reactjs/translations.react.dev)

[PreviousDocs Contributors](/community/docs-contributors)[NextAcknowledgements](/community/acknowledgements)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Source site ](#main-site)
  * [Full translations ](#full-translations)
  * [In-progress translations ](#in-progress-translations)
  * [How to contribute ](#how-to-contribute)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

[Installation](/learn/installation)

# Add React to an Existing Project[](#undefined "Link for this heading")

If you want to add some interactivity to your existing project, you don’t have to rewrite it in React. Add React to your existing stack, and render interactive React components anywhere.

### Note

**You need to install[Node.js](https://nodejs.org/en/) for local development.** Although you can [try React](/learn/installation#try-react) online or with a simple HTML page, realistically most JavaScript tooling you’ll want to use for development requires Node.js.

## Using React for an entire subroute of your existing website [](#using-react-for-an-entire-subroute-of-your-existing-website "Link for Using React for an entire subroute of your existing website ")

Let’s say you have an existing web app at `example.com` built with another server technology (like Rails), and you want to implement all routes starting with `example.com/some-app/` fully with React.

Here’s how we recommend to set it up:

  1. **Build the React part of your app** using one of the [React-based frameworks](/learn/start-a-new-react-project).
  2. **Specify`/some-app` as the _base path_** in your framework’s configuration (here’s how: [Next.js](https://nextjs.org/docs/api-reference/next.config.js/basepath), [Gatsby](https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/path-prefix/)).
  3. **Configure your server or a proxy** so that all requests under `/some-app/` are handled by your React app.



This ensures the React part of your app can [benefit from the best practices](/learn/start-a-new-react-project#can-i-use-react-without-a-framework) baked into those frameworks.

Many React-based frameworks are full-stack and let your React app take advantage of the server. However, you can use the same approach even if you can’t or don’t want to run JavaScript on the server. In that case, serve the HTML/CSS/JS export (`next export`[ output](https://nextjs.org/docs/advanced-features/static-html-export) for Next.js, default for Gatsby) at `/some-app/` instead.

## Using React for a part of your existing page [](#using-react-for-a-part-of-your-existing-page "Link for Using React for a part of your existing page ")

Let’s say you have an existing page built with another technology (either a server one like Rails, or a client one like Backbone), and you want to render interactive React components somewhere on that page. That’s a common way to integrate React—in fact, it’s how most React usage looked at Meta for many years!

You can do this in two steps:

  1. **Set up a JavaScript environment** that lets you use the [JSX syntax](/learn/writing-markup-with-jsx), split your code into modules with the `import`[](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) / `export`[](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) syntax, and use packages (for example, React) from the [npm](https://www.npmjs.com/) package registry.
  2. **Render your React components** where you want to see them on the page.



The exact approach depends on your existing page setup, so let’s walk through some details.

### Step 1: Set up a modular JavaScript environment [](#step-1-set-up-a-modular-javascript-environment "Link for Step 1: Set up a modular JavaScript environment ")

A modular JavaScript environment lets you write your React components in individual files, as opposed to writing all of your code in a single file. It also lets you use all the wonderful packages published by other developers on the [npm](https://www.npmjs.com/) registry—including React itself! How you do this depends on your existing setup:

  * **If your app is already split into files that use`import` statements,** try to use the setup you already have. Check whether writing `<div />` in your JS code causes a syntax error. If it causes a syntax error, you might need to [transform your JavaScript code with Babel](https://babeljs.io/setup), and enable the [Babel React preset](https://babeljs.io/docs/babel-preset-react) to use JSX.

  * **If your app doesn’t have an existing setup for compiling JavaScript modules,** set it up with [Vite](https://vitejs.dev/). The Vite community maintains [many integrations with backend frameworks](https://github.com/vitejs/awesome-vite#integrations-with-backends), including Rails, Django, and Laravel. If your backend framework is not listed, [follow this guide](https://vitejs.dev/guide/backend-integration.html) to manually integrate Vite builds with your backend.




To check whether your setup works, run this command in your project folder:

Terminal

Copy

npm install react react-dom

Then add these lines of code at the top of your main JavaScript file (it might be called `index.js` or `main.js`):

index.js

index.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { createRoot } from 'react-dom/client';
// Clear the existing HTML content
document.body.innerHTML = '<div id="app"></div>';
// Render your React component instead
const root = createRoot(document.getElementById('app'));
root.render(<h1>Hello, world</h1>);

```


If the entire content of your page was replaced by a “Hello, world!”, everything worked! Keep reading.

### Note

Integrating a modular JavaScript environment into an existing project for the first time can feel intimidating, but it’s worth it! If you get stuck, try our [community resources](/community) or the [Vite Chat](https://chat.vitejs.dev/).

### Step 2: Render React components anywhere on the page [](#step-2-render-react-components-anywhere-on-the-page "Link for Step 2: Render React components anywhere on the page ")

In the previous step, you put this code at the top of your main file:

```


import { createRoot } from 'react-dom/client';

// Clear the existing HTML content

document.body.innerHTML = '<div id="app"></div>';

// Render your React component instead

const root = createRoot(document.getElementById('app'));

root.render(<h1>Hello, world</h1>);


```


Of course, you don’t actually want to clear the existing HTML content!

Delete this code.

Instead, you probably want to render your React components in specific places in your HTML. Open your HTML page (or the server templates that generate it) and add a unique `id`[](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id) attribute to any tag, for example:

```


<!-- ... somewhere in your html ... -->

<nav id="navigation"></nav>

<!-- ... more html ... -->


```


This lets you find that HTML element with `document.getElementById`[](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById) and pass it to `createRoot`[](/reference/react-dom/client/createRoot) so that you can render your own React component inside:

index.jsindex.html

index.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { createRoot } from 'react-dom/client';
function NavigationBar() {
 // TODO: Actually implement a navigation bar
 return <h1>Hello from React!</h1>;
}
const domNode = document.getElementById('navigation');
const root = createRoot(domNode);
root.render(<NavigationBar />);

```


Notice how the original HTML content from `index.html` is preserved, but your own `NavigationBar` React component now appears inside the `<nav id="navigation">` from your HTML. Read the `createRoot`[ usage documentation](/reference/react-dom/client/createRoot#rendering-a-page-partially-built-with-react) to learn more about rendering React components inside an existing HTML page.

When you adopt React in an existing project, it’s common to start with small interactive components (like buttons), and then gradually keep “moving upwards” until eventually your entire page is built with React. If you ever reach that point, we recommend migrating to [a React framework](/learn/start-a-new-react-project) right after to get the most out of React.

## Using React Native in an existing native mobile app [](#using-react-native-in-an-existing-native-mobile-app "Link for Using React Native in an existing native mobile app ")

[React Native](https://reactnative.dev/) can also be integrated into existing native apps incrementally. If you have an existing native app for Android (Java or Kotlin) or iOS (Objective-C or Swift), [follow this guide](https://reactnative.dev/docs/integration-with-existing-apps) to add a React Native screen to it.

[PreviousStart a New React Project](/learn/start-a-new-react-project)[NextEditor Setup](/learn/editor-setup)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Using React for an entire subroute of your existing website ](#using-react-for-an-entire-subroute-of-your-existing-website)
  * [Using React for a part of your existing page ](#using-react-for-a-part-of-your-existing-page)
  * [Step 1: Set up a modular JavaScript environment ](#step-1-set-up-a-modular-javascript-environment)
  * [Step 2: Render React components anywhere on the page ](#step-2-render-react-components-anywhere-on-the-page)
  * [Using React Native in an existing native mobile app ](#using-react-native-in-an-existing-native-mobile-app)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

[Installation](/learn/installation)

# Start a New React Project[](#undefined "Link for this heading")

If you want to build a new app or a new website fully with React, we recommend picking one of the React-powered frameworks popular in the community.

You can use React without a framework, however we’ve found that most apps and sites eventually build solutions to common problems such as code-splitting, routing, data fetching, and generating HTML. These problems are common to all UI libraries, not just React.

By starting with a framework, you can get started with React quickly, and avoid essentially building your own framework later.

##### Deep Dive

#### Can I use React without a framework? [](#can-i-use-react-without-a-framework "Link for Can I use React without a framework? ")

Show Details

You can definitely use React without a framework—that’s how you’d [use React for a part of your page.](/learn/add-react-to-an-existing-project#using-react-for-a-part-of-your-existing-page) **However, if you’re building a new app or a site fully with React, we recommend using a framework.**

Here’s why.

Even if you don’t need routing or data fetching at first, you’ll likely want to add some libraries for them. As your JavaScript bundle grows with every new feature, you might have to figure out how to split code for every route individually. As your data fetching needs get more complex, you are likely to encounter server-client network waterfalls that make your app feel very slow. As your audience includes more users with poor network conditions and low-end devices, you might need to generate HTML from your components to display content early—either on the server, or during the build time. Changing your setup to run some of your code on the server or during the build can be very tricky.

**These problems are not React-specific. This is why Svelte has SvelteKit, Vue has Nuxt, and so on.** To solve these problems on your own, you’ll need to integrate your bundler with your router and with your data fetching library. It’s not hard to get an initial setup working, but there are a lot of subtleties involved in making an app that loads quickly even as it grows over time. You’ll want to send down the minimal amount of app code but do so in a single client–server roundtrip, in parallel with any data required for the page. You’ll likely want the page to be interactive before your JavaScript code even runs, to support progressive enhancement. You may want to generate a folder of fully static HTML files for your marketing pages that can be hosted anywhere and still work with JavaScript disabled. Building these capabilities yourself takes real work.

**React frameworks on this page solve problems like these by default, with no extra work from your side.** They let you start very lean and then scale your app with your needs. Each React framework has a community, so finding answers to questions and upgrading tooling is easier. Frameworks also give structure to your code, helping you and others retain context and skills between different projects. Conversely, with a custom setup it’s easier to get stuck on unsupported dependency versions, and you’ll essentially end up creating your own framework—albeit one with no community or upgrade path (and if it’s anything like the ones we’ve made in the past, more haphazardly designed).

If your app has unusual constraints not served well by these frameworks, or you prefer to solve these problems yourself, you can roll your own custom setup with React. Grab `react` and `react-dom` from npm, set up your custom build process with a bundler like [Vite](https://vitejs.dev/) or [Parcel](https://parceljs.org/), and add other tools as you need them for routing, static generation or server-side rendering, and more.

## Production-grade React frameworks [](#production-grade-react-frameworks "Link for Production-grade React frameworks ")

These frameworks support all the features you need to deploy and scale your app in production and are working towards supporting our [full-stack architecture vision](#which-features-make-up-the-react-teams-full-stack-architecture-vision). All of the frameworks we recommend are open source with active communities for support, and can be deployed to your own server or a hosting provider. If you’re a framework author interested in being included on this list, [please let us know](https://github.com/reactjs/react.dev/issues/new?assignees=&labels=type%3A+framework&projects=&template=3-framework.yml&title=%5BFramework%5D%3A+).

### Next.js [](#nextjs-pages-router "Link for Next.js ")

**[Next.js’ Pages Router](https://nextjs.org/) is a full-stack React framework.** It’s versatile and lets you create React apps of any size—from a mostly static blog to a complex dynamic application. To create a new Next.js project, run in your terminal:

Terminal

Copy

npx create-next-app@latest

If you’re new to Next.js, check out the [learn Next.js course.](https://nextjs.org/learn)

Next.js is maintained by [Vercel](https://vercel.com/). You can [deploy a Next.js app](https://nextjs.org/docs/app/building-your-application/deploying) to any Node.js or serverless hosting, or to your own server. Next.js also supports a [static export](https://nextjs.org/docs/pages/building-your-application/deploying/static-exports) which doesn’t require a server.

### Remix [](#remix "Link for Remix ")

**[Remix](https://remix.run/) is a full-stack React framework with nested routing.** It lets you break your app into nested parts that can load data in parallel and refresh in response to the user actions. To create a new Remix project, run:

Terminal

Copy

npx create-remix

If you’re new to Remix, check out the Remix [blog tutorial](https://remix.run/docs/en/main/tutorials/blog) (short) and [app tutorial](https://remix.run/docs/en/main/tutorials/jokes) (long).

Remix is maintained by [Shopify](https://www.shopify.com/). When you create a Remix project, you need to [pick your deployment target](https://remix.run/docs/en/main/guides/deployment). You can deploy a Remix app to any Node.js or serverless hosting by using or writing an [adapter](https://remix.run/docs/en/main/other-api/adapter).

### Gatsby [](#gatsby "Link for Gatsby ")

**[Gatsby](https://www.gatsbyjs.com/) is a React framework for fast CMS-backed websites.** Its rich plugin ecosystem and its GraphQL data layer simplify integrating content, APIs, and services into one website. To create a new Gatsby project, run:

Terminal

Copy

npx create-gatsby

If you’re new to Gatsby, check out the [Gatsby tutorial.](https://www.gatsbyjs.com/docs/tutorial/)

Gatsby is maintained by [Netlify](https://www.netlify.com/). You can [deploy a fully static Gatsby site](https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting) to any static hosting. If you opt into using server-only features, make sure your hosting provider supports them for Gatsby.

### Expo (for native apps) [](#expo "Link for Expo \(for native apps\) ")

**[Expo](https://expo.dev/) is a React framework that lets you create universal Android, iOS, and web apps with truly native UIs.** It provides an SDK for [React Native](https://reactnative.dev/) that makes the native parts easier to use. To create a new Expo project, run:

Terminal

Copy

npx create-expo-app

If you’re new to Expo, check out the [Expo tutorial](https://docs.expo.dev/tutorial/introduction/).

Expo is maintained by [Expo (the company)](https://expo.dev/about). Building apps with Expo is free, and you can submit them to the Google and Apple app stores without restrictions. Expo additionally provides opt-in paid cloud services.

## Bleeding-edge React frameworks [](#bleeding-edge-react-frameworks "Link for Bleeding-edge React frameworks ")

As we’ve explored how to continue improving React, we realized that integrating React more closely with frameworks (specifically, with routing, bundling, and server technologies) is our biggest opportunity to help React users build better apps. The Next.js team has agreed to collaborate with us in researching, developing, integrating, and testing framework-agnostic bleeding-edge React features like [React Server Components.](/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023#react-server-components)

These features are getting closer to being production-ready every day, and we’ve been in talks with other bundler and framework developers about integrating them. Our hope is that in a year or two, all frameworks listed on this page will have full support for these features. (If you’re a framework author interested in partnering with us to experiment with these features, please let us know!)

### Next.js (App Router) [](#nextjs-app-router "Link for Next.js \(App Router\) ")

**[Next.js’s App Router](https://nextjs.org/docs) is a redesign of the Next.js APIs aiming to fulfill the React team’s full-stack architecture vision.** It lets you fetch data in asynchronous components that run on the server or even during the build.

Next.js is maintained by [Vercel](https://vercel.com/). You can [deploy a Next.js app](https://nextjs.org/docs/app/building-your-application/deploying) to any Node.js or serverless hosting, or to your own server. Next.js also supports [static export](https://nextjs.org/docs/app/building-your-application/deploying/static-exports) which doesn’t require a server.

##### Deep Dive

#### Which features make up the React team’s full-stack architecture vision? [](#which-features-make-up-the-react-teams-full-stack-architecture-vision "Link for Which features make up the React team’s full-stack architecture vision? ")

Show Details

Next.js’s App Router bundler fully implements the official [React Server Components specification](https://github.com/reactjs/rfcs/blob/main/text/0188-server-components.md). This lets you mix build-time, server-only, and interactive components in a single React tree.

For example, you can write a server-only React component as an `async` function that reads from a database or from a file. Then you can pass data down from it to your interactive components:

```


// This component runs *only* on the server (or during the build).

async function Talks({ confId }) {

 // 1. You're on the server, so you can talk to your data layer. API endpoint not required.

 const talks = await db.Talks.findAll({ confId });

 // 2. Add any amount of rendering logic. It won't make your JavaScript bundle larger.

 const videos = talks.map(talk => talk.video);

 // 3. Pass the data down to the components that will run in the browser.

 return <SearchableVideoList videos={videos} />;

}


```


Next.js’s App Router also integrates [data fetching with Suspense](/blog/2022/03/29/react-v18#suspense-in-data-frameworks). This lets you specify a loading state (like a skeleton placeholder) for different parts of your user interface directly in your React tree:

```


<Suspense fallback={<TalksLoading />}>

 <Talks confId={conf.id} />

</Suspense>


```


Server Components and Suspense are React features rather than Next.js features. However, adopting them at the framework level requires buy-in and non-trivial implementation work. At the moment, the Next.js App Router is the most complete implementation. The React team is working with bundler developers to make these features easier to implement in the next generation of frameworks.

[PreviousInstallation](/learn/installation)[NextAdd React to an Existing Project](/learn/add-react-to-an-existing-project)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Production-grade React frameworks ](#production-grade-react-frameworks)
  * [Next.js ](#nextjs-pages-router)
  * [Remix ](#remix)
  * [Gatsby ](#gatsby)
  * [Expo (for native apps) ](#expo)
  * [Bleeding-edge React frameworks ](#bleeding-edge-react-frameworks)
  * [Next.js (App Router) ](#nextjs-app-router)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React v19[](#undefined "Link for this heading")

December 05, 2024 by [The React Team](/community/team)

### Note

### React 19 is now stable! [](#react-19-is-now-stable "Link for React 19 is now stable! ")

Additions since this post was originally shared with the React 19 RC in April:

  * **Pre-warming for suspended trees** : see [Improvements to Suspense](/blog/2024/04/25/react-19-upgrade-guide#improvements-to-suspense).
  * **React DOM static APIs** : see [New React DOM Static APIs](#new-react-dom-static-apis).



_The date for this post has been updated to reflect the stable release date._

React v19 is now available on npm!

In our [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide), we shared step-by-step instructions for upgrading your app to React 19. In this post, we’ll give an overview of the new features in React 19, and how you can adopt them.

  * [What’s new in React 19](#whats-new-in-react-19)
  * [Improvements in React 19](#improvements-in-react-19)
  * [How to upgrade](#how-to-upgrade)



For a list of breaking changes, see the [Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide).

## What’s new in React 19 [](#whats-new-in-react-19 "Link for What’s new in React 19 ")

### Actions [](#actions "Link for Actions ")

A common use case in React apps is to perform a data mutation and then update state in response. For example, when a user submits a form to change their name, you will make an API request, and then handle the response. In the past, you would need to handle pending states, errors, optimistic updates, and sequential requests manually.

For example, you could handle the pending and error state in `useState`:

```


// Before Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, setIsPending] = useState(false);

 const handleSubmit = async () => {

  setIsPending(true);

  const error = await updateName(name);

  setIsPending(false);

  if (error) {

   setError(error);

   return;

  } 

  redirect("/path");

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


In React 19, we’re adding support for using async functions in transitions to handle pending states, errors, forms, and optimistic updates automatically.

For example, you can use `useTransition` to handle the pending state for you:

```


// Using pending state from Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, startTransition] = useTransition();

 const handleSubmit = () => {

  startTransition(async () => {

   const error = await updateName(name);

   if (error) {

    setError(error);

    return;

   } 

   redirect("/path");

  })

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


The async transition will immediately set the `isPending` state to true, make the async request(s), and switch `isPending` to false after any transitions. This allows you to keep the current UI responsive and interactive while the data is changing.

### Note

#### By convention, functions that use async transitions are called “Actions”. [](#by-convention-functions-that-use-async-transitions-are-called-actions "Link for By convention, functions that use async transitions are called “Actions”. ")

Actions automatically manage submitting data for you:

  * **Pending state** : Actions provide a pending state that starts at the beginning of a request and automatically resets when the final state update is committed.
  * **Optimistic updates** : Actions support the new `useOptimistic`[](#new-hook-optimistic-updates) hook so you can show users instant feedback while the requests are submitting.
  * **Error handling** : Actions provide error handling so you can display Error Boundaries when a request fails, and revert optimistic updates to their original value automatically.
  * **Forms** : `<form>` elements now support passing functions to the `action` and `formAction` props. Passing functions to the `action` props use Actions by default and reset the form automatically after submission.



Building on top of Actions, React 19 introduces `useOptimistic`[](#new-hook-optimistic-updates) to manage optimistic updates, and a new hook `React.useActionState`[](#new-hook-useactionstate) to handle common cases for Actions. In `react-dom` we’re adding `<form>`[ Actions](#form-actions) to manage forms automatically and `useFormStatus`[](#new-hook-useformstatus) to support the common cases for Actions in forms.

In React 19, the above example can be simplified to:

```


// Using <form> Actions and useActionState

function ChangeName({ name, setName }) {

 const [error, submitAction, isPending] = useActionState(

  async (previousState, formData) => {

   const error = await updateName(formData.get("name"));

   if (error) {

    return error;

   }

   redirect("/path");

   return null;

  },

  null,

 );

 return (

  <form action={submitAction}>

   <input type="text" name="name" />

   <button type="submit" disabled={isPending}>Update</button>

   {error && <p>{error}</p>}

  </form>

 );

}


```


In the next section, we’ll break down each of the new Action features in React 19.

### New hook: `useActionState` [](#new-hook-useactionstate "Link for this heading")

To make the common cases easier for Actions, we’ve added a new hook called `useActionState`:

```


const [error, submitAction, isPending] = useActionState(

 async (previousState, newName) => {

  const error = await updateName(newName);

  if (error) {

   // You can return any result of the action.

   // Here, we return only the error.

   return error;

  }

  // handle success

  return null;

 },

 null,

);


```


`useActionState` accepts a function (the “Action”), and returns a wrapped Action to call. This works because Actions compose. When the wrapped Action is called, `useActionState` will return the last result of the Action as `data`, and the pending state of the Action as `pending`.

### Note

`React.useActionState` was previously called `ReactDOM.useFormState` in the Canary releases, but we’ve renamed it and deprecated `useFormState`.

See [#28491](https://github.com/facebook/react/pull/28491) for more info.

For more information, see the docs for `useActionState`[](/reference/react/useActionState).

### React DOM: `<form>` Actions [](#form-actions "Link for this heading")

Actions are also integrated with React 19’s new `<form>` features for `react-dom`. We’ve added support for passing functions as the `action` and `formAction` props of `<form>`, `<input>`, and `<button>` elements to automatically submit forms with Actions:

```


<form action={actionFunction}>


```


When a `<form>` Action succeeds, React will automatically reset the form for uncontrolled components. If you need to reset the `<form>` manually, you can call the new `requestFormReset` React DOM API.

For more information, see the `react-dom` docs for `<form>`[](/reference/react-dom/components/form), `<input>`[](/reference/react-dom/components/input), and `<button>`.

### React DOM: New hook: `useFormStatus` [](#new-hook-useformstatus "Link for this heading")

In design systems, it’s common to write design components that need access to information about the `<form>` they’re in, without drilling props down to the component. This can be done via Context, but to make the common case easier, we’ve added a new hook `useFormStatus`:

```


import {useFormStatus} from 'react-dom';

function DesignButton() {

 const {pending} = useFormStatus();

 return <button type="submit" disabled={pending} />

}


```


`useFormStatus` reads the status of the parent `<form>` as if the form was a Context provider.

For more information, see the `react-dom` docs for `useFormStatus`[](/reference/react-dom/hooks/useFormStatus).

### New hook: `useOptimistic` [](#new-hook-optimistic-updates "Link for this heading")

Another common UI pattern when performing a data mutation is to show the final state optimistically while the async request is underway. In React 19, we’re adding a new hook called `useOptimistic` to make this easier:

```


function ChangeName({currentName, onUpdateName}) {

 const [optimisticName, setOptimisticName] = useOptimistic(currentName);

 const submitAction = async formData => {

  const newName = formData.get("name");

  setOptimisticName(newName);

  const updatedName = await updateName(newName);

  onUpdateName(updatedName);

 };

 return (

  <form action={submitAction}>

   <p>Your name is: {optimisticName}</p>

   <p>

    <label>Change Name:</label>

    <input

     type="text"

     name="name"

     disabled={currentName !== optimisticName}

    />

   </p>

  </form>

 );

}


```


The `useOptimistic` hook will immediately render the `optimisticName` while the `updateName` request is in progress. When the update finishes or errors, React will automatically switch back to the `currentName` value.

For more information, see the docs for `useOptimistic`[](/reference/react/useOptimistic).

### New API: `use` [](#new-feature-use "Link for this heading")

In React 19 we’re introducing a new API to read resources in render: `use`.

For example, you can read a promise with `use`, and React will Suspend until the promise resolves:

```


import {use} from 'react';

function Comments({commentsPromise}) {

 // `use` will suspend until the promise resolves.

 const comments = use(commentsPromise);

 return comments.map(comment => <p key={comment.id}>{comment}</p>);

}

function Page({commentsPromise}) {

 // When `use` suspends in Comments,

 // this Suspense boundary will be shown.

 return (

  <Suspense fallback={<div>Loading...</div>}>

   <Comments commentsPromise={commentsPromise} />

  </Suspense>

 )

}


```


### Note

#### `use` does not support promises created in render. [](#use-does-not-support-promises-created-in-render "Link for this heading")

If you try to pass a promise created in render to `use`, React will warn:

Console

A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework.

To fix, you need to pass a promise from a suspense powered library or framework that supports caching for promises. In the future we plan to ship features to make it easier to cache promises in render.

You can also read context with `use`, allowing you to read Context conditionally such as after early returns:

```


import {use} from 'react';

import ThemeContext from './ThemeContext'

function Heading({children}) {

 if (children == null) {

  return null;

 }

 // This would not work with useContext

 // because of the early return.

 const theme = use(ThemeContext);

 return (

  <h1 style={{color: theme.color}}>

   {children}

  </h1>

 );

}


```


The `use` API can only be called in render, similar to hooks. Unlike hooks, `use` can be called conditionally. In the future we plan to support more ways to consume resources in render with `use`.

For more information, see the docs for `use`[](/reference/react/use).

## New React DOM Static APIs [](#new-react-dom-static-apis "Link for New React DOM Static APIs ")

We’ve added two new APIs to `react-dom/static` for static site generation:

  * `prerender`[](/reference/react-dom/static/prerender)
  * `prerenderToNodeStream`[](/reference/react-dom/static/prerenderToNodeStream)



These new APIs improve on `renderToString` by waiting for data to load for static HTML generation. They are designed to work with streaming environments like Node.js Streams and Web Streams. For example, in a Web Stream environment, you can prerender a React tree to static HTML with `prerender`:

```


import { prerender } from 'react-dom/static';

async function handler(request) {

 const {prelude} = await prerender(<App />, {

  bootstrapScripts: ['/main.js']

 });

 return new Response(prelude, {

  headers: { 'content-type': 'text/html' },

 });

}


```


Prerender APIs will wait for all data to load before returning the static HTML stream. Streams can be converted to strings, or sent with a streaming response. They do not support streaming content as it loads, which is supported by the existing [React DOM server rendering APIs](/reference/react-dom/server).

For more information, see [React DOM Static APIs](/reference/react-dom/static).

## React Server Components [](#react-server-components "Link for React Server Components ")

### Server Components [](#server-components "Link for Server Components ")

Server Components are a new option that allows rendering components ahead of time, before bundling, in an environment separate from your client application or SSR server. This separate environment is the “server” in React Server Components. Server Components can run once at build time on your CI server, or they can be run for each request using a web server.

React 19 includes all of the React Server Components features included from the Canary channel. This means libraries that ship with Server Components can now target React 19 as a peer dependency with a `react-server` [export condition](https://github.com/reactjs/rfcs/blob/main/text/0227-server-module-conventions.md#react-server-conditional-exports) for use in frameworks that support the [Full-stack React Architecture](/learn/start-a-new-react-project#which-features-make-up-the-react-teams-full-stack-architecture-vision).

### Note

#### How do I build support for Server Components? [](#how-do-i-build-support-for-server-components "Link for How do I build support for Server Components? ")

While React Server Components in React 19 are stable and will not break between minor versions, the underlying APIs used to implement a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x.

To support React Server Components as a bundler or framework, we recommend pinning to a specific React version, or using the Canary release. We will continue working with bundlers and frameworks to stabilize the APIs used to implement React Server Components in the future.

For more, see the docs for [React Server Components](/reference/rsc/server-components).

### Server Actions [](#server-actions "Link for Server Actions ")

Server Actions allow Client Components to call async functions executed on the server.

When a Server Action is defined with the `"use server"` directive, your framework will automatically create a reference to the server function, and pass that reference to the Client Component. When that function is called on the client, React will send a request to the server to execute the function, and return the result.

### Note

#### There is no directive for Server Components. [](#there-is-no-directive-for-server-components "Link for There is no directive for Server Components. ")

A common misunderstanding is that Server Components are denoted by `"use server"`, but there is no directive for Server Components. The `"use server"` directive is used for Server Actions.

For more info, see the docs for [Directives](/reference/rsc/directives).

Server Actions can be created in Server Components and passed as props to Client Components, or they can be imported and used in Client Components.

For more, see the docs for [React Server Actions](/reference/rsc/server-actions).

## Improvements in React 19 [](#improvements-in-react-19 "Link for Improvements in React 19 ")

### `ref` as a prop [](#ref-as-a-prop "Link for this heading")

Starting in React 19, you can now access `ref` as a prop for function components:

```


function MyInput({placeholder, ref}) {

 return <input placeholder={placeholder} ref={ref} />

}

//...

<MyInput ref={ref} />


```


New function components will no longer need `forwardRef`, and we will be publishing a codemod to automatically update your components to use the new `ref` prop. In future versions we will deprecate and remove `forwardRef`.

### Note

`refs` passed to classes are not passed as props since they reference the component instance.

### Diffs for hydration errors [](#diffs-for-hydration-errors "Link for Diffs for hydration errors ")

We also improved error reporting for hydration errors in `react-dom`. For example, instead of logging multiple errors in DEV without any information about the mismatch:

Console

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Uncaught Error: Text content does not match server-rendered HTML. at checkForUnmatchedText …

We now log a single message with a diff of the mismatch:

Console

Uncaught Error: Hydration failed because the server rendered HTML didn’t match the client. As a result this tree will be regenerated on the client. This can happen if an SSR-ed Client Component used: - A server/client branch `if (typeof window !== 'undefined')`. - Variable input such as `Date.now()` or `Math.random()` which changes each time it’s called. - Date formatting in a user’s locale which doesn’t match the server. - External changing data without sending a snapshot of it along with the HTML. - Invalid HTML tag nesting. It can also happen if the client has a browser extension installed which messes with the HTML before React loaded. <https://react.dev/link/hydration-mismatch> <App> <span> + Client - Server at throwOnHydrationMismatch …

### `<Context>` as a provider [](#context-as-a-provider "Link for this heading")

In React 19, you can render `<Context>` as a provider instead of `<Context.Provider>`:

```


const ThemeContext = createContext('');

function App({children}) {

 return (

  <ThemeContext value="dark">

   {children}

  </ThemeContext>

 ); 

}


```


New Context providers can use `<Context>` and we will be publishing a codemod to convert existing providers. In future versions we will deprecate `<Context.Provider>`.

### Cleanup functions for refs [](#cleanup-functions-for-refs "Link for Cleanup functions for refs ")

We now support returning a cleanup function from `ref` callbacks:

```


<input

 ref={(ref) => {

  // ref created

  // NEW: return a cleanup function to reset

  // the ref when element is removed from DOM.

  return () => {

   // ref cleanup

  };

 }}

/>


```


When the component unmounts, React will call the cleanup function returned from the `ref` callback. This works for DOM refs, refs to class components, and `useImperativeHandle`.

### Note

Previously, React would call `ref` functions with `null` when unmounting the component. If your `ref` returns a cleanup function, React will now skip this step.

In future versions, we will deprecate calling refs with `null` when unmounting components.

Due to the introduction of ref cleanup functions, returning anything else from a `ref` callback will now be rejected by TypeScript. The fix is usually to stop using implicit returns, for example:

```


- <div ref={current => (instance = current)} />

+ <div ref={current => {instance = current}} />


```


The original code returned the instance of the `HTMLDivElement` and TypeScript wouldn’t know if this was _supposed_ to be a cleanup function or if you didn’t want to return a cleanup function.

You can codemod this pattern with `no-implicit-ref-callback-return`[](https://github.com/eps1lon/types-react-codemod/#no-implicit-ref-callback-return).

### `useDeferredValue` initial value [](#use-deferred-value-initial-value "Link for this heading")

We’ve added an `initialValue` option to `useDeferredValue`:

```


function Search({deferredValue}) {

 // On initial render the value is ''.

 // Then a re-render is scheduled with the deferredValue.

 const value = useDeferredValue(deferredValue, '');

 return (

  <Results query={value} />

 );

}


```


When initialValue is provided, `useDeferredValue` will return it as `value` for the initial render of the component, and schedules a re-render in the background with the deferredValue returned.

For more, see `useDeferredValue`[](/reference/react/useDeferredValue).

### Support for Document Metadata [](#support-for-metadata-tags "Link for Support for Document Metadata ")

In HTML, document metadata tags like `<title>`, `<link>`, and `<meta>` are reserved for placement in the `<head>` section of the document. In React, the component that decides what metadata is appropriate for the app may be very far from the place where you render the `<head>` or React does not render the `<head>` at all. In the past, these elements would need to be inserted manually in an effect, or by libraries like `react-helmet`[](https://github.com/nfl/react-helmet), and required careful handling when server rendering a React application.

In React 19, we’re adding support for rendering document metadata tags in components natively:

```


function BlogPost({post}) {

 return (

  <article>

   <h1>{post.title}</h1>

   <title>{post.title}</title>

   <meta name="author" content="Josh" />

   <link rel="author" href="https://twitter.com/joshcstory/" />

   <meta name="keywords" content={post.keywords} />

   <p>

    Eee equals em-see-squared...

   </p>

  </article>

 );

}


```


When React renders this component, it will see the `<title>` `<link>` and `<meta>` tags, and automatically hoist them to the `<head>` section of document. By supporting these metadata tags natively, we’re able to ensure they work with client-only apps, streaming SSR, and Server Components.

### Note

#### You may still want a Metadata library [](#you-may-still-want-a-metadata-library "Link for You may still want a Metadata library ")

For simple use cases, rendering Document Metadata as tags may be suitable, but libraries can offer more powerful features like overriding generic metadata with specific metadata based on the current route. These features make it easier for frameworks and libraries like `react-helmet`[](https://github.com/nfl/react-helmet) to support metadata tags, rather than replace them.

For more info, see the docs for `<title>`[](/reference/react-dom/components/title), `<link>`[](/reference/react-dom/components/link), and `<meta>`[](/reference/react-dom/components/meta).

### Support for stylesheets [](#support-for-stylesheets "Link for Support for stylesheets ")

Stylesheets, both externally linked (`<link rel="stylesheet" href="...">`) and inline (`<style>...</style>`), require careful positioning in the DOM due to style precedence rules. Building a stylesheet capability that allows for composability within components is hard, so users often end up either loading all of their styles far from the components that may depend on them, or they use a style library which encapsulates this complexity.

In React 19, we’re addressing this complexity and providing even deeper integration into Concurrent Rendering on the Client and Streaming Rendering on the Server with built in support for stylesheets. If you tell React the `precedence` of your stylesheet it will manage the insertion order of the stylesheet in the DOM and ensure that the stylesheet (if external) is loaded before revealing content that depends on those style rules.

```


function ComponentOne() {

 return (

  <Suspense fallback="loading...">

   <link rel="stylesheet" href="foo" precedence="default" />

   <link rel="stylesheet" href="bar" precedence="high" />

   <article class="foo-class bar-class">

    {...}

   </article>

  </Suspense>

 )

}

function ComponentTwo() {

 return (

  <div>

   <p>{...}</p>

   <link rel="stylesheet" href="baz" precedence="default" /> <-- will be inserted between foo & bar

  </div>

 )

}


```


During Server Side Rendering React will include the stylesheet in the `<head>`, which ensures that the browser will not paint until it has loaded. If the stylesheet is discovered late after we’ve already started streaming, React will ensure that the stylesheet is inserted into the `<head>` on the client before revealing the content of a Suspense boundary that depends on that stylesheet.

During Client Side Rendering React will wait for newly rendered stylesheets to load before committing the render. If you render this component from multiple places within your application React will only include the stylesheet once in the document:

```


function App() {

 return <>

  <ComponentOne />

  ...

  <ComponentOne /> // won't lead to a duplicate stylesheet link in the DOM

 </>

}


```


For users accustomed to loading stylesheets manually this is an opportunity to locate those stylesheets alongside the components that depend on them allowing for better local reasoning and an easier time ensuring you only load the stylesheets that you actually depend on.

Style libraries and style integrations with bundlers can also adopt this new capability so even if you don’t directly render your own stylesheets, you can still benefit as your tools are upgraded to use this feature.

For more details, read the docs for `<link>`[](/reference/react-dom/components/link) and `<style>`[](/reference/react-dom/components/style).

### Support for async scripts [](#support-for-async-scripts "Link for Support for async scripts ")

In HTML normal scripts (`<script src="...">`) and deferred scripts (`<script defer="" src="...">`) load in document order which makes rendering these kinds of scripts deep within your component tree challenging. Async scripts (`<script async="" src="...">`) however will load in arbitrary order.

In React 19 we’ve included better support for async scripts by allowing you to render them anywhere in your component tree, inside the components that actually depend on the script, without having to manage relocating and deduplicating script instances.

```


function MyComponent() {

 return (

  <div>

   <script async={true} src="..." />

   Hello World

  </div>

 )

}

function App() {

 <html>

  <body>

   <MyComponent>

   ...

   <MyComponent> // won't lead to duplicate script in the DOM

  </body>

 </html>

}


```


In all rendering environments, async scripts will be deduplicated so that React will only load and execute the script once even if it is rendered by multiple different components.

In Server Side Rendering, async scripts will be included in the `<head>` and prioritized behind more critical resources that block paint such as stylesheets, fonts, and image preloads.

For more details, read the docs for `<script>`[](/reference/react-dom/components/script).

### Support for preloading resources [](#support-for-preloading-resources "Link for Support for preloading resources ")

During initial document load and on client side updates, telling the Browser about resources that it will likely need to load as early as possible can have a dramatic effect on page performance.

React 19 includes a number of new APIs for loading and preloading Browser resources to make it as easy as possible to build great experiences that aren’t held back by inefficient resource loading.

```


import { prefetchDNS, preconnect, preload, preinit } from 'react-dom'

function MyComponent() {

 preinit('https://.../path/to/some/script.js', {as: 'script' }) // loads and executes this script eagerly

 preload('https://.../path/to/font.woff', { as: 'font' }) // preloads this font

 preload('https://.../path/to/stylesheet.css', { as: 'style' }) // preloads this stylesheet

 prefetchDNS('https://...') // when you may not actually request anything from this host

 preconnect('https://...') // when you will request something but aren't sure what

}


```


```


<!-- the above would result in the following DOM/HTML -->

<html>

 <head>

  <!-- links/scripts are prioritized by their utility to early loading, not call order -->

  <link rel="prefetch-dns" href="https://...">

  <link rel="preconnect" href="https://...">

  <link rel="preload" as="font" href="https://.../path/to/font.woff">

  <link rel="preload" as="style" href="https://.../path/to/stylesheet.css">

  <script async="" src="https://.../path/to/some/script.js"></script>

 </head>

 <body>

  ...

 </body>

</html>


```


These APIs can be used to optimize initial page loads by moving discovery of additional resources like fonts out of stylesheet loading. They can also make client updates faster by prefetching a list of resources used by an anticipated navigation and then eagerly preloading those resources on click or even on hover.

For more details see [Resource Preloading APIs](/reference/react-dom#resource-preloading-apis).

### Compatibility with third-party scripts and extensions [](#compatibility-with-third-party-scripts-and-extensions "Link for Compatibility with third-party scripts and extensions ")

We’ve improved hydration to account for third-party scripts and browser extensions.

When hydrating, if an element that renders on the client doesn’t match the element found in the HTML from the server, React will force a client re-render to fix up the content. Previously, if an element was inserted by third-party scripts or browser extensions, it would trigger a mismatch error and client render.

In React 19, unexpected tags in the `<head>` and `<body>` will be skipped over, avoiding the mismatch errors. If React needs to re-render the entire document due to an unrelated hydration mismatch, it will leave in place stylesheets inserted by third-party scripts and browser extensions.

### Better error reporting [](#error-handling "Link for Better error reporting ")

We improved error handling in React 19 to remove duplication and provide options for handling caught and uncaught errors. For example, when there’s an error in render caught by an Error Boundary, previously React would throw the error twice (once for the original error, then again after failing to automatically recover), and then call `console.error` with info about where the error occurred.

This resulted in three errors for every caught error:

Console

Uncaught Error: hit at Throws at renderWithHooks …

Uncaught Error: hit <-- Duplicate at Throws at renderWithHooks …

The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary.

In React 19, we log a single error with all the error information included:

Console

Error: hit at Throws at renderWithHooks … The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary. at ErrorBoundary at App

Additionally, we’ve added two new root options to complement `onRecoverableError`:

  * `onCaughtError`: called when React catches an error in an Error Boundary.
  * `onUncaughtError`: called when an error is thrown and not caught by an Error Boundary.
  * `onRecoverableError`: called when an error is thrown and automatically recovered.



For more info and examples, see the docs for `createRoot`[](/reference/react-dom/client/createRoot) and `hydrateRoot`[](/reference/react-dom/client/hydrateRoot).

### Support for Custom Elements [](#support-for-custom-elements "Link for Support for Custom Elements ")

React 19 adds full support for custom elements and passes all tests on [Custom Elements Everywhere](https://custom-elements-everywhere.com/).

In past versions, using Custom Elements in React has been difficult because React treated unrecognized props as attributes rather than properties. In React 19, we’ve added support for properties that works on the client and during SSR with the following strategy:

  * **Server Side Rendering** : props passed to a custom element will render as attributes if their type is a primitive value like `string`, `number`, or the value is `true`. Props with non-primitive types like `object`, `symbol`, `function`, or value `false` will be omitted.
  * **Client Side Rendering** : props that match a property on the Custom Element instance will be assigned as properties, otherwise they will be assigned as attributes.



Thanks to [Joey Arhar](https://github.com/josepharhar) for driving the design and implementation of Custom Element support in React.

#### How to upgrade [](#how-to-upgrade "Link for How to upgrade ")

See the [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide) for step-by-step instructions and a full list of breaking and notable changes.

_Note: this post was originally published 04/25/2024 and has been updated to 12/05/2024 with the stable release._

[ PreviousBlog](/blog)[NextReact Compiler Beta Release and Roadmap](/blog/2024/10/21/react-compiler-beta-release)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React Compiler Beta Release[](#undefined "Link for this heading")

October 21, 2024 by .

The React team is excited to share new updates:

  1. We’re publishing React Compiler Beta today, so that early adopters and library maintainers can try it and provide feedback.
  2. We’re officially supporting React Compiler for apps on React 17+, through an optional `react-compiler-runtime` package.
  3. We’re opening up public membership of the [React Compiler Working Group](https://github.com/reactwg/react-compiler) to prepare the community for gradual adoption of the compiler.



At [React Conf 2024](/blog/2024/05/22/react-conf-2024-recap), we announced the experimental release of React Compiler, a build-time tool that optimizes your React app through automatic memoization. [You can find an introduction to React Compiler here](/learn/react-compiler).

Since the first release, we’ve fixed numerous bugs reported by the React community, received several high quality bug fixes and contributions[1](#user-content-fn-1) to the compiler, made the compiler more resilient to the broad diversity of JavaScript patterns, and have continued to roll out the compiler more widely at Meta.

In this post, we want to share what’s next for React Compiler.

## Try React Compiler Beta today [](#try-react-compiler-beta-today "Link for Try React Compiler Beta today ")

At [React India 2024](https://www.youtube.com/watch?v=qd5yk2gxbtg), we shared an update on React Compiler. Today, we are excited to announce a new Beta release of React Compiler and ESLint plugin. New betas are published to npm using the `@beta` tag.

To install React Compiler Beta:

Terminal

Copy

npm install -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta

Or, if you’re using Yarn:

Terminal

Copy

yarn add -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta

You can watch talk at React India here:

## We recommend everyone use the React Compiler linter today [](#we-recommend-everyone-use-the-react-compiler-linter-today "Link for We recommend everyone use the React Compiler linter today ")

React Compiler’s ESLint plugin helps developers proactively identify and correct [Rules of React](/reference/rules) violations. **We strongly recommend everyone use the linter today**. The linter does not require that you have the compiler installed, so you can use it independently, even if you are not ready to try out the compiler.

To install the linter only:

Terminal

Copy

npm install -D eslint-plugin-react-compiler@beta

Or, if you’re using Yarn:

Terminal

Copy

yarn add -D eslint-plugin-react-compiler@beta

After installation you can enable the linter by [adding it to your ESLint config](/learn/react-compiler#installing-eslint-plugin-react-compiler). Using the linter helps identify Rules of React breakages, making it easier to adopt the compiler when it’s fully released.

## Backwards Compatibility [](#backwards-compatibility "Link for Backwards Compatibility ")

React Compiler produces code that depends on runtime APIs added in React 19, but we’ve since added support for the compiler to also work with React 17 and 18. If you are not on React 19 yet, in the Beta release you can now try out React Compiler by specifying a minimum `target` in your compiler config, and adding `react-compiler-runtime` as a dependency. [You can find docs on this here](/learn/react-compiler#using-react-compiler-with-react-17-or-18).

## Using React Compiler in libraries [](#using-react-compiler-in-libraries "Link for Using React Compiler in libraries ")

Our initial release was focused on identifying major issues with using the compiler in applications. We’ve gotten great feedback and have substantially improved the compiler since then. We’re now ready for broad feedback from the community, and for library authors to try out the compiler to improve performance and the developer experience of maintaining your library.

React Compiler can also be used to compile libraries. Because React Compiler needs to run on the original source code prior to any code transformations, it is not possible for an application’s build pipeline to compile the libraries they use. Hence, our recommendation is for library maintainers to independently compile and test their libraries with the compiler, and ship compiled code to npm.

Because your code is pre-compiled, users of your library will not need to have the compiler enabled in order to benefit from the automatic memoization applied to your library. If your library targets apps not yet on React 19, specify a minimum `target` and add `react-compiler-runtime` as a direct dependency. The runtime package will use the correct implementation of APIs depending on the application’s version, and polyfill the missing APIs if necessary.

[You can find more docs on this here.](/learn/react-compiler#using-the-compiler-on-libraries)

## Opening up React Compiler Working Group to everyone [](#opening-up-react-compiler-working-group-to-everyone "Link for Opening up React Compiler Working Group to everyone ")

We previously announced the invite-only [React Compiler Working Group](https://github.com/reactwg/react-compiler) at React Conf to provide feedback, ask questions, and collaborate on the compiler’s experimental release.

From today, together with the Beta release of React Compiler, we are opening up Working Group membership to everyone. The goal of the React Compiler Working Group is to prepare the ecosystem for a smooth, gradual adoption of React Compiler by existing applications and libraries. Please continue to file bug reports in the [React repo](https://github.com/facebook/react), but please leave feedback, ask questions, or share ideas in the [Working Group discussion forum](https://github.com/reactwg/react-compiler/discussions).

The core team will also use the discussions repo to share our research findings. As the Stable Release gets closer, any important information will also be posted on this forum.

## React Compiler at Meta [](#react-compiler-at-meta "Link for React Compiler at Meta ")

At [React Conf](/blog/2024/05/22/react-conf-2024-recap), we shared that our rollout of the compiler on Quest Store and Instagram were successful. Since then, we’ve deployed React Compiler across several more major web apps at Meta, including and [Threads](https://www.threads.net). That means if you’ve used any of these apps recently, you may have had your experience powered by the compiler. We were able to onboard these apps onto the compiler with few code changes required, in a monorepo with more than 100,000 React components.

We’ve seen notable performance improvements across all of these apps. As we’ve rolled out, we’re continuing to see results on the order of [the wins we shared previously at ReactConf](https://youtu.be/lyEKhv8-3n0?t=3223). These apps have already been heavily hand tuned and optimized by Meta engineers and React experts over the years, so even improvements on the order of a few percent are a huge win for us.

We also expected developer productivity wins from React Compiler. To measure this, we collaborated with our data science partners at Meta[2](#user-content-fn-2) to conduct a thorough statistical analysis of the impact of manual memoization on productivity. Before rolling out the compiler at Meta, we discovered that only about 8% of React pull requests used manual memoization and that these pull requests took 31-46% longer to author[3](#user-content-fn-3). This confirmed our intuition that manual memoization introduces cognitive overhead, and we anticipate that React Compiler will lead to more efficient code authoring and review. Notably, React Compiler also ensures that _all_ code is memoized by default, not just the (in our case) 8% where developers explicitly apply memoization.

## Roadmap to Stable [](#roadmap-to-stable "Link for Roadmap to Stable ")

_This is not a final roadmap, and is subject to change._

We intend to ship a Release Candidate of the compiler in the near future following the Beta release, when the majority of apps and libraries that follow the Rules of React have been proven to work well with the compiler. After a period of final feedback from the community, we plan on a Stable Release for the compiler. The Stable Release will mark the beginning of a new foundation for React, and all apps and libraries will be strongly recommended to use the compiler and ESLint plugin.

  * ✅ Experimental: Released at React Conf 2024, primarily for feedback from early adopters.
  * ✅ Public Beta: Available today, for feedback from the wider community.
  * 🚧 Release Candidate (RC): React Compiler works for the majority of rule-following apps and libraries without issue.
  * 🚧 General Availability: After final feedback period from the community.



These releases also include the compiler’s ESLint plugin, which surfaces diagnostics statically analyzed by the compiler. We plan to combine the existing eslint-plugin-react-hooks plugin with the compiler’s ESLint plugin, so only one plugin needs to be installed.

Post-Stable, we plan to add more compiler optimizations and improvements. This includes both continual improvements to automatic memoization, and new optimizations altogether, with minimal to no change of product code. Upgrading to each new release of the compiler is aimed to be straightforward, and each upgrade will continue to improve performance and add better handling of diverse JavaScript and React patterns.

Throughout this process, we also plan to prototype an IDE extension for React. It is still very early in research, so we expect to be able to share more of our findings with you in a future React Labs blog post.

Thanks to , , , [Alex Taylor](https://github.com/alexmckenley), , and for reviewing and editing this post.

## Footnotes[](#footnote-label "Link for Footnotes")

  1. Thanks [@nikeee](https://github.com/facebook/react/pulls?q=is%3Apr+author%3Anikeee), [@henryqdineen](https://github.com/facebook/react/pulls?q=is%3Apr+author%3Ahenryqdineen), [@TrickyPi](https://github.com/facebook/react/pulls?q=is%3Apr+author%3ATrickyPi), and several others for their contributions to the compiler. [↩](#user-content-fnref-1)

  2. Thanks for leading this study on React Compiler at Meta, and for reviewing this post. [↩](#user-content-fnref-2)

  3. After controlling on author tenure, diff length/complexity, and other potential confounding factors. [↩](#user-content-fnref-3)




[PreviousReact 19](/blog/2024/12/05/react-19)[NextReact Conf 2024 Recap](/blog/2024/05/22/react-conf-2024-recap)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React Conf 2024 Recap[](#undefined "Link for this heading")

May 22, 2024 by .

Last week we hosted React Conf 2024, a two-day conference in Henderson, Nevada where 700+ attendees gathered in-person to discuss the latest in UI engineering. This was our first in-person conference since 2019, and we were thrilled to be able to bring the community together again.

At React Conf 2024, we announced the [React 19 RC](/blog/2024/12/05/react-19), the [React Native New Architecture Beta](https://github.com/reactwg/react-native-new-architecture/discussions/189), and an experimental release of the [React Compiler](/learn/react-compiler). The community also took the stage to announce [React Router v7](https://remix.run/blog/merging-remix-and-react-router), [Universal Server Components](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=20765s) in Expo Router, React Server Components in [RedwoodJS](https://redwoodjs.com/blog/rsc-now-in-redwoodjs), and much more.

The entire [day 1](https://www.youtube.com/watch?v=T8TZQ6k4SLE) and [day 2](https://www.youtube.com/watch?v=0ckOUBiuxVY) streams are available online. In this post, we’ll summarize the talks and announcements from the event.

## Day 1 [](#day-1 "Link for Day 1 ")

_[Watch the full day 1 stream here.](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=973s)_

To kick off day 1, Meta CTO [Andrew “Boz” Bosworth](https://www.threads.net/@boztank) shared a welcome message followed by an introduction by , who manages the React Org at Meta, and our MC .

In the day 1 keynote, shared our goals and vision for React to make it easy for anyone to build great user experiences. followed with a State of React, where she shared that React was downloaded over 1 billion times in 2023, and that 37% of new developers learn to program with React. Finally, she highlighted the work of the React community to make React, React.

For more, check out these talks from the community later in the conference:

  * [Vanilla React](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=5542s) by 
  * [React Rhythm & Blues](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=12728s) by 
  * [RedwoodJS, now with React Server Components](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=26815s) by 
  * [Introducing Universal React Server Components in Expo Router](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=20765s) by 



Next in the keynote, and shared new features coming in React 19, and announced the React 19 RC which is ready for testing in production. Check out all the features in the [React 19 release post](/blog/2024/12/05/react-19), and see these talks for deep dives on the new features:

  * [What’s new in React 19](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=8880s) by 
  * [React Unpacked: A Roadmap to React 19](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=10112s) by 
  * [React 19 Deep Dive: Coordinating HTML](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=24916s) by 
  * [Enhancing Forms with React Server Components](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=25280s) by 
  * [React for Two Computers](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=18825s) by 
  * [And Now You Understand React Server Components](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=11256s) by 



Finally, we ended the keynote with , , and announcing that the React Compiler is now [Open Source](https://github.com/facebook/react/pull/29061), and sharing an experimental version of the React Compiler to try out.

For more information on using the Compiler and how it works, check out [the docs](/learn/react-compiler) and these talks:

  * [Forget About Memo](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=12020s) by 
  * [React Compiler Deep Dive](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=9313s) by and 



Watch the full day 1 keynote here:

## Day 2 [](#day-2 "Link for Day 2 ")

_[Watch the full day 2 stream here.](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=1720s)_

To kick off day 2, shared a welcome message, followed by a Thank You from and an introduction by our Chief Vibes Officer .

In the day 2 keynote, shared the State of React Native, including 78 million downloads in 2023. He also highlighted apps using React Native including 2000+ screens used inside of Meta; the product details page in Facebook Marketplace, which is visited more than 2 billion times per day; and part of the Microsoft Windows Start Menu and some features in almost every Microsoft Office product across mobile and desktop.

Nicola also highlighted all the work the community does to support React Native including libraries, frameworks, and multiple platforms. For more, check out these talks from the community:

  * [Extending React Native beyond Mobile and Desktop Apps](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=5798s) by and 
  * [Spatial computing with React](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=22525s) by 



continued the day 2 keynote by announcing that the React Native New Architecture is now in Beta and ready for apps to adopt in production. He shared new features and improvements in the new architecture, and shared the roadmap for the future of React Native. For more check out:

  * [Cross Platform React](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=26569s) by [Olga Zinoveva](https://github.com/SlyCaptainFlint) and 



Next in the keynote, Nicola announced that we are now recommending starting with a framework like Expo for all new apps created with React Native. With the change, he also announced a new React Native homepage and new Getting Started docs. You can view the new Getting Started guide in the [React Native docs](https://reactnative.dev/docs/next/environment-setup).

Finally, to end the keynote, shared the latest features and improvements in Expo, and how to get started developing with React Native using Expo.

Watch the full day 2 keynote here:

## Q&A [](#q-and-a "Link for Q&A ")

The React and React Native teams also ended each day with a Q&A session:

  * [React Q&A](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=27518s) hosted by 
  * [React Native Q&A](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=27935s) hosted by 



## And more… [](#and-more "Link for And more… ")

We also heard talks on accessibility, error reporting, css, and more:

  * [Demystifying accessibility in React apps](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=20655s) by 
  * [Pigment CSS, CSS in the server component age](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=21696s) by 
  * [Real-time React Server Components](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=24070s) by 
  * [Let’s break React Rules](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=25862s) by 
  * [Solve 100% of your errors](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=19881s) by [Ryan Albrecht](https://github.com/ryan953)



## Thank you [](#thank-you "Link for Thank you ")

Thank you to all the staff, speakers, and participants who made React Conf 2024 possible. There are too many to list, but we want to thank a few in particular.

Thank you to , the team at [Callstack](https://www.callstack.com/), and our React Team Developer Advocate for helping to plan the entire event; and to [Sunny Leggett](https://zeroslopeevents.com/about) and everyone from [Zero Slope](https://zeroslopeevents.com) for helping to organize the event.

Thank you for being our MC and Chief Vibes Officer; and to and for hosting the Q&A sessions.

Thank you and for welcoming us each day and providing direction on structure and content; and to for joining us with a special message during the after-party.

Thank you [Ricky Hanlon](https://www.youtube.com/watch?v=FxTZL2U-uKg&t=1263s) for providing detailed feedback on talks, working on slide designs, and generally filling in the gaps to sweat the details.

Thank you [Callstack](https://www.callstack.com/) for building the conference website; and to and the [Expo](https://expo.dev/) team for building the conference mobile app.

Thank you to all the sponsors who made the event possible: [Remix](https://remix.run/), [Amazon](https://developer.amazon.com/apps-and-games?cmp=US_2024_05_3P_React-Conf-2024&ch=prtnr&chlast=prtnr&pub=ref&publast=ref&type=org&typelast=org), [MUI](https://mui.com/), [Sentry](https://sentry.io/for/react/?utm_source=sponsored-conf&utm_medium=sponsored-event&utm_campaign=frontend-fy25q2-evergreen&utm_content=logo-reactconf2024-learnmore), [Abbott](https://www.jobs.abbott/software), [Expo](https://expo.dev/), [RedwoodJS](https://redwoodjs.com/), and [Vercel](https://vercel.com).

Thank you to the AV Team for the visuals, stage, and sound; and to the Westin Hotel for hosting us.

Thank you to all the speakers who shared their knowledge and experiences with the community.

Finally, thank you to everyone who attended in person and online to show what makes React, React. React is more than a library, it is a community, and it was inspiring to see everyone come together to share and learn together.

See you next time!

[PreviousReact Compiler Beta Release and Roadmap](/blog/2024/10/21/react-compiler-beta-release)[NextReact 19 RC](/blog/2024/04/25/react-19)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React v19[](#undefined "Link for this heading")

December 05, 2024 by [The React Team](/community/team)

### Note

### React 19 is now stable! [](#react-19-is-now-stable "Link for React 19 is now stable! ")

Additions since this post was originally shared with the React 19 RC in April:

  * **Pre-warming for suspended trees** : see [Improvements to Suspense](/blog/2024/04/25/react-19-upgrade-guide#improvements-to-suspense).
  * **React DOM static APIs** : see [New React DOM Static APIs](#new-react-dom-static-apis).



_The date for this post has been updated to reflect the stable release date._

React v19 is now available on npm!

In our [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide), we shared step-by-step instructions for upgrading your app to React 19. In this post, we’ll give an overview of the new features in React 19, and how you can adopt them.

  * [What’s new in React 19](#whats-new-in-react-19)
  * [Improvements in React 19](#improvements-in-react-19)
  * [How to upgrade](#how-to-upgrade)



For a list of breaking changes, see the [Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide).

## What’s new in React 19 [](#whats-new-in-react-19 "Link for What’s new in React 19 ")

### Actions [](#actions "Link for Actions ")

A common use case in React apps is to perform a data mutation and then update state in response. For example, when a user submits a form to change their name, you will make an API request, and then handle the response. In the past, you would need to handle pending states, errors, optimistic updates, and sequential requests manually.

For example, you could handle the pending and error state in `useState`:

```


// Before Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, setIsPending] = useState(false);

 const handleSubmit = async () => {

  setIsPending(true);

  const error = await updateName(name);

  setIsPending(false);

  if (error) {

   setError(error);

   return;

  } 

  redirect("/path");

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


In React 19, we’re adding support for using async functions in transitions to handle pending states, errors, forms, and optimistic updates automatically.

For example, you can use `useTransition` to handle the pending state for you:

```


// Using pending state from Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, startTransition] = useTransition();

 const handleSubmit = () => {

  startTransition(async () => {

   const error = await updateName(name);

   if (error) {

    setError(error);

    return;

   } 

   redirect("/path");

  })

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


The async transition will immediately set the `isPending` state to true, make the async request(s), and switch `isPending` to false after any transitions. This allows you to keep the current UI responsive and interactive while the data is changing.

### Note

#### By convention, functions that use async transitions are called “Actions”. [](#by-convention-functions-that-use-async-transitions-are-called-actions "Link for By convention, functions that use async transitions are called “Actions”. ")

Actions automatically manage submitting data for you:

  * **Pending state** : Actions provide a pending state that starts at the beginning of a request and automatically resets when the final state update is committed.
  * **Optimistic updates** : Actions support the new `useOptimistic`[](#new-hook-optimistic-updates) hook so you can show users instant feedback while the requests are submitting.
  * **Error handling** : Actions provide error handling so you can display Error Boundaries when a request fails, and revert optimistic updates to their original value automatically.
  * **Forms** : `<form>` elements now support passing functions to the `action` and `formAction` props. Passing functions to the `action` props use Actions by default and reset the form automatically after submission.



Building on top of Actions, React 19 introduces `useOptimistic`[](#new-hook-optimistic-updates) to manage optimistic updates, and a new hook `React.useActionState`[](#new-hook-useactionstate) to handle common cases for Actions. In `react-dom` we’re adding `<form>`[ Actions](#form-actions) to manage forms automatically and `useFormStatus`[](#new-hook-useformstatus) to support the common cases for Actions in forms.

In React 19, the above example can be simplified to:

```


// Using <form> Actions and useActionState

function ChangeName({ name, setName }) {

 const [error, submitAction, isPending] = useActionState(

  async (previousState, formData) => {

   const error = await updateName(formData.get("name"));

   if (error) {

    return error;

   }

   redirect("/path");

   return null;

  },

  null,

 );

 return (

  <form action={submitAction}>

   <input type="text" name="name" />

   <button type="submit" disabled={isPending}>Update</button>

   {error && <p>{error}</p>}

  </form>

 );

}


```


In the next section, we’ll break down each of the new Action features in React 19.

### New hook: `useActionState` [](#new-hook-useactionstate "Link for this heading")

To make the common cases easier for Actions, we’ve added a new hook called `useActionState`:

```


const [error, submitAction, isPending] = useActionState(

 async (previousState, newName) => {

  const error = await updateName(newName);

  if (error) {

   // You can return any result of the action.

   // Here, we return only the error.

   return error;

  }

  // handle success

  return null;

 },

 null,

);


```


`useActionState` accepts a function (the “Action”), and returns a wrapped Action to call. This works because Actions compose. When the wrapped Action is called, `useActionState` will return the last result of the Action as `data`, and the pending state of the Action as `pending`.

### Note

`React.useActionState` was previously called `ReactDOM.useFormState` in the Canary releases, but we’ve renamed it and deprecated `useFormState`.

See [#28491](https://github.com/facebook/react/pull/28491) for more info.

For more information, see the docs for `useActionState`[](/reference/react/useActionState).

### React DOM: `<form>` Actions [](#form-actions "Link for this heading")

Actions are also integrated with React 19’s new `<form>` features for `react-dom`. We’ve added support for passing functions as the `action` and `formAction` props of `<form>`, `<input>`, and `<button>` elements to automatically submit forms with Actions:

```


<form action={actionFunction}>


```


When a `<form>` Action succeeds, React will automatically reset the form for uncontrolled components. If you need to reset the `<form>` manually, you can call the new `requestFormReset` React DOM API.

For more information, see the `react-dom` docs for `<form>`[](/reference/react-dom/components/form), `<input>`[](/reference/react-dom/components/input), and `<button>`.

### React DOM: New hook: `useFormStatus` [](#new-hook-useformstatus "Link for this heading")

In design systems, it’s common to write design components that need access to information about the `<form>` they’re in, without drilling props down to the component. This can be done via Context, but to make the common case easier, we’ve added a new hook `useFormStatus`:

```


import {useFormStatus} from 'react-dom';

function DesignButton() {

 const {pending} = useFormStatus();

 return <button type="submit" disabled={pending} />

}


```


`useFormStatus` reads the status of the parent `<form>` as if the form was a Context provider.

For more information, see the `react-dom` docs for `useFormStatus`[](/reference/react-dom/hooks/useFormStatus).

### New hook: `useOptimistic` [](#new-hook-optimistic-updates "Link for this heading")

Another common UI pattern when performing a data mutation is to show the final state optimistically while the async request is underway. In React 19, we’re adding a new hook called `useOptimistic` to make this easier:

```


function ChangeName({currentName, onUpdateName}) {

 const [optimisticName, setOptimisticName] = useOptimistic(currentName);

 const submitAction = async formData => {

  const newName = formData.get("name");

  setOptimisticName(newName);

  const updatedName = await updateName(newName);

  onUpdateName(updatedName);

 };

 return (

  <form action={submitAction}>

   <p>Your name is: {optimisticName}</p>

   <p>

    <label>Change Name:</label>

    <input

     type="text"

     name="name"

     disabled={currentName !== optimisticName}

    />

   </p>

  </form>

 );

}


```


The `useOptimistic` hook will immediately render the `optimisticName` while the `updateName` request is in progress. When the update finishes or errors, React will automatically switch back to the `currentName` value.

For more information, see the docs for `useOptimistic`[](/reference/react/useOptimistic).

### New API: `use` [](#new-feature-use "Link for this heading")

In React 19 we’re introducing a new API to read resources in render: `use`.

For example, you can read a promise with `use`, and React will Suspend until the promise resolves:

```


import {use} from 'react';

function Comments({commentsPromise}) {

 // `use` will suspend until the promise resolves.

 const comments = use(commentsPromise);

 return comments.map(comment => <p key={comment.id}>{comment}</p>);

}

function Page({commentsPromise}) {

 // When `use` suspends in Comments,

 // this Suspense boundary will be shown.

 return (

  <Suspense fallback={<div>Loading...</div>}>

   <Comments commentsPromise={commentsPromise} />

  </Suspense>

 )

}


```


### Note

#### `use` does not support promises created in render. [](#use-does-not-support-promises-created-in-render "Link for this heading")

If you try to pass a promise created in render to `use`, React will warn:

Console

A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework.

To fix, you need to pass a promise from a suspense powered library or framework that supports caching for promises. In the future we plan to ship features to make it easier to cache promises in render.

You can also read context with `use`, allowing you to read Context conditionally such as after early returns:

```


import {use} from 'react';

import ThemeContext from './ThemeContext'

function Heading({children}) {

 if (children == null) {

  return null;

 }

 // This would not work with useContext

 // because of the early return.

 const theme = use(ThemeContext);

 return (

  <h1 style={{color: theme.color}}>

   {children}

  </h1>

 );

}


```


The `use` API can only be called in render, similar to hooks. Unlike hooks, `use` can be called conditionally. In the future we plan to support more ways to consume resources in render with `use`.

For more information, see the docs for `use`[](/reference/react/use).

## New React DOM Static APIs [](#new-react-dom-static-apis "Link for New React DOM Static APIs ")

We’ve added two new APIs to `react-dom/static` for static site generation:

  * `prerender`[](/reference/react-dom/static/prerender)
  * `prerenderToNodeStream`[](/reference/react-dom/static/prerenderToNodeStream)



These new APIs improve on `renderToString` by waiting for data to load for static HTML generation. They are designed to work with streaming environments like Node.js Streams and Web Streams. For example, in a Web Stream environment, you can prerender a React tree to static HTML with `prerender`:

```


import { prerender } from 'react-dom/static';

async function handler(request) {

 const {prelude} = await prerender(<App />, {

  bootstrapScripts: ['/main.js']

 });

 return new Response(prelude, {

  headers: { 'content-type': 'text/html' },

 });

}


```


Prerender APIs will wait for all data to load before returning the static HTML stream. Streams can be converted to strings, or sent with a streaming response. They do not support streaming content as it loads, which is supported by the existing [React DOM server rendering APIs](/reference/react-dom/server).

For more information, see [React DOM Static APIs](/reference/react-dom/static).

## React Server Components [](#react-server-components "Link for React Server Components ")

### Server Components [](#server-components "Link for Server Components ")

Server Components are a new option that allows rendering components ahead of time, before bundling, in an environment separate from your client application or SSR server. This separate environment is the “server” in React Server Components. Server Components can run once at build time on your CI server, or they can be run for each request using a web server.

React 19 includes all of the React Server Components features included from the Canary channel. This means libraries that ship with Server Components can now target React 19 as a peer dependency with a `react-server` [export condition](https://github.com/reactjs/rfcs/blob/main/text/0227-server-module-conventions.md#react-server-conditional-exports) for use in frameworks that support the [Full-stack React Architecture](/learn/start-a-new-react-project#which-features-make-up-the-react-teams-full-stack-architecture-vision).

### Note

#### How do I build support for Server Components? [](#how-do-i-build-support-for-server-components "Link for How do I build support for Server Components? ")

While React Server Components in React 19 are stable and will not break between minor versions, the underlying APIs used to implement a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x.

To support React Server Components as a bundler or framework, we recommend pinning to a specific React version, or using the Canary release. We will continue working with bundlers and frameworks to stabilize the APIs used to implement React Server Components in the future.

For more, see the docs for [React Server Components](/reference/rsc/server-components).

### Server Actions [](#server-actions "Link for Server Actions ")

Server Actions allow Client Components to call async functions executed on the server.

When a Server Action is defined with the `"use server"` directive, your framework will automatically create a reference to the server function, and pass that reference to the Client Component. When that function is called on the client, React will send a request to the server to execute the function, and return the result.

### Note

#### There is no directive for Server Components. [](#there-is-no-directive-for-server-components "Link for There is no directive for Server Components. ")

A common misunderstanding is that Server Components are denoted by `"use server"`, but there is no directive for Server Components. The `"use server"` directive is used for Server Actions.

For more info, see the docs for [Directives](/reference/rsc/directives).

Server Actions can be created in Server Components and passed as props to Client Components, or they can be imported and used in Client Components.

For more, see the docs for [React Server Actions](/reference/rsc/server-actions).

## Improvements in React 19 [](#improvements-in-react-19 "Link for Improvements in React 19 ")

### `ref` as a prop [](#ref-as-a-prop "Link for this heading")

Starting in React 19, you can now access `ref` as a prop for function components:

```


function MyInput({placeholder, ref}) {

 return <input placeholder={placeholder} ref={ref} />

}

//...

<MyInput ref={ref} />


```


New function components will no longer need `forwardRef`, and we will be publishing a codemod to automatically update your components to use the new `ref` prop. In future versions we will deprecate and remove `forwardRef`.

### Note

`refs` passed to classes are not passed as props since they reference the component instance.

### Diffs for hydration errors [](#diffs-for-hydration-errors "Link for Diffs for hydration errors ")

We also improved error reporting for hydration errors in `react-dom`. For example, instead of logging multiple errors in DEV without any information about the mismatch:

Console

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Uncaught Error: Text content does not match server-rendered HTML. at checkForUnmatchedText …

We now log a single message with a diff of the mismatch:

Console

Uncaught Error: Hydration failed because the server rendered HTML didn’t match the client. As a result this tree will be regenerated on the client. This can happen if an SSR-ed Client Component used: - A server/client branch `if (typeof window !== 'undefined')`. - Variable input such as `Date.now()` or `Math.random()` which changes each time it’s called. - Date formatting in a user’s locale which doesn’t match the server. - External changing data without sending a snapshot of it along with the HTML. - Invalid HTML tag nesting. It can also happen if the client has a browser extension installed which messes with the HTML before React loaded. <https://react.dev/link/hydration-mismatch> <App> <span> + Client - Server at throwOnHydrationMismatch …

### `<Context>` as a provider [](#context-as-a-provider "Link for this heading")

In React 19, you can render `<Context>` as a provider instead of `<Context.Provider>`:

```


const ThemeContext = createContext('');

function App({children}) {

 return (

  <ThemeContext value="dark">

   {children}

  </ThemeContext>

 ); 

}


```


New Context providers can use `<Context>` and we will be publishing a codemod to convert existing providers. In future versions we will deprecate `<Context.Provider>`.

### Cleanup functions for refs [](#cleanup-functions-for-refs "Link for Cleanup functions for refs ")

We now support returning a cleanup function from `ref` callbacks:

```


<input

 ref={(ref) => {

  // ref created

  // NEW: return a cleanup function to reset

  // the ref when element is removed from DOM.

  return () => {

   // ref cleanup

  };

 }}

/>


```


When the component unmounts, React will call the cleanup function returned from the `ref` callback. This works for DOM refs, refs to class components, and `useImperativeHandle`.

### Note

Previously, React would call `ref` functions with `null` when unmounting the component. If your `ref` returns a cleanup function, React will now skip this step.

In future versions, we will deprecate calling refs with `null` when unmounting components.

Due to the introduction of ref cleanup functions, returning anything else from a `ref` callback will now be rejected by TypeScript. The fix is usually to stop using implicit returns, for example:

```


- <div ref={current => (instance = current)} />

+ <div ref={current => {instance = current}} />


```


The original code returned the instance of the `HTMLDivElement` and TypeScript wouldn’t know if this was _supposed_ to be a cleanup function or if you didn’t want to return a cleanup function.

You can codemod this pattern with `no-implicit-ref-callback-return`[](https://github.com/eps1lon/types-react-codemod/#no-implicit-ref-callback-return).

### `useDeferredValue` initial value [](#use-deferred-value-initial-value "Link for this heading")

We’ve added an `initialValue` option to `useDeferredValue`:

```


function Search({deferredValue}) {

 // On initial render the value is ''.

 // Then a re-render is scheduled with the deferredValue.

 const value = useDeferredValue(deferredValue, '');

 return (

  <Results query={value} />

 );

}


```


When initialValue is provided, `useDeferredValue` will return it as `value` for the initial render of the component, and schedules a re-render in the background with the deferredValue returned.

For more, see `useDeferredValue`[](/reference/react/useDeferredValue).

### Support for Document Metadata [](#support-for-metadata-tags "Link for Support for Document Metadata ")

In HTML, document metadata tags like `<title>`, `<link>`, and `<meta>` are reserved for placement in the `<head>` section of the document. In React, the component that decides what metadata is appropriate for the app may be very far from the place where you render the `<head>` or React does not render the `<head>` at all. In the past, these elements would need to be inserted manually in an effect, or by libraries like `react-helmet`[](https://github.com/nfl/react-helmet), and required careful handling when server rendering a React application.

In React 19, we’re adding support for rendering document metadata tags in components natively:

```


function BlogPost({post}) {

 return (

  <article>

   <h1>{post.title}</h1>

   <title>{post.title}</title>

   <meta name="author" content="Josh" />

   <link rel="author" href="https://twitter.com/joshcstory/" />

   <meta name="keywords" content={post.keywords} />

   <p>

    Eee equals em-see-squared...

   </p>

  </article>

 );

}


```


When React renders this component, it will see the `<title>` `<link>` and `<meta>` tags, and automatically hoist them to the `<head>` section of document. By supporting these metadata tags natively, we’re able to ensure they work with client-only apps, streaming SSR, and Server Components.

### Note

#### You may still want a Metadata library [](#you-may-still-want-a-metadata-library "Link for You may still want a Metadata library ")

For simple use cases, rendering Document Metadata as tags may be suitable, but libraries can offer more powerful features like overriding generic metadata with specific metadata based on the current route. These features make it easier for frameworks and libraries like `react-helmet`[](https://github.com/nfl/react-helmet) to support metadata tags, rather than replace them.

For more info, see the docs for `<title>`[](/reference/react-dom/components/title), `<link>`[](/reference/react-dom/components/link), and `<meta>`[](/reference/react-dom/components/meta).

### Support for stylesheets [](#support-for-stylesheets "Link for Support for stylesheets ")

Stylesheets, both externally linked (`<link rel="stylesheet" href="...">`) and inline (`<style>...</style>`), require careful positioning in the DOM due to style precedence rules. Building a stylesheet capability that allows for composability within components is hard, so users often end up either loading all of their styles far from the components that may depend on them, or they use a style library which encapsulates this complexity.

In React 19, we’re addressing this complexity and providing even deeper integration into Concurrent Rendering on the Client and Streaming Rendering on the Server with built in support for stylesheets. If you tell React the `precedence` of your stylesheet it will manage the insertion order of the stylesheet in the DOM and ensure that the stylesheet (if external) is loaded before revealing content that depends on those style rules.

```


function ComponentOne() {

 return (

  <Suspense fallback="loading...">

   <link rel="stylesheet" href="foo" precedence="default" />

   <link rel="stylesheet" href="bar" precedence="high" />

   <article class="foo-class bar-class">

    {...}

   </article>

  </Suspense>

 )

}

function ComponentTwo() {

 return (

  <div>

   <p>{...}</p>

   <link rel="stylesheet" href="baz" precedence="default" /> <-- will be inserted between foo & bar

  </div>

 )

}


```


During Server Side Rendering React will include the stylesheet in the `<head>`, which ensures that the browser will not paint until it has loaded. If the stylesheet is discovered late after we’ve already started streaming, React will ensure that the stylesheet is inserted into the `<head>` on the client before revealing the content of a Suspense boundary that depends on that stylesheet.

During Client Side Rendering React will wait for newly rendered stylesheets to load before committing the render. If you render this component from multiple places within your application React will only include the stylesheet once in the document:

```


function App() {

 return <>

  <ComponentOne />

  ...

  <ComponentOne /> // won't lead to a duplicate stylesheet link in the DOM

 </>

}


```


For users accustomed to loading stylesheets manually this is an opportunity to locate those stylesheets alongside the components that depend on them allowing for better local reasoning and an easier time ensuring you only load the stylesheets that you actually depend on.

Style libraries and style integrations with bundlers can also adopt this new capability so even if you don’t directly render your own stylesheets, you can still benefit as your tools are upgraded to use this feature.

For more details, read the docs for `<link>`[](/reference/react-dom/components/link) and `<style>`[](/reference/react-dom/components/style).

### Support for async scripts [](#support-for-async-scripts "Link for Support for async scripts ")

In HTML normal scripts (`<script src="...">`) and deferred scripts (`<script defer="" src="...">`) load in document order which makes rendering these kinds of scripts deep within your component tree challenging. Async scripts (`<script async="" src="...">`) however will load in arbitrary order.

In React 19 we’ve included better support for async scripts by allowing you to render them anywhere in your component tree, inside the components that actually depend on the script, without having to manage relocating and deduplicating script instances.

```


function MyComponent() {

 return (

  <div>

   <script async={true} src="..." />

   Hello World

  </div>

 )

}

function App() {

 <html>

  <body>

   <MyComponent>

   ...

   <MyComponent> // won't lead to duplicate script in the DOM

  </body>

 </html>

}


```


In all rendering environments, async scripts will be deduplicated so that React will only load and execute the script once even if it is rendered by multiple different components.

In Server Side Rendering, async scripts will be included in the `<head>` and prioritized behind more critical resources that block paint such as stylesheets, fonts, and image preloads.

For more details, read the docs for `<script>`[](/reference/react-dom/components/script).

### Support for preloading resources [](#support-for-preloading-resources "Link for Support for preloading resources ")

During initial document load and on client side updates, telling the Browser about resources that it will likely need to load as early as possible can have a dramatic effect on page performance.

React 19 includes a number of new APIs for loading and preloading Browser resources to make it as easy as possible to build great experiences that aren’t held back by inefficient resource loading.

```


import { prefetchDNS, preconnect, preload, preinit } from 'react-dom'

function MyComponent() {

 preinit('https://.../path/to/some/script.js', {as: 'script' }) // loads and executes this script eagerly

 preload('https://.../path/to/font.woff', { as: 'font' }) // preloads this font

 preload('https://.../path/to/stylesheet.css', { as: 'style' }) // preloads this stylesheet

 prefetchDNS('https://...') // when you may not actually request anything from this host

 preconnect('https://...') // when you will request something but aren't sure what

}


```


```


<!-- the above would result in the following DOM/HTML -->

<html>

 <head>

  <!-- links/scripts are prioritized by their utility to early loading, not call order -->

  <link rel="prefetch-dns" href="https://...">

  <link rel="preconnect" href="https://...">

  <link rel="preload" as="font" href="https://.../path/to/font.woff">

  <link rel="preload" as="style" href="https://.../path/to/stylesheet.css">

  <script async="" src="https://.../path/to/some/script.js"></script>

 </head>

 <body>

  ...

 </body>

</html>


```


These APIs can be used to optimize initial page loads by moving discovery of additional resources like fonts out of stylesheet loading. They can also make client updates faster by prefetching a list of resources used by an anticipated navigation and then eagerly preloading those resources on click or even on hover.

For more details see [Resource Preloading APIs](/reference/react-dom#resource-preloading-apis).

### Compatibility with third-party scripts and extensions [](#compatibility-with-third-party-scripts-and-extensions "Link for Compatibility with third-party scripts and extensions ")

We’ve improved hydration to account for third-party scripts and browser extensions.

When hydrating, if an element that renders on the client doesn’t match the element found in the HTML from the server, React will force a client re-render to fix up the content. Previously, if an element was inserted by third-party scripts or browser extensions, it would trigger a mismatch error and client render.

In React 19, unexpected tags in the `<head>` and `<body>` will be skipped over, avoiding the mismatch errors. If React needs to re-render the entire document due to an unrelated hydration mismatch, it will leave in place stylesheets inserted by third-party scripts and browser extensions.

### Better error reporting [](#error-handling "Link for Better error reporting ")

We improved error handling in React 19 to remove duplication and provide options for handling caught and uncaught errors. For example, when there’s an error in render caught by an Error Boundary, previously React would throw the error twice (once for the original error, then again after failing to automatically recover), and then call `console.error` with info about where the error occurred.

This resulted in three errors for every caught error:

Console

Uncaught Error: hit at Throws at renderWithHooks …

Uncaught Error: hit <-- Duplicate at Throws at renderWithHooks …

The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary.

In React 19, we log a single error with all the error information included:

Console

Error: hit at Throws at renderWithHooks … The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary. at ErrorBoundary at App

Additionally, we’ve added two new root options to complement `onRecoverableError`:

  * `onCaughtError`: called when React catches an error in an Error Boundary.
  * `onUncaughtError`: called when an error is thrown and not caught by an Error Boundary.
  * `onRecoverableError`: called when an error is thrown and automatically recovered.



For more info and examples, see the docs for `createRoot`[](/reference/react-dom/client/createRoot) and `hydrateRoot`[](/reference/react-dom/client/hydrateRoot).

### Support for Custom Elements [](#support-for-custom-elements "Link for Support for Custom Elements ")

React 19 adds full support for custom elements and passes all tests on [Custom Elements Everywhere](https://custom-elements-everywhere.com/).

In past versions, using Custom Elements in React has been difficult because React treated unrecognized props as attributes rather than properties. In React 19, we’ve added support for properties that works on the client and during SSR with the following strategy:

  * **Server Side Rendering** : props passed to a custom element will render as attributes if their type is a primitive value like `string`, `number`, or the value is `true`. Props with non-primitive types like `object`, `symbol`, `function`, or value `false` will be omitted.
  * **Client Side Rendering** : props that match a property on the Custom Element instance will be assigned as properties, otherwise they will be assigned as attributes.



Thanks to [Joey Arhar](https://github.com/josepharhar) for driving the design and implementation of Custom Element support in React.

#### How to upgrade [](#how-to-upgrade "Link for How to upgrade ")

See the [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide) for step-by-step instructions and a full list of breaking and notable changes.

_Note: this post was originally published 04/25/2024 and has been updated to 12/05/2024 with the stable release._

[ PreviousBlog](/blog)[NextReact Compiler Beta Release and Roadmap](/blog/2024/10/21/react-compiler-beta-release)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Installation[](#undefined "Link for this heading")

React has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.

### In this chapter

  * [How to start a new React project](/learn/start-a-new-react-project)
  * [How to add React to an existing project](/learn/add-react-to-an-existing-project)
  * [How to set up your editor](/learn/editor-setup)
  * [How to install React Developer Tools](/learn/react-developer-tools)



## Try React [](#try-react "Link for Try React ")

You don’t need to install anything to play with React. Try editing this sandbox!

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

9

1

2

3

4

5

6

7

8

function Greeting({ name }) {

return <h1>Hello, {name}</h1>;

}

export default function App() {

return <Greeting name="world" />

}

You can edit it directly or open it in a new tab by pressing the “Fork” button in the upper right corner.

Most pages in the React documentation contain sandboxes like this. Outside of the React documentation, there are many online sandboxes that support React: for example, [CodeSandbox](https://codesandbox.io/s/new), [StackBlitz](https://stackblitz.com/fork/react), or [CodePen.](https://codepen.io/pen?template=QWYVwWN)

### Try React locally [](#try-react-locally "Link for Try React locally ")

To try React locally on your computer, [download this HTML page.](https://gist.githubusercontent.com/gaearon/0275b1e1518599bbeafcde4722e79ed1/raw/db72dcbf3384ee1708c4a07d3be79860db04bff0/example.html) Open it in your editor and in your browser!

## Start a new React project [](#start-a-new-react-project "Link for Start a new React project ")

If you want to build an app or a website fully with React, [start a new React project.](/learn/start-a-new-react-project)

## Add React to an existing project [](#add-react-to-an-existing-project "Link for Add React to an existing project ")

If want to try using React in your existing app or a website, [add React to an existing project.](/learn/add-react-to-an-existing-project)

## Next steps [](#next-steps "Link for Next steps ")

Head to the [Quick Start](/learn) guide for a tour of the most important React concepts you will encounter every day.

[PreviousThinking in React](/learn/thinking-in-react)[NextStart a New React Project](/learn/start-a-new-react-project)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Try React ](#try-react)
  * [Try React locally ](#try-react-locally)
  * [Start a new React project ](#start-a-new-react-project)
  * [Add React to an existing project ](#add-react-to-an-existing-project)
  * [Next steps ](#next-steps)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Describing the UI[](#undefined "Link for this heading")

React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable _components._ From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.

### In this chapter

  * [How to write your first React component](/learn/your-first-component)
  * [When and how to create multi-component files](/learn/importing-and-exporting-components)
  * [How to add markup to JavaScript with JSX](/learn/writing-markup-with-jsx)
  * [How to use curly braces with JSX to access JavaScript functionality from your components](/learn/javascript-in-jsx-with-curly-braces)
  * [How to configure components with props](/learn/passing-props-to-a-component)
  * [How to conditionally render components](/learn/conditional-rendering)
  * [How to render multiple components at a time](/learn/rendering-lists)
  * [How to avoid confusing bugs by keeping components pure](/learn/keeping-components-pure)
  * [Why understanding your UI as trees is useful](/learn/understanding-your-ui-as-a-tree)



## Your first component [](#your-first-component "Link for Your first component ")

React applications are built from isolated pieces of UI called _components_. A React component is a JavaScript function that you can sprinkle with markup. Components can be as small as a button, or as large as an entire page. Here is a `Gallery` component rendering three `Profile` components:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

99

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

function Profile() {

return (

<img

src="https://i.imgur.com/MK3eW3As.jpg"

alt="Katherine Johnson"

/>

);

}

export default function Gallery() {

return (

<section>

<h1>Amazing scientists</h1>

<Profile />

<Profile />

<Profile />

</section>

);

}

Show more

## Ready to learn this topic?

Read **[Your First Component](/learn/your-first-component)** to learn how to declare and use React components.

[Read More](/learn/your-first-component)

## Importing and exporting components [](#importing-and-exporting-components "Link for Importing and exporting components ")

You can declare many components in one file, but large files can get difficult to navigate. To solve this, you can _export_ a component into its own file, and then _import_ that component from another file:

Gallery.jsProfile.js

Gallery.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import Profile from './Profile.js';
export default function Gallery() {
 return (
  <section>
   <h1>Amazing scientists</h1>
   <Profile />
   <Profile />
   <Profile />
  </section>
 );
}

```


## Ready to learn this topic?

Read **[Importing and Exporting Components](/learn/importing-and-exporting-components)** to learn how to split components into their own files.

[Read More](/learn/importing-and-exporting-components)

## Writing markup with JSX [](#writing-markup-with-jsx "Link for Writing markup with JSX ")

Each React component is a JavaScript function that may contain some markup that React renders into the browser. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information.

If we paste existing HTML markup into a React component, it won’t always work:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
export default function TodoList() {
 return (
  // This doesn't quite work!
  <h1>Hedy Lamarr's Todos</h1>
  <img
   src="https://i.imgur.com/yXOvdOSs.jpg"
   alt="Hedy Lamarr"
   class="photo"
  >
  <ul>
   <li>Invent new traffic lights
   <li>Rehearse a movie scene
   <li>Improve spectrum technology
  </ul>

```


Show more

If you have existing HTML like this, you can fix it using a [converter](https://transform.tools/html-to-jsx):

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
export default function TodoList() {
 return (
  <>
   <h1>Hedy Lamarr's Todos</h1>
   <img
    src="https://i.imgur.com/yXOvdOSs.jpg"
    alt="Hedy Lamarr"
    className="photo"
   />
   <ul>
    <li>Invent new traffic lights</li>
    <li>Rehearse a movie scene</li>
    <li>Improve spectrum technology</li>
   </ul>
  </>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Writing Markup with JSX](/learn/writing-markup-with-jsx)** to learn how to write valid JSX.

[Read More](/learn/writing-markup-with-jsx)

## JavaScript in JSX with curly braces [](#javascript-in-jsx-with-curly-braces "Link for JavaScript in JSX with curly braces ")

JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to “open a window” to JavaScript:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
const person = {
 name: 'Gregorio Y. Zara',
 theme: {
  backgroundColor: 'black',
  color: 'pink'
 }
};
export default function TodoList() {
 return (
  <div style={person.theme}>
   <h1>{person.name}'s Todos</h1>
   <img
    className="avatar"
    src="https://i.imgur.com/7vQD0fPs.jpg"
    alt="Gregorio Y. Zara"
   />
   <ul>
    <li>Improve the videophone</li>
    <li>Prepare aeronautics lectures</li>
    <li>Work on the alcohol-fuelled engine</li>
   </ul>
  </div>
 );
}

```


Show more

## Ready to learn this topic?

Read **[JavaScript in JSX with Curly Braces](/learn/javascript-in-jsx-with-curly-braces)** to learn how to access JavaScript data from JSX.

[Read More](/learn/javascript-in-jsx-with-curly-braces)

## Passing props to a component [](#passing-props-to-a-component "Link for Passing props to a component ")

React components use _props_ to communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, functions, and even JSX!

App.jsutils.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { getImageUrl } from './utils.js'
export default function Profile() {
 return (
  <Card>
   <Avatar
    size={100}
    person={{
     name: 'Katsuko Saruhashi',
     imageId: 'YfeOqp2'
    }}
   />
  </Card>
 );
}
function Avatar({ person, size }) {
 return (
  <img
   className="avatar"
   src={getImageUrl(person)}
   alt={person.name}
   width={size}
   height={size}
  />
 );
}
function Card({ children }) {
 return (
  <div className="card">
   {children}
  </div>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Passing Props to a Component](/learn/passing-props-to-a-component)** to learn how to pass and read props.

[Read More](/learn/passing-props-to-a-component)

## Conditional rendering [](#conditional-rendering "Link for Conditional rendering ")

Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like `if` statements, `&&`, and `? :` operators.

In this example, the JavaScript `&&` operator is used to conditionally render a checkmark:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
function Item({ name, isPacked }) {
 return (
  <li className="item">
   {name} {isPacked && '✅'}
  </li>
 );
}
export default function PackingList() {
 return (
  <section>
   <h1>Sally Ride's Packing List</h1>
   <ul>
    <Item
     isPacked={true}
     name="Space suit"
    />
    <Item
     isPacked={true}
     name="Helmet with a golden leaf"
    />
    <Item
     isPacked={false}
     name="Photo of Tam"
    />
   </ul>
  </section>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Conditional Rendering](/learn/conditional-rendering)** to learn the different ways to render content conditionally.

[Read More](/learn/conditional-rendering)

## Rendering lists [](#rendering-lists "Link for Rendering lists ")

You will often want to display multiple similar components from a collection of data. You can use JavaScript’s `filter()` and `map()` with React to filter and transform your array of data into an array of components.

For each array item, you will need to specify a `key`. Usually, you will want to use an ID from the database as a `key`. Keys let React keep track of each item’s place in the list even if the list changes.

App.jsdata.jsutils.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { people } from './data.js';
import { getImageUrl } from './utils.js';
export default function List() {
 const listItems = people.map(person =>
  <li key={person.id}>
   <img
    src={getImageUrl(person)}
    alt={person.name}
   />
   <p>
    <b>{person.name}:</b>
    {' ' + person.profession + ' '}
    known for {person.accomplishment}
   </p>
  </li>
 );
 return (
  <article>
   <h1>Scientists</h1>
   <ul>{listItems}</ul>
  </article>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Rendering Lists](/learn/rendering-lists)** to learn how to render a list of components, and how to choose a key.

[Read More](/learn/rendering-lists)

## Keeping components pure [](#keeping-components-pure "Link for Keeping components pure ")

Some JavaScript functions are _pure._ A pure function:

  * **Minds its own business.** It does not change any objects or variables that existed before it was called.
  * **Same inputs, same output.** Given the same inputs, a pure function should always return the same result.



By strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. Here is an example of an impure component:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
let guest = 0;
function Cup() {
 // Bad: changing a preexisting variable!
 guest = guest + 1;
 return <h2>Tea cup for guest #{guest}</h2>;
}
export default function TeaSet() {
 return (
  <>
   <Cup />
   <Cup />
   <Cup />
  </>
 );
}

```


Show more

You can make this component pure by passing a prop instead of modifying a preexisting variable:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
function Cup({ guest }) {
 return <h2>Tea cup for guest #{guest}</h2>;
}
export default function TeaSet() {
 return (
  <>
   <Cup guest={1} />
   <Cup guest={2} />
   <Cup guest={3} />
  </>
 );
}

```


## Ready to learn this topic?

Read **[Keeping Components Pure](/learn/keeping-components-pure)** to learn how to write components as pure, predictable functions.

[Read More](/learn/keeping-components-pure)

## Your UI as a tree [](#your-ui-as-a-tree "Link for Your UI as a tree ")

React uses trees to model the relationships between components and modules.

A React render tree is a representation of the parent and child relationship between components.

An example React render tree.

Components near the top of the tree, near the root component, are considered top-level components. Components with no child components are leaf components. This categorization of components is useful for understanding data flow and rendering performance.

Modelling the relationship between JavaScript modules is another useful way to understand your app. We refer to it as a module dependency tree.

An example module dependency tree.

A dependency tree is often used by build tools to bundle all the relevant JavaScript code for the client to download and render. A large bundle size regresses user experience for React apps. Understanding the module dependency tree is helpful to debug such issues.

## Ready to learn this topic?

Read **[Your UI as a Tree](/learn/understanding-your-ui-as-a-tree)** to learn how to create a render and module dependency trees for a React app and how they’re useful mental models for improving user experience and performance.

[Read More](/learn/understanding-your-ui-as-a-tree)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Your First Component](/learn/your-first-component) to start reading this chapter page by page!

Or, if you’re already familiar with these topics, why not read about [Adding Interactivity](/learn/adding-interactivity)?

[NextYour First Component](/learn/your-first-component)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Your first component ](#your-first-component)
  * [Importing and exporting components ](#importing-and-exporting-components)
  * [Writing markup with JSX ](#writing-markup-with-jsx)
  * [JavaScript in JSX with curly braces ](#javascript-in-jsx-with-curly-braces)
  * [Passing props to a component ](#passing-props-to-a-component)
  * [Conditional rendering ](#conditional-rendering)
  * [Rendering lists ](#rendering-lists)
  * [Keeping components pure ](#keeping-components-pure)
  * [Your UI as a tree ](#your-ui-as-a-tree)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Adding Interactivity[](#undefined "Link for this heading")

Some things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is called _state._ You can add state to any component, and update it as needed. In this chapter, you’ll learn how to write components that handle interactions, update their state, and display different output over time.

### In this chapter

  * [How to handle user-initiated events](/learn/responding-to-events)
  * [How to make components “remember” information with state](/learn/state-a-components-memory)
  * [How React updates the UI in two phases](/learn/render-and-commit)
  * [Why state doesn’t update right after you change it](/learn/state-as-a-snapshot)
  * [How to queue multiple state updates](/learn/queueing-a-series-of-state-updates)
  * [How to update an object in state](/learn/updating-objects-in-state)
  * [How to update an array in state](/learn/updating-arrays-in-state)



## Responding to events [](#responding-to-events "Link for Responding to events ")

React lets you add _event handlers_ to your JSX. Event handlers are your own functions that will be triggered in response to user interactions like clicking, hovering, focusing on form inputs, and so on.

Built-in components like `<button>` only support built-in browser events like `onClick`. However, you can also create your own components, and give their event handler props any application-specific names that you like.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
export default function App() {
 return (
  <Toolbar
   onPlayMovie={() => alert('Playing!')}
   onUploadImage={() => alert('Uploading!')}
  />
 );
}
function Toolbar({ onPlayMovie, onUploadImage }) {
 return (
  <div>
   <Button onClick={onPlayMovie}>
    Play Movie
   </Button>
   <Button onClick={onUploadImage}>
    Upload Image
   </Button>
  </div>
 );
}
function Button({ onClick, children }) {
 return (
  <button onClick={onClick}>
   {children}
  </button>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Responding to Events](/learn/responding-to-events)** to learn how to add event handlers.

[Read More](/learn/responding-to-events)

## State: a component’s memory [](#state-a-components-memory "Link for State: a component’s memory ")

Components often need to change what’s on the screen as a result of an interaction. Typing into the form should update the input field, clicking “next” on an image carousel should change which image is displayed, clicking “buy” puts a product in the shopping cart. Components need to “remember” things: the current input value, the current image, the shopping cart. In React, this kind of component-specific memory is called _state._

You can add state to a component with a `useState`[](/reference/react/useState) Hook. _Hooks_ are special functions that let your components use React features (state is one of those features). The `useState` Hook lets you declare a state variable. It takes the initial state and returns a pair of values: the current state, and a state setter function that lets you update it.

```


const [index, setIndex] = useState(0);

const [showMore, setShowMore] = useState(false);


```


Here is how an image gallery uses and updates state on click:

App.jsdata.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
import { sculptureList } from './data.js';
export default function Gallery() {
 const [index, setIndex] = useState(0);
 const [showMore, setShowMore] = useState(false);
 const hasNext = index < sculptureList.length - 1;
 function handleNextClick() {
  if (hasNext) {
   setIndex(index + 1);
  } else {
   setIndex(0);
  }
 }
 function handleMoreClick() {
  setShowMore(!showMore);
 }
 let sculpture = sculptureList[index];
 return (
  <>
   <button onClick={handleNextClick}>
    Next
   </button>
   <h2>
    <i>{sculpture.name} </i>
    by {sculpture.artist}
   </h2>
   <h3>
    ({index + 1} of {sculptureList.length})
   </h3>
   <button onClick={handleMoreClick}>
    {showMore ? 'Hide' : 'Show'} details
   </button>
   {showMore && <p>{sculpture.description}</p>}
   <img
    src={sculpture.url}
    alt={sculpture.alt}
   />
  </>
 );
}

```


Show more

## Ready to learn this topic?

Read **[State: A Component’s Memory](/learn/state-a-components-memory)** to learn how to remember a value and update it on interaction.

[Read More](/learn/state-a-components-memory)

## Render and commit [](#render-and-commit "Link for Render and commit ")

Before your components are displayed on the screen, they must be rendered by React. Understanding the steps in this process will help you think about how your code executes and explain its behavior.

Imagine that your components are cooks in the kitchen, assembling tasty dishes from ingredients. In this scenario, React is the waiter who puts in requests from customers and brings them their orders. This process of requesting and serving UI has three steps:

  1. **Triggering** a render (delivering the diner’s order to the kitchen)
  2. **Rendering** the component (preparing the order in the kitchen)
  3. **Committing** to the DOM (placing the order on the table)



  1. Trigger
  2. Render
  3. Commit



Illustrated by [Rachel Lee Nabors](https://nearestnabors.com/)

## Ready to learn this topic?

Read **[Render and Commit](/learn/render-and-commit)** to learn the lifecycle of a UI update.

[Read More](/learn/render-and-commit)

## State as a snapshot [](#state-as-a-snapshot "Link for State as a snapshot ")

Unlike regular JavaScript variables, React state behaves more like a snapshot. Setting it does not change the state variable you already have, but instead triggers a re-render. This can be surprising at first!

```


console.log(count); // 0

setCount(count + 1); // Request a re-render with 1

console.log(count); // Still 0!


```


This behavior helps you avoid subtle bugs. Here is a little chat app. Try to guess what happens if you press “Send” first and _then_ change the recipient to Bob. Whose name will appear in the `alert` five seconds later?

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [to, setTo] = useState('Alice');
 const [message, setMessage] = useState('Hello');
 function handleSubmit(e) {
  e.preventDefault();
  setTimeout(() => {
   alert(`You said ${message} to ${to}`);
  }, 5000);
 }
 return (
  <form onSubmit={handleSubmit}>
   <label>
    To:{' '}
    <select
     value={to}
     onChange={e => setTo(e.target.value)}>
     <option value="Alice">Alice</option>
     <option value="Bob">Bob</option>
    </select>
   </label>
   <textarea
    placeholder="Message"
    value={message}
    onChange={e => setMessage(e.target.value)}
   />
   <button type="submit">Send</button>
  </form>
 );
}

```


Show more

## Ready to learn this topic?

Read **[State as a Snapshot](/learn/state-as-a-snapshot)** to learn why state appears “fixed” and unchanging inside the event handlers.

[Read More](/learn/state-as-a-snapshot)

## Queueing a series of state updates [](#queueing-a-series-of-state-updates "Link for Queueing a series of state updates ")

This component is buggy: clicking “+3” increments the score only once.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Counter() {
 const [score, setScore] = useState(0);
 function increment() {
  setScore(score + 1);
 }
 return (
  <>
   <button onClick={() => increment()}>+1</button>
   <button onClick={() => {
    increment();
    increment();
    increment();
   }}>+3</button>
   <h1>Score: {score}</h1>
  </>
 )
}

```


Show more

[State as a Snapshot](/learn/state-as-a-snapshot) explains why this is happening. Setting state requests a new re-render, but does not change it in the already running code. So `score` continues to be `0` right after you call `setScore(score + 1)`.

```


console.log(score); // 0

setScore(score + 1); // setScore(0 + 1);

console.log(score); // 0

setScore(score + 1); // setScore(0 + 1);

console.log(score); // 0

setScore(score + 1); // setScore(0 + 1);

console.log(score); // 0


```


You can fix this by passing an _updater function_ when setting state. Notice how replacing `setScore(score + 1)` with `setScore(s => s + 1)` fixes the “+3” button. This lets you queue multiple state updates.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Counter() {
 const [score, setScore] = useState(0);
 function increment() {
  setScore(s => s + 1);
 }
 return (
  <>
   <button onClick={() => increment()}>+1</button>
   <button onClick={() => {
    increment();
    increment();
    increment();
   }}>+3</button>
   <h1>Score: {score}</h1>
  </>
 )
}

```


Show more

## Ready to learn this topic?

Read **[Queueing a Series of State Updates](/learn/queueing-a-series-of-state-updates)** to learn how to queue a sequence of state updates.

[Read More](/learn/queueing-a-series-of-state-updates)

## Updating objects in state [](#updating-objects-in-state "Link for Updating objects in state ")

State can hold any kind of JavaScript value, including objects. But you shouldn’t change objects and arrays that you hold in the React state directly. Instead, when you want to update an object and array, you need to create a new one (or make a copy of an existing one), and then update the state to use that copy.

Usually, you will use the `...` spread syntax to copy objects and arrays that you want to change. For example, updating a nested object could look like this:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [person, setPerson] = useState({
  name: 'Niki de Saint Phalle',
  artwork: {
   title: 'Blue Nana',
   city: 'Hamburg',
   image: 'https://i.imgur.com/Sd1AgUOm.jpg',
  }
 });
 function handleNameChange(e) {
  setPerson({
   ...person,
   name: e.target.value
  });
 }
 function handleTitleChange(e) {
  setPerson({
   ...person,
   artwork: {
    ...person.artwork,
    title: e.target.value
   }
  });
 }
 function handleCityChange(e) {
  setPerson({
   ...person,
   artwork: {
    ...person.artwork,
    city: e.target.value
   }
  });
 }
 function handleImageChange(e) {
  setPerson({
   ...person,
   artwork: {
    ...person.artwork,
    image: e.target.value
   }
  });
 }
 return (
  <>
   <label>
    Name:
    <input
     value={person.name}
     onChange={handleNameChange}
    />
   </label>
   <label>
    Title:
    <input
     value={person.artwork.title}
     onChange={handleTitleChange}
    />
   </label>
   <label>
    City:
    <input
     value={person.artwork.city}
     onChange={handleCityChange}
    />
   </label>
   <label>
    Image:
    <input
     value={person.artwork.image}
     onChange={handleImageChange}
    />
   </label>
   <p>
    <i>{person.artwork.title}</i>
    {' by '}
    {person.name}
    <br />
    (located in {person.artwork.city})
   </p>
   <img
    src={person.artwork.image}
    alt={person.artwork.title}
   />
  </>
 );
}

```


Show more

If copying objects in code gets tedious, you can use a library like [Immer](https://github.com/immerjs/use-immer) to reduce repetitive code:

package.jsonApp.js

package.json

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
{
 "dependencies": {
  "immer": "1.7.3",
  "react": "latest",
  "react-dom": "latest",
  "react-scripts": "latest",
  "use-immer": "0.5.1"
 },
 "scripts": {
  "start": "react-scripts start",
  "build": "react-scripts build",
  "test": "react-scripts test --env=jsdom",
  "eject": "react-scripts eject"
 },
 "devDependencies": {}
}
```


## Ready to learn this topic?

Read **[Updating Objects in State](/learn/updating-objects-in-state)** to learn how to update objects correctly.

[Read More](/learn/updating-objects-in-state)

## Updating arrays in state [](#updating-arrays-in-state "Link for Updating arrays in state ")

Arrays are another type of mutable JavaScript objects you can store in state and should treat as read-only. Just like with objects, when you want to update an array stored in state, you need to create a new one (or make a copy of an existing one), and then set state to use the new array:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
const initialList = [
 { id: 0, title: 'Big Bellies', seen: false },
 { id: 1, title: 'Lunar Landscape', seen: false },
 { id: 2, title: 'Terracotta Army', seen: true },
];
export default function BucketList() {
 const [list, setList] = useState(
  initialList
 );
 function handleToggle(artworkId, nextSeen) {
  setList(list.map(artwork => {
   if (artwork.id === artworkId) {
    return { ...artwork, seen: nextSeen };
   } else {
    return artwork;
   }
  }));
 }
 return (
  <>
   <h1>Art Bucket List</h1>
   <h2>My list of art to see:</h2>
   <ItemList
    artworks={list}
    onToggle={handleToggle} />
  </>
 );
}
function ItemList({ artworks, onToggle }) {
 return (
  <ul>
   {artworks.map(artwork => (
    <li key={artwork.id}>
     <label>
      <input
       type="checkbox"
       checked={artwork.seen}
       onChange={e => {
        onToggle(
         artwork.id,
         e.target.checked
        );
       }}
      />
      {artwork.title}
     </label>
    </li>
   ))}
  </ul>
 );
}

```


Show more

If copying arrays in code gets tedious, you can use a library like [Immer](https://github.com/immerjs/use-immer) to reduce repetitive code:

package.jsonApp.js

package.json

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
{
 "dependencies": {
  "immer": "1.7.3",
  "react": "latest",
  "react-dom": "latest",
  "react-scripts": "latest",
  "use-immer": "0.5.1"
 },
 "scripts": {
  "start": "react-scripts start",
  "build": "react-scripts build",
  "test": "react-scripts test --env=jsdom",
  "eject": "react-scripts eject"
 },
 "devDependencies": {}
}
```


## Ready to learn this topic?

Read **[Updating Arrays in State](/learn/updating-arrays-in-state)** to learn how to update arrays correctly.

[Read More](/learn/updating-arrays-in-state)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Responding to Events](/learn/responding-to-events) to start reading this chapter page by page!

Or, if you’re already familiar with these topics, why not read about [Managing State](/learn/managing-state)?

[PreviousYour UI as a Tree](/learn/understanding-your-ui-as-a-tree)[NextResponding to Events](/learn/responding-to-events)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Responding to events ](#responding-to-events)
  * [State: a component’s memory ](#state-a-components-memory)
  * [Render and commit ](#render-and-commit)
  * [State as a snapshot ](#state-as-a-snapshot)
  * [Queueing a series of state updates ](#queueing-a-series-of-state-updates)
  * [Updating objects in state ](#updating-objects-in-state)
  * [Updating arrays in state ](#updating-arrays-in-state)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Managing State[](#undefined "Link for this heading")

Intermediate

As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you’ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.

### In this chapter

  * [How to think about UI changes as state changes](/learn/reacting-to-input-with-state)
  * [How to structure state well](/learn/choosing-the-state-structure)
  * [How to “lift state up” to share it between components](/learn/sharing-state-between-components)
  * [How to control whether the state gets preserved or reset](/learn/preserving-and-resetting-state)
  * [How to consolidate complex state logic in a function](/learn/extracting-state-logic-into-a-reducer)
  * [How to pass information without “prop drilling”](/learn/passing-data-deeply-with-context)
  * [How to scale state management as your app grows](/learn/scaling-up-with-reducer-and-context)



## Reacting to input with state [](#reacting-to-input-with-state "Link for Reacting to input with state ")

With React, you won’t modify the UI from code directly. For example, you won’t write commands like “disable the button”, “enable the button”, “show the success message”, etc. Instead, you will describe the UI you want to see for the different visual states of your component (“initial state”, “typing state”, “success state”), and then trigger the state changes in response to user input. This is similar to how designers think about UI.

Here is a quiz form built using React. Note how it uses the `status` state variable to determine whether to enable or disable the submit button, and whether to show the success message instead.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [answer, setAnswer] = useState('');
 const [error, setError] = useState(null);
 const [status, setStatus] = useState('typing');
 if (status === 'success') {
  return <h1>That's right!</h1>
 }
 async function handleSubmit(e) {
  e.preventDefault();
  setStatus('submitting');
  try {
   await submitForm(answer);
   setStatus('success');
  } catch (err) {
   setStatus('typing');
   setError(err);
  }
 }
 function handleTextareaChange(e) {
  setAnswer(e.target.value);
 }
 return (
  <>
   <h2>City quiz</h2>
   <p>
    In which city is there a billboard that turns air into drinkable water?
   </p>
   <form onSubmit={handleSubmit}>
    <textarea
     value={answer}
     onChange={handleTextareaChange}
     disabled={status === 'submitting'}
    />
    <br />
    <button disabled={
     answer.length === 0 ||
     status === 'submitting'
    }>
     Submit
    </button>
    {error !== null &&
     <p className="Error">
      {error.message}
     </p>
    }
   </form>
  </>
 );
}
function submitForm(answer) {
 // Pretend it's hitting the network.
 return new Promise((resolve, reject) => {
  setTimeout(() => {
   let shouldError = answer.toLowerCase() !== 'lima'
   if (shouldError) {
    reject(new Error('Good guess but a wrong answer. Try again!'));
   } else {
    resolve();
   }
  }, 1500);
 });
}

```


Show more

## Ready to learn this topic?

Read **[Reacting to Input with State](/learn/reacting-to-input-with-state)** to learn how to approach interactions with a state-driven mindset.

[Read More](/learn/reacting-to-input-with-state)

## Choosing the state structure [](#choosing-the-state-structure "Link for Choosing the state structure ")

Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. The most important principle is that state shouldn’t contain redundant or duplicated information. If there’s unnecessary state, it’s easy to forget to update it, and introduce bugs!

For example, this form has a **redundant** `fullName` state variable:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [firstName, setFirstName] = useState('');
 const [lastName, setLastName] = useState('');
 const [fullName, setFullName] = useState('');
 function handleFirstNameChange(e) {
  setFirstName(e.target.value);
  setFullName(e.target.value + ' ' + lastName);
 }
 function handleLastNameChange(e) {
  setLastName(e.target.value);
  setFullName(firstName + ' ' + e.target.value);
 }
 return (
  <>
   <h2>Let’s check you in</h2>
   <label>
    First name:{' '}
    <input
     value={firstName}
     onChange={handleFirstNameChange}
    />
   </label>
   <label>
    Last name:{' '}
    <input
     value={lastName}
     onChange={handleLastNameChange}
    />
   </label>
   <p>
    Your ticket will be issued to: <b>{fullName}</b>
   </p>
  </>
 );
}

```


Show more

You can remove it and simplify the code by calculating `fullName` while the component is rendering:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [firstName, setFirstName] = useState('');
 const [lastName, setLastName] = useState('');
 const fullName = firstName + ' ' + lastName;
 function handleFirstNameChange(e) {
  setFirstName(e.target.value);
 }
 function handleLastNameChange(e) {
  setLastName(e.target.value);
 }
 return (
  <>
   <h2>Let’s check you in</h2>
   <label>
    First name:{' '}
    <input
     value={firstName}
     onChange={handleFirstNameChange}
    />
   </label>
   <label>
    Last name:{' '}
    <input
     value={lastName}
     onChange={handleLastNameChange}
    />
   </label>
   <p>
    Your ticket will be issued to: <b>{fullName}</b>
   </p>
  </>
 );
}

```


Show more

This might seem like a small change, but many bugs in React apps are fixed this way.

## Ready to learn this topic?

Read **[Choosing the State Structure](/learn/choosing-the-state-structure)** to learn how to design the state shape to avoid bugs.

[Read More](/learn/choosing-the-state-structure)

## Sharing state between components [](#sharing-state-between-components "Link for Sharing state between components ")

Sometimes, you want the state of two components to always change together. To do it, remove state from both of them, move it to their closest common parent, and then pass it down to them via props. This is known as “lifting state up”, and it’s one of the most common things you will do writing React code.

In this example, only one panel should be active at a time. To achieve this, instead of keeping the active state inside each individual panel, the parent component holds the state and specifies the props for its children.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Accordion() {
 const [activeIndex, setActiveIndex] = useState(0);
 return (
  <>
   <h2>Almaty, Kazakhstan</h2>
   <Panel
    title="About"
    isActive={activeIndex === 0}
    onShow={() => setActiveIndex(0)}
   >
    With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.
   </Panel>
   <Panel
    title="Etymology"
    isActive={activeIndex === 1}
    onShow={() => setActiveIndex(1)}
   >
    The name comes from <span lang="kk-KZ">алма</span>, the Kazakh word for "apple" and is often translated as "full of apples". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang="la">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.
   </Panel>
  </>
 );
}
function Panel({
 title,
 children,
 isActive,
 onShow
}) {
 return (
  <section className="panel">
   <h3>{title}</h3>
   {isActive ? (
    <p>{children}</p>
   ) : (
    <button onClick={onShow}>
     Show
    </button>
   )}
  </section>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Sharing State Between Components](/learn/sharing-state-between-components)** to learn how to lift state up and keep components in sync.

[Read More](/learn/sharing-state-between-components)

## Preserving and resetting state [](#preserving-and-resetting-state "Link for Preserving and resetting state ")

When you re-render a component, React needs to decide which parts of the tree to keep (and update), and which parts to discard or re-create from scratch. In most cases, React’s automatic behavior works well enough. By default, React preserves the parts of the tree that “match up” with the previously rendered component tree.

However, sometimes this is not what you want. In this chat app, typing a message and then switching the recipient does not reset the input. This can make the user accidentally send a message to the wrong person:

App.jsContactList.jsChat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
import Chat from './Chat.js';
import ContactList from './ContactList.js';
export default function Messenger() {
 const [to, setTo] = useState(contacts[0]);
 return (
  <div>
   <ContactList
    contacts={contacts}
    selectedContact={to}
    onSelect={contact => setTo(contact)}
   />
   <Chat contact={to} />
  </div>
 )
}
const contacts = [
 { name: 'Taylor', email: 'taylor@mail.com' },
 { name: 'Alice', email: 'alice@mail.com' },
 { name: 'Bob', email: 'bob@mail.com' }
];

```


Show more

React lets you override the default behavior, and _force_ a component to reset its state by passing it a different `key`, like `<Chat key={email} />`. This tells React that if the recipient is different, it should be considered a _different_ `Chat` component that needs to be re-created from scratch with the new data (and UI like inputs). Now switching between the recipients resets the input field—even though you render the same component.

App.jsContactList.jsChat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
import Chat from './Chat.js';
import ContactList from './ContactList.js';
export default function Messenger() {
 const [to, setTo] = useState(contacts[0]);
 return (
  <div>
   <ContactList
    contacts={contacts}
    selectedContact={to}
    onSelect={contact => setTo(contact)}
   />
   <Chat key={to.email} contact={to} />
  </div>
 )
}
const contacts = [
 { name: 'Taylor', email: 'taylor@mail.com' },
 { name: 'Alice', email: 'alice@mail.com' },
 { name: 'Bob', email: 'bob@mail.com' }
];

```


Show more

## Ready to learn this topic?

Read **[Preserving and Resetting State](/learn/preserving-and-resetting-state)** to learn the lifetime of state and how to control it.

[Read More](/learn/preserving-and-resetting-state)

## Extracting state logic into a reducer [](#extracting-state-logic-into-a-reducer "Link for Extracting state logic into a reducer ")

Components with many state updates spread across many event handlers can get overwhelming. For these cases, you can consolidate all the state update logic outside your component in a single function, called “reducer”. Your event handlers become concise because they only specify the user “actions”. At the bottom of the file, the reducer function specifies how the state should update in response to each action!

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useReducer } from 'react';
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';
export default function TaskApp() {
 const [tasks, dispatch] = useReducer(
  tasksReducer,
  initialTasks
 );
 function handleAddTask(text) {
  dispatch({
   type: 'added',
   id: nextId++,
   text: text,
  });
 }
 function handleChangeTask(task) {
  dispatch({
   type: 'changed',
   task: task
  });
 }
 function handleDeleteTask(taskId) {
  dispatch({
   type: 'deleted',
   id: taskId
  });
 }
 return (
  <>
   <h1>Prague itinerary</h1>
   <AddTask
    onAddTask={handleAddTask}
   />
   <TaskList
    tasks={tasks}
    onChangeTask={handleChangeTask}
    onDeleteTask={handleDeleteTask}
   />
  </>
 );
}
function tasksReducer(tasks, action) {
 switch (action.type) {
  case 'added': {
   return [...tasks, {
    id: action.id,
    text: action.text,
    done: false
   }];
  }
  case 'changed': {
   return tasks.map(t => {
    if (t.id === action.task.id) {
     return action.task;
    } else {
     return t;
    }
   });
  }
  case 'deleted': {
   return tasks.filter(t => t.id !== action.id);
  }
  default: {
   throw Error('Unknown action: ' + action.type);
  }
 }
}
let nextId = 3;
const initialTasks = [
 { id: 0, text: 'Visit Kafka Museum', done: true },
 { id: 1, text: 'Watch a puppet show', done: false },
 { id: 2, text: 'Lennon Wall pic', done: false }
];

```


Show more

## Ready to learn this topic?

Read **[Extracting State Logic into a Reducer](/learn/extracting-state-logic-into-a-reducer)** to learn how to consolidate logic in the reducer function.

[Read More](/learn/extracting-state-logic-into-a-reducer)

## Passing data deeply with context [](#passing-data-deeply-with-context "Link for Passing data deeply with context ")

Usually, you will pass information from a parent component to a child component via props. But passing props can become inconvenient if you need to pass some prop through many components, or if many components need the same information. Context lets the parent component make some information available to any component in the tree below it—no matter how deep it is—without passing it explicitly through props.

Here, the `Heading` component determines its heading level by “asking” the closest `Section` for its level. Each `Section` tracks its own level by asking the parent `Section` and adding one to it. Every `Section` provides information to all components below it without passing props—it does that through context.

App.jsSection.jsHeading.jsLevelContext.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import Heading from './Heading.js';
import Section from './Section.js';
export default function Page() {
 return (
  <Section>
   <Heading>Title</Heading>
   <Section>
    <Heading>Heading</Heading>
    <Heading>Heading</Heading>
    <Heading>Heading</Heading>
    <Section>
     <Heading>Sub-heading</Heading>
     <Heading>Sub-heading</Heading>
     <Heading>Sub-heading</Heading>
     <Section>
      <Heading>Sub-sub-heading</Heading>
      <Heading>Sub-sub-heading</Heading>
      <Heading>Sub-sub-heading</Heading>
     </Section>
    </Section>
   </Section>
  </Section>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Passing Data Deeply with Context](/learn/passing-data-deeply-with-context)** to learn about using context as an alternative to passing props.

[Read More](/learn/passing-data-deeply-with-context)

## Scaling up with reducer and context [](#scaling-up-with-reducer-and-context "Link for Scaling up with reducer and context ")

Reducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.

With this approach, a parent component with complex state manages it with a reducer. Other components anywhere deep in the tree can read its state via context. They can also dispatch actions to update that state.

App.jsTasksContext.jsAddTask.jsTaskList.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';
import { TasksProvider } from './TasksContext.js';
export default function TaskApp() {
 return (
  <TasksProvider>
   <h1>Day off in Kyoto</h1>
   <AddTask />
   <TaskList />
  </TasksProvider>
 );
}

```


## Ready to learn this topic?

Read **[Scaling Up with Reducer and Context](/learn/scaling-up-with-reducer-and-context)** to learn how state management scales in a growing app.

[Read More](/learn/scaling-up-with-reducer-and-context)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Reacting to Input with State](/learn/reacting-to-input-with-state) to start reading this chapter page by page!

Or, if you’re already familiar with these topics, why not read about [Escape Hatches](/learn/escape-hatches)?

[PreviousUpdating Arrays in State](/learn/updating-arrays-in-state)[NextReacting to Input with State](/learn/reacting-to-input-with-state)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Reacting to input with state ](#reacting-to-input-with-state)
  * [Choosing the state structure ](#choosing-the-state-structure)
  * [Sharing state between components ](#sharing-state-between-components)
  * [Preserving and resetting state ](#preserving-and-resetting-state)
  * [Extracting state logic into a reducer ](#extracting-state-logic-into-a-reducer)
  * [Passing data deeply with context ](#passing-data-deeply-with-context)
  * [Scaling up with reducer and context ](#scaling-up-with-reducer-and-context)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Escape Hatches[](#undefined "Link for this heading")

Advanced

Some of your components may need to control and synchronize with systems outside of React. For example, you might need to focus an input using the browser API, play and pause a video player implemented without React, or connect and listen to messages from a remote server. In this chapter, you’ll learn the escape hatches that let you “step outside” React and connect to external systems. Most of your application logic and data flow should not rely on these features.

### In this chapter

  * [How to “remember” information without re-rendering](/learn/referencing-values-with-refs)
  * [How to access DOM elements managed by React](/learn/manipulating-the-dom-with-refs)
  * [How to synchronize components with external systems](/learn/synchronizing-with-effects)
  * [How to remove unnecessary Effects from your components](/learn/you-might-not-need-an-effect)
  * [How an Effect’s lifecycle is different from a component’s](/learn/lifecycle-of-reactive-effects)
  * [How to prevent some values from re-triggering Effects](/learn/separating-events-from-effects)
  * [How to make your Effect re-run less often](/learn/removing-effect-dependencies)
  * [How to share logic between components](/learn/reusing-logic-with-custom-hooks)



## Referencing values with refs [](#referencing-values-with-refs "Link for Referencing values with refs ")

When you want a component to “remember” some information, but you don’t want that information to [trigger new renders](/learn/render-and-commit), you can use a _ref_ :

```


const ref = useRef(0);


```


Like state, refs are retained by React between re-renders. However, setting state re-renders a component. Changing a ref does not! You can access the current value of that ref through the `ref.current` property.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useRef } from 'react';
export default function Counter() {
 let ref = useRef(0);
 function handleClick() {
  ref.current = ref.current + 1;
  alert('You clicked ' + ref.current + ' times!');
 }
 return (
  <button onClick={handleClick}>
   Click me!
  </button>
 );
}

```


Show more

A ref is like a secret pocket of your component that React doesn’t track. For example, you can use refs to store [timeout IDs](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#return_value), [DOM elements](https://developer.mozilla.org/en-US/docs/Web/API/Element), and other objects that don’t impact the component’s rendering output.

## Ready to learn this topic?

Read **[Referencing Values with Refs](/learn/referencing-values-with-refs)** to learn how to use refs to remember information.

[Read More](/learn/referencing-values-with-refs)

## Manipulating the DOM with refs [](#manipulating-the-dom-with-refs "Link for Manipulating the DOM with refs ")

React automatically updates the DOM to match your render output, so your components won’t often need to manipulate it. However, sometimes you might need access to the DOM elements managed by React—for example, to focus a node, scroll to it, or measure its size and position. There is no built-in way to do those things in React, so you will need a ref to the DOM node. For example, clicking the button will focus the input using a ref:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useRef } from 'react';
export default function Form() {
 const inputRef = useRef(null);
 function handleClick() {
  inputRef.current.focus();
 }
 return (
  <>
   <input ref={inputRef} />
   <button onClick={handleClick}>
    Focus the input
   </button>
  </>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Manipulating the DOM with Refs](/learn/manipulating-the-dom-with-refs)** to learn how to access DOM elements managed by React.

[Read More](/learn/manipulating-the-dom-with-refs)

## Synchronizing with Effects [](#synchronizing-with-effects "Link for Synchronizing with Effects ")

Some components need to synchronize with external systems. For example, you might want to control a non-React component based on the React state, set up a server connection, or send an analytics log when a component appears on the screen. Unlike event handlers, which let you handle particular events, _Effects_ let you run some code after rendering. Use them to synchronize your component with a system outside of React.

Press Play/Pause a few times and see how the video player stays synchronized to the `isPlaying` prop value:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useRef, useEffect } from 'react';
function VideoPlayer({ src, isPlaying }) {
 const ref = useRef(null);
 useEffect(() => {
  if (isPlaying) {
   ref.current.play();
  } else {
   ref.current.pause();
  }
 }, [isPlaying]);
 return <video ref={ref} src={src} loop playsInline />;
}
export default function App() {
 const [isPlaying, setIsPlaying] = useState(false);
 return (
  <>
   <button onClick={() => setIsPlaying(!isPlaying)}>
    {isPlaying ? 'Pause' : 'Play'}
   </button>
   <VideoPlayer
    isPlaying={isPlaying}
    src="https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4"
   />
  </>
 );
}

```


Show more

Many Effects also “clean up” after themselves. For example, an Effect that sets up a connection to a chat server should return a _cleanup function_ that tells React how to disconnect your component from that server:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
export default function ChatRoom() {
 useEffect(() => {
  const connection = createConnection();
  connection.connect();
  return () => connection.disconnect();
 }, []);
 return <h1>Welcome to the chat!</h1>;
}

```


In development, React will immediately run and clean up your Effect one extra time. This is why you see `"✅ Connecting..."` printed twice. This ensures that you don’t forget to implement the cleanup function.

## Ready to learn this topic?

Read **[Synchronizing with Effects](/learn/synchronizing-with-effects)** to learn how to synchronize components with external systems.

[Read More](/learn/synchronizing-with-effects)

## You Might Not Need An Effect [](#you-might-not-need-an-effect "Link for You Might Not Need An Effect ")

Effects are an escape hatch from the React paradigm. They let you “step outside” of React and synchronize your components with some external system. If there is no external system involved (for example, if you want to update a component’s state when some props or state change), you shouldn’t need an Effect. Removing unnecessary Effects will make your code easier to follow, faster to run, and less error-prone.

There are two common cases in which you don’t need Effects:

  * **You don’t need Effects to transform data for rendering.**
  * **You don’t need Effects to handle user events.**



For example, you don’t need an Effect to adjust some state based on other state:

```


function Form() {

 const [firstName, setFirstName] = useState('Taylor');

 const [lastName, setLastName] = useState('Swift');

 // 🔴 Avoid: redundant state and unnecessary Effect

 const [fullName, setFullName] = useState('');

 useEffect(() => {

  setFullName(firstName + ' ' + lastName);

 }, [firstName, lastName]);

 // ...

}


```


Instead, calculate as much as you can while rendering:

```


function Form() {

 const [firstName, setFirstName] = useState('Taylor');

 const [lastName, setLastName] = useState('Swift');

 // ✅ Good: calculated during rendering

 const fullName = firstName + ' ' + lastName;

 // ...

}


```


However, you _do_ need Effects to synchronize with external systems.

## Ready to learn this topic?

Read **[You Might Not Need an Effect](/learn/you-might-not-need-an-effect)** to learn how to remove unnecessary Effects.

[Read More](/learn/you-might-not-need-an-effect)

## Lifecycle of reactive effects [](#lifecycle-of-reactive-effects "Link for Lifecycle of reactive effects ")

Effects have a different lifecycle from components. Components may mount, update, or unmount. An Effect can only do two things: to start synchronizing something, and later to stop synchronizing it. This cycle can happen multiple times if your Effect depends on props and state that change over time.

This Effect depends on the value of the `roomId` prop. Props are _reactive values,_ which means they can change on a re-render. Notice that the Effect _re-synchronizes_ (and re-connects to the server) if `roomId` changes:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId }) {
 useEffect(() => {
  const connection = createConnection(serverUrl, roomId);
  connection.connect();
  return () => connection.disconnect();
 }, [roomId]);
 return <h1>Welcome to the {roomId} room!</h1>;
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <hr />
   <ChatRoom roomId={roomId} />
  </>
 );
}

```


Show more

React provides a linter rule to check that you’ve specified your Effect’s dependencies correctly. If you forget to specify `roomId` in the list of dependencies in the above example, the linter will find that bug automatically.

## Ready to learn this topic?

Read **[Lifecycle of Reactive Events](/learn/lifecycle-of-reactive-effects)** to learn how an Effect’s lifecycle is different from a component’s.

[Read More](/learn/lifecycle-of-reactive-effects)

## Separating events from Effects [](#separating-events-from-effects "Link for Separating events from Effects ")

### Under Construction

This section describes an **experimental API that has not yet been released** in a stable version of React.

Event handlers only re-run when you perform the same interaction again. Unlike event handlers, Effects re-synchronize if any of the values they read, like props or state, are different than during last render. Sometimes, you want a mix of both behaviors: an Effect that re-runs in response to some values but not others.

All code inside Effects is _reactive._ It will run again if some reactive value it reads has changed due to a re-render. For example, this Effect will re-connect to the chat if either `roomId` or `theme` have changed:

App.jschat.jsnotifications.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection, sendMessage } from './chat.js';
import { showNotification } from './notifications.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId, theme }) {
 useEffect(() => {
  const connection = createConnection(serverUrl, roomId);
  connection.on('connected', () => {
   showNotification('Connected!', theme);
  });
  connection.connect();
  return () => connection.disconnect();
 }, [roomId, theme]);
 return <h1>Welcome to the {roomId} room!</h1>
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 const [isDark, setIsDark] = useState(false);
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <label>
    <input
     type="checkbox"
     checked={isDark}
     onChange={e => setIsDark(e.target.checked)}
    />
    Use dark theme
   </label>
   <hr />
   <ChatRoom
    roomId={roomId}
    theme={isDark ? 'dark' : 'light'} 
   />
  </>
 );
}

```


Show more

This is not ideal. You want to re-connect to the chat only if the `roomId` has changed. Switching the `theme` shouldn’t re-connect to the chat! Move the code reading `theme` out of your Effect into an _Effect Event_ :

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { experimental_useEffectEvent as useEffectEvent } from 'react';
import { createConnection, sendMessage } from './chat.js';
import { showNotification } from './notifications.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId, theme }) {
 const onConnected = useEffectEvent(() => {
  showNotification('Connected!', theme);
 });
 useEffect(() => {
  const connection = createConnection(serverUrl, roomId);
  connection.on('connected', () => {
   onConnected();
  });
  connection.connect();
  return () => connection.disconnect();
 }, [roomId]);
 return <h1>Welcome to the {roomId} room!</h1>
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 const [isDark, setIsDark] = useState(false);
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <label>
    <input
     type="checkbox"
     checked={isDark}
     onChange={e => setIsDark(e.target.checked)}
    />
    Use dark theme
   </label>
   <hr />
   <ChatRoom
    roomId={roomId}
    theme={isDark ? 'dark' : 'light'} 
   />
  </>
 );
}

```


Show more

Code inside Effect Events isn’t reactive, so changing the `theme` no longer makes your Effect re-connect.

## Ready to learn this topic?

Read **[Separating Events from Effects](/learn/separating-events-from-effects)** to learn how to prevent some values from re-triggering Effects.

[Read More](/learn/separating-events-from-effects)

## Removing Effect dependencies [](#removing-effect-dependencies "Link for Removing Effect dependencies ")

When you write an Effect, the linter will verify that you’ve included every reactive value (like props and state) that the Effect reads in the list of your Effect’s dependencies. This ensures that your Effect remains synchronized with the latest props and state of your component. Unnecessary dependencies may cause your Effect to run too often, or even create an infinite loop. The way you remove them depends on the case.

For example, this Effect depends on the `options` object which gets re-created every time you edit the input:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId }) {
 const [message, setMessage] = useState('');
 const options = {
  serverUrl: serverUrl,
  roomId: roomId
 };
 useEffect(() => {
  const connection = createConnection(options);
  connection.connect();
  return () => connection.disconnect();
 }, [options]);
 return (
  <>
   <h1>Welcome to the {roomId} room!</h1>
   <input value={message} onChange={e => setMessage(e.target.value)} />
  </>
 );
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <hr />
   <ChatRoom roomId={roomId} />
  </>
 );
}

```


Show more

You don’t want the chat to re-connect every time you start typing a message in that chat. To fix this problem, move creation of the `options` object inside the Effect so that the Effect only depends on the `roomId` string:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId }) {
 const [message, setMessage] = useState('');
 useEffect(() => {
  const options = {
   serverUrl: serverUrl,
   roomId: roomId
  };
  const connection = createConnection(options);
  connection.connect();
  return () => connection.disconnect();
 }, [roomId]);
 return (
  <>
   <h1>Welcome to the {roomId} room!</h1>
   <input value={message} onChange={e => setMessage(e.target.value)} />
  </>
 );
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <hr />
   <ChatRoom roomId={roomId} />
  </>
 );
}

```


Show more

Notice that you didn’t start by editing the dependency list to remove the `options` dependency. That would be wrong. Instead, you changed the surrounding code so that the dependency became _unnecessary._ Think of the dependency list as a list of all the reactive values used by your Effect’s code. You don’t intentionally choose what to put on that list. The list describes your code. To change the dependency list, change the code.

## Ready to learn this topic?

Read **[Removing Effect Dependencies](/learn/removing-effect-dependencies)** to learn how to make your Effect re-run less often.

[Read More](/learn/removing-effect-dependencies)

## Reusing logic with custom Hooks [](#reusing-logic-with-custom-hooks "Link for Reusing logic with custom Hooks ")

React comes with built-in Hooks like `useState`, `useContext`, and `useEffect`. Sometimes, you’ll wish that there was a Hook for some more specific purpose: for example, to fetch data, to keep track of whether the user is online, or to connect to a chat room. To do this, you can create your own Hooks for your application’s needs.

In this example, the `usePointerPosition` custom Hook tracks the cursor position, while `useDelayedValue` custom Hook returns a value that’s “lagging behind” the value you passed by a certain number of milliseconds. Move the cursor over the sandbox preview area to see a moving trail of dots following the cursor:

App.jsusePointerPosition.jsuseDelayedValue.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { usePointerPosition } from './usePointerPosition.js';
import { useDelayedValue } from './useDelayedValue.js';
export default function Canvas() {
 const pos1 = usePointerPosition();
 const pos2 = useDelayedValue(pos1, 100);
 const pos3 = useDelayedValue(pos2, 200);
 const pos4 = useDelayedValue(pos3, 100);
 const pos5 = useDelayedValue(pos4, 50);
 return (
  <>
   <Dot position={pos1} opacity={1} />
   <Dot position={pos2} opacity={0.8} />
   <Dot position={pos3} opacity={0.6} />
   <Dot position={pos4} opacity={0.4} />
   <Dot position={pos5} opacity={0.2} />
  </>
 );
}
function Dot({ position, opacity }) {
 return (
  <div style={{
   position: 'absolute',
   backgroundColor: 'pink',
   borderRadius: '50%',
   opacity,
   transform: `translate(${position.x}px, ${position.y}px)`,
   pointerEvents: 'none',
   left: -20,
   top: -20,
   width: 40,
   height: 40,
  }} />
 );
}

```


Show more

You can create custom Hooks, compose them together, pass data between them, and reuse them between components. As your app grows, you will write fewer Effects by hand because you’ll be able to reuse custom Hooks you already wrote. There are also many excellent custom Hooks maintained by the React community.

## Ready to learn this topic?

Read **[Reusing Logic with Custom Hooks](/learn/reusing-logic-with-custom-hooks)** to learn how to share logic between components.

[Read More](/learn/reusing-logic-with-custom-hooks)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Referencing Values with Refs](/learn/referencing-values-with-refs) to start reading this chapter page by page!

[PreviousScaling Up with Reducer and Context](/learn/scaling-up-with-reducer-and-context)[NextReferencing Values with Refs](/learn/referencing-values-with-refs)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Referencing values with refs ](#referencing-values-with-refs)
  * [Manipulating the DOM with refs ](#manipulating-the-dom-with-refs)
  * [Synchronizing with Effects ](#synchronizing-with-effects)
  * [You Might Not Need An Effect ](#you-might-not-need-an-effect)
  * [Lifecycle of reactive effects ](#lifecycle-of-reactive-effects)
  * [Separating events from Effects ](#separating-events-from-effects)
  * [Removing Effect dependencies ](#removing-effect-dependencies)
  * [Reusing logic with custom Hooks ](#reusing-logic-with-custom-hooks)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### react@19

  * [Overview ](/reference/react "Overview")
  * [Hooks ](/reference/react/hooks "Hooks")

    * [useActionState ](/reference/react/useActionState "useActionState")
    * [useCallback ](/reference/react/useCallback "useCallback")
    * [useContext ](/reference/react/useContext "useContext")
    * [useDebugValue ](/reference/react/useDebugValue "useDebugValue")
    * [useDeferredValue ](/reference/react/useDeferredValue "useDeferredValue")
    * [useEffect ](/reference/react/useEffect "useEffect")
    * [useId ](/reference/react/useId "useId")
    * [useImperativeHandle ](/reference/react/useImperativeHandle "useImperativeHandle")
    * [useInsertionEffect ](/reference/react/useInsertionEffect "useInsertionEffect")
    * [useLayoutEffect ](/reference/react/useLayoutEffect "useLayoutEffect")
    * [useMemo ](/reference/react/useMemo "useMemo")
    * [useOptimistic ](/reference/react/useOptimistic "useOptimistic")
    * [useReducer ](/reference/react/useReducer "useReducer")
    * [useRef ](/reference/react/useRef "useRef")
    * [useState ](/reference/react/useState "useState")
    * [useSyncExternalStore ](/reference/react/useSyncExternalStore "useSyncExternalStore")
    * [useTransition ](/reference/react/useTransition "useTransition")

  * [Components ](/reference/react/components "Components")

    * [<Fragment> (<>) ](/reference/react/Fragment "<Fragment> \(<>\)")
    * [<Profiler> ](/reference/react/Profiler "<Profiler>")
    * [<StrictMode> ](/reference/react/StrictMode "<StrictMode>")
    * [<Suspense> ](/reference/react/Suspense "<Suspense>")

  * [APIs ](/reference/react/apis "APIs")

    * [act ](/reference/react/act "act")
    * [cache ](/reference/react/cache "cache")
    * [createContext ](/reference/react/createContext "createContext")
    * [lazy ](/reference/react/lazy "lazy")
    * [memo ](/reference/react/memo "memo")
    * [startTransition ](/reference/react/startTransition "startTransition")
    * [use ](/reference/react/use "use")
    * [experimental_taintObjectReference  - This feature is available in the latest Canary](/reference/react/experimental_taintObjectReference "experimental_taintObjectReference")
    * [experimental_taintUniqueValue  - This feature is available in the latest Canary](/reference/react/experimental_taintUniqueValue "experimental_taintUniqueValue")

### react-dom@19

  * [Hooks ](/reference/react-dom/hooks "Hooks")

    * [useFormStatus ](/reference/react-dom/hooks/useFormStatus "useFormStatus")

  * [Components ](/reference/react-dom/components "Components")

    * [Common (e.g. <div>) ](/reference/react-dom/components/common "Common \(e.g. <div>\)")
    * [<form> ](/reference/react-dom/components/form "<form>")
    * [<input> ](/reference/react-dom/components/input "<input>")
    * [<option> ](/reference/react-dom/components/option "<option>")
    * [<progress> ](/reference/react-dom/components/progress "<progress>")
    * [<select> ](/reference/react-dom/components/select "<select>")
    * [<textarea> ](/reference/react-dom/components/textarea "<textarea>")
    * [<link> ](/reference/react-dom/components/link "<link>")
    * [<meta> ](/reference/react-dom/components/meta "<meta>")
    * [<script> ](/reference/react-dom/components/script "<script>")
    * [<style> ](/reference/react-dom/components/style "<style>")
    * [<title> ](/reference/react-dom/components/title "<title>")

  * [APIs ](/reference/react-dom "APIs")

    * [createPortal ](/reference/react-dom/createPortal "createPortal")
    * [flushSync ](/reference/react-dom/flushSync "flushSync")
    * [preconnect ](/reference/react-dom/preconnect "preconnect")
    * [prefetchDNS ](/reference/react-dom/prefetchDNS "prefetchDNS")
    * [preinit ](/reference/react-dom/preinit "preinit")
    * [preinitModule ](/reference/react-dom/preinitModule "preinitModule")
    * [preload ](/reference/react-dom/preload "preload")
    * [preloadModule ](/reference/react-dom/preloadModule "preloadModule")

  * [Client APIs ](/reference/react-dom/client "Client APIs")

    * [createRoot ](/reference/react-dom/client/createRoot "createRoot")
    * [hydrateRoot ](/reference/react-dom/client/hydrateRoot "hydrateRoot")

  * [Server APIs ](/reference/react-dom/server "Server APIs")

    * [renderToPipeableStream ](/reference/react-dom/server/renderToPipeableStream "renderToPipeableStream")
    * [renderToReadableStream ](/reference/react-dom/server/renderToReadableStream "renderToReadableStream")
    * [renderToStaticMarkup ](/reference/react-dom/server/renderToStaticMarkup "renderToStaticMarkup")
    * [renderToString ](/reference/react-dom/server/renderToString "renderToString")

  * [Static APIs ](/reference/react-dom/static "Static APIs")

    * [prerender ](/reference/react-dom/static/prerender "prerender")
    * [prerenderToNodeStream ](/reference/react-dom/static/prerenderToNodeStream "prerenderToNodeStream")

### Rules of React

  * [Overview ](/reference/rules "Overview")

    * [Components and Hooks must be pure ](/reference/rules/components-and-hooks-must-be-pure "Components and Hooks must be pure")
    * [React calls Components and Hooks ](/reference/rules/react-calls-components-and-hooks "React calls Components and Hooks")
    * [Rules of Hooks ](/reference/rules/rules-of-hooks "Rules of Hooks")

### React Server Components

  * [Server Components ](/reference/rsc/server-components "Server Components")
  * [Server Functions ](/reference/rsc/server-functions "Server Functions")
  * [Directives ](/reference/rsc/directives "Directives")

    * ['use client' ](/reference/rsc/use-client "'use client'")
    * ['use server' ](/reference/rsc/use-server "'use server'")

### Legacy APIs

  * [Legacy React APIs ](/reference/react/legacy "Legacy React APIs")

    * [Children ](/reference/react/Children "Children")
    * [cloneElement ](/reference/react/cloneElement "cloneElement")
    * [Component ](/reference/react/Component "Component")
    * [createElement ](/reference/react/createElement "createElement")
    * [createRef ](/reference/react/createRef "createRef")
    * [forwardRef ](/reference/react/forwardRef "forwardRef")
    * [isValidElement ](/reference/react/isValidElement "isValidElement")
    * [PureComponent ](/reference/react/PureComponent "PureComponent")




Is this page useful?

[API Reference](/reference/react)

# React DOM APIs[](#undefined "Link for this heading")

The `react-dom` package contains methods that are only supported for the web applications (which run in the browser DOM environment). They are not supported for React Native.

## APIs [](#apis "Link for APIs ")

These APIs can be imported from your components. They are rarely used:

  * `createPortal`[](/reference/react-dom/createPortal) lets you render child components in a different part of the DOM tree.
  * `flushSync`[](/reference/react-dom/flushSync) lets you force React to flush a state update and update the DOM synchronously.



## Resource Preloading APIs [](#resource-preloading-apis "Link for Resource Preloading APIs ")

These APIs can be used to make apps faster by pre-loading resources such as scripts, stylesheets, and fonts as soon as you know you need them, for example before navigating to another page where the resources will be used.

[React-based frameworks](/learn/start-a-new-react-project) frequently handle resource loading for you, so you might not have to call these APIs yourself. Consult your framework’s documentation for details.

  * `prefetchDNS`[](/reference/react-dom/prefetchDNS) lets you prefetch the IP address of a DNS domain name that you expect to connect to.
  * `preconnect`[](/reference/react-dom/preconnect) lets you connect to a server you expect to request resources from, even if you don’t know what resources you’ll need yet.
  * `preload`[](/reference/react-dom/preload) lets you fetch a stylesheet, font, image, or external script that you expect to use.
  * `preloadModule`[](/reference/react-dom/preloadModule) lets you fetch an ESM module that you expect to use.
  * `preinit`[](/reference/react-dom/preinit) lets you fetch and evaluate an external script or fetch and insert a stylesheet.
  * `preinitModule`[](/reference/react-dom/preinitModule) lets you fetch and evaluate an ESM module.



## Entry points [](#entry-points "Link for Entry points ")

The `react-dom` package provides two additional entry points:

  * `react-dom/client`[](/reference/react-dom/client) contains APIs to render React components on the client (in the browser).
  * `react-dom/server`[](/reference/react-dom/server) contains APIs to render React components on the server.



## Removed APIs [](#removed-apis "Link for Removed APIs ")

These APIs were removed in React 19:

  * `findDOMNode`[](https://18.react.dev/reference/react-dom/findDOMNode): see [alternatives](https://18.react.dev/reference/react-dom/findDOMNode#alternatives).
  * `hydrate`[](https://18.react.dev/reference/react-dom/hydrate): use `hydrateRoot`[](/reference/react-dom/client/hydrateRoot) instead.
  * `render`[](https://18.react.dev/reference/react-dom/render): use `createRoot`[](/reference/react-dom/client/createRoot) instead.
  * `unmountComponentAtNode`[](/reference/react-dom/unmountComponentAtNode): use `root.unmount()`[](/reference/react-dom/client/createRoot#root-unmount) instead.
  * `renderToNodeStream`[](https://18.react.dev/reference/react-dom/server/renderToNodeStream): use `react-dom/server`[](/reference/react-dom/server) APIs instead.
  * `renderToStaticNodeStream`[](https://18.react.dev/reference/react-dom/server/renderToStaticNodeStream): use `react-dom/server`[](/reference/react-dom/server) APIs instead.



[Previous<title>](/reference/react-dom/components/title)[NextcreatePortal](/reference/react-dom/createPortal)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [APIs ](#apis)
  * [Resource Preloading APIs ](#resource-preloading-apis)
  * [Entry points ](#entry-points)
  * [Removed APIs ](#removed-apis)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Meet the Team[](#undefined "Link for this heading")

React development is led by a dedicated team working full time at Meta. It also receives contributions from people all over the world.

## React Core [](#react-core "Link for React Core ")

The React Core team members work full time on the core component APIs, the engine that powers React DOM and React Native, React DevTools, and the React documentation website.

Current members of the React team are listed in alphabetical order below.

### Andrew Clark[](#andrew-clark "Link for Andrew Clark")

Engineer at Vercel

Andrew got started with web development by making sites with WordPress, and eventually tricked himself into doing JavaScript. His favorite pastime is karaoke. Andrew is either a Disney villain or a Disney princess, depending on the day.

[acdlite](https://threads.net/acdlite)

[ acdlite](https://github.com/acdlite)

### Dan Abramov[](#dan-abramov "Link for Dan Abramov")

Independent Engineer

Dan got into programming after he accidentally discovered Visual Basic inside Microsoft PowerPoint. He has found his true calling in turning [Sebastian](#sebastian-markb%C3%A5ge)’s tweets into long-form blog posts. Dan occasionally wins at Fortnite by hiding in a bush until the game ends.

[danabra.mov](https://bsky.app/profile/danabra.mov)

[ gaearon](https://github.com/gaearon)

### Eli White[](#eli-white "Link for Eli White")

Engineering Manager at Meta

Eli got into programming after he got suspended from middle school for hacking. He has been working on React and React Native since 2017. He enjoys eating treats, especially ice cream and apple pie. You can find Eli trying quirky activities like parkour, indoor skydiving, and aerial silks.

[elicwhite](https://threads.net/elicwhite)

[ TheSavior](https://github.com/TheSavior)

### Jack Pope[](#jack-pope "Link for Jack Pope")

Engineer at Meta

Shortly after being introduced to AutoHotkey, Jack had written scripts to automate everything he could think of. When reaching limitations there, he dove headfirst into web app development and hasn’t looked back. Most recently, Jack worked on the web platform at Instagram before moving to React. His favorite programming language is JSX.

[ jackpope](https://github.com/jackpope)

[ jackpope.me](https://jackpope.me)

### Jason Bonta[](#jason-bonta "Link for Jason Bonta")

Engineering Manager at Meta

Jason abandoned embedded C for a career in front-end engineering and never looked back. Armed with esoteric CSS knowledge and a passion for beautiful UI, Jason joined Facebook in 2010, where he now feels privileged to have seen JavaScript development come of age. Though he may not understand how `for...of` loops work, he loves getting to work with brilliant people on projects that enable amazing UX.

[someextent](https://threads.net/someextent)

### Joe Savona[](#joe-savona "Link for Joe Savona")

Engineer at Meta

Joe was planning to major in math and philosophy but got into computer science after writing physics simulations in Matlab. Prior to React, he worked on Relay, RSocket.js, and the Skip programming language. While he’s not building some sort of reactive system he enjoys running, studying Japanese, and spending time with his family.

[joesavona](https://threads.net/joesavona)

[ josephsavona](https://github.com/josephsavona)

### Josh Story[](#josh-story "Link for Josh Story")

Engineer at Vercel

Josh majored in Mathematics and discovered programming while in college. His first professional developer job was to program insurance rate calculations in Microsoft Excel, the paragon of Reactive Programming which must be why he now works on React. In between that time Josh has been an IC, Manager, and Executive at a few startups. outside of work he likes to push his limits with cooking.

[storyhb.com](https://bsky.app/profile/storyhb.com)

[ gnoff](https://github.com/gnoff)

### Lauren Tan[](#lauren-tan "Link for Lauren Tan")

Engineer at Meta

Lauren’s programming career peaked when she first discovered the `<marquee>` tag. She’s been chasing that high ever since. She studied Finance instead of CS in college, so she learned to code using Excel. Lauren enjoys dropping cheeky memes in chat, playing video games with her partner, learning Korean, and petting her dog Zelda.

[potetotes](https://threads.net/potetotes)

[no.lol](https://bsky.app/profile/no.lol)

[ poteto](https://github.com/poteto)

### Luna Wei[](#luna-wei "Link for Luna Wei")

Engineer at Meta

Luna first learnt the fundamentals of python at the age of 6 from her father. Since then, she has been unstoppable. Luna aspires to be a gen z, and the road to success is paved with environmental advocacy, urban gardening and lots of quality time with her Voo-Doo’d (as pictured).

[lunaleaps](https://threads.net/lunaleaps)

[ lunaleaps](https://github.com/lunaleaps)

### Matt Carroll[](#matt-carroll "Link for Matt Carroll")

Developer Advocate at Meta

Matt stumbled into coding, and since then, has become enamored with creating things in communities that can’t be created alone. Prior to React, he worked on YouTube, the Google Assistant, Fuchsia, and Google Cloud AI and Evernote. When he’s not trying to make better developer tools he enjoys the mountains, jazz, and spending time with his family.

[mattcarrollcode](https://threads.net/mattcarrollcode)

[ mattcarrollcode](https://github.com/mattcarrollcode)

### Mofei Zhang[](#mofei-zhang "Link for Mofei Zhang")

Engineer at Meta

Mofei started programming when she realized it can help her cheat in video games. She focused on operating systems in undergrad / grad school, but now finds herself happily tinkering on React. Outside of work, she enjoys debugging bouldering problems and planning her next backpacking trip(s).

[z_mofei](https://threads.net/z_mofei)

[ mofeiZ](https://github.com/mofeiZ)

### Noah Lemen[](#noah-lemen "Link for Noah Lemen")

Engineer at Meta

Noah’s interest in UI programming sparked during his education in music technology at NYU. At Meta, he’s worked on internal tools, browsers, web performance, and is currently focused on React. Outside of work, Noah can be found tinkering with synthesizers or spending time with his cat.

[noahlemen](https://threads.net/noahlemen)

[ noahlemen](https://github.com/noahlemen)

[ noahle.men](https://noahle.men)

### Rick Hanlon[](#rick-hanlon "Link for Rick Hanlon")

Engineer at Meta

Ricky majored in theoretical math and somehow found himself on the React Native team for a couple years before joining the React team. When he’s not programming you can find him snowboarding, biking, climbing, golfing, or closing GitHub issues that do not match the issue template.

[rickhanlonii](https://threads.net/rickhanlonii)

[ricky.fm](https://bsky.app/profile/ricky.fm)

[ rickhanlonii](https://github.com/rickhanlonii)

### Ruslan Lesiutin[](#ruslan-lesiutin "Link for Ruslan Lesiutin")

Engineer at Meta

Ruslan’s introduction to UI programming started when he was a kid by manually editing HTML templates for his custom gaming forums. Somehow, he ended up majoring in Computer Science. He enjoys music, games, and memes. Mostly memes.

[lesiutin](https://threads.net/lesiutin)

[ hoxyq](https://github.com/hoxyq)

### Sathya Gunasekaran [](#sathya-gunasekaran "Link for Sathya Gunasekaran ")

Engineer at Meta

Sathya hated the Dragon Book in school but somehow ended up working on compilers all his career. When he’s not compiling React components, he’s either drinking coffee or eating yet another Dosa.

[gsathya.03](https://threads.net/gsathya.03)

[ gsathya](https://github.com/gsathya)

### Sebastian Markbåge[](#sebastian-markbåge "Link for Sebastian Markbåge")

Engineer at Vercel

Sebastian majored in psychology. He’s usually quiet. Even when he says something, it often doesn’t make sense to the rest of us until a few months later. The correct way to pronounce his surname is “mark-boa-geh” but he settled for “mark-beige” out of pragmatism — and that’s how he approaches React.

[sebmarkbage](https://threads.net/sebmarkbage)

[ sebmarkbage](https://github.com/sebmarkbage)

### Sebastian Silbermann[](#sebastian-silbermann "Link for Sebastian Silbermann")

Engineer at Vercel

Sebastian learned programming to make the browser games he played during class more enjoyable. Eventually this lead to contributing to as much open source code as possible. Outside of coding he’s busy making sure people don’t confuse him with the other Sebastians and Zilberman of the React community.

[sebsilbermann](https://threads.net/sebsilbermann)

[ eps1lon](https://github.com/eps1lon)

### Seth Webster[](#seth-webster "Link for Seth Webster")

Engineering Manager at Meta

Seth started programming as a kid growing up in Tucson, AZ. After school, he was bitten by the music bug and was a touring musician for about 10 years before returning to _work_ , starting with Intuit. In his spare time, he loves [taking pictures](https://www.sethwebster.com) and flying for animal rescues in the northeastern United States.

[sethwebster](https://threads.net/sethwebster)

[ sethwebster](https://github.com/sethwebster)

[ sethwebster.com](https://sethwebster.com)

### Sophie Alpert[](#sophie-alpert "Link for Sophie Alpert")

Independent Engineer

Four days after React was released, Sophie rewrote the entirety of her then-current project to use it, which she now realizes was perhaps a bit reckless. After she became the project’s #1 committer, she wondered why she wasn’t getting paid by Facebook like everyone else was and joined the team officially to lead React through its adolescent years. Though she quit that job years ago, somehow she’s still in the team’s group chats and “providing value”.

[sophiebits](https://threads.net/sophiebits)

[ sophiebits](https://github.com/sophiebits)

[ sophiebits.com](https://sophiebits.com)

### Tianyu Yao[](#tianyu-yao "Link for Tianyu Yao")

Engineer at Meta

Tianyu’s interest in computers started as a kid because he loves video games. So he majored in computer science and still plays childish games like League of Legends. When he is not in front of a computer, he enjoys playing with his two kittens, hiking and kayaking.

[ tyao1](https://github.com/tyao1)

### Yuzhi Zheng[](#yuzhi-zheng "Link for Yuzhi Zheng")

Engineering Manager at Meta

Yuzhi studied Computer Science in school. She liked the instant gratification of seeing code come to life without having to physically be in a laboratory. Now she’s a manager in the React org. Before management, she used to work on the Relay data fetching framework. In her spare time, Yuzhi enjoys optimizing her life via gardening and home improvement projects.

[yuzhiz](https://threads.net/yuzhiz)

[ yuzhi](https://github.com/yuzhi)

## Past contributors [](#past-contributors "Link for Past contributors ")

You can find the past team members and other people who significantly contributed to React over the years on the [acknowledgements](/community/acknowledgements) page.

[PreviousReact Videos](/community/videos)[NextDocs Contributors](/community/docs-contributors)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [React Core ](#react-core)
  * [Andrew Clark](#andrew-clark)
  * [Dan Abramov](#dan-abramov)
  * [Eli White](#eli-white)
  * [Jack Pope](#jack-pope)
  * [Jason Bonta](#jason-bonta)
  * [Joe Savona](#joe-savona)
  * [Josh Story](#josh-story)
  * [Lauren Tan](#lauren-tan)
  * [Luna Wei](#luna-wei)
  * [Matt Carroll](#matt-carroll)
  * [Mofei Zhang](#mofei-zhang)
  * [Noah Lemen](#noah-lemen)
  * [Rick Hanlon](#rick-hanlon)
  * [Ruslan Lesiutin](#ruslan-lesiutin)
  * [Sathya Gunasekaran ](#sathya-gunasekaran)
  * [Sebastian Markbåge](#sebastian-markbåge)
  * [Sebastian Silbermann](#sebastian-silbermann)
  * [Seth Webster](#seth-webster)
  * [Sophie Alpert](#sophie-alpert)
  * [Tianyu Yao](#tianyu-yao)
  * [Yuzhi Zheng](#yuzhi-zheng)
  * [Past contributors ](#past-contributors)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Docs Contributors[](#undefined "Link for this heading")

React documentation is written and maintained by the [React team](/community/team) and [external contributors.](https://github.com/reactjs/react.dev/graphs/contributors) On this page, we’d like to thank a few people who’ve made significant contributions to this site.

## Content [](#content "Link for Content ")

  * : editing, writing, illustrating
  * : writing, curriculum design
  * : example code
  * : writing
  * : writing
  * : writing
  * : writing
  * : writing
  * : editing, writing
  * : reviews, advice
  * : feedback



## Design [](#design "Link for Design ")

  * : site design
  * [Razvan Gradinar](https://dribbble.com/GradinarRazvan): sandbox design
  * [Maggie Appleton](https://maggieappleton.com/): diagram system
  * : color-coded explanations



## Development [](#development "Link for Development ")

  * : site development
  * [ThisDotLabs](https://www.thisdot.co/) (, ): site development
  * [CodeSandbox](https://codesandbox.io/) (, , , ): sandbox integration
  * : site development
  * : site development
  * [Harish Kumar](https://www.strek.in/): development and maintenance
  * : sandbox improvements



We’d also like to thank countless alpha testers and community members who gave us feedback along the way.

[PreviousMeet the Team](/community/team)[NextTranslations](/community/translations)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Content ](#content)
  * [Design ](#design)
  * [Development ](#development)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Acknowledgements[](#undefined "Link for this heading")

React was originally created by [Jordan Walke.](https://github.com/jordwalke) Today, React has a [dedicated full-time team working on it](/community/team), as well as over a thousand [open source contributors.](https://github.com/facebook/react/graphs/contributors)

## Past contributors [](#past-contributors "Link for Past contributors ")

We’d like to recognize a few people who have made significant contributions to React and its documentation in the past and have helped maintain them over the years:

  * [Almero Steyn](https://github.com/AlmeroSteyn)
  * [Andreas Svensson](https://github.com/syranide)
  * [Alex Krolick](https://github.com/alexkrolick)
  * [Alexey Pyltsyn](https://github.com/lex111)
  * [Andrey Lunyov](https://github.com/alunyov)
  * [Brandon Dail](https://github.com/aweary)
  * [Brian Vaughn](https://github.com/bvaughn)
  * [Caleb Meredith](https://github.com/calebmer)
  * [Chang Yan](https://github.com/cyan33)
  * [Cheng Lou](https://github.com/chenglou)
  * [Christoph Nakazawa](https://github.com/cpojer)
  * [Christopher Chedeau](https://github.com/vjeux)
  * [Clement Hoang](https://github.com/clemmy)
  * [Dave McCabe](https://github.com/davidmccabe)
  * [Dominic Gannaway](https://github.com/trueadm)
  * [Flarnie Marchan](https://github.com/flarnie)
  * [Jason Quense](https://github.com/jquense)
  * [Jesse Beach](https://github.com/jessebeach)
  * [Jessica Franco](https://github.com/Jessidhia)
  * [Jim Sproch](https://github.com/jimfb)
  * [Josh Duck](https://github.com/joshduck)
  * [Joe Critchley](https://github.com/joecritch)
  * [Jeff Morrison](https://github.com/jeffmo)
  * [Luna Ruan](https://github.com/lunaruan)
  * [Kathryn Middleton](https://github.com/kmiddleton14)
  * [Keyan Zhang](https://github.com/keyz)
  * [Marco Salazar](https://github.com/salazarm)
  * [Mengdi Chen](https://github.com/mondaychen)
  * [Nat Alison](https://github.com/tesseralis)
  * [Nathan Hunzaker](https://github.com/nhunzaker)
  * [Nicolas Gallagher](https://github.com/necolas)
  * [Paul O’Shannessy](https://github.com/zpao)
  * [Pete Hunt](https://github.com/petehunt)
  * [Philipp Spiess](https://github.com/philipp-spiess)
  * [Rachel Nabors](https://github.com/rachelnabors)
  * [Robert Zhang](https://github.com/robertzhidealx)
  * [Samuel Susla](https://github.com/sammy-SC)
  * [Sander Spies](https://github.com/sanderspies)
  * [Sasha Aickin](https://github.com/aickin)
  * [Sean Keegan](https://github.com/seanryankeegan)
  * [Sophia Shoemaker](https://github.com/mrscobbler)
  * [Sunil Pai](https://github.com/threepointone)
  * [Tim Yung](https://github.com/yungsters)
  * [Xuan Huang](https://github.com/huxpro)



This list is not exhaustive.

We’d like to give special thanks to [Tom Occhino](https://github.com/tomocchino) and [Adam Wolff](https://github.com/wolffiex) for their guidance and support over the years. We are also thankful to all the volunteers who [translated React into other languages.](https://translations.react.dev/)

## Additional Thanks [](#additional-thanks "Link for Additional Thanks ")

Additionally, we’re grateful to:

  * [Jeff Barczewski](https://github.com/jeffbski) for allowing us to use the `react` package name on npm
  * [Christopher Aue](https://christopheraue.net/) for letting us use the reactjs.com domain name and the username on Twitter
  * [ProjectMoon](https://github.com/ProjectMoon) for letting us use the [flux](https://www.npmjs.com/package/flux) package name on npm
  * Shane Anderson for allowing us to use the [react](https://github.com/react) org on GitHub



[PreviousTranslations](/community/translations)[NextVersioning Policy](/community/versioning-policy)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Past contributors ](#past-contributors)
  * [Additional Thanks ](#additional-thanks)


[Skip to content](#geist-skip-nav)

[](https://vercel.com/home?utm_source=next-site&utm_medium=banner&utm_campaign=home "Go to Vercel homepage")

[](/?uwu=true "Go to the homepage")

[](/ "Go to the homepage")

Search documentation...`CtrlK`Search...`⌘K`

[](https://vercel.com/home?utm_source=next-site&utm_medium=banner&utm_campaign=home "Go to Vercel homepage")

[](/?uwu=true "Go to the homepage")

[](/ "Go to the homepage")

[Showcase](/showcase)[Docs](/docs "Documentation")[Blog](/blog)[Templates](https://vercel.com/templates/next.js?utm_source=next-site&utm_medium=navbar&utm_campaign=next_site_nav_templates)[Enterprise](https://vercel.com/contact/sales/nextjs?utm_source=next-site&utm_medium=navbar&utm_campaign=next_site_nav_enterprise)

Search documentation...`CtrlK`Search...`⌘K`[Deploy](https://vercel.com/new/clone?utm_source=next-site&utm_medium=banner&b=main&s=https%3A%2F%2Fgithub.com%2Fvercel%2Fvercel%2Ftree%2Fmain%2Fexamples%2Fnextjs&showOptionalTeamCreation=false&template=nextjs&teamCreateStatus=hidden&utm_campaign=home)[Learn](/learn)

# The React Framework for the Web

Used by some of the world's largest companies, Next.js enables you to create **high-quality web applications** with the power of React components.

[Get Started](/docs)[Learn Next.js](/learn?utm_source=next-site&utm_medium=homepage-cta&utm_campaign=home)

▲ ~ npx create-next-app@latest

## What's in Next.js?

Everything you need to build great products on the web.

[Original1440px375pxBuilt-in OptimizationsAutomatic Image, Font, and Script Optimizations for improved UX and Core Web Vitals.](/docs/app/building-your-application/optimizing/images)[Data FetchingMake your React component async and await your data. Next.js supports both server and client data fetching.](/docs/app/building-your-application/data-fetching)[Server ActionsRun server code by calling a function. Skip the API. Then, easily revalidate cached data and update your UI in one network roundtrip.](/docs/app/building-your-application/data-fetching/forms-and-mutations)[Advanced Routing & Nested LayoutsCreate routes using the file system, including support for more advanced routing patterns and UI layouts.](/docs/app/building-your-application/routing)

[Dynamic HTML StreamingInstantly stream UI from the server, integrated with the App Router and React Suspense.](/docs/app/building-your-application/routing/loading-ui-and-streaming)[CSS SupportStyle your application with your favorite tools, including support for CSS Modules, Tailwind CSS, and popular community libraries.](/docs/app/building-your-application/styling)[Route HandlersBuild API endpoints to securely connect with third-party services for handling auth or listening for webhooks.](/docs/app/building-your-application/routing/router-handlers)[MiddlewareTake control of the incoming request. Use code to define routing and access rules for authentication, experimentation, and internationalization.](/docs/app/building-your-application/routing/middleware)

[React Server ComponentsAdd components without sending additional client-side JavaScript. Built on the latest React features.](/docs/app/building-your-application/rendering/server-components)[Client and Server RenderingFlexible rendering and caching options, including Incremental Static Regeneration (ISR), on a per-page level.](/docs/app/building-your-application/rendering)[Next.js 15The power of full-stack to the frontend. Read the release notes.](/blog/next-15)

[Built-in OptimizationsAutomatic Image, Font, and Script Optimizations for improved UX and Core Web Vitals.](/docs/app/building-your-application/optimizing/images)[React Server ComponentsAdd components without sending additional client-side JavaScript. Built on the latest React features.](/docs/app/building-your-application/rendering/server-components)[Data FetchingMake your React component async and await your data. Next.js supports both server and client data fetching.](/docs/app/building-your-application/data-fetching)[Server ActionsRun server code by calling a function. Skip the API. Then, easily revalidate cached data and update your UI in one network roundtrip.](/docs/app/building-your-application/data-fetching/forms-and-mutations)[Advanced Routing & Nested LayoutsCreate routes using the file system, including support for more advanced routing patterns and UI layouts.](/docs/app/building-your-application/routing)

[Dynamic HTML StreamingInstantly stream UI from the server, integrated with the App Router and React Suspense.](/docs/app/building-your-application/routing/loading-ui-and-streaming)[CSS SupportStyle your application with your favorite tools, including support for CSS Modules, Tailwind CSS, and popular community libraries.](/docs/app/building-your-application/styling)[Route HandlersBuild API endpoints to securely connect with third-party services for handling auth or listening for webhooks.](/docs/app/building-your-application/routing/router-handlers)[MiddlewareTake control of the incoming request. Use code to define routing and access rules for authentication, experimentation, and internationalization.](/docs/app/building-your-application/routing/middleware)[Client and Server RenderingFlexible rendering and caching options, including Incremental Static Regeneration (ISR), on a per-page level.](/docs/app/building-your-application/rendering)[Next.js 15The power of full-stack to the frontend. Read the release notes.](/blog/next-15)

[Built-in OptimizationsAutomatic Image, Font, and Script Optimizations for improved UX and Core Web Vitals.](/docs/app/building-your-application/optimizing/images)[Dynamic HTML StreamingInstantly stream UI from the server, integrated with the App Router and React Suspense.](/docs/app/building-your-application/routing/loading-ui-and-streaming)[React Server ComponentsAdd components without sending additional client-side JavaScript. Built on the latest React features.](/docs/app/building-your-application/rendering/server-components)

[Data FetchingMake your React component async and await your data. Next.js supports both server and client data fetching.](/docs/app/building-your-application/data-fetching)[Server ActionsRun server code by calling a function. Skip the API. Then, easily revalidate cached data and update your UI in one network roundtrip.](/docs/app/building-your-application/data-fetching/forms-and-mutations)[Advanced Routing & Nested LayoutsCreate routes using the file system, including support for more advanced routing patterns and UI layouts.](/docs/app/building-your-application/routing)[CSS SupportStyle your application with your favorite tools, including support for CSS Modules, Tailwind CSS, and popular community libraries.](/docs/app/building-your-application/styling)[Route HandlersBuild API endpoints to securely connect with third-party services for handling auth or listening for webhooks.](/docs/app/building-your-application/routing/router-handlers)[MiddlewareTake control of the incoming request. Use code to define routing and access rules for authentication, experimentation, and internationalization.](/docs/app/building-your-application/routing/middleware)[Client and Server RenderingFlexible rendering and caching options, including Incremental Static Regeneration (ISR), on a per-page level.](/docs/app/building-your-application/rendering)

[Next.js 15The power of full-stack to the frontend. Read the release notes.](/blog/next-15)

## Built on a foundation of fast, production-grade tooling

Powered By

[ReactThe library for web and native user interfaces. Next.js is built on the latest React features, including Server Components and Actions.](https://react.dev)[TurbopackAn incremental bundler optimized for JavaScript and TypeScript, written in Rust , and built into Next.js.](https://turbo.build)[Speedy Web CompilerAn extensible Rust based platform for the next generation of fast developer tools, and can be used for both compilation and minification.](https://swc.rs)

## Get started in seconds

Deploy Next.js to Vercel

StarterEcommerceBlogAIPortfolioSaaSMulti-tenant AppsRealtime AppsDocumentationVirtual EventWeb3

Vercel is a frontend cloud from the creators of Next.js, making it easy to get started with Next.js quickly.

Jumpstart your Next.js development with pre-built solutions from Vercel and our community.

[Deploy a Template on Vercel](https://vercel.com/templates/next.js?utm_source=next-site&utm_medium=deploy-template-on-vercel-cta&utm_campaign=homepage-new)

Next.js Boilerplate

A Next.js starter from create-next-app.

Image Gallery Starter

An image gallery built on Next.js and Cloudinary.

Next.js Commerce

An all-in-one starter kit for high-performance ecommerce sites.

## The framework of choice when it matters

[Audible](/showcase)[Sonos](/showcase)

[Dice](/showcase)

[Notion](/showcase)

[Today](/showcase)[ProductHunt](/showcase)

[Nike](/showcase)[Washington Post](/showcase)

[Sonos](/showcase)[Audible](/showcase)[Nike](/showcase)

[Notion](/showcase)[ProductHunt](/showcase)[Washington Post](/showcase)

For **performance** , **efficiency** and **developer experience**. Next.js is trusted by some of the biggest names on the web.

[View the Next.js Showcase](/showcase)

## Customer Testimonials

> ### “With Next.js, we now consistently average 0.09 or lower for Cumulative Layout Shift, placing our site in the top tier for user experience and Core Web Vitals.”

Senior Software Engineer, Frontend

> ### “Our UI for Frame.io responds to user input within 100ms and all animations run at a consistent 60fps with Next.js.”

Charlton Roberts, Product Engineering

> ### “Next.js has been a game-changer for our agency work and team collaboration. Its powerful features have allowed us to build high-performance websites quickly and efficiently like never before.”

Daniel Lopes, Frontend Developer

[](https://vercel.com/home?utm_source=next-site&utm_medium=footer&utm_campaign=next-website "Go to the Vercel website")

[](https://github.com/vercel/next.js)[](https://bsky.app/profile/nextjs.org)

#### Resources

[Docs](/docs)[Learn](/learn)[Showcase](/showcase)[Blog](/blog)[Analytics](https://vercel.com/analytics?utm_source=next-site&utm_medium=footer&utm_campaign=home)[Next.js Conf](/conf)[Previews](https://vercel.com/products/previews?utm_source=next-site&utm_medium=footer&utm_campaign=home)

#### More

[Next.js Commerce](https://vercel.com/templates/next.js/nextjs-commerce?utm_source=next-site&utm_medium=footer&utm_campaign=home)[Contact Sales](https://vercel.com/contact/sales?utm_source=next-site&utm_medium=footer&utm_campaign=home)[GitHub](https://github.com/vercel/next.js)[Releases](https://github.com/vercel/next.js/releases)[Telemetry](/telemetry)[Governance](/governance)

#### About Vercel

[Next.js + Vercel](https://vercel.com/solutions/nextjs?utm_source=next-site&utm_medium=footer&utm_campaign=home)[Open Source Software](https://vercel.com/oss?utm_source=next-site&utm_medium=footer&utm_campaign=home)[GitHub](https://github.com/vercel)[Bluesky](https://bsky.app/profile/vercel.com)

#### Legal

[Privacy Policy](https://vercel.com/legal/privacy-policy)Cookie Preferences

#### Subscribe to our newsletter

Stay updated on new releases and features, guides, and case studies.

Subscribe

© 2024 Vercel, Inc.

[](https://github.com/vercel/next.js)[](https://bsky.app/profile/nextjs.org)
[](/)[Docs](/docs/en/main)[Blog](/blog)[Showcase](/showcase)[Resources](/resources)

[Docs](/docs/en/main)[Blog](/blog)[Showcase](/showcase)[Resources](/resources)

# Welcome to Remix

## Focused on web standards and modern web app UX, you’re simply going to build better websites

Remix is a full stack web framework that lets you focus on the user interface and work back through web standards to deliver a fast, slick, and resilient user experience. People are gonna love using your stuff.

[Get Started](/docs/start/quickstart)[Read the Docs](/docs)

```
export async function loader({ request }) {
 return getProjects();
}
export async function action({ request }) {
 const form = await request.formData();
 return createProject({
  title: form.get("title"),
 });
}
export default function Projects() {
 const projects = useLoaderData();
 const { state } = useNavigation();
 const busy = state === "submitting";
 return (
  <div>
   {projects.map((project) => (
    <Link to={project.slug}>
     {project.title}
    </Link>
   ))}
   <Form method="post">
    <input name="title" />
    <button type="submit" disabled={busy}>
     {busy
      ? "Creating..."
      : "Create New Project"}
    </button>
   </Form>
  </div>
 );
}

```


```
export async function loader({ request }) {
 return getProjects();
}
export async function action({ request }) {
 const form = await request.formData();
 return createProject({ title: form.get("title") });
}
export default function Projects() {
 const projects = useLoaderData();
 const { state } = useNavigation();
 const busy = state === "submitting";
 return (
  <div>
   {projects.map((project) => (
    <Link to={project.slug}>{project.title}</Link>
   ))}
   <Form method="post">
    <input name="title" />
    <button type="submit" disabled={busy}>
     {busy ? "Creating..." : "Create New Project"}
    </button>
   </Form>
  </div>
 );
}

```


## Testimonials

Twitter Logo

, 

Radix UI

> I've been waiting for something to encourage progressive enhancement in the React space *forever* and Remix truly is so much more. Proving we don't need to sacrifice React or choose SSG for a lightning fast, accessible UI, and the DX makes it all too easy 🤤

Cloudflare

> holy 💩 Remix is good

Discord, prev React Core

> I just rewrote my first Remix app on top of Cloudflare Workers and Supabase and it’s so damn good

Software Developer

> My mind is still blown away with Remix! So easy and elegant 😩. I love how it also focuses on Accessibility (Progressive Enhancement...) 🤯, A few days ago I was like wazzup with remix, we got Next.js and Svelte 😴 ... and now I'm fired up like crazy 😂. This is so good 🤤

Daffy, prev Vercel

> What’s really cool with Remix loaders is that you can do most of your data transformation and calculations there, like check if a list is empty, limit the number of records, only send specific attributes, so your React component just receives the data and renders it, no logic needed

Fullstack Dev, Frontside

> Remix is going to put developers on the Hot Path to build accessible, scaleable, and performant apps, that have stellar user experiences and amazing developer ergonomics. It's not only going to be a win for developers, but also a big win for the end-users!

Fullstack Developer

> In my opinion @remix_run will be game changer for corporate teams hesitant to adopt full stack JavaScript. The core concepts are so intuitive you can pick it up in a day, and it will even integrate into your existing stack.

Software Engineer, Box

> I love what @mjackson and @ryanflorence are doing with Remix! Deploying to AWS Lambda in under 30 seconds 🤯

Web Developer

> Building with @remix_run has been awesome so far. Having used Next.js for applications for years, the nested layouts are a wonderful feature. I also haven't learned this much about the web in years.

Web Developer

> I love using @remix_run for my website. Remix has improved my productivity as a front-end developer by empowering me to seamlessly switch between front-end and back-end code.

App Developer

> If you're doing #webdevelopment you should check out Remix 🔥 It's a new (old) paradigm for web dev, which simplifies our code, especially state management😅, speeds up our page loads, and gives us a mental model and framework we can rely on to create our best work

![](/wave.png)![](/loading.gif)

## While you were waiting for your static site to build, distributed web infra­structure got really good. Break through the static.

Remix is a seamless server and browser runtime that provides snappy page loads and instant transitions by leveraging distributed systems and native browser features instead of clunky static builds. Built on the Web Fetch API (instead of Node) **it can run anywhere**. It already runs natively on Cloudflare Workers, and of course supports serverless and traditional Node.js environments, so you can come as you are.

Page speed is only one aspect of our true goal though. We're after **better user experiences**. As you’ve pushed the boundaries of the web, your tools haven’t caught up to your appetite. **Remix is ready** to serve you from the initial request to the fanciest UX your designers can think up. Check it out 👀

## Remix has a cheat code:Nested Routes.

↑↑↓↓←→←→BA↵

Websites usually have levels of navigation that control child views.

Not only are these components pretty much always coupled to URL segments...

...they’re also the semantic boundary of data loading and code splitting.

Hover or tap the buttons to see how they’re all related

👇

<Root><Sales><Invoices><Invoice id={id}>

example.com/sales/invoices/102000

Fakebooks

Dashboard

Accounts

Sales

Expenses

Reports

Sales

Overview

Subscriptions

Invoices

Customers

Deposits

Overdue

$10,800

Due Soon

$62,000

Invoice List

Santa Monica

$10,800

1995

Overdue

Stankonia

$8,000

2000

Due Today

Ocean Avenue

$9,500

2003

Paid

Tubthumper

$14,000

1997

Due in 10 Days

Wide Open Sp...

$4,600

1998

Due in 8 Days

Stankonia

$8,000

Due Today • Invoiced 10/31/2000

Pro Plan

$6,000

Custom

$2,000

Net Total

$8,000

## What about loading states?

Through nested routes, Remix can eliminate nearly every loading state.

Most web apps fetch inside of components, creating request waterfalls, slower loads, and jank.

Remix loads data in parallel on the server and sends a fully formed HTML document. Way faster, jank free.

Without Remix

about:blank

document

root.js

user.json

sales.js

sales/nav.json

invoices.js

invoice.js

invoice/{id}.json

With Remix

about:blank

document

root.js

sales.js

invoices.js

invoice.js

(Keep scrolling to compare)

Say good­bye to Spinnageddon

Say good­bye to Spinnageddon

## Pre-fetching Everything

Nested routes allow Remix to make your app as fast as instant.

Remix can prefetch everything in parallel before the user clicks a link.

Public Data. User Data. Modules. Heck, even CSS.

Zero loading states. Zero skeleton UI. Zero jank.

Alright, you caught us, they’re just prefetch link tags, #useThePlatform

example.com/dashboard

Fakebooks

Dashboard

Accounts

Sales

Expenses

Reports

Dashboard

Recent Activity

Alerts

Messages

New Invoice

Customer

Stankonia

Net Total

$8,000

New Invoice

Customer

Ocean Avenue

Net Total

$9,500

## Data loading

... ![](/yawn.png)

You ever notice most of the code in your app is for changing data?

Imagine if React only had props and no way to set state. What’s the point? If a web framework helps you load data but doesn’t help you update it, what’s the point? Remix doesn’t drop you off at the `<form onSubmit>` cliff. (What the heck does `event.preventDefault` do anyway?)

Resilient, progressively enhanced data updates are built in.

It’s so simple it’s kind of silly. Just make a form...

...and an action on a route module. It looks like traditional HTML forms but enables fully dynamic web experiences you're after.

Remix runs the action server side, revalidates data client side, and even handles race conditions from resubmissions.

Get fancy with transition hooks and make some pending UI. Remix handles all the state, you simply ask for it.

Or get jiggy with some optimistic UI. Remix provides the data being sent to the server so you can skip the busy spinners for mutations, too.

HTML forms for mutations. Who knew?

```
export default function NewInvoice() {
 return (
  <Form method="post">
   <input type="text" name="company" />
   <input type="text" name="amount" />
   <button type="submit">Create</button>
  </Form>
 );
}

```


## Error Handling

:)

Your websites run into problems, but with Remix they don’t need to be refreshed. Error handling is hard to remember and hard to do. That’s why it’s built in.

Remix handles errors while Server Rendering. Errors while Client Rendering. Even errors in your server side data handling.

![](/qrcode.png)

## Route Error Boundaries keep the happy path happy.

Each route module can export an error boundary next to the default route component.

If an error is thrown, client or server side, users see the boundary instead of the default component.

Routes w/o trouble render normally, so users have more options than slamming refresh.

If a route has no boundary, errors bubble up. Just put one at the top and chill out about errors in code review, yeah?

```
export default function InvoiceRoute() {
 const invoice = useLoaderData();
 return <Invoice data={invoice} />;
}

```


That's probably enough for now. What are you waiting for?

[Go Play!](/docs)

[GitHub Logo](https://github.com/remix-run)[YouTube logo](https://youtube.com/remix_run)[](https://rmx.as/discord)
[Skip to main content](#__docusaurus_skipToContent_fallback)

The New Architecture has arrived - [learn more](/blog/2024/10/23/the-new-architecture-is-here)

[**React Native**](/)

[Development](#)

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



[Contributing](/contributing/overview)[Community](/community/overview)[Showcase](/showcase)[Blog](/blog)[](https://github.com/facebook/react-native)

Search

[Star](https://github.com/facebook/react-native)

# React Native

## Learn once, write anywhere.

[Get Started](/docs/environment-setup)[Learn the Basics](/docs/getting-started)

# Create native apps for Android, iOS, and more using React

### React Native brings the best parts of developing with React to native development. It's a best-in-class JavaScript library for building user interfaces.

index.js

```
function HomeScreen() {  return (   <View>    <Text> Hello World 👋 🌍!</Text>  </View>  ); }
```


**Written in JavaScript, rendered with native code.** React primitives render to native platform UI, meaning your app uses the same native platform APIs other apps do.

# Native development for everyone

### React Native lets you create truly native apps and doesn't compromise your users' experiences. It provides a core set of platform agnostic native components like `View`, `Text`, and `Image` that map directly to the platform's native UI building blocks.

# Get a head start with a framework

### React Native brings the React programming paradigm to platforms like Android and iOS. It doesn’t prescribe how to do routing, or how to access each of the numerous platform APIs. To build a new app with React Native, we recommend a framework like [Expo](https://expo.dev).

#### File-based routing

Create stack, modal, drawer, and tab screens with minimal boilerplate using your filesystem.

#### Use any library, SDK, or native code

Generate native changes or write your own native code. Use over 50 modules to create your app.

#### Developer tools

Get started quickly with Expo Go, then continue with expo-dev-client: a module that adds Expo’s tools to apps that require native changes.

# Watch and learn

### Watch talks by the React team and learn how to get the most out of React Native. Find the latest on .

#### FB 2019: Mobile innovation with React Native

45:29

#### Why React Native?

1:42

# Meta supported. Community driven.

Meta released React Native in 2015 and has been maintaining it ever since.

In 2018, React Native had the [2nd highest](https://octoverse.github.com/2018/projects#repositories) number of contributors for any repository in GitHub. Today, React Native is supported by contributions from individuals and companies around the world including [Callstack](https://callstack.com/), [Expo](https://expo.io/), [Infinite Red](https://infinite.red/), [Microsoft](https://www.microsoft.com/) and [Software Mansion](https://swmansion.com/).

Our community is always shipping exciting new projects and exploring platforms beyond Android and iOS with repos like [React Native Windows](https://github.com/microsoft/react-native-windows#readme), [React Native macOS](https://github.com/microsoft/react-native-macos#readme) and [React Native Web](https://github.com/necolas/react-native-web#readme).

React Native is being used in thousands of apps, but it's likely you've already used it in one of these apps:

  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://blog.coinbase.com/optimizing-react-native-7e7bf7ac3a34)
  * [](https://formidable.com/work/puma-scaling-across-the-globe/)
  * [](https://github.com/wordpress-mobile/gutenberg-mobile)
  * [](https://engineering.tableau.com/react-native-at-tableau-3-years-in-89d43c38354c)
  * [](https://blog.flipkart.tech/the-journey-of-react-native-flipkart-47dcd0c3d1c6)
  * [](https://medium.com/mercari-engineering/why-we-decided-to-rewrite-our-ios-android-apps-from-scratch-in-react-native-9f1737558299)
  * [](https://discord.com/blog/how-discord-achieves-native-ios-performance-with-react-native)
  * [](https://www.techatbloomberg.com/blog/bloomberg-used-react-native-develop-new-consumer-app/)
  * [](https://medium.com/@Pinterest_Engineering/supporting-react-native-at-pinterest-f8c2233f90e6)
  * [](https://www.tesla.com/blog)
  * [](https://medium.com/walmartlabs/react-native-at-walmartlabs-cdd140589560#.ueonqqloc)
  * [](https://www.tencent.com/en-us/business.html)
  * [](https://github.com/mattermost/mattermost-mobile)



and [many more](/showcase).

# Welcome to the React Native community

[Get Started](/docs/environment-setup)

Develop

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



Participate

  * [Showcase](/showcase)
  * [Contributing](/contributing/overview)
  * [Community](/community/overview)
  * [Directory](https://reactnative.directory/)
  * [Stack Overflow](https://stackoverflow.com/questions/tagged/react-native)



Find us

  * [Blog](/blog)
  * [GitHub](https://github.com/facebook/react-native)



Explore More

  * [ReactJS](https://react.dev/)
  * [Privacy Policy](https://opensource.fb.com/legal/privacy/)
  * [Terms of Service](https://opensource.fb.com/legal/terms/)



[](https://opensource.fb.com/)

Copyright © 2024 Meta Platforms, Inc.
[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Fexpo%2Fexpo)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Fexpo%2Fexpo)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=expo%2Fexpo) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ expo ](/expo) / **[expo](/expo/expo) ** Public

  * [ Notifications ](/login?return_to=%2Fexpo%2Fexpo) You must be signed in to change notification settings
  * [ Fork 5.7k ](/login?return_to=%2Fexpo%2Fexpo)
  * [ Star  35.5k ](/login?return_to=%2Fexpo%2Fexpo)




An open-source framework for making universal native apps with React. Expo runs on Android, iOS, and the web. 

[docs.expo.dev](https://docs.expo.dev "https://docs.expo.dev")

### License

[ MIT license ](/expo/expo/blob/main/LICENSE)

[ 35.5k stars ](/expo/expo/stargazers) [ 5.7k forks ](/expo/expo/forks) [ Branches ](/expo/expo/branches) [ Tags ](/expo/expo/tags) [ Activity ](/expo/expo/activity)

[ Star  ](/login?return_to=%2Fexpo%2Fexpo)

[ Notifications ](/login?return_to=%2Fexpo%2Fexpo) You must be signed in to change notification settings

  * [ Code ](/expo/expo)
  * [ Issues 446 ](/expo/expo/issues)
  * [ Pull requests 225 ](/expo/expo/pulls)
  * [ Discussions ](/expo/expo/discussions)
  * [ Actions ](/expo/expo/actions)
  * [ Projects 0 ](/expo/expo/projects)
  * [ Wiki ](/expo/expo/wiki)
  * [ Security ](/expo/expo/security)
  * [ Insights ](/expo/expo/pulse)



Additional navigation options

  * [ Code  ](/expo/expo)
  * [ Issues  ](/expo/expo/issues)
  * [ Pull requests  ](/expo/expo/pulls)
  * [ Discussions  ](/expo/expo/discussions)
  * [ Actions  ](/expo/expo/actions)
  * [ Projects  ](/expo/expo/projects)
  * [ Wiki  ](/expo/expo/wiki)
  * [ Security  ](/expo/expo/security)
  * [ Insights  ](/expo/expo/pulse)



# expo/expo

main

[**618** Branches](/expo/expo/branches)[**0** Tags](/expo/expo/tags)

[](/expo/expo/branches)[](/expo/expo/tags)

Go to file

Code

## Folders and files

Name| Name| Last commit message| Last commit date  
---|---|---|---  
  
## Latest commit

[](/Kudo)[Kudo](/expo/expo/commits?author=Kudo)[[dev-menu][dev-launcher] fix broken local development on android (](/expo/expo/commit/d9b65b28e55d0e223b51ea4164a173696931e4af)[#33714](https://github.com/expo/expo/pull/33714)Dec 18, 2024[d9b65b2](/expo/expo/commit/d9b65b28e55d0e223b51ea4164a173696931e4af) · Dec 18, 2024

## History

[24,776 Commits](/expo/expo/commits/main/)[](/expo/expo/commits/main/)  
[.github](/expo/expo/tree/main/.github ".github")| [.github](/expo/expo/tree/main/.github ".github")  
[.vscode](/expo/expo/tree/main/.vscode ".vscode")| [.vscode](/expo/expo/tree/main/.vscode ".vscode")  
[apps](/expo/expo/tree/main/apps "apps")| [apps](/expo/expo/tree/main/apps "apps")  
[bin](/expo/expo/tree/main/bin "bin")| [bin](/expo/expo/tree/main/bin "bin")  
[docs](/expo/expo/tree/main/docs "docs")| [docs](/expo/expo/tree/main/docs "docs")  
[fastlane](/expo/expo/tree/main/fastlane "fastlane")| [fastlane](/expo/expo/tree/main/fastlane "fastlane")  
[guides](/expo/expo/tree/main/guides "guides")| [guides](/expo/expo/tree/main/guides "guides")  
[packages](/expo/expo/tree/main/packages "packages")| [packages](/expo/expo/tree/main/packages "packages")  
[patches](/expo/expo/tree/main/patches "patches")| [patches](/expo/expo/tree/main/patches "patches")  
[react-native-lab](/expo/expo/tree/main/react-native-lab "react-native-lab")| [react-native-lab](/expo/expo/tree/main/react-native-lab "react-native-lab")  
[scripts](/expo/expo/tree/main/scripts "scripts")| [scripts](/expo/expo/tree/main/scripts "scripts")  
[secrets](/expo/expo/tree/main/secrets "secrets")| [secrets](/expo/expo/tree/main/secrets "secrets")  
[template-files](/expo/expo/tree/main/template-files "template-files")| [template-files](/expo/expo/tree/main/template-files "template-files")  
[templates](/expo/expo/tree/main/templates "templates")| [templates](/expo/expo/tree/main/templates "templates")  
[tools](/expo/expo/tree/main/tools "tools")| [tools](/expo/expo/tree/main/tools "tools")  
[.dockerignore](/expo/expo/blob/main/.dockerignore ".dockerignore")| [.dockerignore](/expo/expo/blob/main/.dockerignore ".dockerignore")  
[.envrc](/expo/expo/blob/main/.envrc ".envrc")| [.envrc](/expo/expo/blob/main/.envrc ".envrc")  
[.eslintignore](/expo/expo/blob/main/.eslintignore ".eslintignore")| [.eslintignore](/expo/expo/blob/main/.eslintignore ".eslintignore")  
[.eslintrc.js](/expo/expo/blob/main/.eslintrc.js ".eslintrc.js")| [.eslintrc.js](/expo/expo/blob/main/.eslintrc.js ".eslintrc.js")  
[.gitattributes](/expo/expo/blob/main/.gitattributes ".gitattributes")| [.gitattributes](/expo/expo/blob/main/.gitattributes ".gitattributes")  
[.gitignore](/expo/expo/blob/main/.gitignore ".gitignore")| [.gitignore](/expo/expo/blob/main/.gitignore ".gitignore")  
[.gitmodules](/expo/expo/blob/main/.gitmodules ".gitmodules")| [.gitmodules](/expo/expo/blob/main/.gitmodules ".gitmodules")  
[.lfsconfig](/expo/expo/blob/main/.lfsconfig ".lfsconfig")| [.lfsconfig](/expo/expo/blob/main/.lfsconfig ".lfsconfig")  
[.prettierignore](/expo/expo/blob/main/.prettierignore ".prettierignore")| [.prettierignore](/expo/expo/blob/main/.prettierignore ".prettierignore")  
[.prettierrc](/expo/expo/blob/main/.prettierrc ".prettierrc")| [.prettierrc](/expo/expo/blob/main/.prettierrc ".prettierrc")  
[.swiftlint.yml](/expo/expo/blob/main/.swiftlint.yml ".swiftlint.yml")| [.swiftlint.yml](/expo/expo/blob/main/.swiftlint.yml ".swiftlint.yml")  
[.watchmanconfig](/expo/expo/blob/main/.watchmanconfig ".watchmanconfig")| [.watchmanconfig](/expo/expo/blob/main/.watchmanconfig ".watchmanconfig")  
[CHANGELOG.md](/expo/expo/blob/main/CHANGELOG.md "CHANGELOG.md")| [CHANGELOG.md](/expo/expo/blob/main/CHANGELOG.md "CHANGELOG.md")  
[CONTRIBUTING.md](/expo/expo/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")| [CONTRIBUTING.md](/expo/expo/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")  
[Gemfile](/expo/expo/blob/main/Gemfile "Gemfile")| [Gemfile](/expo/expo/blob/main/Gemfile "Gemfile")  
[Gemfile.lock](/expo/expo/blob/main/Gemfile.lock "Gemfile.lock")| [Gemfile.lock](/expo/expo/blob/main/Gemfile.lock "Gemfile.lock")  
[LICENSE](/expo/expo/blob/main/LICENSE "LICENSE")| [LICENSE](/expo/expo/blob/main/LICENSE "LICENSE")  
[README.md](/expo/expo/blob/main/README.md "README.md")| [README.md](/expo/expo/blob/main/README.md "README.md")  
[SECURITY.md](/expo/expo/blob/main/SECURITY.md "SECURITY.md")| [SECURITY.md](/expo/expo/blob/main/SECURITY.md "SECURITY.md")  
[SUPPORT.md](/expo/expo/blob/main/SUPPORT.md "SUPPORT.md")| [SUPPORT.md](/expo/expo/blob/main/SUPPORT.md "SUPPORT.md")  
[THIRD-PARTY-LICENSES](/expo/expo/blob/main/THIRD-PARTY-LICENSES "THIRD-PARTY-LICENSES")| [THIRD-PARTY-LICENSES](/expo/expo/blob/main/THIRD-PARTY-LICENSES "THIRD-PARTY-LICENSES")  
[buildAndroidTarballLocally.sh](/expo/expo/blob/main/buildAndroidTarballLocally.sh "buildAndroidTarballLocally.sh")| [buildAndroidTarballLocally.sh](/expo/expo/blob/main/buildAndroidTarballLocally.sh "buildAndroidTarballLocally.sh")  
[changelogVersions.json](/expo/expo/blob/main/changelogVersions.json "changelogVersions.json")| [changelogVersions.json](/expo/expo/blob/main/changelogVersions.json "changelogVersions.json")  
[dev-home-config.json](/expo/expo/blob/main/dev-home-config.json "dev-home-config.json")| [dev-home-config.json](/expo/expo/blob/main/dev-home-config.json "dev-home-config.json")  
[package.json](/expo/expo/blob/main/package.json "package.json")| [package.json](/expo/expo/blob/main/package.json "package.json")  
[tsconfig.json](/expo/expo/blob/main/tsconfig.json "tsconfig.json")| [tsconfig.json](/expo/expo/blob/main/tsconfig.json "tsconfig.json")  
[tsconfig.node.json](/expo/expo/blob/main/tsconfig.node.json "tsconfig.node.json")| [tsconfig.node.json](/expo/expo/blob/main/tsconfig.node.json "tsconfig.node.json")  
[yarn.lock](/expo/expo/blob/main/yarn.lock "yarn.lock")| [yarn.lock](/expo/expo/blob/main/yarn.lock "yarn.lock")  
View all files  
  
## Repository files navigation

  * [README](#)
  * [MIT license](#)
  * [Security](#)



[ ](https://expo.dev/)

# Expo

[](#expo)

[ ](https://www.npmjs.com/package/expo) [ ](https://chat.expo.dev) [ ](https://github.com/expo/expo/blob/main/LICENSE) [ ](http://www.npmtrends.com/expo)

[**Try Expo in the Browser**](https://snack.expo.dev) • [Read the Documentation](https://docs.expo.dev) • [Learn more on our blog](https://expo.dev/blog) • [Request a feature](https://expo.canny.io/feature-requests)

###### Follow us on

[](#follow-us-on)

[ ](https://github.com/expo) [ ](https://bsky.app/profile/expo.dev)

## Introduction

[](#introduction)

Expo is an open-source platform for making universal native apps that run on Android, iOS, and the web. It includes a universal runtime and libraries that let you build native apps by writing React and JavaScript.

This repository includes the Expo SDK, Modules API, Go app, CLI, Router, documentation, and various other supporting tools. [Expo Application Services (EAS)](https://expo.dev/eas) is a platform of hosted services that are deeply integrated with Expo open source tools. EAS helps you build, ship, and iterate on your app as an individual or a team.

Read the [Expo Community Guidelines](https://expo.dev/guidelines) before interacting in the repository. Thank you for helping keep the Expo community open and welcoming!

## Table of contents

[](#table-of-contents)

  * [📚 Documentation](#-documentation)
  * [🗺 Project Layout](#-project-layout)
  * [🏅 Badges](#-badges)
  * [👏 Contributing](#-contributing)
  * [❓ FAQ](#-faq)
  * [💙 The Team](#-the-team)
  * [License](#license)



## 📚 Documentation

[](#-documentation)

Learn about building and deploying universal apps [in our official docs!](https://docs.expo.dev)

  * [Getting Started](https://docs.expo.dev/)
  * [API Reference](https://docs.expo.dev/versions/latest/)
  * [Using Custom Native Modules](https://docs.expo.dev/workflow/customizing/)



## 🗺 Project Layout

[](#-project-layout)

  * `packages`[](/expo/expo/blob/main/packages) All the source code for Expo modules, if you want to edit a library or just see how it works this is where you'll find it.
  * `apps`[](/expo/expo/blob/main/apps) This is where you can find Expo projects which are linked to the development modules. You'll do most of your testing in here.
  * `apps/expo-go`[](/expo/expo/blob/main/apps/expo-go) This is where you can find the source code for Expo Go.
  * `apps/expo-go/ios/Exponent.xcworkspace`[](/expo/expo/blob/main/apps/expo-go/ios) is the Xcode workspace. When developing iOS, always open this instead of `Exponent.xcodeproj` because the workspace also loads the CocoaPods dependencies.
  * `docs`[](/expo/expo/blob/main/docs) The source code for **<https://docs.expo.dev>**
  * `templates`[](/expo/expo/blob/main/templates) The template projects you get when you run `npx create-expo-app`
  * `react-native-lab`[](/expo/expo/blob/main/react-native-lab) This is our fork of `react-native` used to build Expo Go.
  * `guides`[](/expo/expo/blob/main/guides) In-depth tutorials for advanced topics like contributing to the client.
  * `tools`[](/expo/expo/blob/main/tools) contain build and configuration tools.
  * `template-files`[](/expo/expo/blob/main/template-files) contains templates for files that require private keys. They are populated using the keys in `template-files/keys.json`.
  * `template-files/ios/dependencies.json`[](/expo/expo/blob/main/template-files/ios/dependencies.json) specifies the CocoaPods dependencies of the app.



## 🏅 Badges

[](#-badges)

Let everyone know your app can be run instantly in the _Expo Go_ app! 

[](https://expo.dev/client)

[](https://expo.dev/client)

```
[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-000.svg?style=flat-square&logo=EXPO&labelColor=f3f3f3&logoColor=000)](https://expo.dev/client)
[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-4630EB.svg?style=flat-square&logo=EXPO&labelColor=f3f3f3&logoColor=000)](https://expo.dev/client)
```


## 👏 Contributing

[](#-contributing)

If you like Expo and want to help make it better then check out our [contributing guide](/expo/expo/blob/main/CONTRIBUTING.md)! Check out the [CLI package](https://github.com/expo/expo/tree/main/packages/%40expo/cli) to work on the Expo CLI.

## ❓ FAQ

[](#-faq)

If you have questions about Expo and want answers, then check out our [Frequently Asked Questions](https://docs.expo.dev/faq/)!

If you still have questions you can ask them on our [Discord and Forums](https://chat.expo.dev) or X .

## 💙 The Team

[](#-the-team)

Curious about who makes Expo? Here are our [team members](https://expo.dev/about)!

## License

[](#license)

The Expo source code is made available under the [MIT license](/expo/expo/blob/main/LICENSE). Some of the dependencies are licensed differently, with the BSD license, for example.

[](https://user-images.githubusercontent.com/9664363/185428788-d762fd5d-97b3-4f59-8db7-f72405be9677.gif) [ ](https://user-images.githubusercontent.com/9664363/185428788-d762fd5d-97b3-4f59-8db7-f72405be9677.gif) [ ](https://user-images.githubusercontent.com/9664363/185428788-d762fd5d-97b3-4f59-8db7-f72405be9677.gif)

## About

An open-source framework for making universal native apps with React. Expo runs on Android, iOS, and the web. 

[docs.expo.dev](https://docs.expo.dev "https://docs.expo.dev")

### Topics

[ react ](/topics/react "Topic: react") [ javascript ](/topics/javascript "Topic: javascript") [ android ](/topics/android "Topic: android") [ ios ](/topics/ios "Topic: ios") [ mobile ](/topics/mobile "Topic: mobile") [ framework ](/topics/framework "Topic: framework") [ typescript ](/topics/typescript "Topic: typescript") [ react-native ](/topics/react-native "Topic: react-native") [ web ](/topics/web "Topic: web") [ frontend ](/topics/frontend "Topic: frontend") [ native ](/topics/native "Topic: native") [ universal ](/topics/universal "Topic: universal") [ web-framework ](/topics/web-framework "Topic: web-framework") [ native-apps ](/topics/native-apps "Topic: native-apps") [ app-framework ](/topics/app-framework "Topic: app-framework") [ expo ](/topics/expo "Topic: expo")

### Resources

[ Readme ](#readme-ov-file)

### License

[ MIT license ](#MIT-1-ov-file)

### Security policy

[ Security policy ](#security-ov-file)

[ Activity](/expo/expo/activity)

[ Custom properties](/expo/expo/custom-properties)

### Stars

[ **35.5k** stars](/expo/expo/stargazers)

### Watchers

[ **305** watching](/expo/expo/watchers)

### Forks

[ **5.7k** forks](/expo/expo/forks)

[ Report repository ](/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2Fexpo%2Fexpo&report=expo+%28user%29)

##  [Used by 1.1m](/expo/expo/network/dependents)

[ + 1,067,006  ](/expo/expo/network/dependents)

##  [Contributors 1,468](/expo/expo/graphs/contributors)

  * [ ](https://github.com/brentvatne)
  * [ ](https://github.com/tsapeta)
  * [ ](https://github.com/EvanBacon)
  * [ ](https://github.com/lukmccall)
  * [ ](https://github.com/amandeepmittal)
  * [ ](https://github.com/terribleben)
  * [ ](https://github.com/esamelson)
  * [ ](https://github.com/Kudo)
  * [ ](https://github.com/expo-bot)
  * [ ](https://github.com/sjchmiela)
  * [ ](https://github.com/Simek)
  * [ ](https://github.com/ide)
  * [ ](https://github.com/wschurman)
  * [ ](https://github.com/byCedric)



[+ 1,454 contributors](/expo/expo/graphs/contributors)

## Languages

  * [ TypeScript 38.8% ](/expo/expo/search?l=typescript)
  * [ JavaScript 28.1% ](/expo/expo/search?l=javascript)
  * [ Kotlin 12.5% ](/expo/expo/search?l=kotlin)
  * [ Swift 8.2% ](/expo/expo/search?l=swift)
  * [ Objective-C 5.2% ](/expo/expo/search?l=objective-c)
  * [ Java 2.9% ](/expo/expo/search?l=java)
  * Other 4.3%



## Footer

[ ](https://github.com "GitHub") © 2024 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You can’t perform that action at this time. 
[Skip to main content](#__docusaurus_skipToContent_fallback)

The New Architecture has arrived - [learn more](/blog/2024/10/23/the-new-architecture-is-here)

[**React Native**](/)

[Development](#)

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



[Contributing](/contributing/overview)[Community](/community/overview)[Showcase](/showcase)[Blog](/blog)[](https://github.com/facebook/react-native)

Search

[Star](https://github.com/facebook/react-native)

# React Native

## Learn once, write anywhere.

[Get Started](/docs/environment-setup)[Learn the Basics](/docs/getting-started)

# Create native apps for Android, iOS, and more using React

### React Native brings the best parts of developing with React to native development. It's a best-in-class JavaScript library for building user interfaces.

index.js

```
function HomeScreen() {  return (   <View>    <Text> Hello World 👋 🌍!</Text>  </View>  ); }
```


**Written in JavaScript, rendered with native code.** React primitives render to native platform UI, meaning your app uses the same native platform APIs other apps do.

# Native development for everyone

### React Native lets you create truly native apps and doesn't compromise your users' experiences. It provides a core set of platform agnostic native components like `View`, `Text`, and `Image` that map directly to the platform's native UI building blocks.

# Get a head start with a framework

### React Native brings the React programming paradigm to platforms like Android and iOS. It doesn’t prescribe how to do routing, or how to access each of the numerous platform APIs. To build a new app with React Native, we recommend a framework like [Expo](https://expo.dev).

#### File-based routing

Create stack, modal, drawer, and tab screens with minimal boilerplate using your filesystem.

#### Use any library, SDK, or native code

Generate native changes or write your own native code. Use over 50 modules to create your app.

#### Developer tools

Get started quickly with Expo Go, then continue with expo-dev-client: a module that adds Expo’s tools to apps that require native changes.

# Watch and learn

### Watch talks by the React team and learn how to get the most out of React Native. Find the latest on .

#### FB 2019: Mobile innovation with React Native

45:29

#### Why React Native?

1:42

# Meta supported. Community driven.

Meta released React Native in 2015 and has been maintaining it ever since.

In 2018, React Native had the [2nd highest](https://octoverse.github.com/2018/projects#repositories) number of contributors for any repository in GitHub. Today, React Native is supported by contributions from individuals and companies around the world including [Callstack](https://callstack.com/), [Expo](https://expo.io/), [Infinite Red](https://infinite.red/), [Microsoft](https://www.microsoft.com/) and [Software Mansion](https://swmansion.com/).

Our community is always shipping exciting new projects and exploring platforms beyond Android and iOS with repos like [React Native Windows](https://github.com/microsoft/react-native-windows#readme), [React Native macOS](https://github.com/microsoft/react-native-macos#readme) and [React Native Web](https://github.com/necolas/react-native-web#readme).

React Native is being used in thousands of apps, but it's likely you've already used it in one of these apps:

  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://blog.coinbase.com/optimizing-react-native-7e7bf7ac3a34)
  * [](https://formidable.com/work/puma-scaling-across-the-globe/)
  * [](https://github.com/wordpress-mobile/gutenberg-mobile)
  * [](https://engineering.tableau.com/react-native-at-tableau-3-years-in-89d43c38354c)
  * [](https://blog.flipkart.tech/the-journey-of-react-native-flipkart-47dcd0c3d1c6)
  * [](https://medium.com/mercari-engineering/why-we-decided-to-rewrite-our-ios-android-apps-from-scratch-in-react-native-9f1737558299)
  * [](https://discord.com/blog/how-discord-achieves-native-ios-performance-with-react-native)
  * [](https://www.techatbloomberg.com/blog/bloomberg-used-react-native-develop-new-consumer-app/)
  * [](https://medium.com/@Pinterest_Engineering/supporting-react-native-at-pinterest-f8c2233f90e6)
  * [](https://www.tesla.com/blog)
  * [](https://medium.com/walmartlabs/react-native-at-walmartlabs-cdd140589560#.ueonqqloc)
  * [](https://www.tencent.com/en-us/business.html)
  * [](https://github.com/mattermost/mattermost-mobile)



and [many more](/showcase).

# Welcome to the React Native community

[Get Started](/docs/environment-setup)

Develop

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



Participate

  * [Showcase](/showcase)
  * [Contributing](/contributing/overview)
  * [Community](/community/overview)
  * [Directory](https://reactnative.directory/)
  * [Stack Overflow](https://stackoverflow.com/questions/tagged/react-native)



Find us

  * [Blog](/blog)
  * [GitHub](https://github.com/facebook/react-native)



Explore More

  * [ReactJS](https://react.dev/)
  * [Privacy Policy](https://opensource.fb.com/legal/privacy/)
  * [Terms of Service](https://opensource.fb.com/legal/terms/)



[](https://opensource.fb.com/)

Copyright © 2024 Meta Platforms, Inc.
[](/)

Meta Open Source

## Welcome to our community

Empowering diverse communities through open source technology.

[Explore projects](/projects)

### Meta Embraces Open Source

Meta is committed to the notion that open source not only provides great technology for developers, but also brings the best out in people. Meta believes in the following tenets:

#### Collaboration

Open source allows developers from around the world to proactively work together to achieve common goals.

#### Community

Open source provides opportunities for the creation of diverse communities in support of the betterment of everyone.

#### Technology

Open source has produced historic technologies, including operating systems, frameworks and programming languages.

Featured Media

[The Diff Episode 10: Talking Open Source with Paul O'ShannessyDecember 7, 2021](https://www.youtube.com/watch?v=QR84BJt4fw0)

[Explain Like I'm 5: Season 3September 28, 2021](https://youtube.com/playlist?list=PLzIwronG0sE49zLk608yB5GKKT8WbEhnZ)

[See all media](/media)

Popular Projects

[DocumentationDocusaurusSetup a website for your documentation quickly and easily.View Project](https://docusaurus.io)

[FrameworksReactA JavaScript framework for building awesome user interfaces.View Project](https://reactjs.org)

[FrameworksPyTorchA Python-based machine learning framework for dynamic neural networks.View Project](https://pytorch.org)

[See more projects](/projects)

[](https://nasa.github.io/cumulus/docs/cumulus-docs-readme)

[](https://developers.diem.com)

[](https://slack.engineering/hacklang-at-slack-a-better-php/)

[](https://www.opencompute.org/membership/membership-organizational-directory?keyword=AT%26T)

[](https://aws.amazon.com/blogs/aws/announcing-torchserve-an-open-source-model-server-for-pytorch/)

[](https://www.carbondesignsystem.com/developing/frameworks/react/)

Showcase

## Globally trusted

Open source is used by teams of all shapes and sizes to create, iterate, and grow.

[See Showcase](/showcase)

[](https://meta.com)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



Site Map[Projects](/projects)[FAQ](/get-involved#faq)[About](/about)[Get Involved](/get-involved)

Information[Linux](/linux)[Careers](https://metacareers.com)[Bug Bounty Program](https://bugbounty.meta.com)

Connect[GitHub](https://github.com/facebook)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



© 2024 Meta

  * [Code of Conduct](/code-of-conduct)
  * [Privacy Policy](/legal/privacy)
  * [Cookie Policy](/legal/cookie-policy)
  * [Terms of Use](/legal/terms)
  * [Trademark Policy](/legal/trademark)


[](/)

# Meta Open Source - Terms of Use

 _Effective December 1, 2020_

These Terms of Use ("**Terms** ") govern your use of this website hosted and provided by Meta Platforms, Inc. ("**Meta** ", "**us** " or "**we** "), ("**Website** ") and any services offered through the Website ("**Services** ").

These Terms are a legal contract between you and us so it is important that you review them carefully.

For clarity, these Terms only apply to this Website and do not apply to any:

  1. use of open source code, documentation or specifications made available on GitHub, which are governed by the terms of the applicable open source license;
  2. pull requests, issues and any other interactions or features related to participation in open source projects on GitHub, which are governed by GitHub's terms and conditions; or
  3. use of any other Meta website, service or product, which are governed by the terms and conditions applicable to those offerings.



We may change these Terms or modify any features of the Website or the Services at any time. Any such change or modification will be effective immediately upon posting on our Website. You accept these Terms by browsing this Website and/or using the Services, and you accept any changes to the Terms by continuing to use the Website after we post any such changes.

If you do not agree to these Terms, please do not access or use the Website.

If you need to contact us for any reason, please do so at opensource@meta.com

#### 1. What you can do on this Website

We make this Website available to you and others to help everyone better understand our open source projects. In exchange, we need you to make the following commitments:

**(a) Who can use the Website**

We try to make our Website broadly available to everyone, but you cannot use our Website if:

  * You are a minor in your country of residence except if your parents or guardians have agreed to these Terms on your behalf.
  * You are prohibited from accessing the Website under applicable laws.

**(b) What you can share and do on the Website**

You agree not to engage in the conduct described below (or to facilitate or support others in doing so):

  1. You may not use our Website, do or share anything:
     * That violates these Terms (and other terms and policies that apply to your use of the Website);
     * That is unlawful in any country, misleading, discriminatory or fraudulent; and/or
     * That infringes or violates someone else's rights, including their intellectual property rights.
  2. You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of the Services or Website.

**(c) Access to the Website**

The Website is made available free of charge and the Services are available only for informational purposes. We make no representations or warranties of any kind as to the accuracy, currency, or completeness of the information and other materials made available through the Website and are not liable for any decisions you may make in reliance on this content.

#### 2. Links To Third-Party Content

The Website or Services may contain links to third-party content. For example, our user communities may be hosted by third party platforms over which we have no control and for which we have no responsibility. Therefore, please review each of these platforms or websites' terms of use and privacy policies before participating.

We do not control, endorse, sponsor, recommend, or otherwise accept responsibility for any content, terms of use, policies on or use of any third party website.

#### 3. Limits on Liability

We work hard to provide the best Website and Services we can and to specify clear guidelines for everyone who uses them. Our Website and Services, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, that they will function without disruptions, delays, or imperfections or content will be accurate, current and complete. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT IN RELATION TO THE WEBSITE, THE SERVICES AND THEIR CONTENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content). Some jurisdictions do not allow the exclusion or limitation of implied warranties, in which case parts of this disclaimer may not apply to you.

We cannot predict when issues might arise with our Website and Services. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms, the Website or the Services, even if we have been advised of the possibility of such damages. Our aggregate liability arising out of or relating to these Terms, the Website or the Services will not exceed $100.

We do not exclude or limit in any way our liability to you where it would be unlawful to do so therefore depending on the country where you reside some of these exclusions and limitations may not apply to you.

#### 4. Disputes

We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.

For any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms, the Website and/or the Services ("**claim** "), you agree that it will be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County. You also agree to submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.

The preceding provision regarding applicable law and venue does not apply if you are a consumer based in the European Union. If you are a consumer based in the European Union, these Terms will be subject to the laws of your country of residence and you may bring a claim in front of those courts.

#### 5. Privacy

Under data protection legislation, we are required to provide you with certain information about who we are, how we process your personal data and for what purposes and your rights in relation to your personal data and how to exercise them. This information is provided in our [Privacy Policy](/legal/privacy) and it is important that you read that information. Please also review our [Cookie Policy](/legal/cookie-policy), which tells you which cookies we use on the Website and how to manage them.

#### 6. Other important terms

These Terms make up the entire agreement between you and Meta Platforms, Inc. regarding your use of our Services and this Website. They supersede any prior agreements.

If any portion of these Terms is found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.

You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.

You agree that no joint venture, partnership, employment, or agency relationship exists between you and us as a result of these Terms or your access to and use of the Website or Services.

These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.

We reserve all rights not expressly granted to you.

Table of contents[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[1. What you can do on this Website](#what-you-can-do-on-this-website)[2. Links To Third-Party Content](#links-to-third-party-content)[3. Limits on Liability](#limits-on-liability)[4. Disputes](#disputes)[5. Privacy](#privacy)[6. Other important terms](#other-important-terms)

[](https://meta.com)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



Site Map[Projects](/projects)[FAQ](/get-involved#faq)[About](/about)[Get Involved](/get-involved)

Information[Linux](/linux)[Careers](https://metacareers.com)[Bug Bounty Program](https://bugbounty.meta.com)

Connect[GitHub](https://github.com/facebook)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



© 2024 Meta

  * [Code of Conduct](/code-of-conduct)
  * [Privacy Policy](/legal/privacy)
  * [Cookie Policy](/legal/cookie-policy)
  * [Terms of Use](/legal/terms)
  * [Trademark Policy](/legal/trademark)



[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

# React

The library for web and native user interfaces

[Learn React](/learn)[API Reference](/reference/react)

## Create user interfaces from components

React lets you build user interfaces out of individual pieces called components. Create your own React components like `Thumbnail`, `LikeButton`, and `Video`. Then combine them into entire screens, pages, and apps.

### Video.js

```


function Video({ video }) {

 return (

  <div>

   <Thumbnail video={video} />

   <a href={video.url}>

    <h3>{video.title}</h3>

    <p>{video.description}</p>

   </a>

   <LikeButton video={video} />

  </div>

 );

}


```


My videoVideo description

Whether you work on your own or with thousands of other developers, using React feels the same. It is designed to let you seamlessly combine components written by independent people, teams, and organizations.

## Write components with code and markup

React components are JavaScript functions. Want to show some content conditionally? Use an `if` statement. Displaying a list? Try array `map()`. Learning React is learning programming.

### VideoList.js

```


function VideoList({ videos, emptyHeading }) {

 const count = videos.length;

 let heading = emptyHeading;

 if (count > 0) {

  const noun = count > 1 ? 'Videos' : 'Video';

  heading = count + ' ' + noun;

 }

 return (

  <section>

   <h2>{heading}</h2>

   {videos.map(video =>

    <Video key={video.id} video={video} />

   )}

  </section>

 );

}


```


## 3 Videos

First videoVideo description

Second videoVideo description

Third videoVideo description

This markup syntax is called JSX. It is a JavaScript syntax extension popularized by React. Putting JSX markup close to related rendering logic makes React components easy to create, maintain, and delete.

## Add interactivity wherever you need it

React components receive data and return what should appear on the screen. You can pass them new data in response to an interaction, like when the user types into an input. React will then update the screen to match the new data.

### SearchableVideoList.js

```


import { useState } from 'react';

function SearchableVideoList({ videos }) {

 const [searchText, setSearchText] = useState('');

 const foundVideos = filterVideos(videos, searchText);

 return (

  <>

   <SearchInput

    value={searchText}

    onChange={newText => setSearchText(newText)} />

   <VideoList

    videos={foundVideos}

    emptyHeading={`No matches for “${searchText}”`} />

  </>

 );

}


```


example.com/videos.html

# React Videos

A brief history of React

Search

## 5 Videos

[](https://www.youtube.com/watch?v=8pDqJVdNa44)### [React: The DocumentaryThe origin story of React](https://www.youtube.com/watch?v=8pDqJVdNa44)

[](https://www.youtube.com/watch?v=x7cQ3mrcKaY)### [Rethinking Best PracticesPete Hunt (2013)](https://www.youtube.com/watch?v=x7cQ3mrcKaY)

[](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)### [Introducing React NativeTom Occhino (2015)](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)

[](https://www.youtube.com/watch?v=V-QO-KO90iQ)### [Introducing React HooksSophie Alpert and Dan Abramov (2018)](https://www.youtube.com/watch?v=V-QO-KO90iQ)

[](https://www.youtube.com/watch?v=TQQPAU21ZUw)### [Introducing Server ComponentsDan Abramov and Lauren Tan (2020)](https://www.youtube.com/watch?v=TQQPAU21ZUw)

You don’t have to build your whole page in React. Add React to your existing HTML page, and render interactive React components anywhere on it.

[Add React to your page](/learn/add-react-to-an-existing-project)

## Go full-stack with a framework

React is a library. It lets you put components together, but it doesn’t prescribe how to do routing and data fetching. To build an entire app with React, we recommend a full-stack React framework like [Next.js](https://nextjs.org) or [Remix](https://remix.run).

### confs/[slug].js

```


import { db } from './database.js';

import { Suspense } from 'react';

async function ConferencePage({ slug }) {

 const conf = await db.Confs.find({ slug });

 return (

  <ConferenceLayout conf={conf}>

   <Suspense fallback={<TalksLoading />}>

    <Talks confId={conf.id} />

   </Suspense>

  </ConferenceLayout>

 );

}

async function Talks({ confId }) {

 const talks = await db.Talks.findAll({ confId });

 const videos = talks.map(talk => talk.video);

 return <SearchableVideoList videos={videos} />;

}


```


example.com/confs/react-conf-2021

React Conf 2021React Conf 2019

Search

## 19 Videos

[React Conf](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)### [React 18 KeynoteThe React Team](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)

[React Conf](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)### [React 18 for App DevelopersShruti Kapoor](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)

[React Conf](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)### [Streaming Server Rendering with SuspenseShaundai Person](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)

[React Conf](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)### [The First React Working GroupAakansha Doshi](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)

[React Conf](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)### [React Developer ToolingBrian Vaughn](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)

[React Conf](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)### [React without memoXuan Huang (黄玄)](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)

[React Conf](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)### [React Docs KeynoteRachel Nabors](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)

[React Conf](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)### [Things I Learnt from the New React DocsDebbie O'Brien](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)

[React Conf](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)### [Learning in the BrowserSarah Rainsberger](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)

[React Conf](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)### [The ROI of Designing with ReactLinton Ye](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)

[React Conf](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)### [Interactive Playgrounds with ReactDelba de Oliveira](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)

[React Conf](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)### [Re-introducing RelayRobert Balicki](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)

[React Conf](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)### [React Native DesktopEric Rozell and Steven Moyes](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)

[React Conf](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)### [On-device Machine Learning for React NativeRoman Rädle](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)

[React Conf](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)### [React 18 for External Store LibrariesDaishi Kato](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)

[React Conf](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)### [Building Accessible Components with React 18Diego Haz](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)

[React Conf](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)### [Accessible Japanese Form Components with ReactTafu Nakazaki](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)

[React Conf](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)### [UI Tools for ArtistsLyle Troxell](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)

[React Conf](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)### [Hydrogen + React 18Helen Lin](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)

React is also an architecture. Frameworks that implement it let you fetch data in asynchronous components that run on the server or even during the build. Read data from a file or a database, and pass it down to your interactive components.

[Get started with a framework](/learn/start-a-new-react-project)

## Use the best from every platform

People love web and native apps for different reasons. React lets you build both web apps and native apps using the same skills. It leans upon each platform’s unique strengths to let your interfaces feel just right on every platform.

example.com

#### Stay true to the web

People expect web app pages to load fast. On the server, React lets you start streaming HTML while you’re still fetching data, progressively filling in the remaining content before any JavaScript code loads. On the client, React can use standard web APIs to keep your UI responsive even in the middle of rendering.

9:40 AM

#### Go truly native

People expect native apps to look and feel like their platform. [React Native](https://reactnative.dev) and [Expo](https://github.com/expo/expo) let you build apps in React for Android, iOS, and more. They look and feel native because their UIs _are_ truly native. It’s not a web view—your React components render real Android and iOS views provided by the platform.

With React, you can be a web _and_ a native developer. Your team can ship to many platforms without sacrificing the user experience. Your organization can bridge the platform silos, and form teams that own entire features end-to-end.

[Build for native platforms](https://reactnative.dev/)

## Upgrade when the future is ready

React approaches changes with care. Every React commit is tested on business-critical surfaces with over a billion users. Over 100,000 React components at Meta help validate every migration strategy.

The React team is always researching how to improve React. Some research takes years to pay off. React has a high bar for taking a research idea into production. Only proven approaches become a part of React.

[Read more React news](/blog)

Latest React News

## [React 19December 05, 2024](/blog/2024/12/05/react-19)

## [React Compiler Beta Release and RoadmapOctober 21, 2024](/blog/2024/10/21/react-compiler-beta-release)

## [React Conf 2024 RecapMay 22, 2024](/blog/2024/05/22/react-conf-2024-recap)

## [React 19 RCApril 25, 2024](/blog/2024/04/25/react-19)

[Read more React news](/blog)

## Join a community of millions

You’re not alone. Two million developers from all over the world visit the React docs every month. React is something that people and teams can agree on.

This is why React is more than a library, an architecture, or even an ecosystem. React is a community. It’s a place where you can ask for help, find opportunities, and meet new friends. You will meet both developers and designers, beginners and experts, researchers and artists, teachers and students. Our backgrounds may be very different, but React lets us all create user interfaces together.

## Welcome to the React community

[Get Started](/learn)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

# React

The library for web and native user interfaces

[Learn React](/learn)[API Reference](/reference/react)

## Create user interfaces from components

React lets you build user interfaces out of individual pieces called components. Create your own React components like `Thumbnail`, `LikeButton`, and `Video`. Then combine them into entire screens, pages, and apps.

### Video.js

```


function Video({ video }) {

 return (

  <div>

   <Thumbnail video={video} />

   <a href={video.url}>

    <h3>{video.title}</h3>

    <p>{video.description}</p>

   </a>

   <LikeButton video={video} />

  </div>

 );

}


```


My videoVideo description

Whether you work on your own or with thousands of other developers, using React feels the same. It is designed to let you seamlessly combine components written by independent people, teams, and organizations.

## Write components with code and markup

React components are JavaScript functions. Want to show some content conditionally? Use an `if` statement. Displaying a list? Try array `map()`. Learning React is learning programming.

### VideoList.js

```


function VideoList({ videos, emptyHeading }) {

 const count = videos.length;

 let heading = emptyHeading;

 if (count > 0) {

  const noun = count > 1 ? 'Videos' : 'Video';

  heading = count + ' ' + noun;

 }

 return (

  <section>

   <h2>{heading}</h2>

   {videos.map(video =>

    <Video key={video.id} video={video} />

   )}

  </section>

 );

}


```


## 3 Videos

First videoVideo description

Second videoVideo description

Third videoVideo description

This markup syntax is called JSX. It is a JavaScript syntax extension popularized by React. Putting JSX markup close to related rendering logic makes React components easy to create, maintain, and delete.

## Add interactivity wherever you need it

React components receive data and return what should appear on the screen. You can pass them new data in response to an interaction, like when the user types into an input. React will then update the screen to match the new data.

### SearchableVideoList.js

```


import { useState } from 'react';

function SearchableVideoList({ videos }) {

 const [searchText, setSearchText] = useState('');

 const foundVideos = filterVideos(videos, searchText);

 return (

  <>

   <SearchInput

    value={searchText}

    onChange={newText => setSearchText(newText)} />

   <VideoList

    videos={foundVideos}

    emptyHeading={`No matches for “${searchText}”`} />

  </>

 );

}


```


example.com/videos.html

# React Videos

A brief history of React

Search

## 5 Videos

[](https://www.youtube.com/watch?v=8pDqJVdNa44)### [React: The DocumentaryThe origin story of React](https://www.youtube.com/watch?v=8pDqJVdNa44)

[](https://www.youtube.com/watch?v=x7cQ3mrcKaY)### [Rethinking Best PracticesPete Hunt (2013)](https://www.youtube.com/watch?v=x7cQ3mrcKaY)

[](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)### [Introducing React NativeTom Occhino (2015)](https://www.youtube.com/watch?v=KVZ-P-ZI6W4)

[](https://www.youtube.com/watch?v=V-QO-KO90iQ)### [Introducing React HooksSophie Alpert and Dan Abramov (2018)](https://www.youtube.com/watch?v=V-QO-KO90iQ)

[](https://www.youtube.com/watch?v=TQQPAU21ZUw)### [Introducing Server ComponentsDan Abramov and Lauren Tan (2020)](https://www.youtube.com/watch?v=TQQPAU21ZUw)

You don’t have to build your whole page in React. Add React to your existing HTML page, and render interactive React components anywhere on it.

[Add React to your page](/learn/add-react-to-an-existing-project)

## Go full-stack with a framework

React is a library. It lets you put components together, but it doesn’t prescribe how to do routing and data fetching. To build an entire app with React, we recommend a full-stack React framework like [Next.js](https://nextjs.org) or [Remix](https://remix.run).

### confs/[slug].js

```


import { db } from './database.js';

import { Suspense } from 'react';

async function ConferencePage({ slug }) {

 const conf = await db.Confs.find({ slug });

 return (

  <ConferenceLayout conf={conf}>

   <Suspense fallback={<TalksLoading />}>

    <Talks confId={conf.id} />

   </Suspense>

  </ConferenceLayout>

 );

}

async function Talks({ confId }) {

 const talks = await db.Talks.findAll({ confId });

 const videos = talks.map(talk => talk.video);

 return <SearchableVideoList videos={videos} />;

}


```


example.com/confs/react-conf-2021

React Conf 2021React Conf 2019

Search

## 19 Videos

[React Conf](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)### [React 18 KeynoteThe React Team](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=1)

[React Conf](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)### [React 18 for App DevelopersShruti Kapoor](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)

[React Conf](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)### [Streaming Server Rendering with SuspenseShaundai Person](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)

[React Conf](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)### [The First React Working GroupAakansha Doshi](https://www.youtube.com/watch?v=qn7gRClrC9U&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=4)

[React Conf](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)### [React Developer ToolingBrian Vaughn](https://www.youtube.com/watch?v=oxDfrke8rZg&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=5)

[React Conf](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)### [React without memoXuan Huang (黄玄)](https://www.youtube.com/watch?v=lGEMwh32soc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=6)

[React Conf](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)### [React Docs KeynoteRachel Nabors](https://www.youtube.com/watch?v=mneDaMYOKP8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=7)

[React Conf](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)### [Things I Learnt from the New React DocsDebbie O'Brien](https://www.youtube.com/watch?v=-7odLW_hG7s&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=8)

[React Conf](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)### [Learning in the BrowserSarah Rainsberger](https://www.youtube.com/watch?v=5X-WEQflCL0&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=9)

[React Conf](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)### [The ROI of Designing with ReactLinton Ye](https://www.youtube.com/watch?v=7cPWmID5XAk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=10)

[React Conf](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)### [Interactive Playgrounds with ReactDelba de Oliveira](https://www.youtube.com/watch?v=zL8cz2W0z34&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=11)

[React Conf](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)### [Re-introducing RelayRobert Balicki](https://www.youtube.com/watch?v=lhVGdErZuN4&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=12)

[React Conf](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)### [React Native DesktopEric Rozell and Steven Moyes](https://www.youtube.com/watch?v=9L4FFrvwJwY&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=13)

[React Conf](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)### [On-device Machine Learning for React NativeRoman Rädle](https://www.youtube.com/watch?v=NLj73vrc2I8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=14)

[React Conf](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)### [React 18 for External Store LibrariesDaishi Kato](https://www.youtube.com/watch?v=oPfSC5bQPR8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=15)

[React Conf](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)### [Building Accessible Components with React 18Diego Haz](https://www.youtube.com/watch?v=dcm8fjBfro8&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=16)

[React Conf](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)### [Accessible Japanese Form Components with ReactTafu Nakazaki](https://www.youtube.com/watch?v=S4a0QlsH0pU&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=17)

[React Conf](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)### [UI Tools for ArtistsLyle Troxell](https://www.youtube.com/watch?v=b3l4WxipFsE&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=18)

[React Conf](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)### [Hydrogen + React 18Helen Lin](https://www.youtube.com/watch?v=HS6vIYkSNks&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=19)

React is also an architecture. Frameworks that implement it let you fetch data in asynchronous components that run on the server or even during the build. Read data from a file or a database, and pass it down to your interactive components.

[Get started with a framework](/learn/start-a-new-react-project)

## Use the best from every platform

People love web and native apps for different reasons. React lets you build both web apps and native apps using the same skills. It leans upon each platform’s unique strengths to let your interfaces feel just right on every platform.

example.com

#### Stay true to the web

People expect web app pages to load fast. On the server, React lets you start streaming HTML while you’re still fetching data, progressively filling in the remaining content before any JavaScript code loads. On the client, React can use standard web APIs to keep your UI responsive even in the middle of rendering.

9:40 AM

#### Go truly native

People expect native apps to look and feel like their platform. [React Native](https://reactnative.dev) and [Expo](https://github.com/expo/expo) let you build apps in React for Android, iOS, and more. They look and feel native because their UIs _are_ truly native. It’s not a web view—your React components render real Android and iOS views provided by the platform.

With React, you can be a web _and_ a native developer. Your team can ship to many platforms without sacrificing the user experience. Your organization can bridge the platform silos, and form teams that own entire features end-to-end.

[Build for native platforms](https://reactnative.dev/)

## Upgrade when the future is ready

React approaches changes with care. Every React commit is tested on business-critical surfaces with over a billion users. Over 100,000 React components at Meta help validate every migration strategy.

The React team is always researching how to improve React. Some research takes years to pay off. React has a high bar for taking a research idea into production. Only proven approaches become a part of React.

[Read more React news](/blog)

Latest React News

## [React 19December 05, 2024](/blog/2024/12/05/react-19)

## [React Compiler Beta Release and RoadmapOctober 21, 2024](/blog/2024/10/21/react-compiler-beta-release)

## [React Conf 2024 RecapMay 22, 2024](/blog/2024/05/22/react-conf-2024-recap)

## [React 19 RCApril 25, 2024](/blog/2024/04/25/react-19)

[Read more React news](/blog)

## Join a community of millions

You’re not alone. Two million developers from all over the world visit the React docs every month. React is something that people and teams can agree on.

This is why React is more than a library, an architecture, or even an ecosystem. React is a community. It’s a place where you can ask for help, find opportunities, and meet new friends. You will meet both developers and designers, beginners and experts, researchers and artists, teachers and students. Our backgrounds may be very different, but React lets us all create user interfaces together.

## Welcome to the React community

[Get Started](/learn)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")
  * [Installation ](/learn/installation "Installation")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")
  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")
  * [Managing State ](/learn/managing-state "Managing State")
  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

### REACT API

  * [Hooks ](/reference/react "Hooks")
  * [Components ](/reference/react/components "Components")
  * [APIs ](/reference/react/apis "APIs")
  * [Legacy APIs ](/reference/react/legacy "Legacy APIs")

### REACT DOM API

  * [Components ](/reference/react-dom/components "Components")
  * [APIs ](/reference/react-dom "APIs")
  * [Client APIs ](/reference/react-dom/client "Client APIs")
  * [Server APIs ](/reference/react-dom/server "Server APIs")

### GET INVOLVED

  * [React Community ](/community "React Community")

### STAY INFORMED

  * [React Blog ](/blog "React Blog")



Is this page useful?

[React Docs](/)

# React Versions[](#undefined "Link for this heading")

The React docs at [react.dev](https://react.dev) provide documentation for the latest version of React.

We aim to keep the docs updated within major versions, and do not publish versions for each minor or patch version. When a new major is released, we archive the docs for the previous version as `x.react.dev`. See our [versioning policy](/community/versioning-policy) for more info.

You can find an archive of previous major versions below.

## Latest version: 19.0 [](#latest-version "Link for Latest version: 19.0 ")

  * [react.dev](https://react.dev)



## Previous versions [](#previous-versions "Link for Previous versions ")

  * [18.react.dev](https://18.react.dev)
  * [17.react.dev](https://17.react.dev)
  * [16.react.dev](https://16.react.dev)
  * [15.react.dev](https://15.react.dev)



### Note

#### Legacy Docs [](#legacy-docs "Link for Legacy Docs ")

In 2023, we [launched our new docs](/blog/2023/03/16/introducing-react-dev) for React 18 as [react.dev](https://react.dev). The legacy React 18 docs are available at [legacy.reactjs.org](https://legacy.reactjs.org). Versions 17 and below are hosted on legacy sites.

For versions older than React 15, see [15.react.dev](https://15.react.dev).

## Changelog [](#changelog "Link for Changelog ")

### React 19 [](#react-19 "Link for React 19 ")

**Blog Posts**

  * [React v19](/blog/2024/12/05/react-19)
  * [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide)
  * [React Compiler Beta Release](/blog/2024/10/21/react-compiler-beta-release)



**Talks**

  * [React 19 Keynote](https://www.youtube.com/watch?v=lyEKhv8-3n0)
  * [A Roadmap to React 19](https://www.youtube.com/watch?v=R0B2HsSM78s)
  * [What’s new in React 19](https://www.youtube.com/watch?v=AJOGzVygGcY)
  * [React for Two Computers](https://www.youtube.com/watch?v=ozI4V_29fj4)
  * [React Compiler Deep Dive](https://www.youtube.com/watch?v=uA_PVyZP7AI)
  * [React Compiler Case Studies](https://www.youtube.com/watch?v=lvhPq5chokM)
  * [React 19 Deep Dive: Coordinating HTML](https://www.youtube.com/watch?v=IBBN-s77YSI)



**Releases**

  * [v19.0.0 (December, 2024)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1900-december-5-2024)



### React 18 [](#react-18 "Link for React 18 ")

**Blog Posts**

  * [React v18.0](/blog/2022/03/29/react-v18)
  * [How to Upgrade to React 18](/blog/2022/03/08/react-18-upgrade-guide)
  * [The Plan for React 18](/blog/2021/06/08/the-plan-for-react-18)



**Talks**

  * [React 18 Keynote](https://www.youtube.com/watch?v=FZ0cG47msEk)
  * [React 18 for app developers](https://www.youtube.com/watch?v=ytudH8je5ko)
  * [Streaming Server Rendering with Suspense](https://www.youtube.com/watch?v=pj5N-Khihgc)
  * [React without memo](https://www.youtube.com/watch?v=lGEMwh32soc)
  * [React Docs Keynote](https://www.youtube.com/watch?v=mneDaMYOKP8)
  * [React Developer Tooling](https://www.youtube.com/watch?v=oxDfrke8rZg)
  * [The first React Working Group](https://www.youtube.com/watch?v=qn7gRClrC9U)
  * [React 18 for External Store Libraries](https://www.youtube.com/watch?v=oPfSC5bQPR8)



**Releases**

  * [v18.3.1 (April, 2024)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1831-april-26-2024)
  * [v18.3.0 (April, 2024)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1830-april-25-2024)
  * [v18.2.0 (June, 2022)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1820-june-14-2022)
  * [v18.1.0 (April, 2022)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1810-april-26-2022)
  * [v18.0.0 (March 2022)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1800-march-29-2022)



### React 17 [](#react-17 "Link for React 17 ")

**Blog Posts**

  * [React v17.0](https://legacy.reactjs.org/blog/2020/10/20/react-v17.html)
  * [Introducing the New JSX Transform](https://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html)
  * [React v17.0 Release Candidate: No New Features](https://legacy.reactjs.org/blog/2020/08/10/react-v17-rc.html)



**Releases**

  * [v17.0.2 (March 2021)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1702-march-22-2021)
  * [v17.0.1 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1701-october-22-2020)
  * [v17.0.0 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1700-october-20-2020)



### React 16 [](#react-16 "Link for React 16 ")

**Blog Posts**

  * [React v16.0](https://legacy.reactjs.org/blog/2017/09/26/react-v16.0.html)
  * [DOM Attributes in React 16](https://legacy.reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html)
  * [Error Handling in React 16](https://legacy.reactjs.org/blog/2017/07/26/error-handling-in-react-16.html)
  * [React v16.2.0: Improved Support for Fragments](https://legacy.reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html)
  * [React v16.4.0: Pointer Events](https://legacy.reactjs.org/blog/2018/05/23/react-v-16-4.html)
  * [React v16.4.2: Server-side vulnerability fix](https://legacy.reactjs.org/blog/2018/08/01/react-v-16-4-2.html)
  * [React v16.6.0: lazy, memo and contextType](https://legacy.reactjs.org/blog/2018/10/23/react-v-16-6.html)
  * [React v16.7: No, This Is Not the One With Hooks](https://legacy.reactjs.org/blog/2018/12/19/react-v-16-7.html)
  * [React v16.8: The One With Hooks](https://legacy.reactjs.org/blog/2019/02/06/react-v16.8.0.html)
  * [React v16.9.0 and the Roadmap Update](https://legacy.reactjs.org/blog/2019/08/08/react-v16.9.0.html)
  * [React v16.13.0](https://legacy.reactjs.org/blog/2020/02/26/react-v16.13.0.html)



**Releases**

  * [v16.14.0 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16140-october-14-2020)
  * [v16.13.1 (March 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16131-march-19-2020)
  * [v16.13.0 (February 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16130-february-26-2020)
  * [v16.12.0 (November 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16120-november-14-2019)
  * [v16.11.0 (October 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16110-october-22-2019)
  * [v16.10.2 (October 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16102-october-3-2019)
  * [v16.10.1 (September 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16101-september-28-2019)
  * [v16.10.0 (September 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#16100-september-27-2019)
  * [v16.9.0 (August 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1690-august-8-2019)
  * [v16.8.6 (March 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1686-march-27-2019)
  * [v16.8.5 (March 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1685-march-22-2019)
  * [v16.8.4 (March 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1684-march-5-2019)
  * [v16.8.3 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1683-february-21-2019)
  * [v16.8.2 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1682-february-14-2019)
  * [v16.8.1 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1681-february-6-2019)
  * [v16.8.0 (February 2019)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1680-february-6-2019)
  * [v16.7.0 (December 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1670-december-19-2018)
  * [v16.6.3 (November 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1663-november-12-2018)
  * [v16.6.2 (November 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1662-november-12-2018)
  * [v16.6.1 (November 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1661-november-6-2018)
  * [v16.6.0 (October 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1660-october-23-2018)
  * [v16.5.2 (September 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1652-september-18-2018)
  * [v16.5.1 (September 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1651-september-13-2018)
  * [v16.5.0 (September 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1650-september-5-2018)
  * [v16.4.2 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1642-august-1-2018)
  * [v16.4.1 (June 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1641-june-13-2018)
  * [v16.4.0 (May 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1640-may-23-2018)
  * [v16.3.3 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1633-august-1-2018)
  * [v16.3.2 (April 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1632-april-16-2018)
  * [v16.3.1 (April 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1631-april-3-2018)
  * [v16.3.0 (March 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1630-march-29-2018)
  * [v16.2.1 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1621-august-1-2018)
  * [v16.2.0 (November 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1620-november-28-2017)
  * [v16.1.2 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1612-august-1-2018)
  * [v16.1.1 (November 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1611-november-13-2017)
  * [v16.1.0 (November 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1610-november-9-2017)
  * [v16.0.1 (August 2018)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1601-august-1-2018)
  * [v16.0 (September 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1600-september-26-2017)



### React 15 [](#react-15 "Link for React 15 ")

**Blog Posts**

  * [React v15.0](https://legacy.reactjs.org/blog/2016/04/07/react-v15.html)
  * [React v15.0 Release Candidate 2](https://legacy.reactjs.org/blog/2016/03/16/react-v15-rc2.html)
  * [React v15.0 Release Candidate](https://legacy.reactjs.org/blog/2016/03/07/react-v15-rc1.html)
  * [New Versioning Scheme](https://legacy.reactjs.org/blog/2016/02/19/new-versioning-scheme.html)
  * [Discontinuing IE 8 Support in React DOM](https://legacy.reactjs.org/blog/2016/01/12/discontinuing-ie8-support.html)
  * [Introducing React’s Error Code System](https://legacy.reactjs.org/blog/2016/07/11/introducing-reacts-error-code-system.html)
  * [React v15.0.1](https://legacy.reactjs.org/blog/2016/04/08/react-v15.0.1.html)
  * [React v15.4.0](https://legacy.reactjs.org/blog/2016/11/16/react-v15.4.0.html)
  * [React v15.5.0](https://legacy.reactjs.org/blog/2017/04/07/react-v15.5.0.html)
  * [React v15.6.0](https://legacy.reactjs.org/blog/2017/06/13/react-v15.6.0.html)
  * [React v15.6.2](https://legacy.reactjs.org/blog/2017/09/25/react-v15.6.2.html)



**Releases**

  * [v15.7.0 (October 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1570-october-14-2020)
  * [v15.6.2 (September 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1562-september-25-2017)
  * [v15.6.1 (June 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1561-june-14-2017)
  * [v15.6.0 (June 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1560-june-13-2017)
  * [v15.5.4 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1554-april-11-2017)
  * [v15.5.3 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1553-april-7-2017)
  * [v15.5.2 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1552-april-7-2017)
  * [v15.5.1 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1551-april-7-2017)
  * [v15.5.0 (April 2017)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1550-april-7-2017)
  * [v15.4.2 (January 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1542-january-6-2017)
  * [v15.4.1 (November 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1541-november-22-2016)
  * [v15.4.0 (November 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1540-november-16-2016)
  * [v15.3.2 (September 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1532-september-19-2016)
  * [v15.3.1 (August 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1531-august-19-2016)
  * [v15.3.0 (July 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1530-july-29-2016)
  * [v15.2.1 (July 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1521-july-8-2016)
  * [v15.2.0 (July 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1520-july-1-2016)
  * [v15.1.0 (May 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1510-may-20-2016)
  * [v15.0.2 (April 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1502-april-29-2016)
  * [v15.0.1 (April 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1501-april-8-2016)
  * [v15.0.0 (April 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#1500-april-7-2016)



### React 0.14 [](#react-14 "Link for React 0.14 ")

**Blog Posts**

  * [React v0.14](https://legacy.reactjs.org/blog/2015/10/07/react-v0.14.html)
  * [React v0.14 Release Candidate](https://legacy.reactjs.org/blog/2015/09/10/react-v0.14-rc1.html)
  * [React v0.14 Beta 1](https://legacy.reactjs.org/blog/2015/07/03/react-v0.14-beta-1.html)
  * [New React Developer Tools](https://legacy.reactjs.org/blog/2015/09/02/new-react-developer-tools.html)
  * [New React Devtools Beta](https://legacy.reactjs.org/blog/2015/08/03/new-react-devtools-beta.html)
  * [React v0.14.1](https://legacy.reactjs.org/blog/2015/10/28/react-v0.14.1.html)
  * [React v0.14.2](https://legacy.reactjs.org/blog/2015/11/02/react-v0.14.2.html)
  * [React v0.14.3](https://legacy.reactjs.org/blog/2015/11/18/react-v0.14.3.html)
  * [React v0.14.4](https://legacy.reactjs.org/blog/2015/12/29/react-v0.14.4.html)
  * [React v0.14.8](https://legacy.reactjs.org/blog/2016/03/29/react-v0.14.8.html)



**Releases**

  * [v0.14.10 (October 2020)](https://github.com/facebook/react/blob/main/CHANGELOG.md#01410-october-14-2020)
  * [v0.14.8 (March 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0148-march-29-2016)
  * [v0.14.7 (January 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0147-january-28-2016)
  * [v0.14.6 (January 2016)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0146-january-6-2016)
  * [v0.14.5 (December 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0145-december-29-2015)
  * [v0.14.4 (December 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0144-december-29-2015)
  * [v0.14.3 (November 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0143-november-18-2015)
  * [v0.14.2 (November 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0142-november-2-2015)
  * [v0.14.1 (October 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0141-october-28-2015)
  * [v0.14.0 (October 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0140-october-7-2015)



### React 0.13 [](#react-13 "Link for React 0.13 ")

**Blog Posts**

  * [React Native v0.4](https://legacy.reactjs.org/blog/2015/04/17/react-native-v0.4.html)
  * [React v0.13](https://legacy.reactjs.org/blog/2015/03/10/react-v0.13.html)
  * [React v0.13 RC2](https://legacy.reactjs.org/blog/2015/03/03/react-v0.13-rc2.html)
  * [React v0.13 RC](https://legacy.reactjs.org/blog/2015/02/24/react-v0.13-rc1.html)
  * [React v0.13.0 Beta 1](https://legacy.reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html)
  * [Streamlining React Elements](https://legacy.reactjs.org/blog/2015/02/24/streamlining-react-elements.html)
  * [Introducing Relay and GraphQL](https://legacy.reactjs.org/blog/2015/02/20/introducing-relay-and-graphql.html)
  * [Introducing React Native](https://legacy.reactjs.org/blog/2015/03/26/introducing-react-native.html)
  * [React v0.13.1](https://legacy.reactjs.org/blog/2015/03/16/react-v0.13.1.html)
  * [React v0.13.2](https://legacy.reactjs.org/blog/2015/04/18/react-v0.13.2.html)
  * [React v0.13.3](https://legacy.reactjs.org/blog/2015/05/08/react-v0.13.3.html)



**Releases**

  * [v0.13.3 (May 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0133-may-8-2015)
  * [v0.13.2 (April 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0132-april-18-2015)
  * [v0.13.1 (March 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0131-march-16-2015)
  * [v0.13.0 (March 2015)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0130-march-10-2015)



### React 0.12 [](#react-12 "Link for React 0.12 ")

**Blog Posts**

  * [React v0.12](https://legacy.reactjs.org/blog/2014/10/28/react-v0.12.html)
  * [React v0.12 RC](https://legacy.reactjs.org/blog/2014/10/16/react-v0.12-rc1.html)
  * [Introducing React Elements](https://legacy.reactjs.org/blog/2014/10/14/introducing-react-elements.html)
  * [React v0.12.2](https://legacy.reactjs.org/blog/2014/12/18/react-v0.12.2.html)



**Releases**

  * [v0.12.2 (December 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0122-december-18-2014)
  * [v0.12.1 (November 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0121-november-18-2014)
  * [v0.12.0 (October 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0120-october-28-2014)



### React 0.11 [](#react-11 "Link for React 0.11 ")

**Blog Posts**

  * [React v0.11](https://legacy.reactjs.org/blog/2014/07/17/react-v0.11.html)
  * [React v0.11 RC](https://legacy.reactjs.org/blog/2014/07/13/react-v0.11-rc1.html)
  * [One Year of Open-Source React](https://legacy.reactjs.org/blog/2014/05/29/one-year-of-open-source-react.html)
  * [The Road to 1.0](https://legacy.reactjs.org/blog/2014/03/28/the-road-to-1.0.html)
  * [React v0.11.1](https://legacy.reactjs.org/blog/2014/07/25/react-v0.11.1.html)
  * [React v0.11.2](https://legacy.reactjs.org/blog/2014/09/16/react-v0.11.2.html)
  * [Introducing the JSX Specificaion](https://legacy.reactjs.org/blog/2014/09/03/introducing-the-jsx-specification.html)



**Releases**

  * [v0.11.2 (September 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0112-september-16-2014)
  * [v0.11.1 (July 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0111-july-24-2014)
  * [v0.11.0 (July 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0110-july-17-2014)



### React 0.10 and below [](#react-10-and-below "Link for React 0.10 and below ")

**Blog Posts**

  * [React v0.10](https://legacy.reactjs.org/blog/2014/03/21/react-v0.10.html)
  * [React v0.10 RC](https://legacy.reactjs.org/blog/2014/03/19/react-v0.10-rc1.html)
  * [React v0.9](https://legacy.reactjs.org/blog/2014/02/20/react-v0.9.html)
  * [React v0.9 RC](https://legacy.reactjs.org/blog/2014/02/16/react-v0.9-rc1.html)
  * [React Chrome Developer Tools](https://legacy.reactjs.org/blog/2014/01/02/react-chrome-developer-tools.html)
  * [React v0.8](https://legacy.reactjs.org/blog/2013/12/19/react-v0.8.0.html)
  * [React v0.5.2, v0.4.2](https://legacy.reactjs.org/blog/2013/12/18/react-v0.5.2-v0.4.2.html)
  * [React v0.5.1](https://legacy.reactjs.org/blog/2013/10/29/react-v0-5-1.html)
  * [React v0.5](https://legacy.reactjs.org/blog/2013/10/16/react-v0.5.0.html)
  * [React v0.4.1](https://legacy.reactjs.org/blog/2013/07/26/react-v0-4-1.html)
  * [React v0.4.0](https://legacy.reactjs.org/blog/2013/07/17/react-v0-4-0.html)
  * [New in React v0.4: Prop Validation and Default Values](https://legacy.reactjs.org/blog/2013/07/11/react-v0-4-prop-validation-and-default-values.html)
  * [New in React v0.4: Autobind by Default](https://legacy.reactjs.org/blog/2013/07/02/react-v0-4-autobind-by-default.html)
  * [React v0.3.3](https://legacy.reactjs.org/blog/2013/07/02/react-v0-4-autobind-by-default.html)



**Releases**

  * [v0.10.0 (March 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#0100-march-21-2014)
  * [v0.9.0 (February 2014)](https://github.com/facebook/react/blob/main/CHANGELOG.md#090-february-20-2014)
  * [v0.8.0 (December 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#080-december-19-2013)
  * [v0.5.2 (December 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#052-042-december-18-2013)
  * [v0.5.1 (October 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#051-october-29-2013)
  * [v0.5.0 (October 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#050-october-16-2013)
  * [v0.4.1 (July 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#041-july-26-2013)
  * [v0.4.0 (July 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#040-july-17-2013)
  * [v0.3.3 (June 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#033-june-20-2013)
  * [v0.3.2 (May 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#032-may-31-2013)
  * [v0.3.1 (May 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#031-may-30-2013)
  * [v0.3.0 (May 2013)](https://github.com/facebook/react/blob/main/CHANGELOG.md#031-may-30-2013)



### Initial Commit [](#initial-commit "Link for Initial Commit ")

React was open-sourced on May 29, 2013. The initial commit is: `75897c`[: Initial public release](https://github.com/facebook/react/commit/75897c2dcd1dd3a6ca46284dd37e13d22b4b16b4)

See the first blog post: [Why did we build React?](https://legacy.reactjs.org/blog/2013/06/05/why-react.html)

React was open sourced at Facebook Seattle in 2013:

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Latest version: 19.0 ](#latest-version)
  * [Previous versions ](#previous-versions)
  * [Changelog ](#changelog)
  * [React 19 ](#react-19)
  * [React 18 ](#react-18)
  * [React 17 ](#react-17)
  * [React 16 ](#react-16)
  * [React 15 ](#react-15)
  * [React 0.14 ](#react-14)
  * [React 0.13 ](#react-13)
  * [React 0.12 ](#react-12)
  * [React 0.11 ](#react-11)
  * [React 0.10 and below ](#react-10-and-below)
  * [Initial Commit ](#initial-commit)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Quick Start[](#undefined "Link for this heading")

Welcome to the React documentation! This page will give you an introduction to 80% of the React concepts that you will use on a daily basis.

### You will learn

  * How to create and nest components
  * How to add markup and styles
  * How to display data
  * How to render conditions and lists
  * How to respond to events and update the screen
  * How to share data between components



## Creating and nesting components [](#components "Link for Creating and nesting components ")

React apps are made out of _components_. A component is a piece of the UI (user interface) that has its own logic and appearance. A component can be as small as a button, or as large as an entire page.

React components are JavaScript functions that return markup:

```


function MyButton() {

 return (

  <button>I'm a button</button>

 );

}


```


Now that you’ve declared `MyButton`, you can nest it into another component:

```


export default function MyApp() {

 return (

  <div>

   <h1>Welcome to my app</h1>

   <MyButton />

  </div>

 );

}


```


Notice that `<MyButton />` starts with a capital letter. That’s how you know it’s a React component. React component names must always start with a capital letter, while HTML tags must be lowercase.

Have a look at the result:

App.js

App.js

Download ResetFork

99

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

function MyButton() {

return (

<button>

I'm a button

</button>

);

}

export default function MyApp() {

return (

<div>

<h1>Welcome to my app</h1>

<MyButton />

</div>

);

}

[Open on CodeSandboxOpen Sandbox](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

Show more

The `export default` keywords specify the main component in the file. If you’re not familiar with some piece of JavaScript syntax, [MDN](https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export) and [javascript.info](https://javascript.info/import-export) have great references.

## Writing markup with JSX [](#writing-markup-with-jsx "Link for Writing markup with JSX ")

The markup syntax you’ve seen above is called _JSX_. It is optional, but most React projects use JSX for its convenience. All of the [tools we recommend for local development](/learn/installation) support JSX out of the box.

JSX is stricter than HTML. You have to close tags like `<br />`. Your component also can’t return multiple JSX tags. You have to wrap them into a shared parent, like a `<div>...</div>` or an empty `<>...</>` wrapper:

```


function AboutPage() {

 return (

  <>

   <h1>About</h1>

   <p>Hello there.<br />How do you do?</p>

  </>

 );

}


```


If you have a lot of HTML to port to JSX, you can use an [online converter.](https://transform.tools/html-to-jsx)

## Adding styles [](#adding-styles "Link for Adding styles ")

In React, you specify a CSS class with `className`. It works the same way as the HTML `class`[](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class) attribute:

```


<img className="avatar" />


```


Then you write the CSS rules for it in a separate CSS file:

```


/* In your CSS */

.avatar {

 border-radius: 50%;

}


```


React does not prescribe how you add CSS files. In the simplest case, you’ll add a `<link>`[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link) tag to your HTML. If you use a build tool or a framework, consult its documentation to learn how to add a CSS file to your project.

## Displaying data [](#displaying-data "Link for Displaying data ")

JSX lets you put markup into JavaScript. Curly braces let you “escape back” into JavaScript so that you can embed some variable from your code and display it to the user. For example, this will display `user.name`:

```


return (

 <h1>

  {user.name}

 </h1>

);


```


You can also “escape into JavaScript” from JSX attributes, but you have to use curly braces _instead of_ quotes. For example, `className="avatar"` passes the `"avatar"` string as the CSS class, but `src={user.imageUrl}` reads the JavaScript `user.imageUrl` variable value, and then passes that value as the `src` attribute:

```


return (

 <img

  className="avatar"

  src={user.imageUrl}

 />

);


```


You can put more complex expressions inside the JSX curly braces too, for example, [string concatenation](https://javascript.info/operators#string-concatenation-with-binary):

App.js

App.js

Download ResetFork

```
const user = {
 name: 'Hedy Lamarr',
 imageUrl: 'https://i.imgur.com/yXOvdOSs.jpg',
 imageSize: 90,
};
export default function Profile() {
 return (
  <>
   <h1>{user.name}</h1>
   <img
    className="avatar"
    src={user.imageUrl}
    alt={'Photo of ' + user.name}
    style={{
     width: user.imageSize,
     height: user.imageSize
    }}
   />
  </>
 );
}

```


Show more

In the above example, `style={{}}` is not a special syntax, but a regular `{}` object inside the `style={ }` JSX curly braces. You can use the `style` attribute when your styles depend on JavaScript variables.

## Conditional rendering [](#conditional-rendering "Link for Conditional rendering ")

In React, there is no special syntax for writing conditions. Instead, you’ll use the same techniques as you use when writing regular JavaScript code. For example, you can use an `if`[](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) statement to conditionally include JSX:

```


let content;

if (isLoggedIn) {

 content = <AdminPanel />;

} else {

 content = <LoginForm />;

}

return (

 <div>

  {content}

 </div>

);


```


If you prefer more compact code, you can use the [conditional `?` operator.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator) Unlike `if`, it works inside JSX:

```


<div>

 {isLoggedIn ? (

  <AdminPanel />

 ) : (

  <LoginForm />

 )}

</div>


```


When you don’t need the `else` branch, you can also use a shorter [logical `&&` syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#short-circuit_evaluation):

```


<div>

 {isLoggedIn && <AdminPanel />}

</div>


```


All of these approaches also work for conditionally specifying attributes. If you’re unfamiliar with some of this JavaScript syntax, you can start by always using `if...else`.

## Rendering lists [](#rendering-lists "Link for Rendering lists ")

You will rely on JavaScript features like `for`[ loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) and the [array `map()` function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) to render lists of components.

For example, let’s say you have an array of products:

```


const products = [

 { title: 'Cabbage', id: 1 },

 { title: 'Garlic', id: 2 },

 { title: 'Apple', id: 3 },

];


```


Inside your component, use the `map()` function to transform an array of products into an array of `<li>` items:

```


const listItems = products.map(product =>

 <li key={product.id}>

  {product.title}

 </li>

);

return (

 <ul>{listItems}</ul>

);


```


Notice how `<li>` has a `key` attribute. For each item in a list, you should pass a string or a number that uniquely identifies that item among its siblings. Usually, a key should be coming from your data, such as a database ID. React uses your keys to know what happened if you later insert, delete, or reorder the items.

App.js

App.js

Download ResetFork

```
const products = [
 { title: 'Cabbage', isFruit: false, id: 1 },
 { title: 'Garlic', isFruit: false, id: 2 },
 { title: 'Apple', isFruit: true, id: 3 },
];
export default function ShoppingList() {
 const listItems = products.map(product =>
  <li
   key={product.id}
   style={{
    color: product.isFruit ? 'magenta' : 'darkgreen'
   }}
  >
   {product.title}
  </li>
 );
 return (
  <ul>{listItems}</ul>
 );
}

```


Show more

## Responding to events [](#responding-to-events "Link for Responding to events ")

You can respond to events by declaring _event handler_ functions inside your components:

```


function MyButton() {

 function handleClick() {

  alert('You clicked me!');

 }

 return (

  <button onClick={handleClick}>

   Click me

  </button>

 );

}


```


Notice how `onClick={handleClick}` has no parentheses at the end! Do not _call_ the event handler function: you only need to _pass it down_. React will call your event handler when the user clicks the button.

## Updating the screen [](#updating-the-screen "Link for Updating the screen ")

Often, you’ll want your component to “remember” some information and display it. For example, maybe you want to count the number of times a button is clicked. To do this, add _state_ to your component.

First, import `useState`[](/reference/react/useState) from React:

```


import { useState } from 'react';


```


Now you can declare a _state variable_ inside your component:

```


function MyButton() {

 const [count, setCount] = useState(0);

 // ...


```


You’ll get two things from `useState`: the current state (`count`), and the function that lets you update it (`setCount`). You can give them any names, but the convention is to write `[something, setSomething]`.

The first time the button is displayed, `count` will be `0` because you passed `0` to `useState()`. When you want to change state, call `setCount()` and pass the new value to it. Clicking this button will increment the counter:

```


function MyButton() {

 const [count, setCount] = useState(0);

 function handleClick() {

  setCount(count + 1);

 }

 return (

  <button onClick={handleClick}>

   Clicked {count} times

  </button>

 );

}


```


React will call your component function again. This time, `count` will be `1`. Then it will be `2`. And so on.

If you render the same component multiple times, each will get its own state. Click each button separately:

App.js

App.js

Download ResetFork

```
import { useState } from 'react';
export default function MyApp() {
 return (
  <div>
   <h1>Counters that update separately</h1>
   <MyButton />
   <MyButton />
  </div>
 );
}
function MyButton() {
 const [count, setCount] = useState(0);
 function handleClick() {
  setCount(count + 1);
 }
 return (
  <button onClick={handleClick}>
   Clicked {count} times
  </button>
 );
}

```


Show more

Notice how each button “remembers” its own `count` state and doesn’t affect other buttons.

## Using Hooks [](#using-hooks "Link for Using Hooks ")

Functions starting with `use` are called _Hooks_. `useState` is a built-in Hook provided by React. You can find other built-in Hooks in the [API reference.](/reference/react) You can also write your own Hooks by combining the existing ones.

Hooks are more restrictive than other functions. You can only call Hooks _at the top_ of your components (or other Hooks). If you want to use `useState` in a condition or a loop, extract a new component and put it there.

## Sharing data between components [](#sharing-data-between-components "Link for Sharing data between components ")

In the previous example, each `MyButton` had its own independent `count`, and when each button was clicked, only the `count` for the button clicked changed:

Initially, each `MyButton`’s `count` state is `0`

The first `MyButton` updates its `count` to `1`

However, often you’ll need components to _share data and always update together_.

To make both `MyButton` components display the same `count` and update together, you need to move the state from the individual buttons “upwards” to the closest component containing all of them.

In this example, it is `MyApp`:

Initially, `MyApp`’s `count` state is `0` and is passed down to both children

On click, `MyApp` updates its `count` state to `1` and passes it down to both children

Now when you click either button, the `count` in `MyApp` will change, which will change both of the counts in `MyButton`. Here’s how you can express this in code.

First, _move the state up_ from `MyButton` into `MyApp`:

```


export default function MyApp() {

 const [count, setCount] = useState(0);

 function handleClick() {

  setCount(count + 1);

 }

 return (

  <div>

   <h1>Counters that update separately</h1>

   <MyButton />

   <MyButton />

  </div>

 );

}

function MyButton() {

 // ... we're moving code from here ...

}


```


Then, _pass the state down_ from `MyApp` to each `MyButton`, together with the shared click handler. You can pass information to `MyButton` using the JSX curly braces, just like you previously did with built-in tags like `<img>`:

```


export default function MyApp() {

 const [count, setCount] = useState(0);

 function handleClick() {

  setCount(count + 1);

 }

 return (

  <div>

   <h1>Counters that update together</h1>

   <MyButton count={count} onClick={handleClick} />

   <MyButton count={count} onClick={handleClick} />

  </div>

 );

}


```


The information you pass down like this is called _props_. Now the `MyApp` component contains the `count` state and the `handleClick` event handler, and _passes both of them down as props_ to each of the buttons.

Finally, change `MyButton` to _read_ the props you have passed from its parent component:

```


function MyButton({ count, onClick }) {

 return (

  <button onClick={onClick}>

   Clicked {count} times

  </button>

 );

}


```


When you click the button, the `onClick` handler fires. Each button’s `onClick` prop was set to the `handleClick` function inside `MyApp`, so the code inside of it runs. That code calls `setCount(count + 1)`, incrementing the `count` state variable. The new `count` value is passed as a prop to each button, so they all show the new value. This is called “lifting state up”. By moving state up, you’ve shared it between components.

App.js

App.js

Download ResetFork

```
import { useState } from 'react';
export default function MyApp() {
 const [count, setCount] = useState(0);
 function handleClick() {
  setCount(count + 1);
 }
 return (
  <div>
   <h1>Counters that update together</h1>
   <MyButton count={count} onClick={handleClick} />
   <MyButton count={count} onClick={handleClick} />
  </div>
 );
}
function MyButton({ count, onClick }) {
 return (
  <button onClick={onClick}>
   Clicked {count} times
  </button>
 );
}

```


Show more

## Next Steps [](#next-steps "Link for Next Steps ")

By now, you know the basics of how to write React code!

Check out the [Tutorial](/learn/tutorial-tic-tac-toe) to put them into practice and build your first mini-app with React.

[NextTutorial: Tic-Tac-Toe](/learn/tutorial-tic-tac-toe)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Creating and nesting components ](#components)
  * [Writing markup with JSX ](#writing-markup-with-jsx)
  * [Adding styles ](#adding-styles)
  * [Displaying data ](#displaying-data)
  * [Conditional rendering ](#conditional-rendering)
  * [Rendering lists ](#rendering-lists)
  * [Responding to events ](#responding-to-events)
  * [Updating the screen ](#updating-the-screen)
  * [Using Hooks ](#using-hooks)
  * [Sharing data between components ](#sharing-data-between-components)
  * [Next Steps ](#next-steps)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### react@19

  * [Overview ](/reference/react "Overview")
  * [Hooks ](/reference/react/hooks "Hooks")

    * [useActionState ](/reference/react/useActionState "useActionState")
    * [useCallback ](/reference/react/useCallback "useCallback")
    * [useContext ](/reference/react/useContext "useContext")
    * [useDebugValue ](/reference/react/useDebugValue "useDebugValue")
    * [useDeferredValue ](/reference/react/useDeferredValue "useDeferredValue")
    * [useEffect ](/reference/react/useEffect "useEffect")
    * [useId ](/reference/react/useId "useId")
    * [useImperativeHandle ](/reference/react/useImperativeHandle "useImperativeHandle")
    * [useInsertionEffect ](/reference/react/useInsertionEffect "useInsertionEffect")
    * [useLayoutEffect ](/reference/react/useLayoutEffect "useLayoutEffect")
    * [useMemo ](/reference/react/useMemo "useMemo")
    * [useOptimistic ](/reference/react/useOptimistic "useOptimistic")
    * [useReducer ](/reference/react/useReducer "useReducer")
    * [useRef ](/reference/react/useRef "useRef")
    * [useState ](/reference/react/useState "useState")
    * [useSyncExternalStore ](/reference/react/useSyncExternalStore "useSyncExternalStore")
    * [useTransition ](/reference/react/useTransition "useTransition")

  * [Components ](/reference/react/components "Components")

    * [<Fragment> (<>) ](/reference/react/Fragment "<Fragment> \(<>\)")
    * [<Profiler> ](/reference/react/Profiler "<Profiler>")
    * [<StrictMode> ](/reference/react/StrictMode "<StrictMode>")
    * [<Suspense> ](/reference/react/Suspense "<Suspense>")

  * [APIs ](/reference/react/apis "APIs")

    * [act ](/reference/react/act "act")
    * [cache ](/reference/react/cache "cache")
    * [createContext ](/reference/react/createContext "createContext")
    * [lazy ](/reference/react/lazy "lazy")
    * [memo ](/reference/react/memo "memo")
    * [startTransition ](/reference/react/startTransition "startTransition")
    * [use ](/reference/react/use "use")
    * [experimental_taintObjectReference  - This feature is available in the latest Canary](/reference/react/experimental_taintObjectReference "experimental_taintObjectReference")
    * [experimental_taintUniqueValue  - This feature is available in the latest Canary](/reference/react/experimental_taintUniqueValue "experimental_taintUniqueValue")

### react-dom@19

  * [Hooks ](/reference/react-dom/hooks "Hooks")

    * [useFormStatus ](/reference/react-dom/hooks/useFormStatus "useFormStatus")

  * [Components ](/reference/react-dom/components "Components")

    * [Common (e.g. <div>) ](/reference/react-dom/components/common "Common \(e.g. <div>\)")
    * [<form> ](/reference/react-dom/components/form "<form>")
    * [<input> ](/reference/react-dom/components/input "<input>")
    * [<option> ](/reference/react-dom/components/option "<option>")
    * [<progress> ](/reference/react-dom/components/progress "<progress>")
    * [<select> ](/reference/react-dom/components/select "<select>")
    * [<textarea> ](/reference/react-dom/components/textarea "<textarea>")
    * [<link> ](/reference/react-dom/components/link "<link>")
    * [<meta> ](/reference/react-dom/components/meta "<meta>")
    * [<script> ](/reference/react-dom/components/script "<script>")
    * [<style> ](/reference/react-dom/components/style "<style>")
    * [<title> ](/reference/react-dom/components/title "<title>")

  * [APIs ](/reference/react-dom "APIs")

    * [createPortal ](/reference/react-dom/createPortal "createPortal")
    * [flushSync ](/reference/react-dom/flushSync "flushSync")
    * [preconnect ](/reference/react-dom/preconnect "preconnect")
    * [prefetchDNS ](/reference/react-dom/prefetchDNS "prefetchDNS")
    * [preinit ](/reference/react-dom/preinit "preinit")
    * [preinitModule ](/reference/react-dom/preinitModule "preinitModule")
    * [preload ](/reference/react-dom/preload "preload")
    * [preloadModule ](/reference/react-dom/preloadModule "preloadModule")

  * [Client APIs ](/reference/react-dom/client "Client APIs")

    * [createRoot ](/reference/react-dom/client/createRoot "createRoot")
    * [hydrateRoot ](/reference/react-dom/client/hydrateRoot "hydrateRoot")

  * [Server APIs ](/reference/react-dom/server "Server APIs")

    * [renderToPipeableStream ](/reference/react-dom/server/renderToPipeableStream "renderToPipeableStream")
    * [renderToReadableStream ](/reference/react-dom/server/renderToReadableStream "renderToReadableStream")
    * [renderToStaticMarkup ](/reference/react-dom/server/renderToStaticMarkup "renderToStaticMarkup")
    * [renderToString ](/reference/react-dom/server/renderToString "renderToString")

  * [Static APIs ](/reference/react-dom/static "Static APIs")

    * [prerender ](/reference/react-dom/static/prerender "prerender")
    * [prerenderToNodeStream ](/reference/react-dom/static/prerenderToNodeStream "prerenderToNodeStream")

### Rules of React

  * [Overview ](/reference/rules "Overview")

    * [Components and Hooks must be pure ](/reference/rules/components-and-hooks-must-be-pure "Components and Hooks must be pure")
    * [React calls Components and Hooks ](/reference/rules/react-calls-components-and-hooks "React calls Components and Hooks")
    * [Rules of Hooks ](/reference/rules/rules-of-hooks "Rules of Hooks")

### React Server Components

  * [Server Components ](/reference/rsc/server-components "Server Components")
  * [Server Functions ](/reference/rsc/server-functions "Server Functions")
  * [Directives ](/reference/rsc/directives "Directives")

    * ['use client' ](/reference/rsc/use-client "'use client'")
    * ['use server' ](/reference/rsc/use-server "'use server'")

### Legacy APIs

  * [Legacy React APIs ](/reference/react/legacy "Legacy React APIs")

    * [Children ](/reference/react/Children "Children")
    * [cloneElement ](/reference/react/cloneElement "cloneElement")
    * [Component ](/reference/react/Component "Component")
    * [createElement ](/reference/react/createElement "createElement")
    * [createRef ](/reference/react/createRef "createRef")
    * [forwardRef ](/reference/react/forwardRef "forwardRef")
    * [isValidElement ](/reference/react/isValidElement "isValidElement")
    * [PureComponent ](/reference/react/PureComponent "PureComponent")




Is this page useful?

[API Reference](/reference/react)

# React Reference Overview[](#undefined "Link for this heading")

This section provides detailed reference documentation for working with React. For an introduction to React, please visit the [Learn](/learn) section.

The React reference documentation is broken down into functional subsections:

## React [](#react "Link for React ")

Programmatic React features:

  * [Hooks](/reference/react/hooks) - Use different React features from your components.
  * [Components](/reference/react/components) - Built-in components that you can use in your JSX.
  * [APIs](/reference/react/apis) - APIs that are useful for defining components.
  * [Directives](/reference/rsc/directives) - Provide instructions to bundlers compatible with React Server Components.



## React DOM [](#react-dom "Link for React DOM ")

React-dom contains features that are only supported for web applications (which run in the browser DOM environment). This section is broken into the following:

  * [Hooks](/reference/react-dom/hooks) - Hooks for web applications which run in the browser DOM environment.
  * [Components](/reference/react-dom/components) - React supports all of the browser built-in HTML and SVG components.
  * [APIs](/reference/react-dom) - The `react-dom` package contains methods supported only in web applications.
  * [Client APIs](/reference/react-dom/client) - The `react-dom/client` APIs let you render React components on the client (in the browser).
  * [Server APIs](/reference/react-dom/server) - The `react-dom/server` APIs let you render React components to HTML on the server.



## Rules of React [](#rules-of-react "Link for Rules of React ")

React has idioms — or rules — for how to express patterns in a way that is easy to understand and yields high-quality applications:

  * [Components and Hooks must be pure](/reference/rules/components-and-hooks-must-be-pure) – Purity makes your code easier to understand, debug, and allows React to automatically optimize your components and hooks correctly.
  * [React calls Components and Hooks](/reference/rules/react-calls-components-and-hooks) – React is responsible for rendering components and hooks when necessary to optimize the user experience.
  * [Rules of Hooks](/reference/rules/rules-of-hooks) – Hooks are defined using JavaScript functions, but they represent a special type of reusable UI logic with restrictions on where they can be called.



## Legacy APIs [](#legacy-apis "Link for Legacy APIs ")

  * [Legacy APIs](/reference/react/legacy) - Exported from the `react` package, but not recommended for use in newly written code.



[NextHooks](/reference/react/hooks)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [React ](#react)
  * [React DOM ](#react-dom)
  * [Rules of React ](#rules-of-react)
  * [Legacy APIs ](#legacy-apis)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# React Community[](#undefined "Link for this heading")

React has a community of millions of developers. On this page we’ve listed some React-related communities that you can be a part of; see the other pages in this section for additional online and in-person learning materials.

## Code of Conduct [](#code-of-conduct "Link for Code of Conduct ")

Before participating in React’s communities, [please read our Code of Conduct.](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md) We have adopted the [Contributor Covenant](https://www.contributor-covenant.org/) and we expect that all community members adhere to the guidelines within.

## Stack Overflow [](#stack-overflow "Link for Stack Overflow ")

Stack Overflow is a popular forum to ask code-level questions or if you’re stuck with a specific error. Read through the [existing questions](https://stackoverflow.com/questions/tagged/reactjs) tagged with **reactjs** or [ask your own](https://stackoverflow.com/questions/ask?tags=reactjs)!

## Popular Discussion Forums [](#popular-discussion-forums "Link for Popular Discussion Forums ")

There are many online forums which are a great place for discussion about best practices and application architecture as well as the future of React. If you have an answerable code-level question, Stack Overflow is usually a better fit.

Each community consists of many thousands of React users.

  * [DEV’s React community](https://dev.to/t/react)
  * [Hashnode’s React community](https://hashnode.com/n/reactjs)
  * [Reactiflux online chat](https://discord.gg/reactiflux)



## News [](#news "Link for News ")

For the latest news about React, and the [official React blog](/blog) on this website.

[NextReact Conferences](/community/conferences)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Code of Conduct ](#code-of-conduct)
  * [Stack Overflow ](#stack-overflow)
  * [Popular Discussion Forums ](#popular-discussion-forums)
  * [News ](#news)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React Blog[](#undefined "Link for this heading")

This blog is the official source for the updates from the React team. Anything important, including release notes or deprecation notices, will be posted here first. You can also follow the account on Twitter, but you won’t miss anything essential if you only read this blog.

## [React v19 December 5, 2024In the React 19 Upgrade Guide, we shared step-by-step instructions for upgrading your app to React 19. In this post, we’ll give an overview of the new features in React 19, and how you can adopt them …Read more](/blog/2024/12/05/react-19)## [React Compiler Beta ReleaseOctober 21, 2024We announced an experimental release of React Compiler at React Conf 2024. We’ve made a lot of progress since then, and in this post we want to share what’s next for React Compiler …Read more](/blog/2024/10/21/react-compiler-beta-release)## [React Conf 2024 RecapMay 22, 2024Last week we hosted React Conf 2024, a two-day conference in Henderson, Nevada where 700+ attendees gathered in-person to discuss the latest in UI engineering. This was our first in-person conference since 2019, and we were thrilled to be able to bring the community together again …Read more](/blog/2024/05/22/react-conf-2024-recap)## [React 19 Upgrade GuideApril 25, 2024The improvements added to React 19 require some breaking changes, but we’ve worked to make the upgrade as smooth as possible, and we don’t expect the changes to impact most apps. In this post, we will guide you through the steps for upgrading libraries to React 19 …Read more](/blog/2024/04/25/react-19-upgrade-guide)## [React Labs: What We've Been Working On – February 2024February 15, 2024In React Labs posts, we write about projects in active research and development. Since our last update, we’ve made significant progress on React Compiler, new features, and React 19, and we’d like to share what we learned.Read more](/blog/2024/02/15/react-labs-what-we-have-been-working-on-february-2024)## [React Canaries: Incremental Feature Rollout Outside MetaMay 3, 2023Traditionally, new React features used to only be available at Meta first, and land in the open source releases later. We’d like to offer the React community an option to adopt individual new features as soon as their design is close to final—similar to how Meta uses React internally. We are introducing a new officially supported Canary release channel. It lets curated setups like frameworks decouple adoption of individual React features from the React release schedule.Read more](/blog/2023/05/03/react-canaries)## [React Labs: What We've Been Working On – March 2023March 22, 2023In React Labs posts, we write about projects in active research and development. Since our last update, we’ve made significant progress on React Server Components, Asset Loading, Optimizing Compiler, Offscreen Rendering, and Transition Tracing, and we’d like to share what we learned.Read more](/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023)## [Introducing react.devMarch 16, 2023Today we are thrilled to launch react.dev, the new home for React and its documentation. In this post, we would like to give you a tour of the new site.Read more](/blog/2023/03/16/introducing-react-dev)## [React Labs: What We've Been Working On – June 2022June 15, 2022React 18 was years in the making, and with it brought valuable lessons for the React team. Its release was the result of many years of research and exploring many paths. Some of those paths were successful; many more were dead-ends that led to new insights. One lesson we’ve learned is that it’s frustrating for the community to wait for new features without having insight into these paths that we’re exploring…Read more](/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022)## [React v18.0March 29, 2022React 18 is now available on npm! In our last post, we shared step-by-step instructions for upgrading your app to React 18. In this post, we’ll give an overview of what’s new in React 18, and what it means for the future…Read more](/blog/2022/03/29/react-v18)## [How to Upgrade to React 18March 8, 2022As we shared in the release post, React 18 introduces features powered by our new concurrent renderer, with a gradual adoption strategy for existing applications. In this post, we will guide you through the steps for upgrading to React 18…Read more](/blog/2022/03/08/react-18-upgrade-guide)## [React Conf 2021 RecapDecember 17, 2021Last week we hosted our 6th React Conf. In previous years, we’ve used the React Conf stage to deliver industry changing announcements such as React Native and React Hooks. This year, we shared our multi-platform vision for React, starting with the release of React 18 and gradual adoption of concurrent features…Read more](/blog/2021/12/17/react-conf-2021-recap)## [The Plan for React 18June 8, 2021The React team is excited to share a few updates:

  * We’ve started work on the React 18 release, which will be our next major version.
  * We’ve created a Working Group to prepare the community for gradual adoption of new features in React 18.
  * We’ve published a React 18 Alpha so that library authors can try it and provide feedback…

Read more](/blog/2021/06/08/the-plan-for-react-18)## [Introducing Zero-Bundle-Size React Server ComponentsDecember 21, 20202020 has been a long year. As it comes to an end we wanted to share a special Holiday Update on our research into zero-bundle-size React Server Components. To introduce React Server Components, we have prepared a talk and a demo. If you want, you can check them out during the holidays, or later when work picks back up in the new year…Read more](/blog/2020/12/21/data-fetching-with-react-server-components)

### All release notes [](#all-release-notes "Link for All release notes ")

Not every React release deserves its own blog post, but you can find a detailed changelog for every release in the `CHANGELOG.md`[](https://github.com/facebook/react/blob/main/CHANGELOG.md) file in the React repository, as well as on the [Releases](https://github.com/facebook/react/releases) page.

### Older posts [](#older-posts "Link for Older posts ")

See the [older posts.](https://reactjs.org/blog/all.html)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Translations[](#undefined "Link for this heading")

React docs are translated by the global community into many languages all over the world.

## Source site [](#main-site "Link for Source site ")

All translations are provided from the canonical source docs:

  * [English](https://react.dev/) — [Contribute](https://github.com/reactjs/react.dev/)



## Full translations [](#full-translations "Link for Full translations ")

  * [French (Français)](https://fr.react.dev/) — [Contribute](https://github.com/reactjs/fr.react.dev)
  * [Japanese (日本語)](https://ja.react.dev/) — [Contribute](https://github.com/reactjs/ja.react.dev)
  * [Korean (한국어)](https://ko.react.dev/) — [Contribute](https://github.com/reactjs/ko.react.dev)
  * [Simplified Chinese (简体中文)](https://zh-hans.react.dev/) — [Contribute](https://github.com/reactjs/zh-hans.react.dev)
  * [Spanish (Español)](https://es.react.dev/) — [Contribute](https://github.com/reactjs/es.react.dev)
  * [Turkish (Türkçe)](https://tr.react.dev/) — [Contribute](https://github.com/reactjs/tr.react.dev)



## In-progress translations [](#in-progress-translations "Link for In-progress translations ")

For the progress of each translation, see: [Is React Translated Yet?](https://translations.react.dev/)

  * [Arabic (العربية)](https://ar.react.dev/) — [Contribute](https://github.com/reactjs/ar.react.dev)
  * [Azerbaijani (Azərbaycanca)](https://az.react.dev/) — [Contribute](https://github.com/reactjs/az.react.dev)
  * [Belarusian (Беларуская)](https://be.react.dev/) — [Contribute](https://github.com/reactjs/be.react.dev)
  * [Bengali (বাংলা)](https://bn.react.dev/) — [Contribute](https://github.com/reactjs/bn.react.dev)
  * [Czech (Čeština)](https://cs.react.dev/) — [Contribute](https://github.com/reactjs/cs.react.dev)
  * [Finnish (Suomi)](https://fi.react.dev/) — [Contribute](https://github.com/reactjs/fi.react.dev)
  * [German (Deutsch)](https://de.react.dev/) — [Contribute](https://github.com/reactjs/de.react.dev)
  * [Gujarati (ગુજરાતી)](https://gu.react.dev/) — [Contribute](https://github.com/reactjs/gu.react.dev)
  * [Hebrew (עברית)](https://he.react.dev/) — [Contribute](https://github.com/reactjs/he.react.dev)
  * [Hindi (हिन्दी)](https://hi.react.dev/) — [Contribute](https://github.com/reactjs/hi.react.dev)
  * [Hungarian (magyar)](https://hu.react.dev/) — [Contribute](https://github.com/reactjs/hu.react.dev)
  * [Icelandic (Íslenska)](https://is.react.dev/) — [Contribute](https://github.com/reactjs/is.react.dev)
  * [Indonesian (Bahasa Indonesia)](https://id.react.dev/) — [Contribute](https://github.com/reactjs/id.react.dev)
  * [Italian (Italiano)](https://it.react.dev/) — [Contribute](https://github.com/reactjs/it.react.dev)
  * [Kazakh (Қазақша)](https://kk.react.dev/) — [Contribute](https://github.com/reactjs/kk.react.dev)
  * [Lao (ພາສາລາວ)](https://lo.react.dev/) — [Contribute](https://github.com/reactjs/lo.react.dev)
  * [Macedonian (Македонски)](https://mk.react.dev/) — [Contribute](https://github.com/reactjs/mk.react.dev)
  * [Malayalam (മലയാളം)](https://ml.react.dev/) — [Contribute](https://github.com/reactjs/ml.react.dev)
  * [Mongolian (Монгол хэл)](https://mn.react.dev/) — [Contribute](https://github.com/reactjs/mn.react.dev)
  * [Persian (فارسی)](https://fa.react.dev/) — [Contribute](https://github.com/reactjs/fa.react.dev)
  * [Polish (Polski)](https://pl.react.dev/) — [Contribute](https://github.com/reactjs/pl.react.dev)
  * [Portuguese (Brazil) (Português do Brasil)](https://pt-br.react.dev/) — [Contribute](https://github.com/reactjs/pt-br.react.dev)
  * [Russian (Русский)](https://ru.react.dev/) — [Contribute](https://github.com/reactjs/ru.react.dev)
  * [Serbian (Srpski)](https://sr.react.dev/) — [Contribute](https://github.com/reactjs/sr.react.dev)
  * [Sinhala (සිංහල)](https://si.react.dev/) — [Contribute](https://github.com/reactjs/si.react.dev)
  * [Swahili (Kiswahili)](https://sw.react.dev/) — [Contribute](https://github.com/reactjs/sw.react.dev)
  * [Tamil (தமிழ்)](https://ta.react.dev/) — [Contribute](https://github.com/reactjs/ta.react.dev)
  * [Telugu (తెలుగు)](https://te.react.dev/) — [Contribute](https://github.com/reactjs/te.react.dev)
  * [Traditional Chinese (繁體中文)](https://zh-hant.react.dev/) — [Contribute](https://github.com/reactjs/zh-hant.react.dev)
  * [Ukrainian (Українська)](https://uk.react.dev/) — [Contribute](https://github.com/reactjs/uk.react.dev)
  * [Urdu (اردو)](https://ur.react.dev/) — [Contribute](https://github.com/reactjs/ur.react.dev)
  * [Vietnamese (Tiếng Việt)](https://vi.react.dev/) — [Contribute](https://github.com/reactjs/vi.react.dev)



## How to contribute [](#how-to-contribute "Link for How to contribute ")

You can contribute to the translation efforts!

The community conducts the translation work for the React docs on each language-specific fork of react.dev. Typical translation work involves directly translating a Markdown file and creating a pull request. Click the “contribute” link above to the GitHub repository for your language, and follow the instructions there to help with the translation effort.

If you want to start a new translation for your language, visit: [translations.react.dev](https://github.com/reactjs/translations.react.dev)

[PreviousDocs Contributors](/community/docs-contributors)[NextAcknowledgements](/community/acknowledgements)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Source site ](#main-site)
  * [Full translations ](#full-translations)
  * [In-progress translations ](#in-progress-translations)
  * [How to contribute ](#how-to-contribute)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

[Installation](/learn/installation)

# Add React to an Existing Project[](#undefined "Link for this heading")

If you want to add some interactivity to your existing project, you don’t have to rewrite it in React. Add React to your existing stack, and render interactive React components anywhere.

### Note

**You need to install[Node.js](https://nodejs.org/en/) for local development.** Although you can [try React](/learn/installation#try-react) online or with a simple HTML page, realistically most JavaScript tooling you’ll want to use for development requires Node.js.

## Using React for an entire subroute of your existing website [](#using-react-for-an-entire-subroute-of-your-existing-website "Link for Using React for an entire subroute of your existing website ")

Let’s say you have an existing web app at `example.com` built with another server technology (like Rails), and you want to implement all routes starting with `example.com/some-app/` fully with React.

Here’s how we recommend to set it up:

  1. **Build the React part of your app** using one of the [React-based frameworks](/learn/start-a-new-react-project).
  2. **Specify`/some-app` as the _base path_** in your framework’s configuration (here’s how: [Next.js](https://nextjs.org/docs/api-reference/next.config.js/basepath), [Gatsby](https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/path-prefix/)).
  3. **Configure your server or a proxy** so that all requests under `/some-app/` are handled by your React app.



This ensures the React part of your app can [benefit from the best practices](/learn/start-a-new-react-project#can-i-use-react-without-a-framework) baked into those frameworks.

Many React-based frameworks are full-stack and let your React app take advantage of the server. However, you can use the same approach even if you can’t or don’t want to run JavaScript on the server. In that case, serve the HTML/CSS/JS export (`next export`[ output](https://nextjs.org/docs/advanced-features/static-html-export) for Next.js, default for Gatsby) at `/some-app/` instead.

## Using React for a part of your existing page [](#using-react-for-a-part-of-your-existing-page "Link for Using React for a part of your existing page ")

Let’s say you have an existing page built with another technology (either a server one like Rails, or a client one like Backbone), and you want to render interactive React components somewhere on that page. That’s a common way to integrate React—in fact, it’s how most React usage looked at Meta for many years!

You can do this in two steps:

  1. **Set up a JavaScript environment** that lets you use the [JSX syntax](/learn/writing-markup-with-jsx), split your code into modules with the `import`[](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) / `export`[](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) syntax, and use packages (for example, React) from the [npm](https://www.npmjs.com/) package registry.
  2. **Render your React components** where you want to see them on the page.



The exact approach depends on your existing page setup, so let’s walk through some details.

### Step 1: Set up a modular JavaScript environment [](#step-1-set-up-a-modular-javascript-environment "Link for Step 1: Set up a modular JavaScript environment ")

A modular JavaScript environment lets you write your React components in individual files, as opposed to writing all of your code in a single file. It also lets you use all the wonderful packages published by other developers on the [npm](https://www.npmjs.com/) registry—including React itself! How you do this depends on your existing setup:

  * **If your app is already split into files that use`import` statements,** try to use the setup you already have. Check whether writing `<div />` in your JS code causes a syntax error. If it causes a syntax error, you might need to [transform your JavaScript code with Babel](https://babeljs.io/setup), and enable the [Babel React preset](https://babeljs.io/docs/babel-preset-react) to use JSX.

  * **If your app doesn’t have an existing setup for compiling JavaScript modules,** set it up with [Vite](https://vitejs.dev/). The Vite community maintains [many integrations with backend frameworks](https://github.com/vitejs/awesome-vite#integrations-with-backends), including Rails, Django, and Laravel. If your backend framework is not listed, [follow this guide](https://vitejs.dev/guide/backend-integration.html) to manually integrate Vite builds with your backend.




To check whether your setup works, run this command in your project folder:

Terminal

Copy

npm install react react-dom

Then add these lines of code at the top of your main JavaScript file (it might be called `index.js` or `main.js`):

index.js

index.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { createRoot } from 'react-dom/client';
// Clear the existing HTML content
document.body.innerHTML = '<div id="app"></div>';
// Render your React component instead
const root = createRoot(document.getElementById('app'));
root.render(<h1>Hello, world</h1>);

```


If the entire content of your page was replaced by a “Hello, world!”, everything worked! Keep reading.

### Note

Integrating a modular JavaScript environment into an existing project for the first time can feel intimidating, but it’s worth it! If you get stuck, try our [community resources](/community) or the [Vite Chat](https://chat.vitejs.dev/).

### Step 2: Render React components anywhere on the page [](#step-2-render-react-components-anywhere-on-the-page "Link for Step 2: Render React components anywhere on the page ")

In the previous step, you put this code at the top of your main file:

```


import { createRoot } from 'react-dom/client';

// Clear the existing HTML content

document.body.innerHTML = '<div id="app"></div>';

// Render your React component instead

const root = createRoot(document.getElementById('app'));

root.render(<h1>Hello, world</h1>);


```


Of course, you don’t actually want to clear the existing HTML content!

Delete this code.

Instead, you probably want to render your React components in specific places in your HTML. Open your HTML page (or the server templates that generate it) and add a unique `id`[](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id) attribute to any tag, for example:

```


<!-- ... somewhere in your html ... -->

<nav id="navigation"></nav>

<!-- ... more html ... -->


```


This lets you find that HTML element with `document.getElementById`[](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById) and pass it to `createRoot`[](/reference/react-dom/client/createRoot) so that you can render your own React component inside:

index.jsindex.html

index.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { createRoot } from 'react-dom/client';
function NavigationBar() {
 // TODO: Actually implement a navigation bar
 return <h1>Hello from React!</h1>;
}
const domNode = document.getElementById('navigation');
const root = createRoot(domNode);
root.render(<NavigationBar />);

```


Notice how the original HTML content from `index.html` is preserved, but your own `NavigationBar` React component now appears inside the `<nav id="navigation">` from your HTML. Read the `createRoot`[ usage documentation](/reference/react-dom/client/createRoot#rendering-a-page-partially-built-with-react) to learn more about rendering React components inside an existing HTML page.

When you adopt React in an existing project, it’s common to start with small interactive components (like buttons), and then gradually keep “moving upwards” until eventually your entire page is built with React. If you ever reach that point, we recommend migrating to [a React framework](/learn/start-a-new-react-project) right after to get the most out of React.

## Using React Native in an existing native mobile app [](#using-react-native-in-an-existing-native-mobile-app "Link for Using React Native in an existing native mobile app ")

[React Native](https://reactnative.dev/) can also be integrated into existing native apps incrementally. If you have an existing native app for Android (Java or Kotlin) or iOS (Objective-C or Swift), [follow this guide](https://reactnative.dev/docs/integration-with-existing-apps) to add a React Native screen to it.

[PreviousStart a New React Project](/learn/start-a-new-react-project)[NextEditor Setup](/learn/editor-setup)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Using React for an entire subroute of your existing website ](#using-react-for-an-entire-subroute-of-your-existing-website)
  * [Using React for a part of your existing page ](#using-react-for-a-part-of-your-existing-page)
  * [Step 1: Set up a modular JavaScript environment ](#step-1-set-up-a-modular-javascript-environment)
  * [Step 2: Render React components anywhere on the page ](#step-2-render-react-components-anywhere-on-the-page)
  * [Using React Native in an existing native mobile app ](#using-react-native-in-an-existing-native-mobile-app)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

[Installation](/learn/installation)

# Start a New React Project[](#undefined "Link for this heading")

If you want to build a new app or a new website fully with React, we recommend picking one of the React-powered frameworks popular in the community.

You can use React without a framework, however we’ve found that most apps and sites eventually build solutions to common problems such as code-splitting, routing, data fetching, and generating HTML. These problems are common to all UI libraries, not just React.

By starting with a framework, you can get started with React quickly, and avoid essentially building your own framework later.

##### Deep Dive

#### Can I use React without a framework? [](#can-i-use-react-without-a-framework "Link for Can I use React without a framework? ")

Show Details

You can definitely use React without a framework—that’s how you’d [use React for a part of your page.](/learn/add-react-to-an-existing-project#using-react-for-a-part-of-your-existing-page) **However, if you’re building a new app or a site fully with React, we recommend using a framework.**

Here’s why.

Even if you don’t need routing or data fetching at first, you’ll likely want to add some libraries for them. As your JavaScript bundle grows with every new feature, you might have to figure out how to split code for every route individually. As your data fetching needs get more complex, you are likely to encounter server-client network waterfalls that make your app feel very slow. As your audience includes more users with poor network conditions and low-end devices, you might need to generate HTML from your components to display content early—either on the server, or during the build time. Changing your setup to run some of your code on the server or during the build can be very tricky.

**These problems are not React-specific. This is why Svelte has SvelteKit, Vue has Nuxt, and so on.** To solve these problems on your own, you’ll need to integrate your bundler with your router and with your data fetching library. It’s not hard to get an initial setup working, but there are a lot of subtleties involved in making an app that loads quickly even as it grows over time. You’ll want to send down the minimal amount of app code but do so in a single client–server roundtrip, in parallel with any data required for the page. You’ll likely want the page to be interactive before your JavaScript code even runs, to support progressive enhancement. You may want to generate a folder of fully static HTML files for your marketing pages that can be hosted anywhere and still work with JavaScript disabled. Building these capabilities yourself takes real work.

**React frameworks on this page solve problems like these by default, with no extra work from your side.** They let you start very lean and then scale your app with your needs. Each React framework has a community, so finding answers to questions and upgrading tooling is easier. Frameworks also give structure to your code, helping you and others retain context and skills between different projects. Conversely, with a custom setup it’s easier to get stuck on unsupported dependency versions, and you’ll essentially end up creating your own framework—albeit one with no community or upgrade path (and if it’s anything like the ones we’ve made in the past, more haphazardly designed).

If your app has unusual constraints not served well by these frameworks, or you prefer to solve these problems yourself, you can roll your own custom setup with React. Grab `react` and `react-dom` from npm, set up your custom build process with a bundler like [Vite](https://vitejs.dev/) or [Parcel](https://parceljs.org/), and add other tools as you need them for routing, static generation or server-side rendering, and more.

## Production-grade React frameworks [](#production-grade-react-frameworks "Link for Production-grade React frameworks ")

These frameworks support all the features you need to deploy and scale your app in production and are working towards supporting our [full-stack architecture vision](#which-features-make-up-the-react-teams-full-stack-architecture-vision). All of the frameworks we recommend are open source with active communities for support, and can be deployed to your own server or a hosting provider. If you’re a framework author interested in being included on this list, [please let us know](https://github.com/reactjs/react.dev/issues/new?assignees=&labels=type%3A+framework&projects=&template=3-framework.yml&title=%5BFramework%5D%3A+).

### Next.js [](#nextjs-pages-router "Link for Next.js ")

**[Next.js’ Pages Router](https://nextjs.org/) is a full-stack React framework.** It’s versatile and lets you create React apps of any size—from a mostly static blog to a complex dynamic application. To create a new Next.js project, run in your terminal:

Terminal

Copy

npx create-next-app@latest

If you’re new to Next.js, check out the [learn Next.js course.](https://nextjs.org/learn)

Next.js is maintained by [Vercel](https://vercel.com/). You can [deploy a Next.js app](https://nextjs.org/docs/app/building-your-application/deploying) to any Node.js or serverless hosting, or to your own server. Next.js also supports a [static export](https://nextjs.org/docs/pages/building-your-application/deploying/static-exports) which doesn’t require a server.

### Remix [](#remix "Link for Remix ")

**[Remix](https://remix.run/) is a full-stack React framework with nested routing.** It lets you break your app into nested parts that can load data in parallel and refresh in response to the user actions. To create a new Remix project, run:

Terminal

Copy

npx create-remix

If you’re new to Remix, check out the Remix [blog tutorial](https://remix.run/docs/en/main/tutorials/blog) (short) and [app tutorial](https://remix.run/docs/en/main/tutorials/jokes) (long).

Remix is maintained by [Shopify](https://www.shopify.com/). When you create a Remix project, you need to [pick your deployment target](https://remix.run/docs/en/main/guides/deployment). You can deploy a Remix app to any Node.js or serverless hosting by using or writing an [adapter](https://remix.run/docs/en/main/other-api/adapter).

### Gatsby [](#gatsby "Link for Gatsby ")

**[Gatsby](https://www.gatsbyjs.com/) is a React framework for fast CMS-backed websites.** Its rich plugin ecosystem and its GraphQL data layer simplify integrating content, APIs, and services into one website. To create a new Gatsby project, run:

Terminal

Copy

npx create-gatsby

If you’re new to Gatsby, check out the [Gatsby tutorial.](https://www.gatsbyjs.com/docs/tutorial/)

Gatsby is maintained by [Netlify](https://www.netlify.com/). You can [deploy a fully static Gatsby site](https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting) to any static hosting. If you opt into using server-only features, make sure your hosting provider supports them for Gatsby.

### Expo (for native apps) [](#expo "Link for Expo \(for native apps\) ")

**[Expo](https://expo.dev/) is a React framework that lets you create universal Android, iOS, and web apps with truly native UIs.** It provides an SDK for [React Native](https://reactnative.dev/) that makes the native parts easier to use. To create a new Expo project, run:

Terminal

Copy

npx create-expo-app

If you’re new to Expo, check out the [Expo tutorial](https://docs.expo.dev/tutorial/introduction/).

Expo is maintained by [Expo (the company)](https://expo.dev/about). Building apps with Expo is free, and you can submit them to the Google and Apple app stores without restrictions. Expo additionally provides opt-in paid cloud services.

## Bleeding-edge React frameworks [](#bleeding-edge-react-frameworks "Link for Bleeding-edge React frameworks ")

As we’ve explored how to continue improving React, we realized that integrating React more closely with frameworks (specifically, with routing, bundling, and server technologies) is our biggest opportunity to help React users build better apps. The Next.js team has agreed to collaborate with us in researching, developing, integrating, and testing framework-agnostic bleeding-edge React features like [React Server Components.](/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023#react-server-components)

These features are getting closer to being production-ready every day, and we’ve been in talks with other bundler and framework developers about integrating them. Our hope is that in a year or two, all frameworks listed on this page will have full support for these features. (If you’re a framework author interested in partnering with us to experiment with these features, please let us know!)

### Next.js (App Router) [](#nextjs-app-router "Link for Next.js \(App Router\) ")

**[Next.js’s App Router](https://nextjs.org/docs) is a redesign of the Next.js APIs aiming to fulfill the React team’s full-stack architecture vision.** It lets you fetch data in asynchronous components that run on the server or even during the build.

Next.js is maintained by [Vercel](https://vercel.com/). You can [deploy a Next.js app](https://nextjs.org/docs/app/building-your-application/deploying) to any Node.js or serverless hosting, or to your own server. Next.js also supports [static export](https://nextjs.org/docs/app/building-your-application/deploying/static-exports) which doesn’t require a server.

##### Deep Dive

#### Which features make up the React team’s full-stack architecture vision? [](#which-features-make-up-the-react-teams-full-stack-architecture-vision "Link for Which features make up the React team’s full-stack architecture vision? ")

Show Details

Next.js’s App Router bundler fully implements the official [React Server Components specification](https://github.com/reactjs/rfcs/blob/main/text/0188-server-components.md). This lets you mix build-time, server-only, and interactive components in a single React tree.

For example, you can write a server-only React component as an `async` function that reads from a database or from a file. Then you can pass data down from it to your interactive components:

```


// This component runs *only* on the server (or during the build).

async function Talks({ confId }) {

 // 1. You're on the server, so you can talk to your data layer. API endpoint not required.

 const talks = await db.Talks.findAll({ confId });

 // 2. Add any amount of rendering logic. It won't make your JavaScript bundle larger.

 const videos = talks.map(talk => talk.video);

 // 3. Pass the data down to the components that will run in the browser.

 return <SearchableVideoList videos={videos} />;

}


```


Next.js’s App Router also integrates [data fetching with Suspense](/blog/2022/03/29/react-v18#suspense-in-data-frameworks). This lets you specify a loading state (like a skeleton placeholder) for different parts of your user interface directly in your React tree:

```


<Suspense fallback={<TalksLoading />}>

 <Talks confId={conf.id} />

</Suspense>


```


Server Components and Suspense are React features rather than Next.js features. However, adopting them at the framework level requires buy-in and non-trivial implementation work. At the moment, the Next.js App Router is the most complete implementation. The React team is working with bundler developers to make these features easier to implement in the next generation of frameworks.

[PreviousInstallation](/learn/installation)[NextAdd React to an Existing Project](/learn/add-react-to-an-existing-project)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Production-grade React frameworks ](#production-grade-react-frameworks)
  * [Next.js ](#nextjs-pages-router)
  * [Remix ](#remix)
  * [Gatsby ](#gatsby)
  * [Expo (for native apps) ](#expo)
  * [Bleeding-edge React frameworks ](#bleeding-edge-react-frameworks)
  * [Next.js (App Router) ](#nextjs-app-router)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React v19[](#undefined "Link for this heading")

December 05, 2024 by [The React Team](/community/team)

### Note

### React 19 is now stable! [](#react-19-is-now-stable "Link for React 19 is now stable! ")

Additions since this post was originally shared with the React 19 RC in April:

  * **Pre-warming for suspended trees** : see [Improvements to Suspense](/blog/2024/04/25/react-19-upgrade-guide#improvements-to-suspense).
  * **React DOM static APIs** : see [New React DOM Static APIs](#new-react-dom-static-apis).



_The date for this post has been updated to reflect the stable release date._

React v19 is now available on npm!

In our [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide), we shared step-by-step instructions for upgrading your app to React 19. In this post, we’ll give an overview of the new features in React 19, and how you can adopt them.

  * [What’s new in React 19](#whats-new-in-react-19)
  * [Improvements in React 19](#improvements-in-react-19)
  * [How to upgrade](#how-to-upgrade)



For a list of breaking changes, see the [Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide).

## What’s new in React 19 [](#whats-new-in-react-19 "Link for What’s new in React 19 ")

### Actions [](#actions "Link for Actions ")

A common use case in React apps is to perform a data mutation and then update state in response. For example, when a user submits a form to change their name, you will make an API request, and then handle the response. In the past, you would need to handle pending states, errors, optimistic updates, and sequential requests manually.

For example, you could handle the pending and error state in `useState`:

```


// Before Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, setIsPending] = useState(false);

 const handleSubmit = async () => {

  setIsPending(true);

  const error = await updateName(name);

  setIsPending(false);

  if (error) {

   setError(error);

   return;

  } 

  redirect("/path");

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


In React 19, we’re adding support for using async functions in transitions to handle pending states, errors, forms, and optimistic updates automatically.

For example, you can use `useTransition` to handle the pending state for you:

```


// Using pending state from Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, startTransition] = useTransition();

 const handleSubmit = () => {

  startTransition(async () => {

   const error = await updateName(name);

   if (error) {

    setError(error);

    return;

   } 

   redirect("/path");

  })

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


The async transition will immediately set the `isPending` state to true, make the async request(s), and switch `isPending` to false after any transitions. This allows you to keep the current UI responsive and interactive while the data is changing.

### Note

#### By convention, functions that use async transitions are called “Actions”. [](#by-convention-functions-that-use-async-transitions-are-called-actions "Link for By convention, functions that use async transitions are called “Actions”. ")

Actions automatically manage submitting data for you:

  * **Pending state** : Actions provide a pending state that starts at the beginning of a request and automatically resets when the final state update is committed.
  * **Optimistic updates** : Actions support the new `useOptimistic`[](#new-hook-optimistic-updates) hook so you can show users instant feedback while the requests are submitting.
  * **Error handling** : Actions provide error handling so you can display Error Boundaries when a request fails, and revert optimistic updates to their original value automatically.
  * **Forms** : `<form>` elements now support passing functions to the `action` and `formAction` props. Passing functions to the `action` props use Actions by default and reset the form automatically after submission.



Building on top of Actions, React 19 introduces `useOptimistic`[](#new-hook-optimistic-updates) to manage optimistic updates, and a new hook `React.useActionState`[](#new-hook-useactionstate) to handle common cases for Actions. In `react-dom` we’re adding `<form>`[ Actions](#form-actions) to manage forms automatically and `useFormStatus`[](#new-hook-useformstatus) to support the common cases for Actions in forms.

In React 19, the above example can be simplified to:

```


// Using <form> Actions and useActionState

function ChangeName({ name, setName }) {

 const [error, submitAction, isPending] = useActionState(

  async (previousState, formData) => {

   const error = await updateName(formData.get("name"));

   if (error) {

    return error;

   }

   redirect("/path");

   return null;

  },

  null,

 );

 return (

  <form action={submitAction}>

   <input type="text" name="name" />

   <button type="submit" disabled={isPending}>Update</button>

   {error && <p>{error}</p>}

  </form>

 );

}


```


In the next section, we’ll break down each of the new Action features in React 19.

### New hook: `useActionState` [](#new-hook-useactionstate "Link for this heading")

To make the common cases easier for Actions, we’ve added a new hook called `useActionState`:

```


const [error, submitAction, isPending] = useActionState(

 async (previousState, newName) => {

  const error = await updateName(newName);

  if (error) {

   // You can return any result of the action.

   // Here, we return only the error.

   return error;

  }

  // handle success

  return null;

 },

 null,

);


```


`useActionState` accepts a function (the “Action”), and returns a wrapped Action to call. This works because Actions compose. When the wrapped Action is called, `useActionState` will return the last result of the Action as `data`, and the pending state of the Action as `pending`.

### Note

`React.useActionState` was previously called `ReactDOM.useFormState` in the Canary releases, but we’ve renamed it and deprecated `useFormState`.

See [#28491](https://github.com/facebook/react/pull/28491) for more info.

For more information, see the docs for `useActionState`[](/reference/react/useActionState).

### React DOM: `<form>` Actions [](#form-actions "Link for this heading")

Actions are also integrated with React 19’s new `<form>` features for `react-dom`. We’ve added support for passing functions as the `action` and `formAction` props of `<form>`, `<input>`, and `<button>` elements to automatically submit forms with Actions:

```


<form action={actionFunction}>


```


When a `<form>` Action succeeds, React will automatically reset the form for uncontrolled components. If you need to reset the `<form>` manually, you can call the new `requestFormReset` React DOM API.

For more information, see the `react-dom` docs for `<form>`[](/reference/react-dom/components/form), `<input>`[](/reference/react-dom/components/input), and `<button>`.

### React DOM: New hook: `useFormStatus` [](#new-hook-useformstatus "Link for this heading")

In design systems, it’s common to write design components that need access to information about the `<form>` they’re in, without drilling props down to the component. This can be done via Context, but to make the common case easier, we’ve added a new hook `useFormStatus`:

```


import {useFormStatus} from 'react-dom';

function DesignButton() {

 const {pending} = useFormStatus();

 return <button type="submit" disabled={pending} />

}


```


`useFormStatus` reads the status of the parent `<form>` as if the form was a Context provider.

For more information, see the `react-dom` docs for `useFormStatus`[](/reference/react-dom/hooks/useFormStatus).

### New hook: `useOptimistic` [](#new-hook-optimistic-updates "Link for this heading")

Another common UI pattern when performing a data mutation is to show the final state optimistically while the async request is underway. In React 19, we’re adding a new hook called `useOptimistic` to make this easier:

```


function ChangeName({currentName, onUpdateName}) {

 const [optimisticName, setOptimisticName] = useOptimistic(currentName);

 const submitAction = async formData => {

  const newName = formData.get("name");

  setOptimisticName(newName);

  const updatedName = await updateName(newName);

  onUpdateName(updatedName);

 };

 return (

  <form action={submitAction}>

   <p>Your name is: {optimisticName}</p>

   <p>

    <label>Change Name:</label>

    <input

     type="text"

     name="name"

     disabled={currentName !== optimisticName}

    />

   </p>

  </form>

 );

}


```


The `useOptimistic` hook will immediately render the `optimisticName` while the `updateName` request is in progress. When the update finishes or errors, React will automatically switch back to the `currentName` value.

For more information, see the docs for `useOptimistic`[](/reference/react/useOptimistic).

### New API: `use` [](#new-feature-use "Link for this heading")

In React 19 we’re introducing a new API to read resources in render: `use`.

For example, you can read a promise with `use`, and React will Suspend until the promise resolves:

```


import {use} from 'react';

function Comments({commentsPromise}) {

 // `use` will suspend until the promise resolves.

 const comments = use(commentsPromise);

 return comments.map(comment => <p key={comment.id}>{comment}</p>);

}

function Page({commentsPromise}) {

 // When `use` suspends in Comments,

 // this Suspense boundary will be shown.

 return (

  <Suspense fallback={<div>Loading...</div>}>

   <Comments commentsPromise={commentsPromise} />

  </Suspense>

 )

}


```


### Note

#### `use` does not support promises created in render. [](#use-does-not-support-promises-created-in-render "Link for this heading")

If you try to pass a promise created in render to `use`, React will warn:

Console

A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework.

To fix, you need to pass a promise from a suspense powered library or framework that supports caching for promises. In the future we plan to ship features to make it easier to cache promises in render.

You can also read context with `use`, allowing you to read Context conditionally such as after early returns:

```


import {use} from 'react';

import ThemeContext from './ThemeContext'

function Heading({children}) {

 if (children == null) {

  return null;

 }

 // This would not work with useContext

 // because of the early return.

 const theme = use(ThemeContext);

 return (

  <h1 style={{color: theme.color}}>

   {children}

  </h1>

 );

}


```


The `use` API can only be called in render, similar to hooks. Unlike hooks, `use` can be called conditionally. In the future we plan to support more ways to consume resources in render with `use`.

For more information, see the docs for `use`[](/reference/react/use).

## New React DOM Static APIs [](#new-react-dom-static-apis "Link for New React DOM Static APIs ")

We’ve added two new APIs to `react-dom/static` for static site generation:

  * `prerender`[](/reference/react-dom/static/prerender)
  * `prerenderToNodeStream`[](/reference/react-dom/static/prerenderToNodeStream)



These new APIs improve on `renderToString` by waiting for data to load for static HTML generation. They are designed to work with streaming environments like Node.js Streams and Web Streams. For example, in a Web Stream environment, you can prerender a React tree to static HTML with `prerender`:

```


import { prerender } from 'react-dom/static';

async function handler(request) {

 const {prelude} = await prerender(<App />, {

  bootstrapScripts: ['/main.js']

 });

 return new Response(prelude, {

  headers: { 'content-type': 'text/html' },

 });

}


```


Prerender APIs will wait for all data to load before returning the static HTML stream. Streams can be converted to strings, or sent with a streaming response. They do not support streaming content as it loads, which is supported by the existing [React DOM server rendering APIs](/reference/react-dom/server).

For more information, see [React DOM Static APIs](/reference/react-dom/static).

## React Server Components [](#react-server-components "Link for React Server Components ")

### Server Components [](#server-components "Link for Server Components ")

Server Components are a new option that allows rendering components ahead of time, before bundling, in an environment separate from your client application or SSR server. This separate environment is the “server” in React Server Components. Server Components can run once at build time on your CI server, or they can be run for each request using a web server.

React 19 includes all of the React Server Components features included from the Canary channel. This means libraries that ship with Server Components can now target React 19 as a peer dependency with a `react-server` [export condition](https://github.com/reactjs/rfcs/blob/main/text/0227-server-module-conventions.md#react-server-conditional-exports) for use in frameworks that support the [Full-stack React Architecture](/learn/start-a-new-react-project#which-features-make-up-the-react-teams-full-stack-architecture-vision).

### Note

#### How do I build support for Server Components? [](#how-do-i-build-support-for-server-components "Link for How do I build support for Server Components? ")

While React Server Components in React 19 are stable and will not break between minor versions, the underlying APIs used to implement a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x.

To support React Server Components as a bundler or framework, we recommend pinning to a specific React version, or using the Canary release. We will continue working with bundlers and frameworks to stabilize the APIs used to implement React Server Components in the future.

For more, see the docs for [React Server Components](/reference/rsc/server-components).

### Server Actions [](#server-actions "Link for Server Actions ")

Server Actions allow Client Components to call async functions executed on the server.

When a Server Action is defined with the `"use server"` directive, your framework will automatically create a reference to the server function, and pass that reference to the Client Component. When that function is called on the client, React will send a request to the server to execute the function, and return the result.

### Note

#### There is no directive for Server Components. [](#there-is-no-directive-for-server-components "Link for There is no directive for Server Components. ")

A common misunderstanding is that Server Components are denoted by `"use server"`, but there is no directive for Server Components. The `"use server"` directive is used for Server Actions.

For more info, see the docs for [Directives](/reference/rsc/directives).

Server Actions can be created in Server Components and passed as props to Client Components, or they can be imported and used in Client Components.

For more, see the docs for [React Server Actions](/reference/rsc/server-actions).

## Improvements in React 19 [](#improvements-in-react-19 "Link for Improvements in React 19 ")

### `ref` as a prop [](#ref-as-a-prop "Link for this heading")

Starting in React 19, you can now access `ref` as a prop for function components:

```


function MyInput({placeholder, ref}) {

 return <input placeholder={placeholder} ref={ref} />

}

//...

<MyInput ref={ref} />


```


New function components will no longer need `forwardRef`, and we will be publishing a codemod to automatically update your components to use the new `ref` prop. In future versions we will deprecate and remove `forwardRef`.

### Note

`refs` passed to classes are not passed as props since they reference the component instance.

### Diffs for hydration errors [](#diffs-for-hydration-errors "Link for Diffs for hydration errors ")

We also improved error reporting for hydration errors in `react-dom`. For example, instead of logging multiple errors in DEV without any information about the mismatch:

Console

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Uncaught Error: Text content does not match server-rendered HTML. at checkForUnmatchedText …

We now log a single message with a diff of the mismatch:

Console

Uncaught Error: Hydration failed because the server rendered HTML didn’t match the client. As a result this tree will be regenerated on the client. This can happen if an SSR-ed Client Component used: - A server/client branch `if (typeof window !== 'undefined')`. - Variable input such as `Date.now()` or `Math.random()` which changes each time it’s called. - Date formatting in a user’s locale which doesn’t match the server. - External changing data without sending a snapshot of it along with the HTML. - Invalid HTML tag nesting. It can also happen if the client has a browser extension installed which messes with the HTML before React loaded. <https://react.dev/link/hydration-mismatch> <App> <span> + Client - Server at throwOnHydrationMismatch …

### `<Context>` as a provider [](#context-as-a-provider "Link for this heading")

In React 19, you can render `<Context>` as a provider instead of `<Context.Provider>`:

```


const ThemeContext = createContext('');

function App({children}) {

 return (

  <ThemeContext value="dark">

   {children}

  </ThemeContext>

 ); 

}


```


New Context providers can use `<Context>` and we will be publishing a codemod to convert existing providers. In future versions we will deprecate `<Context.Provider>`.

### Cleanup functions for refs [](#cleanup-functions-for-refs "Link for Cleanup functions for refs ")

We now support returning a cleanup function from `ref` callbacks:

```


<input

 ref={(ref) => {

  // ref created

  // NEW: return a cleanup function to reset

  // the ref when element is removed from DOM.

  return () => {

   // ref cleanup

  };

 }}

/>


```


When the component unmounts, React will call the cleanup function returned from the `ref` callback. This works for DOM refs, refs to class components, and `useImperativeHandle`.

### Note

Previously, React would call `ref` functions with `null` when unmounting the component. If your `ref` returns a cleanup function, React will now skip this step.

In future versions, we will deprecate calling refs with `null` when unmounting components.

Due to the introduction of ref cleanup functions, returning anything else from a `ref` callback will now be rejected by TypeScript. The fix is usually to stop using implicit returns, for example:

```


- <div ref={current => (instance = current)} />

+ <div ref={current => {instance = current}} />


```


The original code returned the instance of the `HTMLDivElement` and TypeScript wouldn’t know if this was _supposed_ to be a cleanup function or if you didn’t want to return a cleanup function.

You can codemod this pattern with `no-implicit-ref-callback-return`[](https://github.com/eps1lon/types-react-codemod/#no-implicit-ref-callback-return).

### `useDeferredValue` initial value [](#use-deferred-value-initial-value "Link for this heading")

We’ve added an `initialValue` option to `useDeferredValue`:

```


function Search({deferredValue}) {

 // On initial render the value is ''.

 // Then a re-render is scheduled with the deferredValue.

 const value = useDeferredValue(deferredValue, '');

 return (

  <Results query={value} />

 );

}


```


When initialValue is provided, `useDeferredValue` will return it as `value` for the initial render of the component, and schedules a re-render in the background with the deferredValue returned.

For more, see `useDeferredValue`[](/reference/react/useDeferredValue).

### Support for Document Metadata [](#support-for-metadata-tags "Link for Support for Document Metadata ")

In HTML, document metadata tags like `<title>`, `<link>`, and `<meta>` are reserved for placement in the `<head>` section of the document. In React, the component that decides what metadata is appropriate for the app may be very far from the place where you render the `<head>` or React does not render the `<head>` at all. In the past, these elements would need to be inserted manually in an effect, or by libraries like `react-helmet`[](https://github.com/nfl/react-helmet), and required careful handling when server rendering a React application.

In React 19, we’re adding support for rendering document metadata tags in components natively:

```


function BlogPost({post}) {

 return (

  <article>

   <h1>{post.title}</h1>

   <title>{post.title}</title>

   <meta name="author" content="Josh" />

   <link rel="author" href="https://twitter.com/joshcstory/" />

   <meta name="keywords" content={post.keywords} />

   <p>

    Eee equals em-see-squared...

   </p>

  </article>

 );

}


```


When React renders this component, it will see the `<title>` `<link>` and `<meta>` tags, and automatically hoist them to the `<head>` section of document. By supporting these metadata tags natively, we’re able to ensure they work with client-only apps, streaming SSR, and Server Components.

### Note

#### You may still want a Metadata library [](#you-may-still-want-a-metadata-library "Link for You may still want a Metadata library ")

For simple use cases, rendering Document Metadata as tags may be suitable, but libraries can offer more powerful features like overriding generic metadata with specific metadata based on the current route. These features make it easier for frameworks and libraries like `react-helmet`[](https://github.com/nfl/react-helmet) to support metadata tags, rather than replace them.

For more info, see the docs for `<title>`[](/reference/react-dom/components/title), `<link>`[](/reference/react-dom/components/link), and `<meta>`[](/reference/react-dom/components/meta).

### Support for stylesheets [](#support-for-stylesheets "Link for Support for stylesheets ")

Stylesheets, both externally linked (`<link rel="stylesheet" href="...">`) and inline (`<style>...</style>`), require careful positioning in the DOM due to style precedence rules. Building a stylesheet capability that allows for composability within components is hard, so users often end up either loading all of their styles far from the components that may depend on them, or they use a style library which encapsulates this complexity.

In React 19, we’re addressing this complexity and providing even deeper integration into Concurrent Rendering on the Client and Streaming Rendering on the Server with built in support for stylesheets. If you tell React the `precedence` of your stylesheet it will manage the insertion order of the stylesheet in the DOM and ensure that the stylesheet (if external) is loaded before revealing content that depends on those style rules.

```


function ComponentOne() {

 return (

  <Suspense fallback="loading...">

   <link rel="stylesheet" href="foo" precedence="default" />

   <link rel="stylesheet" href="bar" precedence="high" />

   <article class="foo-class bar-class">

    {...}

   </article>

  </Suspense>

 )

}

function ComponentTwo() {

 return (

  <div>

   <p>{...}</p>

   <link rel="stylesheet" href="baz" precedence="default" /> <-- will be inserted between foo & bar

  </div>

 )

}


```


During Server Side Rendering React will include the stylesheet in the `<head>`, which ensures that the browser will not paint until it has loaded. If the stylesheet is discovered late after we’ve already started streaming, React will ensure that the stylesheet is inserted into the `<head>` on the client before revealing the content of a Suspense boundary that depends on that stylesheet.

During Client Side Rendering React will wait for newly rendered stylesheets to load before committing the render. If you render this component from multiple places within your application React will only include the stylesheet once in the document:

```


function App() {

 return <>

  <ComponentOne />

  ...

  <ComponentOne /> // won't lead to a duplicate stylesheet link in the DOM

 </>

}


```


For users accustomed to loading stylesheets manually this is an opportunity to locate those stylesheets alongside the components that depend on them allowing for better local reasoning and an easier time ensuring you only load the stylesheets that you actually depend on.

Style libraries and style integrations with bundlers can also adopt this new capability so even if you don’t directly render your own stylesheets, you can still benefit as your tools are upgraded to use this feature.

For more details, read the docs for `<link>`[](/reference/react-dom/components/link) and `<style>`[](/reference/react-dom/components/style).

### Support for async scripts [](#support-for-async-scripts "Link for Support for async scripts ")

In HTML normal scripts (`<script src="...">`) and deferred scripts (`<script defer="" src="...">`) load in document order which makes rendering these kinds of scripts deep within your component tree challenging. Async scripts (`<script async="" src="...">`) however will load in arbitrary order.

In React 19 we’ve included better support for async scripts by allowing you to render them anywhere in your component tree, inside the components that actually depend on the script, without having to manage relocating and deduplicating script instances.

```


function MyComponent() {

 return (

  <div>

   <script async={true} src="..." />

   Hello World

  </div>

 )

}

function App() {

 <html>

  <body>

   <MyComponent>

   ...

   <MyComponent> // won't lead to duplicate script in the DOM

  </body>

 </html>

}


```


In all rendering environments, async scripts will be deduplicated so that React will only load and execute the script once even if it is rendered by multiple different components.

In Server Side Rendering, async scripts will be included in the `<head>` and prioritized behind more critical resources that block paint such as stylesheets, fonts, and image preloads.

For more details, read the docs for `<script>`[](/reference/react-dom/components/script).

### Support for preloading resources [](#support-for-preloading-resources "Link for Support for preloading resources ")

During initial document load and on client side updates, telling the Browser about resources that it will likely need to load as early as possible can have a dramatic effect on page performance.

React 19 includes a number of new APIs for loading and preloading Browser resources to make it as easy as possible to build great experiences that aren’t held back by inefficient resource loading.

```


import { prefetchDNS, preconnect, preload, preinit } from 'react-dom'

function MyComponent() {

 preinit('https://.../path/to/some/script.js', {as: 'script' }) // loads and executes this script eagerly

 preload('https://.../path/to/font.woff', { as: 'font' }) // preloads this font

 preload('https://.../path/to/stylesheet.css', { as: 'style' }) // preloads this stylesheet

 prefetchDNS('https://...') // when you may not actually request anything from this host

 preconnect('https://...') // when you will request something but aren't sure what

}


```


```


<!-- the above would result in the following DOM/HTML -->

<html>

 <head>

  <!-- links/scripts are prioritized by their utility to early loading, not call order -->

  <link rel="prefetch-dns" href="https://...">

  <link rel="preconnect" href="https://...">

  <link rel="preload" as="font" href="https://.../path/to/font.woff">

  <link rel="preload" as="style" href="https://.../path/to/stylesheet.css">

  <script async="" src="https://.../path/to/some/script.js"></script>

 </head>

 <body>

  ...

 </body>

</html>


```


These APIs can be used to optimize initial page loads by moving discovery of additional resources like fonts out of stylesheet loading. They can also make client updates faster by prefetching a list of resources used by an anticipated navigation and then eagerly preloading those resources on click or even on hover.

For more details see [Resource Preloading APIs](/reference/react-dom#resource-preloading-apis).

### Compatibility with third-party scripts and extensions [](#compatibility-with-third-party-scripts-and-extensions "Link for Compatibility with third-party scripts and extensions ")

We’ve improved hydration to account for third-party scripts and browser extensions.

When hydrating, if an element that renders on the client doesn’t match the element found in the HTML from the server, React will force a client re-render to fix up the content. Previously, if an element was inserted by third-party scripts or browser extensions, it would trigger a mismatch error and client render.

In React 19, unexpected tags in the `<head>` and `<body>` will be skipped over, avoiding the mismatch errors. If React needs to re-render the entire document due to an unrelated hydration mismatch, it will leave in place stylesheets inserted by third-party scripts and browser extensions.

### Better error reporting [](#error-handling "Link for Better error reporting ")

We improved error handling in React 19 to remove duplication and provide options for handling caught and uncaught errors. For example, when there’s an error in render caught by an Error Boundary, previously React would throw the error twice (once for the original error, then again after failing to automatically recover), and then call `console.error` with info about where the error occurred.

This resulted in three errors for every caught error:

Console

Uncaught Error: hit at Throws at renderWithHooks …

Uncaught Error: hit <-- Duplicate at Throws at renderWithHooks …

The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary.

In React 19, we log a single error with all the error information included:

Console

Error: hit at Throws at renderWithHooks … The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary. at ErrorBoundary at App

Additionally, we’ve added two new root options to complement `onRecoverableError`:

  * `onCaughtError`: called when React catches an error in an Error Boundary.
  * `onUncaughtError`: called when an error is thrown and not caught by an Error Boundary.
  * `onRecoverableError`: called when an error is thrown and automatically recovered.



For more info and examples, see the docs for `createRoot`[](/reference/react-dom/client/createRoot) and `hydrateRoot`[](/reference/react-dom/client/hydrateRoot).

### Support for Custom Elements [](#support-for-custom-elements "Link for Support for Custom Elements ")

React 19 adds full support for custom elements and passes all tests on [Custom Elements Everywhere](https://custom-elements-everywhere.com/).

In past versions, using Custom Elements in React has been difficult because React treated unrecognized props as attributes rather than properties. In React 19, we’ve added support for properties that works on the client and during SSR with the following strategy:

  * **Server Side Rendering** : props passed to a custom element will render as attributes if their type is a primitive value like `string`, `number`, or the value is `true`. Props with non-primitive types like `object`, `symbol`, `function`, or value `false` will be omitted.
  * **Client Side Rendering** : props that match a property on the Custom Element instance will be assigned as properties, otherwise they will be assigned as attributes.



Thanks to [Joey Arhar](https://github.com/josepharhar) for driving the design and implementation of Custom Element support in React.

#### How to upgrade [](#how-to-upgrade "Link for How to upgrade ")

See the [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide) for step-by-step instructions and a full list of breaking and notable changes.

_Note: this post was originally published 04/25/2024 and has been updated to 12/05/2024 with the stable release._

[ PreviousBlog](/blog)[NextReact Compiler Beta Release and Roadmap](/blog/2024/10/21/react-compiler-beta-release)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React Compiler Beta Release[](#undefined "Link for this heading")

October 21, 2024 by .

The React team is excited to share new updates:

  1. We’re publishing React Compiler Beta today, so that early adopters and library maintainers can try it and provide feedback.
  2. We’re officially supporting React Compiler for apps on React 17+, through an optional `react-compiler-runtime` package.
  3. We’re opening up public membership of the [React Compiler Working Group](https://github.com/reactwg/react-compiler) to prepare the community for gradual adoption of the compiler.



At [React Conf 2024](/blog/2024/05/22/react-conf-2024-recap), we announced the experimental release of React Compiler, a build-time tool that optimizes your React app through automatic memoization. [You can find an introduction to React Compiler here](/learn/react-compiler).

Since the first release, we’ve fixed numerous bugs reported by the React community, received several high quality bug fixes and contributions[1](#user-content-fn-1) to the compiler, made the compiler more resilient to the broad diversity of JavaScript patterns, and have continued to roll out the compiler more widely at Meta.

In this post, we want to share what’s next for React Compiler.

## Try React Compiler Beta today [](#try-react-compiler-beta-today "Link for Try React Compiler Beta today ")

At [React India 2024](https://www.youtube.com/watch?v=qd5yk2gxbtg), we shared an update on React Compiler. Today, we are excited to announce a new Beta release of React Compiler and ESLint plugin. New betas are published to npm using the `@beta` tag.

To install React Compiler Beta:

Terminal

Copy

npm install -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta

Or, if you’re using Yarn:

Terminal

Copy

yarn add -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta

You can watch talk at React India here:

## We recommend everyone use the React Compiler linter today [](#we-recommend-everyone-use-the-react-compiler-linter-today "Link for We recommend everyone use the React Compiler linter today ")

React Compiler’s ESLint plugin helps developers proactively identify and correct [Rules of React](/reference/rules) violations. **We strongly recommend everyone use the linter today**. The linter does not require that you have the compiler installed, so you can use it independently, even if you are not ready to try out the compiler.

To install the linter only:

Terminal

Copy

npm install -D eslint-plugin-react-compiler@beta

Or, if you’re using Yarn:

Terminal

Copy

yarn add -D eslint-plugin-react-compiler@beta

After installation you can enable the linter by [adding it to your ESLint config](/learn/react-compiler#installing-eslint-plugin-react-compiler). Using the linter helps identify Rules of React breakages, making it easier to adopt the compiler when it’s fully released.

## Backwards Compatibility [](#backwards-compatibility "Link for Backwards Compatibility ")

React Compiler produces code that depends on runtime APIs added in React 19, but we’ve since added support for the compiler to also work with React 17 and 18. If you are not on React 19 yet, in the Beta release you can now try out React Compiler by specifying a minimum `target` in your compiler config, and adding `react-compiler-runtime` as a dependency. [You can find docs on this here](/learn/react-compiler#using-react-compiler-with-react-17-or-18).

## Using React Compiler in libraries [](#using-react-compiler-in-libraries "Link for Using React Compiler in libraries ")

Our initial release was focused on identifying major issues with using the compiler in applications. We’ve gotten great feedback and have substantially improved the compiler since then. We’re now ready for broad feedback from the community, and for library authors to try out the compiler to improve performance and the developer experience of maintaining your library.

React Compiler can also be used to compile libraries. Because React Compiler needs to run on the original source code prior to any code transformations, it is not possible for an application’s build pipeline to compile the libraries they use. Hence, our recommendation is for library maintainers to independently compile and test their libraries with the compiler, and ship compiled code to npm.

Because your code is pre-compiled, users of your library will not need to have the compiler enabled in order to benefit from the automatic memoization applied to your library. If your library targets apps not yet on React 19, specify a minimum `target` and add `react-compiler-runtime` as a direct dependency. The runtime package will use the correct implementation of APIs depending on the application’s version, and polyfill the missing APIs if necessary.

[You can find more docs on this here.](/learn/react-compiler#using-the-compiler-on-libraries)

## Opening up React Compiler Working Group to everyone [](#opening-up-react-compiler-working-group-to-everyone "Link for Opening up React Compiler Working Group to everyone ")

We previously announced the invite-only [React Compiler Working Group](https://github.com/reactwg/react-compiler) at React Conf to provide feedback, ask questions, and collaborate on the compiler’s experimental release.

From today, together with the Beta release of React Compiler, we are opening up Working Group membership to everyone. The goal of the React Compiler Working Group is to prepare the ecosystem for a smooth, gradual adoption of React Compiler by existing applications and libraries. Please continue to file bug reports in the [React repo](https://github.com/facebook/react), but please leave feedback, ask questions, or share ideas in the [Working Group discussion forum](https://github.com/reactwg/react-compiler/discussions).

The core team will also use the discussions repo to share our research findings. As the Stable Release gets closer, any important information will also be posted on this forum.

## React Compiler at Meta [](#react-compiler-at-meta "Link for React Compiler at Meta ")

At [React Conf](/blog/2024/05/22/react-conf-2024-recap), we shared that our rollout of the compiler on Quest Store and Instagram were successful. Since then, we’ve deployed React Compiler across several more major web apps at Meta, including and [Threads](https://www.threads.net). That means if you’ve used any of these apps recently, you may have had your experience powered by the compiler. We were able to onboard these apps onto the compiler with few code changes required, in a monorepo with more than 100,000 React components.

We’ve seen notable performance improvements across all of these apps. As we’ve rolled out, we’re continuing to see results on the order of [the wins we shared previously at ReactConf](https://youtu.be/lyEKhv8-3n0?t=3223). These apps have already been heavily hand tuned and optimized by Meta engineers and React experts over the years, so even improvements on the order of a few percent are a huge win for us.

We also expected developer productivity wins from React Compiler. To measure this, we collaborated with our data science partners at Meta[2](#user-content-fn-2) to conduct a thorough statistical analysis of the impact of manual memoization on productivity. Before rolling out the compiler at Meta, we discovered that only about 8% of React pull requests used manual memoization and that these pull requests took 31-46% longer to author[3](#user-content-fn-3). This confirmed our intuition that manual memoization introduces cognitive overhead, and we anticipate that React Compiler will lead to more efficient code authoring and review. Notably, React Compiler also ensures that _all_ code is memoized by default, not just the (in our case) 8% where developers explicitly apply memoization.

## Roadmap to Stable [](#roadmap-to-stable "Link for Roadmap to Stable ")

_This is not a final roadmap, and is subject to change._

We intend to ship a Release Candidate of the compiler in the near future following the Beta release, when the majority of apps and libraries that follow the Rules of React have been proven to work well with the compiler. After a period of final feedback from the community, we plan on a Stable Release for the compiler. The Stable Release will mark the beginning of a new foundation for React, and all apps and libraries will be strongly recommended to use the compiler and ESLint plugin.

  * ✅ Experimental: Released at React Conf 2024, primarily for feedback from early adopters.
  * ✅ Public Beta: Available today, for feedback from the wider community.
  * 🚧 Release Candidate (RC): React Compiler works for the majority of rule-following apps and libraries without issue.
  * 🚧 General Availability: After final feedback period from the community.



These releases also include the compiler’s ESLint plugin, which surfaces diagnostics statically analyzed by the compiler. We plan to combine the existing eslint-plugin-react-hooks plugin with the compiler’s ESLint plugin, so only one plugin needs to be installed.

Post-Stable, we plan to add more compiler optimizations and improvements. This includes both continual improvements to automatic memoization, and new optimizations altogether, with minimal to no change of product code. Upgrading to each new release of the compiler is aimed to be straightforward, and each upgrade will continue to improve performance and add better handling of diverse JavaScript and React patterns.

Throughout this process, we also plan to prototype an IDE extension for React. It is still very early in research, so we expect to be able to share more of our findings with you in a future React Labs blog post.

Thanks to , , , [Alex Taylor](https://github.com/alexmckenley), , and for reviewing and editing this post.

## Footnotes[](#footnote-label "Link for Footnotes")

  1. Thanks [@nikeee](https://github.com/facebook/react/pulls?q=is%3Apr+author%3Anikeee), [@henryqdineen](https://github.com/facebook/react/pulls?q=is%3Apr+author%3Ahenryqdineen), [@TrickyPi](https://github.com/facebook/react/pulls?q=is%3Apr+author%3ATrickyPi), and several others for their contributions to the compiler. [↩](#user-content-fnref-1)

  2. Thanks for leading this study on React Compiler at Meta, and for reviewing this post. [↩](#user-content-fnref-2)

  3. After controlling on author tenure, diff length/complexity, and other potential confounding factors. [↩](#user-content-fnref-3)




[PreviousReact 19](/blog/2024/12/05/react-19)[NextReact Conf 2024 Recap](/blog/2024/05/22/react-conf-2024-recap)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React Conf 2024 Recap[](#undefined "Link for this heading")

May 22, 2024 by .

Last week we hosted React Conf 2024, a two-day conference in Henderson, Nevada where 700+ attendees gathered in-person to discuss the latest in UI engineering. This was our first in-person conference since 2019, and we were thrilled to be able to bring the community together again.

At React Conf 2024, we announced the [React 19 RC](/blog/2024/12/05/react-19), the [React Native New Architecture Beta](https://github.com/reactwg/react-native-new-architecture/discussions/189), and an experimental release of the [React Compiler](/learn/react-compiler). The community also took the stage to announce [React Router v7](https://remix.run/blog/merging-remix-and-react-router), [Universal Server Components](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=20765s) in Expo Router, React Server Components in [RedwoodJS](https://redwoodjs.com/blog/rsc-now-in-redwoodjs), and much more.

The entire [day 1](https://www.youtube.com/watch?v=T8TZQ6k4SLE) and [day 2](https://www.youtube.com/watch?v=0ckOUBiuxVY) streams are available online. In this post, we’ll summarize the talks and announcements from the event.

## Day 1 [](#day-1 "Link for Day 1 ")

_[Watch the full day 1 stream here.](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=973s)_

To kick off day 1, Meta CTO [Andrew “Boz” Bosworth](https://www.threads.net/@boztank) shared a welcome message followed by an introduction by , who manages the React Org at Meta, and our MC .

In the day 1 keynote, shared our goals and vision for React to make it easy for anyone to build great user experiences. followed with a State of React, where she shared that React was downloaded over 1 billion times in 2023, and that 37% of new developers learn to program with React. Finally, she highlighted the work of the React community to make React, React.

For more, check out these talks from the community later in the conference:

  * [Vanilla React](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=5542s) by 
  * [React Rhythm & Blues](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=12728s) by 
  * [RedwoodJS, now with React Server Components](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=26815s) by 
  * [Introducing Universal React Server Components in Expo Router](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=20765s) by 



Next in the keynote, and shared new features coming in React 19, and announced the React 19 RC which is ready for testing in production. Check out all the features in the [React 19 release post](/blog/2024/12/05/react-19), and see these talks for deep dives on the new features:

  * [What’s new in React 19](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=8880s) by 
  * [React Unpacked: A Roadmap to React 19](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=10112s) by 
  * [React 19 Deep Dive: Coordinating HTML](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=24916s) by 
  * [Enhancing Forms with React Server Components](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=25280s) by 
  * [React for Two Computers](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=18825s) by 
  * [And Now You Understand React Server Components](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=11256s) by 



Finally, we ended the keynote with , , and announcing that the React Compiler is now [Open Source](https://github.com/facebook/react/pull/29061), and sharing an experimental version of the React Compiler to try out.

For more information on using the Compiler and how it works, check out [the docs](/learn/react-compiler) and these talks:

  * [Forget About Memo](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=12020s) by 
  * [React Compiler Deep Dive](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=9313s) by and 



Watch the full day 1 keynote here:

## Day 2 [](#day-2 "Link for Day 2 ")

_[Watch the full day 2 stream here.](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=1720s)_

To kick off day 2, shared a welcome message, followed by a Thank You from and an introduction by our Chief Vibes Officer .

In the day 2 keynote, shared the State of React Native, including 78 million downloads in 2023. He also highlighted apps using React Native including 2000+ screens used inside of Meta; the product details page in Facebook Marketplace, which is visited more than 2 billion times per day; and part of the Microsoft Windows Start Menu and some features in almost every Microsoft Office product across mobile and desktop.

Nicola also highlighted all the work the community does to support React Native including libraries, frameworks, and multiple platforms. For more, check out these talks from the community:

  * [Extending React Native beyond Mobile and Desktop Apps](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=5798s) by and 
  * [Spatial computing with React](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=22525s) by 



continued the day 2 keynote by announcing that the React Native New Architecture is now in Beta and ready for apps to adopt in production. He shared new features and improvements in the new architecture, and shared the roadmap for the future of React Native. For more check out:

  * [Cross Platform React](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=26569s) by [Olga Zinoveva](https://github.com/SlyCaptainFlint) and 



Next in the keynote, Nicola announced that we are now recommending starting with a framework like Expo for all new apps created with React Native. With the change, he also announced a new React Native homepage and new Getting Started docs. You can view the new Getting Started guide in the [React Native docs](https://reactnative.dev/docs/next/environment-setup).

Finally, to end the keynote, shared the latest features and improvements in Expo, and how to get started developing with React Native using Expo.

Watch the full day 2 keynote here:

## Q&A [](#q-and-a "Link for Q&A ")

The React and React Native teams also ended each day with a Q&A session:

  * [React Q&A](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=27518s) hosted by 
  * [React Native Q&A](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=27935s) hosted by 



## And more… [](#and-more "Link for And more… ")

We also heard talks on accessibility, error reporting, css, and more:

  * [Demystifying accessibility in React apps](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=20655s) by 
  * [Pigment CSS, CSS in the server component age](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=21696s) by 
  * [Real-time React Server Components](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=24070s) by 
  * [Let’s break React Rules](https://www.youtube.com/watch?v=T8TZQ6k4SLE&t=25862s) by 
  * [Solve 100% of your errors](https://www.youtube.com/watch?v=0ckOUBiuxVY&t=19881s) by [Ryan Albrecht](https://github.com/ryan953)



## Thank you [](#thank-you "Link for Thank you ")

Thank you to all the staff, speakers, and participants who made React Conf 2024 possible. There are too many to list, but we want to thank a few in particular.

Thank you to , the team at [Callstack](https://www.callstack.com/), and our React Team Developer Advocate for helping to plan the entire event; and to [Sunny Leggett](https://zeroslopeevents.com/about) and everyone from [Zero Slope](https://zeroslopeevents.com) for helping to organize the event.

Thank you for being our MC and Chief Vibes Officer; and to and for hosting the Q&A sessions.

Thank you and for welcoming us each day and providing direction on structure and content; and to for joining us with a special message during the after-party.

Thank you [Ricky Hanlon](https://www.youtube.com/watch?v=FxTZL2U-uKg&t=1263s) for providing detailed feedback on talks, working on slide designs, and generally filling in the gaps to sweat the details.

Thank you [Callstack](https://www.callstack.com/) for building the conference website; and to and the [Expo](https://expo.dev/) team for building the conference mobile app.

Thank you to all the sponsors who made the event possible: [Remix](https://remix.run/), [Amazon](https://developer.amazon.com/apps-and-games?cmp=US_2024_05_3P_React-Conf-2024&ch=prtnr&chlast=prtnr&pub=ref&publast=ref&type=org&typelast=org), [MUI](https://mui.com/), [Sentry](https://sentry.io/for/react/?utm_source=sponsored-conf&utm_medium=sponsored-event&utm_campaign=frontend-fy25q2-evergreen&utm_content=logo-reactconf2024-learnmore), [Abbott](https://www.jobs.abbott/software), [Expo](https://expo.dev/), [RedwoodJS](https://redwoodjs.com/), and [Vercel](https://vercel.com).

Thank you to the AV Team for the visuals, stage, and sound; and to the Westin Hotel for hosting us.

Thank you to all the speakers who shared their knowledge and experiences with the community.

Finally, thank you to everyone who attended in person and online to show what makes React, React. React is more than a library, it is a community, and it was inspiring to see everyone come together to share and learn together.

See you next time!

[PreviousReact Compiler Beta Release and Roadmap](/blog/2024/10/21/react-compiler-beta-release)[NextReact 19 RC](/blog/2024/04/25/react-19)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

[Blog](/blog)

# React v19[](#undefined "Link for this heading")

December 05, 2024 by [The React Team](/community/team)

### Note

### React 19 is now stable! [](#react-19-is-now-stable "Link for React 19 is now stable! ")

Additions since this post was originally shared with the React 19 RC in April:

  * **Pre-warming for suspended trees** : see [Improvements to Suspense](/blog/2024/04/25/react-19-upgrade-guide#improvements-to-suspense).
  * **React DOM static APIs** : see [New React DOM Static APIs](#new-react-dom-static-apis).



_The date for this post has been updated to reflect the stable release date._

React v19 is now available on npm!

In our [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide), we shared step-by-step instructions for upgrading your app to React 19. In this post, we’ll give an overview of the new features in React 19, and how you can adopt them.

  * [What’s new in React 19](#whats-new-in-react-19)
  * [Improvements in React 19](#improvements-in-react-19)
  * [How to upgrade](#how-to-upgrade)



For a list of breaking changes, see the [Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide).

## What’s new in React 19 [](#whats-new-in-react-19 "Link for What’s new in React 19 ")

### Actions [](#actions "Link for Actions ")

A common use case in React apps is to perform a data mutation and then update state in response. For example, when a user submits a form to change their name, you will make an API request, and then handle the response. In the past, you would need to handle pending states, errors, optimistic updates, and sequential requests manually.

For example, you could handle the pending and error state in `useState`:

```


// Before Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, setIsPending] = useState(false);

 const handleSubmit = async () => {

  setIsPending(true);

  const error = await updateName(name);

  setIsPending(false);

  if (error) {

   setError(error);

   return;

  } 

  redirect("/path");

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


In React 19, we’re adding support for using async functions in transitions to handle pending states, errors, forms, and optimistic updates automatically.

For example, you can use `useTransition` to handle the pending state for you:

```


// Using pending state from Actions

function UpdateName({}) {

 const [name, setName] = useState("");

 const [error, setError] = useState(null);

 const [isPending, startTransition] = useTransition();

 const handleSubmit = () => {

  startTransition(async () => {

   const error = await updateName(name);

   if (error) {

    setError(error);

    return;

   } 

   redirect("/path");

  })

 };

 return (

  <div>

   <input value={name} onChange={(event) => setName(event.target.value)} />

   <button onClick={handleSubmit} disabled={isPending}>

    Update

   </button>

   {error && <p>{error}</p>}

  </div>

 );

}


```


The async transition will immediately set the `isPending` state to true, make the async request(s), and switch `isPending` to false after any transitions. This allows you to keep the current UI responsive and interactive while the data is changing.

### Note

#### By convention, functions that use async transitions are called “Actions”. [](#by-convention-functions-that-use-async-transitions-are-called-actions "Link for By convention, functions that use async transitions are called “Actions”. ")

Actions automatically manage submitting data for you:

  * **Pending state** : Actions provide a pending state that starts at the beginning of a request and automatically resets when the final state update is committed.
  * **Optimistic updates** : Actions support the new `useOptimistic`[](#new-hook-optimistic-updates) hook so you can show users instant feedback while the requests are submitting.
  * **Error handling** : Actions provide error handling so you can display Error Boundaries when a request fails, and revert optimistic updates to their original value automatically.
  * **Forms** : `<form>` elements now support passing functions to the `action` and `formAction` props. Passing functions to the `action` props use Actions by default and reset the form automatically after submission.



Building on top of Actions, React 19 introduces `useOptimistic`[](#new-hook-optimistic-updates) to manage optimistic updates, and a new hook `React.useActionState`[](#new-hook-useactionstate) to handle common cases for Actions. In `react-dom` we’re adding `<form>`[ Actions](#form-actions) to manage forms automatically and `useFormStatus`[](#new-hook-useformstatus) to support the common cases for Actions in forms.

In React 19, the above example can be simplified to:

```


// Using <form> Actions and useActionState

function ChangeName({ name, setName }) {

 const [error, submitAction, isPending] = useActionState(

  async (previousState, formData) => {

   const error = await updateName(formData.get("name"));

   if (error) {

    return error;

   }

   redirect("/path");

   return null;

  },

  null,

 );

 return (

  <form action={submitAction}>

   <input type="text" name="name" />

   <button type="submit" disabled={isPending}>Update</button>

   {error && <p>{error}</p>}

  </form>

 );

}


```


In the next section, we’ll break down each of the new Action features in React 19.

### New hook: `useActionState` [](#new-hook-useactionstate "Link for this heading")

To make the common cases easier for Actions, we’ve added a new hook called `useActionState`:

```


const [error, submitAction, isPending] = useActionState(

 async (previousState, newName) => {

  const error = await updateName(newName);

  if (error) {

   // You can return any result of the action.

   // Here, we return only the error.

   return error;

  }

  // handle success

  return null;

 },

 null,

);


```


`useActionState` accepts a function (the “Action”), and returns a wrapped Action to call. This works because Actions compose. When the wrapped Action is called, `useActionState` will return the last result of the Action as `data`, and the pending state of the Action as `pending`.

### Note

`React.useActionState` was previously called `ReactDOM.useFormState` in the Canary releases, but we’ve renamed it and deprecated `useFormState`.

See [#28491](https://github.com/facebook/react/pull/28491) for more info.

For more information, see the docs for `useActionState`[](/reference/react/useActionState).

### React DOM: `<form>` Actions [](#form-actions "Link for this heading")

Actions are also integrated with React 19’s new `<form>` features for `react-dom`. We’ve added support for passing functions as the `action` and `formAction` props of `<form>`, `<input>`, and `<button>` elements to automatically submit forms with Actions:

```


<form action={actionFunction}>


```


When a `<form>` Action succeeds, React will automatically reset the form for uncontrolled components. If you need to reset the `<form>` manually, you can call the new `requestFormReset` React DOM API.

For more information, see the `react-dom` docs for `<form>`[](/reference/react-dom/components/form), `<input>`[](/reference/react-dom/components/input), and `<button>`.

### React DOM: New hook: `useFormStatus` [](#new-hook-useformstatus "Link for this heading")

In design systems, it’s common to write design components that need access to information about the `<form>` they’re in, without drilling props down to the component. This can be done via Context, but to make the common case easier, we’ve added a new hook `useFormStatus`:

```


import {useFormStatus} from 'react-dom';

function DesignButton() {

 const {pending} = useFormStatus();

 return <button type="submit" disabled={pending} />

}


```


`useFormStatus` reads the status of the parent `<form>` as if the form was a Context provider.

For more information, see the `react-dom` docs for `useFormStatus`[](/reference/react-dom/hooks/useFormStatus).

### New hook: `useOptimistic` [](#new-hook-optimistic-updates "Link for this heading")

Another common UI pattern when performing a data mutation is to show the final state optimistically while the async request is underway. In React 19, we’re adding a new hook called `useOptimistic` to make this easier:

```


function ChangeName({currentName, onUpdateName}) {

 const [optimisticName, setOptimisticName] = useOptimistic(currentName);

 const submitAction = async formData => {

  const newName = formData.get("name");

  setOptimisticName(newName);

  const updatedName = await updateName(newName);

  onUpdateName(updatedName);

 };

 return (

  <form action={submitAction}>

   <p>Your name is: {optimisticName}</p>

   <p>

    <label>Change Name:</label>

    <input

     type="text"

     name="name"

     disabled={currentName !== optimisticName}

    />

   </p>

  </form>

 );

}


```


The `useOptimistic` hook will immediately render the `optimisticName` while the `updateName` request is in progress. When the update finishes or errors, React will automatically switch back to the `currentName` value.

For more information, see the docs for `useOptimistic`[](/reference/react/useOptimistic).

### New API: `use` [](#new-feature-use "Link for this heading")

In React 19 we’re introducing a new API to read resources in render: `use`.

For example, you can read a promise with `use`, and React will Suspend until the promise resolves:

```


import {use} from 'react';

function Comments({commentsPromise}) {

 // `use` will suspend until the promise resolves.

 const comments = use(commentsPromise);

 return comments.map(comment => <p key={comment.id}>{comment}</p>);

}

function Page({commentsPromise}) {

 // When `use` suspends in Comments,

 // this Suspense boundary will be shown.

 return (

  <Suspense fallback={<div>Loading...</div>}>

   <Comments commentsPromise={commentsPromise} />

  </Suspense>

 )

}


```


### Note

#### `use` does not support promises created in render. [](#use-does-not-support-promises-created-in-render "Link for this heading")

If you try to pass a promise created in render to `use`, React will warn:

Console

A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework.

To fix, you need to pass a promise from a suspense powered library or framework that supports caching for promises. In the future we plan to ship features to make it easier to cache promises in render.

You can also read context with `use`, allowing you to read Context conditionally such as after early returns:

```


import {use} from 'react';

import ThemeContext from './ThemeContext'

function Heading({children}) {

 if (children == null) {

  return null;

 }

 // This would not work with useContext

 // because of the early return.

 const theme = use(ThemeContext);

 return (

  <h1 style={{color: theme.color}}>

   {children}

  </h1>

 );

}


```


The `use` API can only be called in render, similar to hooks. Unlike hooks, `use` can be called conditionally. In the future we plan to support more ways to consume resources in render with `use`.

For more information, see the docs for `use`[](/reference/react/use).

## New React DOM Static APIs [](#new-react-dom-static-apis "Link for New React DOM Static APIs ")

We’ve added two new APIs to `react-dom/static` for static site generation:

  * `prerender`[](/reference/react-dom/static/prerender)
  * `prerenderToNodeStream`[](/reference/react-dom/static/prerenderToNodeStream)



These new APIs improve on `renderToString` by waiting for data to load for static HTML generation. They are designed to work with streaming environments like Node.js Streams and Web Streams. For example, in a Web Stream environment, you can prerender a React tree to static HTML with `prerender`:

```


import { prerender } from 'react-dom/static';

async function handler(request) {

 const {prelude} = await prerender(<App />, {

  bootstrapScripts: ['/main.js']

 });

 return new Response(prelude, {

  headers: { 'content-type': 'text/html' },

 });

}


```


Prerender APIs will wait for all data to load before returning the static HTML stream. Streams can be converted to strings, or sent with a streaming response. They do not support streaming content as it loads, which is supported by the existing [React DOM server rendering APIs](/reference/react-dom/server).

For more information, see [React DOM Static APIs](/reference/react-dom/static).

## React Server Components [](#react-server-components "Link for React Server Components ")

### Server Components [](#server-components "Link for Server Components ")

Server Components are a new option that allows rendering components ahead of time, before bundling, in an environment separate from your client application or SSR server. This separate environment is the “server” in React Server Components. Server Components can run once at build time on your CI server, or they can be run for each request using a web server.

React 19 includes all of the React Server Components features included from the Canary channel. This means libraries that ship with Server Components can now target React 19 as a peer dependency with a `react-server` [export condition](https://github.com/reactjs/rfcs/blob/main/text/0227-server-module-conventions.md#react-server-conditional-exports) for use in frameworks that support the [Full-stack React Architecture](/learn/start-a-new-react-project#which-features-make-up-the-react-teams-full-stack-architecture-vision).

### Note

#### How do I build support for Server Components? [](#how-do-i-build-support-for-server-components "Link for How do I build support for Server Components? ")

While React Server Components in React 19 are stable and will not break between minor versions, the underlying APIs used to implement a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x.

To support React Server Components as a bundler or framework, we recommend pinning to a specific React version, or using the Canary release. We will continue working with bundlers and frameworks to stabilize the APIs used to implement React Server Components in the future.

For more, see the docs for [React Server Components](/reference/rsc/server-components).

### Server Actions [](#server-actions "Link for Server Actions ")

Server Actions allow Client Components to call async functions executed on the server.

When a Server Action is defined with the `"use server"` directive, your framework will automatically create a reference to the server function, and pass that reference to the Client Component. When that function is called on the client, React will send a request to the server to execute the function, and return the result.

### Note

#### There is no directive for Server Components. [](#there-is-no-directive-for-server-components "Link for There is no directive for Server Components. ")

A common misunderstanding is that Server Components are denoted by `"use server"`, but there is no directive for Server Components. The `"use server"` directive is used for Server Actions.

For more info, see the docs for [Directives](/reference/rsc/directives).

Server Actions can be created in Server Components and passed as props to Client Components, or they can be imported and used in Client Components.

For more, see the docs for [React Server Actions](/reference/rsc/server-actions).

## Improvements in React 19 [](#improvements-in-react-19 "Link for Improvements in React 19 ")

### `ref` as a prop [](#ref-as-a-prop "Link for this heading")

Starting in React 19, you can now access `ref` as a prop for function components:

```


function MyInput({placeholder, ref}) {

 return <input placeholder={placeholder} ref={ref} />

}

//...

<MyInput ref={ref} />


```


New function components will no longer need `forwardRef`, and we will be publishing a codemod to automatically update your components to use the new `ref` prop. In future versions we will deprecate and remove `forwardRef`.

### Note

`refs` passed to classes are not passed as props since they reference the component instance.

### Diffs for hydration errors [](#diffs-for-hydration-errors "Link for Diffs for hydration errors ")

We also improved error reporting for hydration errors in `react-dom`. For example, instead of logging multiple errors in DEV without any information about the mismatch:

Console

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Warning: Text content did not match. Server: “Server” Client: “Client” at span at App

Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.

Uncaught Error: Text content does not match server-rendered HTML. at checkForUnmatchedText …

We now log a single message with a diff of the mismatch:

Console

Uncaught Error: Hydration failed because the server rendered HTML didn’t match the client. As a result this tree will be regenerated on the client. This can happen if an SSR-ed Client Component used: - A server/client branch `if (typeof window !== 'undefined')`. - Variable input such as `Date.now()` or `Math.random()` which changes each time it’s called. - Date formatting in a user’s locale which doesn’t match the server. - External changing data without sending a snapshot of it along with the HTML. - Invalid HTML tag nesting. It can also happen if the client has a browser extension installed which messes with the HTML before React loaded. <https://react.dev/link/hydration-mismatch> <App> <span> + Client - Server at throwOnHydrationMismatch …

### `<Context>` as a provider [](#context-as-a-provider "Link for this heading")

In React 19, you can render `<Context>` as a provider instead of `<Context.Provider>`:

```


const ThemeContext = createContext('');

function App({children}) {

 return (

  <ThemeContext value="dark">

   {children}

  </ThemeContext>

 ); 

}


```


New Context providers can use `<Context>` and we will be publishing a codemod to convert existing providers. In future versions we will deprecate `<Context.Provider>`.

### Cleanup functions for refs [](#cleanup-functions-for-refs "Link for Cleanup functions for refs ")

We now support returning a cleanup function from `ref` callbacks:

```


<input

 ref={(ref) => {

  // ref created

  // NEW: return a cleanup function to reset

  // the ref when element is removed from DOM.

  return () => {

   // ref cleanup

  };

 }}

/>


```


When the component unmounts, React will call the cleanup function returned from the `ref` callback. This works for DOM refs, refs to class components, and `useImperativeHandle`.

### Note

Previously, React would call `ref` functions with `null` when unmounting the component. If your `ref` returns a cleanup function, React will now skip this step.

In future versions, we will deprecate calling refs with `null` when unmounting components.

Due to the introduction of ref cleanup functions, returning anything else from a `ref` callback will now be rejected by TypeScript. The fix is usually to stop using implicit returns, for example:

```


- <div ref={current => (instance = current)} />

+ <div ref={current => {instance = current}} />


```


The original code returned the instance of the `HTMLDivElement` and TypeScript wouldn’t know if this was _supposed_ to be a cleanup function or if you didn’t want to return a cleanup function.

You can codemod this pattern with `no-implicit-ref-callback-return`[](https://github.com/eps1lon/types-react-codemod/#no-implicit-ref-callback-return).

### `useDeferredValue` initial value [](#use-deferred-value-initial-value "Link for this heading")

We’ve added an `initialValue` option to `useDeferredValue`:

```


function Search({deferredValue}) {

 // On initial render the value is ''.

 // Then a re-render is scheduled with the deferredValue.

 const value = useDeferredValue(deferredValue, '');

 return (

  <Results query={value} />

 );

}


```


When initialValue is provided, `useDeferredValue` will return it as `value` for the initial render of the component, and schedules a re-render in the background with the deferredValue returned.

For more, see `useDeferredValue`[](/reference/react/useDeferredValue).

### Support for Document Metadata [](#support-for-metadata-tags "Link for Support for Document Metadata ")

In HTML, document metadata tags like `<title>`, `<link>`, and `<meta>` are reserved for placement in the `<head>` section of the document. In React, the component that decides what metadata is appropriate for the app may be very far from the place where you render the `<head>` or React does not render the `<head>` at all. In the past, these elements would need to be inserted manually in an effect, or by libraries like `react-helmet`[](https://github.com/nfl/react-helmet), and required careful handling when server rendering a React application.

In React 19, we’re adding support for rendering document metadata tags in components natively:

```


function BlogPost({post}) {

 return (

  <article>

   <h1>{post.title}</h1>

   <title>{post.title}</title>

   <meta name="author" content="Josh" />

   <link rel="author" href="https://twitter.com/joshcstory/" />

   <meta name="keywords" content={post.keywords} />

   <p>

    Eee equals em-see-squared...

   </p>

  </article>

 );

}


```


When React renders this component, it will see the `<title>` `<link>` and `<meta>` tags, and automatically hoist them to the `<head>` section of document. By supporting these metadata tags natively, we’re able to ensure they work with client-only apps, streaming SSR, and Server Components.

### Note

#### You may still want a Metadata library [](#you-may-still-want-a-metadata-library "Link for You may still want a Metadata library ")

For simple use cases, rendering Document Metadata as tags may be suitable, but libraries can offer more powerful features like overriding generic metadata with specific metadata based on the current route. These features make it easier for frameworks and libraries like `react-helmet`[](https://github.com/nfl/react-helmet) to support metadata tags, rather than replace them.

For more info, see the docs for `<title>`[](/reference/react-dom/components/title), `<link>`[](/reference/react-dom/components/link), and `<meta>`[](/reference/react-dom/components/meta).

### Support for stylesheets [](#support-for-stylesheets "Link for Support for stylesheets ")

Stylesheets, both externally linked (`<link rel="stylesheet" href="...">`) and inline (`<style>...</style>`), require careful positioning in the DOM due to style precedence rules. Building a stylesheet capability that allows for composability within components is hard, so users often end up either loading all of their styles far from the components that may depend on them, or they use a style library which encapsulates this complexity.

In React 19, we’re addressing this complexity and providing even deeper integration into Concurrent Rendering on the Client and Streaming Rendering on the Server with built in support for stylesheets. If you tell React the `precedence` of your stylesheet it will manage the insertion order of the stylesheet in the DOM and ensure that the stylesheet (if external) is loaded before revealing content that depends on those style rules.

```


function ComponentOne() {

 return (

  <Suspense fallback="loading...">

   <link rel="stylesheet" href="foo" precedence="default" />

   <link rel="stylesheet" href="bar" precedence="high" />

   <article class="foo-class bar-class">

    {...}

   </article>

  </Suspense>

 )

}

function ComponentTwo() {

 return (

  <div>

   <p>{...}</p>

   <link rel="stylesheet" href="baz" precedence="default" /> <-- will be inserted between foo & bar

  </div>

 )

}


```


During Server Side Rendering React will include the stylesheet in the `<head>`, which ensures that the browser will not paint until it has loaded. If the stylesheet is discovered late after we’ve already started streaming, React will ensure that the stylesheet is inserted into the `<head>` on the client before revealing the content of a Suspense boundary that depends on that stylesheet.

During Client Side Rendering React will wait for newly rendered stylesheets to load before committing the render. If you render this component from multiple places within your application React will only include the stylesheet once in the document:

```


function App() {

 return <>

  <ComponentOne />

  ...

  <ComponentOne /> // won't lead to a duplicate stylesheet link in the DOM

 </>

}


```


For users accustomed to loading stylesheets manually this is an opportunity to locate those stylesheets alongside the components that depend on them allowing for better local reasoning and an easier time ensuring you only load the stylesheets that you actually depend on.

Style libraries and style integrations with bundlers can also adopt this new capability so even if you don’t directly render your own stylesheets, you can still benefit as your tools are upgraded to use this feature.

For more details, read the docs for `<link>`[](/reference/react-dom/components/link) and `<style>`[](/reference/react-dom/components/style).

### Support for async scripts [](#support-for-async-scripts "Link for Support for async scripts ")

In HTML normal scripts (`<script src="...">`) and deferred scripts (`<script defer="" src="...">`) load in document order which makes rendering these kinds of scripts deep within your component tree challenging. Async scripts (`<script async="" src="...">`) however will load in arbitrary order.

In React 19 we’ve included better support for async scripts by allowing you to render them anywhere in your component tree, inside the components that actually depend on the script, without having to manage relocating and deduplicating script instances.

```


function MyComponent() {

 return (

  <div>

   <script async={true} src="..." />

   Hello World

  </div>

 )

}

function App() {

 <html>

  <body>

   <MyComponent>

   ...

   <MyComponent> // won't lead to duplicate script in the DOM

  </body>

 </html>

}


```


In all rendering environments, async scripts will be deduplicated so that React will only load and execute the script once even if it is rendered by multiple different components.

In Server Side Rendering, async scripts will be included in the `<head>` and prioritized behind more critical resources that block paint such as stylesheets, fonts, and image preloads.

For more details, read the docs for `<script>`[](/reference/react-dom/components/script).

### Support for preloading resources [](#support-for-preloading-resources "Link for Support for preloading resources ")

During initial document load and on client side updates, telling the Browser about resources that it will likely need to load as early as possible can have a dramatic effect on page performance.

React 19 includes a number of new APIs for loading and preloading Browser resources to make it as easy as possible to build great experiences that aren’t held back by inefficient resource loading.

```


import { prefetchDNS, preconnect, preload, preinit } from 'react-dom'

function MyComponent() {

 preinit('https://.../path/to/some/script.js', {as: 'script' }) // loads and executes this script eagerly

 preload('https://.../path/to/font.woff', { as: 'font' }) // preloads this font

 preload('https://.../path/to/stylesheet.css', { as: 'style' }) // preloads this stylesheet

 prefetchDNS('https://...') // when you may not actually request anything from this host

 preconnect('https://...') // when you will request something but aren't sure what

}


```


```


<!-- the above would result in the following DOM/HTML -->

<html>

 <head>

  <!-- links/scripts are prioritized by their utility to early loading, not call order -->

  <link rel="prefetch-dns" href="https://...">

  <link rel="preconnect" href="https://...">

  <link rel="preload" as="font" href="https://.../path/to/font.woff">

  <link rel="preload" as="style" href="https://.../path/to/stylesheet.css">

  <script async="" src="https://.../path/to/some/script.js"></script>

 </head>

 <body>

  ...

 </body>

</html>


```


These APIs can be used to optimize initial page loads by moving discovery of additional resources like fonts out of stylesheet loading. They can also make client updates faster by prefetching a list of resources used by an anticipated navigation and then eagerly preloading those resources on click or even on hover.

For more details see [Resource Preloading APIs](/reference/react-dom#resource-preloading-apis).

### Compatibility with third-party scripts and extensions [](#compatibility-with-third-party-scripts-and-extensions "Link for Compatibility with third-party scripts and extensions ")

We’ve improved hydration to account for third-party scripts and browser extensions.

When hydrating, if an element that renders on the client doesn’t match the element found in the HTML from the server, React will force a client re-render to fix up the content. Previously, if an element was inserted by third-party scripts or browser extensions, it would trigger a mismatch error and client render.

In React 19, unexpected tags in the `<head>` and `<body>` will be skipped over, avoiding the mismatch errors. If React needs to re-render the entire document due to an unrelated hydration mismatch, it will leave in place stylesheets inserted by third-party scripts and browser extensions.

### Better error reporting [](#error-handling "Link for Better error reporting ")

We improved error handling in React 19 to remove duplication and provide options for handling caught and uncaught errors. For example, when there’s an error in render caught by an Error Boundary, previously React would throw the error twice (once for the original error, then again after failing to automatically recover), and then call `console.error` with info about where the error occurred.

This resulted in three errors for every caught error:

Console

Uncaught Error: hit at Throws at renderWithHooks …

Uncaught Error: hit <-- Duplicate at Throws at renderWithHooks …

The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary.

In React 19, we log a single error with all the error information included:

Console

Error: hit at Throws at renderWithHooks … The above error occurred in the Throws component: at Throws at ErrorBoundary at App React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary. at ErrorBoundary at App

Additionally, we’ve added two new root options to complement `onRecoverableError`:

  * `onCaughtError`: called when React catches an error in an Error Boundary.
  * `onUncaughtError`: called when an error is thrown and not caught by an Error Boundary.
  * `onRecoverableError`: called when an error is thrown and automatically recovered.



For more info and examples, see the docs for `createRoot`[](/reference/react-dom/client/createRoot) and `hydrateRoot`[](/reference/react-dom/client/hydrateRoot).

### Support for Custom Elements [](#support-for-custom-elements "Link for Support for Custom Elements ")

React 19 adds full support for custom elements and passes all tests on [Custom Elements Everywhere](https://custom-elements-everywhere.com/).

In past versions, using Custom Elements in React has been difficult because React treated unrecognized props as attributes rather than properties. In React 19, we’ve added support for properties that works on the client and during SSR with the following strategy:

  * **Server Side Rendering** : props passed to a custom element will render as attributes if their type is a primitive value like `string`, `number`, or the value is `true`. Props with non-primitive types like `object`, `symbol`, `function`, or value `false` will be omitted.
  * **Client Side Rendering** : props that match a property on the Custom Element instance will be assigned as properties, otherwise they will be assigned as attributes.



Thanks to [Joey Arhar](https://github.com/josepharhar) for driving the design and implementation of Custom Element support in React.

#### How to upgrade [](#how-to-upgrade "Link for How to upgrade ")

See the [React 19 Upgrade Guide](/blog/2024/04/25/react-19-upgrade-guide) for step-by-step instructions and a full list of breaking and notable changes.

_Note: this post was originally published 04/25/2024 and has been updated to 12/05/2024 with the stable release._

[ PreviousBlog](/blog)[NextReact Compiler Beta Release and Roadmap](/blog/2024/10/21/react-compiler-beta-release)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)
[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Installation[](#undefined "Link for this heading")

React has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.

### In this chapter

  * [How to start a new React project](/learn/start-a-new-react-project)
  * [How to add React to an existing project](/learn/add-react-to-an-existing-project)
  * [How to set up your editor](/learn/editor-setup)
  * [How to install React Developer Tools](/learn/react-developer-tools)



## Try React [](#try-react "Link for Try React ")

You don’t need to install anything to play with React. Try editing this sandbox!

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

9

1

2

3

4

5

6

7

8

function Greeting({ name }) {

return <h1>Hello, {name}</h1>;

}

export default function App() {

return <Greeting name="world" />

}

You can edit it directly or open it in a new tab by pressing the “Fork” button in the upper right corner.

Most pages in the React documentation contain sandboxes like this. Outside of the React documentation, there are many online sandboxes that support React: for example, [CodeSandbox](https://codesandbox.io/s/new), [StackBlitz](https://stackblitz.com/fork/react), or [CodePen.](https://codepen.io/pen?template=QWYVwWN)

### Try React locally [](#try-react-locally "Link for Try React locally ")

To try React locally on your computer, [download this HTML page.](https://gist.githubusercontent.com/gaearon/0275b1e1518599bbeafcde4722e79ed1/raw/db72dcbf3384ee1708c4a07d3be79860db04bff0/example.html) Open it in your editor and in your browser!

## Start a new React project [](#start-a-new-react-project "Link for Start a new React project ")

If you want to build an app or a website fully with React, [start a new React project.](/learn/start-a-new-react-project)

## Add React to an existing project [](#add-react-to-an-existing-project "Link for Add React to an existing project ")

If want to try using React in your existing app or a website, [add React to an existing project.](/learn/add-react-to-an-existing-project)

## Next steps [](#next-steps "Link for Next steps ")

Head to the [Quick Start](/learn) guide for a tour of the most important React concepts you will encounter every day.

[PreviousThinking in React](/learn/thinking-in-react)[NextStart a New React Project](/learn/start-a-new-react-project)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Try React ](#try-react)
  * [Try React locally ](#try-react-locally)
  * [Start a new React project ](#start-a-new-react-project)
  * [Add React to an existing project ](#add-react-to-an-existing-project)
  * [Next steps ](#next-steps)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Describing the UI[](#undefined "Link for this heading")

React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable _components._ From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.

### In this chapter

  * [How to write your first React component](/learn/your-first-component)
  * [When and how to create multi-component files](/learn/importing-and-exporting-components)
  * [How to add markup to JavaScript with JSX](/learn/writing-markup-with-jsx)
  * [How to use curly braces with JSX to access JavaScript functionality from your components](/learn/javascript-in-jsx-with-curly-braces)
  * [How to configure components with props](/learn/passing-props-to-a-component)
  * [How to conditionally render components](/learn/conditional-rendering)
  * [How to render multiple components at a time](/learn/rendering-lists)
  * [How to avoid confusing bugs by keeping components pure](/learn/keeping-components-pure)
  * [Why understanding your UI as trees is useful](/learn/understanding-your-ui-as-a-tree)



## Your first component [](#your-first-component "Link for Your first component ")

React applications are built from isolated pieces of UI called _components_. A React component is a JavaScript function that you can sprinkle with markup. Components can be as small as a button, or as large as an entire page. Here is a `Gallery` component rendering three `Profile` components:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

99

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

function Profile() {

return (

<img

src="https://i.imgur.com/MK3eW3As.jpg"

alt="Katherine Johnson"

/>

);

}

export default function Gallery() {

return (

<section>

<h1>Amazing scientists</h1>

<Profile />

<Profile />

<Profile />

</section>

);

}

Show more

## Ready to learn this topic?

Read **[Your First Component](/learn/your-first-component)** to learn how to declare and use React components.

[Read More](/learn/your-first-component)

## Importing and exporting components [](#importing-and-exporting-components "Link for Importing and exporting components ")

You can declare many components in one file, but large files can get difficult to navigate. To solve this, you can _export_ a component into its own file, and then _import_ that component from another file:

Gallery.jsProfile.js

Gallery.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import Profile from './Profile.js';
export default function Gallery() {
 return (
  <section>
   <h1>Amazing scientists</h1>
   <Profile />
   <Profile />
   <Profile />
  </section>
 );
}

```


## Ready to learn this topic?

Read **[Importing and Exporting Components](/learn/importing-and-exporting-components)** to learn how to split components into their own files.

[Read More](/learn/importing-and-exporting-components)

## Writing markup with JSX [](#writing-markup-with-jsx "Link for Writing markup with JSX ")

Each React component is a JavaScript function that may contain some markup that React renders into the browser. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information.

If we paste existing HTML markup into a React component, it won’t always work:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
export default function TodoList() {
 return (
  // This doesn't quite work!
  <h1>Hedy Lamarr's Todos</h1>
  <img
   src="https://i.imgur.com/yXOvdOSs.jpg"
   alt="Hedy Lamarr"
   class="photo"
  >
  <ul>
   <li>Invent new traffic lights
   <li>Rehearse a movie scene
   <li>Improve spectrum technology
  </ul>

```


Show more

If you have existing HTML like this, you can fix it using a [converter](https://transform.tools/html-to-jsx):

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
export default function TodoList() {
 return (
  <>
   <h1>Hedy Lamarr's Todos</h1>
   <img
    src="https://i.imgur.com/yXOvdOSs.jpg"
    alt="Hedy Lamarr"
    className="photo"
   />
   <ul>
    <li>Invent new traffic lights</li>
    <li>Rehearse a movie scene</li>
    <li>Improve spectrum technology</li>
   </ul>
  </>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Writing Markup with JSX](/learn/writing-markup-with-jsx)** to learn how to write valid JSX.

[Read More](/learn/writing-markup-with-jsx)

## JavaScript in JSX with curly braces [](#javascript-in-jsx-with-curly-braces "Link for JavaScript in JSX with curly braces ")

JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to “open a window” to JavaScript:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
const person = {
 name: 'Gregorio Y. Zara',
 theme: {
  backgroundColor: 'black',
  color: 'pink'
 }
};
export default function TodoList() {
 return (
  <div style={person.theme}>
   <h1>{person.name}'s Todos</h1>
   <img
    className="avatar"
    src="https://i.imgur.com/7vQD0fPs.jpg"
    alt="Gregorio Y. Zara"
   />
   <ul>
    <li>Improve the videophone</li>
    <li>Prepare aeronautics lectures</li>
    <li>Work on the alcohol-fuelled engine</li>
   </ul>
  </div>
 );
}

```


Show more

## Ready to learn this topic?

Read **[JavaScript in JSX with Curly Braces](/learn/javascript-in-jsx-with-curly-braces)** to learn how to access JavaScript data from JSX.

[Read More](/learn/javascript-in-jsx-with-curly-braces)

## Passing props to a component [](#passing-props-to-a-component "Link for Passing props to a component ")

React components use _props_ to communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, functions, and even JSX!

App.jsutils.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { getImageUrl } from './utils.js'
export default function Profile() {
 return (
  <Card>
   <Avatar
    size={100}
    person={{
     name: 'Katsuko Saruhashi',
     imageId: 'YfeOqp2'
    }}
   />
  </Card>
 );
}
function Avatar({ person, size }) {
 return (
  <img
   className="avatar"
   src={getImageUrl(person)}
   alt={person.name}
   width={size}
   height={size}
  />
 );
}
function Card({ children }) {
 return (
  <div className="card">
   {children}
  </div>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Passing Props to a Component](/learn/passing-props-to-a-component)** to learn how to pass and read props.

[Read More](/learn/passing-props-to-a-component)

## Conditional rendering [](#conditional-rendering "Link for Conditional rendering ")

Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like `if` statements, `&&`, and `? :` operators.

In this example, the JavaScript `&&` operator is used to conditionally render a checkmark:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
function Item({ name, isPacked }) {
 return (
  <li className="item">
   {name} {isPacked && '✅'}
  </li>
 );
}
export default function PackingList() {
 return (
  <section>
   <h1>Sally Ride's Packing List</h1>
   <ul>
    <Item
     isPacked={true}
     name="Space suit"
    />
    <Item
     isPacked={true}
     name="Helmet with a golden leaf"
    />
    <Item
     isPacked={false}
     name="Photo of Tam"
    />
   </ul>
  </section>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Conditional Rendering](/learn/conditional-rendering)** to learn the different ways to render content conditionally.

[Read More](/learn/conditional-rendering)

## Rendering lists [](#rendering-lists "Link for Rendering lists ")

You will often want to display multiple similar components from a collection of data. You can use JavaScript’s `filter()` and `map()` with React to filter and transform your array of data into an array of components.

For each array item, you will need to specify a `key`. Usually, you will want to use an ID from the database as a `key`. Keys let React keep track of each item’s place in the list even if the list changes.

App.jsdata.jsutils.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { people } from './data.js';
import { getImageUrl } from './utils.js';
export default function List() {
 const listItems = people.map(person =>
  <li key={person.id}>
   <img
    src={getImageUrl(person)}
    alt={person.name}
   />
   <p>
    <b>{person.name}:</b>
    {' ' + person.profession + ' '}
    known for {person.accomplishment}
   </p>
  </li>
 );
 return (
  <article>
   <h1>Scientists</h1>
   <ul>{listItems}</ul>
  </article>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Rendering Lists](/learn/rendering-lists)** to learn how to render a list of components, and how to choose a key.

[Read More](/learn/rendering-lists)

## Keeping components pure [](#keeping-components-pure "Link for Keeping components pure ")

Some JavaScript functions are _pure._ A pure function:

  * **Minds its own business.** It does not change any objects or variables that existed before it was called.
  * **Same inputs, same output.** Given the same inputs, a pure function should always return the same result.



By strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. Here is an example of an impure component:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
let guest = 0;
function Cup() {
 // Bad: changing a preexisting variable!
 guest = guest + 1;
 return <h2>Tea cup for guest #{guest}</h2>;
}
export default function TeaSet() {
 return (
  <>
   <Cup />
   <Cup />
   <Cup />
  </>
 );
}

```


Show more

You can make this component pure by passing a prop instead of modifying a preexisting variable:

App.js

App.js

Download Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
function Cup({ guest }) {
 return <h2>Tea cup for guest #{guest}</h2>;
}
export default function TeaSet() {
 return (
  <>
   <Cup guest={1} />
   <Cup guest={2} />
   <Cup guest={3} />
  </>
 );
}

```


## Ready to learn this topic?

Read **[Keeping Components Pure](/learn/keeping-components-pure)** to learn how to write components as pure, predictable functions.

[Read More](/learn/keeping-components-pure)

## Your UI as a tree [](#your-ui-as-a-tree "Link for Your UI as a tree ")

React uses trees to model the relationships between components and modules.

A React render tree is a representation of the parent and child relationship between components.

An example React render tree.

Components near the top of the tree, near the root component, are considered top-level components. Components with no child components are leaf components. This categorization of components is useful for understanding data flow and rendering performance.

Modelling the relationship between JavaScript modules is another useful way to understand your app. We refer to it as a module dependency tree.

An example module dependency tree.

A dependency tree is often used by build tools to bundle all the relevant JavaScript code for the client to download and render. A large bundle size regresses user experience for React apps. Understanding the module dependency tree is helpful to debug such issues.

## Ready to learn this topic?

Read **[Your UI as a Tree](/learn/understanding-your-ui-as-a-tree)** to learn how to create a render and module dependency trees for a React app and how they’re useful mental models for improving user experience and performance.

[Read More](/learn/understanding-your-ui-as-a-tree)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Your First Component](/learn/your-first-component) to start reading this chapter page by page!

Or, if you’re already familiar with these topics, why not read about [Adding Interactivity](/learn/adding-interactivity)?

[NextYour First Component](/learn/your-first-component)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Your first component ](#your-first-component)
  * [Importing and exporting components ](#importing-and-exporting-components)
  * [Writing markup with JSX ](#writing-markup-with-jsx)
  * [JavaScript in JSX with curly braces ](#javascript-in-jsx-with-curly-braces)
  * [Passing props to a component ](#passing-props-to-a-component)
  * [Conditional rendering ](#conditional-rendering)
  * [Rendering lists ](#rendering-lists)
  * [Keeping components pure ](#keeping-components-pure)
  * [Your UI as a tree ](#your-ui-as-a-tree)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Adding Interactivity[](#undefined "Link for this heading")

Some things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is called _state._ You can add state to any component, and update it as needed. In this chapter, you’ll learn how to write components that handle interactions, update their state, and display different output over time.

### In this chapter

  * [How to handle user-initiated events](/learn/responding-to-events)
  * [How to make components “remember” information with state](/learn/state-a-components-memory)
  * [How React updates the UI in two phases](/learn/render-and-commit)
  * [Why state doesn’t update right after you change it](/learn/state-as-a-snapshot)
  * [How to queue multiple state updates](/learn/queueing-a-series-of-state-updates)
  * [How to update an object in state](/learn/updating-objects-in-state)
  * [How to update an array in state](/learn/updating-arrays-in-state)



## Responding to events [](#responding-to-events "Link for Responding to events ")

React lets you add _event handlers_ to your JSX. Event handlers are your own functions that will be triggered in response to user interactions like clicking, hovering, focusing on form inputs, and so on.

Built-in components like `<button>` only support built-in browser events like `onClick`. However, you can also create your own components, and give their event handler props any application-specific names that you like.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
export default function App() {
 return (
  <Toolbar
   onPlayMovie={() => alert('Playing!')}
   onUploadImage={() => alert('Uploading!')}
  />
 );
}
function Toolbar({ onPlayMovie, onUploadImage }) {
 return (
  <div>
   <Button onClick={onPlayMovie}>
    Play Movie
   </Button>
   <Button onClick={onUploadImage}>
    Upload Image
   </Button>
  </div>
 );
}
function Button({ onClick, children }) {
 return (
  <button onClick={onClick}>
   {children}
  </button>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Responding to Events](/learn/responding-to-events)** to learn how to add event handlers.

[Read More](/learn/responding-to-events)

## State: a component’s memory [](#state-a-components-memory "Link for State: a component’s memory ")

Components often need to change what’s on the screen as a result of an interaction. Typing into the form should update the input field, clicking “next” on an image carousel should change which image is displayed, clicking “buy” puts a product in the shopping cart. Components need to “remember” things: the current input value, the current image, the shopping cart. In React, this kind of component-specific memory is called _state._

You can add state to a component with a `useState`[](/reference/react/useState) Hook. _Hooks_ are special functions that let your components use React features (state is one of those features). The `useState` Hook lets you declare a state variable. It takes the initial state and returns a pair of values: the current state, and a state setter function that lets you update it.

```


const [index, setIndex] = useState(0);

const [showMore, setShowMore] = useState(false);


```


Here is how an image gallery uses and updates state on click:

App.jsdata.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
import { sculptureList } from './data.js';
export default function Gallery() {
 const [index, setIndex] = useState(0);
 const [showMore, setShowMore] = useState(false);
 const hasNext = index < sculptureList.length - 1;
 function handleNextClick() {
  if (hasNext) {
   setIndex(index + 1);
  } else {
   setIndex(0);
  }
 }
 function handleMoreClick() {
  setShowMore(!showMore);
 }
 let sculpture = sculptureList[index];
 return (
  <>
   <button onClick={handleNextClick}>
    Next
   </button>
   <h2>
    <i>{sculpture.name} </i>
    by {sculpture.artist}
   </h2>
   <h3>
    ({index + 1} of {sculptureList.length})
   </h3>
   <button onClick={handleMoreClick}>
    {showMore ? 'Hide' : 'Show'} details
   </button>
   {showMore && <p>{sculpture.description}</p>}
   <img
    src={sculpture.url}
    alt={sculpture.alt}
   />
  </>
 );
}

```


Show more

## Ready to learn this topic?

Read **[State: A Component’s Memory](/learn/state-a-components-memory)** to learn how to remember a value and update it on interaction.

[Read More](/learn/state-a-components-memory)

## Render and commit [](#render-and-commit "Link for Render and commit ")

Before your components are displayed on the screen, they must be rendered by React. Understanding the steps in this process will help you think about how your code executes and explain its behavior.

Imagine that your components are cooks in the kitchen, assembling tasty dishes from ingredients. In this scenario, React is the waiter who puts in requests from customers and brings them their orders. This process of requesting and serving UI has three steps:

  1. **Triggering** a render (delivering the diner’s order to the kitchen)
  2. **Rendering** the component (preparing the order in the kitchen)
  3. **Committing** to the DOM (placing the order on the table)



  1. Trigger
  2. Render
  3. Commit



Illustrated by [Rachel Lee Nabors](https://nearestnabors.com/)

## Ready to learn this topic?

Read **[Render and Commit](/learn/render-and-commit)** to learn the lifecycle of a UI update.

[Read More](/learn/render-and-commit)

## State as a snapshot [](#state-as-a-snapshot "Link for State as a snapshot ")

Unlike regular JavaScript variables, React state behaves more like a snapshot. Setting it does not change the state variable you already have, but instead triggers a re-render. This can be surprising at first!

```


console.log(count); // 0

setCount(count + 1); // Request a re-render with 1

console.log(count); // Still 0!


```


This behavior helps you avoid subtle bugs. Here is a little chat app. Try to guess what happens if you press “Send” first and _then_ change the recipient to Bob. Whose name will appear in the `alert` five seconds later?

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [to, setTo] = useState('Alice');
 const [message, setMessage] = useState('Hello');
 function handleSubmit(e) {
  e.preventDefault();
  setTimeout(() => {
   alert(`You said ${message} to ${to}`);
  }, 5000);
 }
 return (
  <form onSubmit={handleSubmit}>
   <label>
    To:{' '}
    <select
     value={to}
     onChange={e => setTo(e.target.value)}>
     <option value="Alice">Alice</option>
     <option value="Bob">Bob</option>
    </select>
   </label>
   <textarea
    placeholder="Message"
    value={message}
    onChange={e => setMessage(e.target.value)}
   />
   <button type="submit">Send</button>
  </form>
 );
}

```


Show more

## Ready to learn this topic?

Read **[State as a Snapshot](/learn/state-as-a-snapshot)** to learn why state appears “fixed” and unchanging inside the event handlers.

[Read More](/learn/state-as-a-snapshot)

## Queueing a series of state updates [](#queueing-a-series-of-state-updates "Link for Queueing a series of state updates ")

This component is buggy: clicking “+3” increments the score only once.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Counter() {
 const [score, setScore] = useState(0);
 function increment() {
  setScore(score + 1);
 }
 return (
  <>
   <button onClick={() => increment()}>+1</button>
   <button onClick={() => {
    increment();
    increment();
    increment();
   }}>+3</button>
   <h1>Score: {score}</h1>
  </>
 )
}

```


Show more

[State as a Snapshot](/learn/state-as-a-snapshot) explains why this is happening. Setting state requests a new re-render, but does not change it in the already running code. So `score` continues to be `0` right after you call `setScore(score + 1)`.

```


console.log(score); // 0

setScore(score + 1); // setScore(0 + 1);

console.log(score); // 0

setScore(score + 1); // setScore(0 + 1);

console.log(score); // 0

setScore(score + 1); // setScore(0 + 1);

console.log(score); // 0


```


You can fix this by passing an _updater function_ when setting state. Notice how replacing `setScore(score + 1)` with `setScore(s => s + 1)` fixes the “+3” button. This lets you queue multiple state updates.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Counter() {
 const [score, setScore] = useState(0);
 function increment() {
  setScore(s => s + 1);
 }
 return (
  <>
   <button onClick={() => increment()}>+1</button>
   <button onClick={() => {
    increment();
    increment();
    increment();
   }}>+3</button>
   <h1>Score: {score}</h1>
  </>
 )
}

```


Show more

## Ready to learn this topic?

Read **[Queueing a Series of State Updates](/learn/queueing-a-series-of-state-updates)** to learn how to queue a sequence of state updates.

[Read More](/learn/queueing-a-series-of-state-updates)

## Updating objects in state [](#updating-objects-in-state "Link for Updating objects in state ")

State can hold any kind of JavaScript value, including objects. But you shouldn’t change objects and arrays that you hold in the React state directly. Instead, when you want to update an object and array, you need to create a new one (or make a copy of an existing one), and then update the state to use that copy.

Usually, you will use the `...` spread syntax to copy objects and arrays that you want to change. For example, updating a nested object could look like this:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [person, setPerson] = useState({
  name: 'Niki de Saint Phalle',
  artwork: {
   title: 'Blue Nana',
   city: 'Hamburg',
   image: 'https://i.imgur.com/Sd1AgUOm.jpg',
  }
 });
 function handleNameChange(e) {
  setPerson({
   ...person,
   name: e.target.value
  });
 }
 function handleTitleChange(e) {
  setPerson({
   ...person,
   artwork: {
    ...person.artwork,
    title: e.target.value
   }
  });
 }
 function handleCityChange(e) {
  setPerson({
   ...person,
   artwork: {
    ...person.artwork,
    city: e.target.value
   }
  });
 }
 function handleImageChange(e) {
  setPerson({
   ...person,
   artwork: {
    ...person.artwork,
    image: e.target.value
   }
  });
 }
 return (
  <>
   <label>
    Name:
    <input
     value={person.name}
     onChange={handleNameChange}
    />
   </label>
   <label>
    Title:
    <input
     value={person.artwork.title}
     onChange={handleTitleChange}
    />
   </label>
   <label>
    City:
    <input
     value={person.artwork.city}
     onChange={handleCityChange}
    />
   </label>
   <label>
    Image:
    <input
     value={person.artwork.image}
     onChange={handleImageChange}
    />
   </label>
   <p>
    <i>{person.artwork.title}</i>
    {' by '}
    {person.name}
    <br />
    (located in {person.artwork.city})
   </p>
   <img
    src={person.artwork.image}
    alt={person.artwork.title}
   />
  </>
 );
}

```


Show more

If copying objects in code gets tedious, you can use a library like [Immer](https://github.com/immerjs/use-immer) to reduce repetitive code:

package.jsonApp.js

package.json

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
{
 "dependencies": {
  "immer": "1.7.3",
  "react": "latest",
  "react-dom": "latest",
  "react-scripts": "latest",
  "use-immer": "0.5.1"
 },
 "scripts": {
  "start": "react-scripts start",
  "build": "react-scripts build",
  "test": "react-scripts test --env=jsdom",
  "eject": "react-scripts eject"
 },
 "devDependencies": {}
}
```


## Ready to learn this topic?

Read **[Updating Objects in State](/learn/updating-objects-in-state)** to learn how to update objects correctly.

[Read More](/learn/updating-objects-in-state)

## Updating arrays in state [](#updating-arrays-in-state "Link for Updating arrays in state ")

Arrays are another type of mutable JavaScript objects you can store in state and should treat as read-only. Just like with objects, when you want to update an array stored in state, you need to create a new one (or make a copy of an existing one), and then set state to use the new array:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
const initialList = [
 { id: 0, title: 'Big Bellies', seen: false },
 { id: 1, title: 'Lunar Landscape', seen: false },
 { id: 2, title: 'Terracotta Army', seen: true },
];
export default function BucketList() {
 const [list, setList] = useState(
  initialList
 );
 function handleToggle(artworkId, nextSeen) {
  setList(list.map(artwork => {
   if (artwork.id === artworkId) {
    return { ...artwork, seen: nextSeen };
   } else {
    return artwork;
   }
  }));
 }
 return (
  <>
   <h1>Art Bucket List</h1>
   <h2>My list of art to see:</h2>
   <ItemList
    artworks={list}
    onToggle={handleToggle} />
  </>
 );
}
function ItemList({ artworks, onToggle }) {
 return (
  <ul>
   {artworks.map(artwork => (
    <li key={artwork.id}>
     <label>
      <input
       type="checkbox"
       checked={artwork.seen}
       onChange={e => {
        onToggle(
         artwork.id,
         e.target.checked
        );
       }}
      />
      {artwork.title}
     </label>
    </li>
   ))}
  </ul>
 );
}

```


Show more

If copying arrays in code gets tedious, you can use a library like [Immer](https://github.com/immerjs/use-immer) to reduce repetitive code:

package.jsonApp.js

package.json

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
{
 "dependencies": {
  "immer": "1.7.3",
  "react": "latest",
  "react-dom": "latest",
  "react-scripts": "latest",
  "use-immer": "0.5.1"
 },
 "scripts": {
  "start": "react-scripts start",
  "build": "react-scripts build",
  "test": "react-scripts test --env=jsdom",
  "eject": "react-scripts eject"
 },
 "devDependencies": {}
}
```


## Ready to learn this topic?

Read **[Updating Arrays in State](/learn/updating-arrays-in-state)** to learn how to update arrays correctly.

[Read More](/learn/updating-arrays-in-state)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Responding to Events](/learn/responding-to-events) to start reading this chapter page by page!

Or, if you’re already familiar with these topics, why not read about [Managing State](/learn/managing-state)?

[PreviousYour UI as a Tree](/learn/understanding-your-ui-as-a-tree)[NextResponding to Events](/learn/responding-to-events)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Responding to events ](#responding-to-events)
  * [State: a component’s memory ](#state-a-components-memory)
  * [Render and commit ](#render-and-commit)
  * [State as a snapshot ](#state-as-a-snapshot)
  * [Queueing a series of state updates ](#queueing-a-series-of-state-updates)
  * [Updating objects in state ](#updating-objects-in-state)
  * [Updating arrays in state ](#updating-arrays-in-state)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Managing State[](#undefined "Link for this heading")

Intermediate

As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you’ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.

### In this chapter

  * [How to think about UI changes as state changes](/learn/reacting-to-input-with-state)
  * [How to structure state well](/learn/choosing-the-state-structure)
  * [How to “lift state up” to share it between components](/learn/sharing-state-between-components)
  * [How to control whether the state gets preserved or reset](/learn/preserving-and-resetting-state)
  * [How to consolidate complex state logic in a function](/learn/extracting-state-logic-into-a-reducer)
  * [How to pass information without “prop drilling”](/learn/passing-data-deeply-with-context)
  * [How to scale state management as your app grows](/learn/scaling-up-with-reducer-and-context)



## Reacting to input with state [](#reacting-to-input-with-state "Link for Reacting to input with state ")

With React, you won’t modify the UI from code directly. For example, you won’t write commands like “disable the button”, “enable the button”, “show the success message”, etc. Instead, you will describe the UI you want to see for the different visual states of your component (“initial state”, “typing state”, “success state”), and then trigger the state changes in response to user input. This is similar to how designers think about UI.

Here is a quiz form built using React. Note how it uses the `status` state variable to determine whether to enable or disable the submit button, and whether to show the success message instead.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [answer, setAnswer] = useState('');
 const [error, setError] = useState(null);
 const [status, setStatus] = useState('typing');
 if (status === 'success') {
  return <h1>That's right!</h1>
 }
 async function handleSubmit(e) {
  e.preventDefault();
  setStatus('submitting');
  try {
   await submitForm(answer);
   setStatus('success');
  } catch (err) {
   setStatus('typing');
   setError(err);
  }
 }
 function handleTextareaChange(e) {
  setAnswer(e.target.value);
 }
 return (
  <>
   <h2>City quiz</h2>
   <p>
    In which city is there a billboard that turns air into drinkable water?
   </p>
   <form onSubmit={handleSubmit}>
    <textarea
     value={answer}
     onChange={handleTextareaChange}
     disabled={status === 'submitting'}
    />
    <br />
    <button disabled={
     answer.length === 0 ||
     status === 'submitting'
    }>
     Submit
    </button>
    {error !== null &&
     <p className="Error">
      {error.message}
     </p>
    }
   </form>
  </>
 );
}
function submitForm(answer) {
 // Pretend it's hitting the network.
 return new Promise((resolve, reject) => {
  setTimeout(() => {
   let shouldError = answer.toLowerCase() !== 'lima'
   if (shouldError) {
    reject(new Error('Good guess but a wrong answer. Try again!'));
   } else {
    resolve();
   }
  }, 1500);
 });
}

```


Show more

## Ready to learn this topic?

Read **[Reacting to Input with State](/learn/reacting-to-input-with-state)** to learn how to approach interactions with a state-driven mindset.

[Read More](/learn/reacting-to-input-with-state)

## Choosing the state structure [](#choosing-the-state-structure "Link for Choosing the state structure ")

Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. The most important principle is that state shouldn’t contain redundant or duplicated information. If there’s unnecessary state, it’s easy to forget to update it, and introduce bugs!

For example, this form has a **redundant** `fullName` state variable:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [firstName, setFirstName] = useState('');
 const [lastName, setLastName] = useState('');
 const [fullName, setFullName] = useState('');
 function handleFirstNameChange(e) {
  setFirstName(e.target.value);
  setFullName(e.target.value + ' ' + lastName);
 }
 function handleLastNameChange(e) {
  setLastName(e.target.value);
  setFullName(firstName + ' ' + e.target.value);
 }
 return (
  <>
   <h2>Let’s check you in</h2>
   <label>
    First name:{' '}
    <input
     value={firstName}
     onChange={handleFirstNameChange}
    />
   </label>
   <label>
    Last name:{' '}
    <input
     value={lastName}
     onChange={handleLastNameChange}
    />
   </label>
   <p>
    Your ticket will be issued to: <b>{fullName}</b>
   </p>
  </>
 );
}

```


Show more

You can remove it and simplify the code by calculating `fullName` while the component is rendering:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Form() {
 const [firstName, setFirstName] = useState('');
 const [lastName, setLastName] = useState('');
 const fullName = firstName + ' ' + lastName;
 function handleFirstNameChange(e) {
  setFirstName(e.target.value);
 }
 function handleLastNameChange(e) {
  setLastName(e.target.value);
 }
 return (
  <>
   <h2>Let’s check you in</h2>
   <label>
    First name:{' '}
    <input
     value={firstName}
     onChange={handleFirstNameChange}
    />
   </label>
   <label>
    Last name:{' '}
    <input
     value={lastName}
     onChange={handleLastNameChange}
    />
   </label>
   <p>
    Your ticket will be issued to: <b>{fullName}</b>
   </p>
  </>
 );
}

```


Show more

This might seem like a small change, but many bugs in React apps are fixed this way.

## Ready to learn this topic?

Read **[Choosing the State Structure](/learn/choosing-the-state-structure)** to learn how to design the state shape to avoid bugs.

[Read More](/learn/choosing-the-state-structure)

## Sharing state between components [](#sharing-state-between-components "Link for Sharing state between components ")

Sometimes, you want the state of two components to always change together. To do it, remove state from both of them, move it to their closest common parent, and then pass it down to them via props. This is known as “lifting state up”, and it’s one of the most common things you will do writing React code.

In this example, only one panel should be active at a time. To achieve this, instead of keeping the active state inside each individual panel, the parent component holds the state and specifies the props for its children.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
export default function Accordion() {
 const [activeIndex, setActiveIndex] = useState(0);
 return (
  <>
   <h2>Almaty, Kazakhstan</h2>
   <Panel
    title="About"
    isActive={activeIndex === 0}
    onShow={() => setActiveIndex(0)}
   >
    With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.
   </Panel>
   <Panel
    title="Etymology"
    isActive={activeIndex === 1}
    onShow={() => setActiveIndex(1)}
   >
    The name comes from <span lang="kk-KZ">алма</span>, the Kazakh word for "apple" and is often translated as "full of apples". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang="la">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.
   </Panel>
  </>
 );
}
function Panel({
 title,
 children,
 isActive,
 onShow
}) {
 return (
  <section className="panel">
   <h3>{title}</h3>
   {isActive ? (
    <p>{children}</p>
   ) : (
    <button onClick={onShow}>
     Show
    </button>
   )}
  </section>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Sharing State Between Components](/learn/sharing-state-between-components)** to learn how to lift state up and keep components in sync.

[Read More](/learn/sharing-state-between-components)

## Preserving and resetting state [](#preserving-and-resetting-state "Link for Preserving and resetting state ")

When you re-render a component, React needs to decide which parts of the tree to keep (and update), and which parts to discard or re-create from scratch. In most cases, React’s automatic behavior works well enough. By default, React preserves the parts of the tree that “match up” with the previously rendered component tree.

However, sometimes this is not what you want. In this chat app, typing a message and then switching the recipient does not reset the input. This can make the user accidentally send a message to the wrong person:

App.jsContactList.jsChat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
import Chat from './Chat.js';
import ContactList from './ContactList.js';
export default function Messenger() {
 const [to, setTo] = useState(contacts[0]);
 return (
  <div>
   <ContactList
    contacts={contacts}
    selectedContact={to}
    onSelect={contact => setTo(contact)}
   />
   <Chat contact={to} />
  </div>
 )
}
const contacts = [
 { name: 'Taylor', email: 'taylor@mail.com' },
 { name: 'Alice', email: 'alice@mail.com' },
 { name: 'Bob', email: 'bob@mail.com' }
];

```


Show more

React lets you override the default behavior, and _force_ a component to reset its state by passing it a different `key`, like `<Chat key={email} />`. This tells React that if the recipient is different, it should be considered a _different_ `Chat` component that needs to be re-created from scratch with the new data (and UI like inputs). Now switching between the recipients resets the input field—even though you render the same component.

App.jsContactList.jsChat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState } from 'react';
import Chat from './Chat.js';
import ContactList from './ContactList.js';
export default function Messenger() {
 const [to, setTo] = useState(contacts[0]);
 return (
  <div>
   <ContactList
    contacts={contacts}
    selectedContact={to}
    onSelect={contact => setTo(contact)}
   />
   <Chat key={to.email} contact={to} />
  </div>
 )
}
const contacts = [
 { name: 'Taylor', email: 'taylor@mail.com' },
 { name: 'Alice', email: 'alice@mail.com' },
 { name: 'Bob', email: 'bob@mail.com' }
];

```


Show more

## Ready to learn this topic?

Read **[Preserving and Resetting State](/learn/preserving-and-resetting-state)** to learn the lifetime of state and how to control it.

[Read More](/learn/preserving-and-resetting-state)

## Extracting state logic into a reducer [](#extracting-state-logic-into-a-reducer "Link for Extracting state logic into a reducer ")

Components with many state updates spread across many event handlers can get overwhelming. For these cases, you can consolidate all the state update logic outside your component in a single function, called “reducer”. Your event handlers become concise because they only specify the user “actions”. At the bottom of the file, the reducer function specifies how the state should update in response to each action!

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useReducer } from 'react';
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';
export default function TaskApp() {
 const [tasks, dispatch] = useReducer(
  tasksReducer,
  initialTasks
 );
 function handleAddTask(text) {
  dispatch({
   type: 'added',
   id: nextId++,
   text: text,
  });
 }
 function handleChangeTask(task) {
  dispatch({
   type: 'changed',
   task: task
  });
 }
 function handleDeleteTask(taskId) {
  dispatch({
   type: 'deleted',
   id: taskId
  });
 }
 return (
  <>
   <h1>Prague itinerary</h1>
   <AddTask
    onAddTask={handleAddTask}
   />
   <TaskList
    tasks={tasks}
    onChangeTask={handleChangeTask}
    onDeleteTask={handleDeleteTask}
   />
  </>
 );
}
function tasksReducer(tasks, action) {
 switch (action.type) {
  case 'added': {
   return [...tasks, {
    id: action.id,
    text: action.text,
    done: false
   }];
  }
  case 'changed': {
   return tasks.map(t => {
    if (t.id === action.task.id) {
     return action.task;
    } else {
     return t;
    }
   });
  }
  case 'deleted': {
   return tasks.filter(t => t.id !== action.id);
  }
  default: {
   throw Error('Unknown action: ' + action.type);
  }
 }
}
let nextId = 3;
const initialTasks = [
 { id: 0, text: 'Visit Kafka Museum', done: true },
 { id: 1, text: 'Watch a puppet show', done: false },
 { id: 2, text: 'Lennon Wall pic', done: false }
];

```


Show more

## Ready to learn this topic?

Read **[Extracting State Logic into a Reducer](/learn/extracting-state-logic-into-a-reducer)** to learn how to consolidate logic in the reducer function.

[Read More](/learn/extracting-state-logic-into-a-reducer)

## Passing data deeply with context [](#passing-data-deeply-with-context "Link for Passing data deeply with context ")

Usually, you will pass information from a parent component to a child component via props. But passing props can become inconvenient if you need to pass some prop through many components, or if many components need the same information. Context lets the parent component make some information available to any component in the tree below it—no matter how deep it is—without passing it explicitly through props.

Here, the `Heading` component determines its heading level by “asking” the closest `Section` for its level. Each `Section` tracks its own level by asking the parent `Section` and adding one to it. Every `Section` provides information to all components below it without passing props—it does that through context.

App.jsSection.jsHeading.jsLevelContext.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import Heading from './Heading.js';
import Section from './Section.js';
export default function Page() {
 return (
  <Section>
   <Heading>Title</Heading>
   <Section>
    <Heading>Heading</Heading>
    <Heading>Heading</Heading>
    <Heading>Heading</Heading>
    <Section>
     <Heading>Sub-heading</Heading>
     <Heading>Sub-heading</Heading>
     <Heading>Sub-heading</Heading>
     <Section>
      <Heading>Sub-sub-heading</Heading>
      <Heading>Sub-sub-heading</Heading>
      <Heading>Sub-sub-heading</Heading>
     </Section>
    </Section>
   </Section>
  </Section>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Passing Data Deeply with Context](/learn/passing-data-deeply-with-context)** to learn about using context as an alternative to passing props.

[Read More](/learn/passing-data-deeply-with-context)

## Scaling up with reducer and context [](#scaling-up-with-reducer-and-context "Link for Scaling up with reducer and context ")

Reducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.

With this approach, a parent component with complex state manages it with a reducer. Other components anywhere deep in the tree can read its state via context. They can also dispatch actions to update that state.

App.jsTasksContext.jsAddTask.jsTaskList.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';
import { TasksProvider } from './TasksContext.js';
export default function TaskApp() {
 return (
  <TasksProvider>
   <h1>Day off in Kyoto</h1>
   <AddTask />
   <TaskList />
  </TasksProvider>
 );
}

```


## Ready to learn this topic?

Read **[Scaling Up with Reducer and Context](/learn/scaling-up-with-reducer-and-context)** to learn how state management scales in a growing app.

[Read More](/learn/scaling-up-with-reducer-and-context)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Reacting to Input with State](/learn/reacting-to-input-with-state) to start reading this chapter page by page!

Or, if you’re already familiar with these topics, why not read about [Escape Hatches](/learn/escape-hatches)?

[PreviousUpdating Arrays in State](/learn/updating-arrays-in-state)[NextReacting to Input with State](/learn/reacting-to-input-with-state)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Reacting to input with state ](#reacting-to-input-with-state)
  * [Choosing the state structure ](#choosing-the-state-structure)
  * [Sharing state between components ](#sharing-state-between-components)
  * [Preserving and resetting state ](#preserving-and-resetting-state)
  * [Extracting state logic into a reducer ](#extracting-state-logic-into-a-reducer)
  * [Passing data deeply with context ](#passing-data-deeply-with-context)
  * [Scaling up with reducer and context ](#scaling-up-with-reducer-and-context)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET STARTED

  * [Quick Start ](/learn "Quick Start")

    * [Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe "Tutorial: Tic-Tac-Toe")
    * [Thinking in React ](/learn/thinking-in-react "Thinking in React")

  * [Installation ](/learn/installation "Installation")

    * [Start a New React Project ](/learn/start-a-new-react-project "Start a New React Project")
    * [Add React to an Existing Project ](/learn/add-react-to-an-existing-project "Add React to an Existing Project")
    * [Editor Setup ](/learn/editor-setup "Editor Setup")
    * [Using TypeScript ](/learn/typescript "Using TypeScript")
    * [React Developer Tools ](/learn/react-developer-tools "React Developer Tools")
    * [React Compiler ](/learn/react-compiler "React Compiler")

### LEARN REACT

  * [Describing the UI ](/learn/describing-the-ui "Describing the UI")

    * [Your First Component ](/learn/your-first-component "Your First Component")
    * [Importing and Exporting Components ](/learn/importing-and-exporting-components "Importing and Exporting Components")
    * [Writing Markup with JSX ](/learn/writing-markup-with-jsx "Writing Markup with JSX")
    * [JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces "JavaScript in JSX with Curly Braces")
    * [Passing Props to a Component ](/learn/passing-props-to-a-component "Passing Props to a Component")
    * [Conditional Rendering ](/learn/conditional-rendering "Conditional Rendering")
    * [Rendering Lists ](/learn/rendering-lists "Rendering Lists")
    * [Keeping Components Pure ](/learn/keeping-components-pure "Keeping Components Pure")
    * [Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree "Your UI as a Tree")

  * [Adding Interactivity ](/learn/adding-interactivity "Adding Interactivity")

    * [Responding to Events ](/learn/responding-to-events "Responding to Events")
    * [State: A Component's Memory ](/learn/state-a-components-memory "State: A Component's Memory")
    * [Render and Commit ](/learn/render-and-commit "Render and Commit")
    * [State as a Snapshot ](/learn/state-as-a-snapshot "State as a Snapshot")
    * [Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates "Queueing a Series of State Updates")
    * [Updating Objects in State ](/learn/updating-objects-in-state "Updating Objects in State")
    * [Updating Arrays in State ](/learn/updating-arrays-in-state "Updating Arrays in State")

  * [Managing State ](/learn/managing-state "Managing State")

    * [Reacting to Input with State ](/learn/reacting-to-input-with-state "Reacting to Input with State")
    * [Choosing the State Structure ](/learn/choosing-the-state-structure "Choosing the State Structure")
    * [Sharing State Between Components ](/learn/sharing-state-between-components "Sharing State Between Components")
    * [Preserving and Resetting State ](/learn/preserving-and-resetting-state "Preserving and Resetting State")
    * [Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer "Extracting State Logic into a Reducer")
    * [Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context "Passing Data Deeply with Context")
    * [Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context "Scaling Up with Reducer and Context")

  * [Escape Hatches ](/learn/escape-hatches "Escape Hatches")

    * [Referencing Values with Refs ](/learn/referencing-values-with-refs "Referencing Values with Refs")
    * [Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs "Manipulating the DOM with Refs")
    * [Synchronizing with Effects ](/learn/synchronizing-with-effects "Synchronizing with Effects")
    * [You Might Not Need an Effect ](/learn/you-might-not-need-an-effect "You Might Not Need an Effect")
    * [Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects "Lifecycle of Reactive Effects")
    * [Separating Events from Effects ](/learn/separating-events-from-effects "Separating Events from Effects")
    * [Removing Effect Dependencies ](/learn/removing-effect-dependencies "Removing Effect Dependencies")
    * [Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks "Reusing Logic with Custom Hooks")




Is this page useful?

[Learn React](/learn)

# Escape Hatches[](#undefined "Link for this heading")

Advanced

Some of your components may need to control and synchronize with systems outside of React. For example, you might need to focus an input using the browser API, play and pause a video player implemented without React, or connect and listen to messages from a remote server. In this chapter, you’ll learn the escape hatches that let you “step outside” React and connect to external systems. Most of your application logic and data flow should not rely on these features.

### In this chapter

  * [How to “remember” information without re-rendering](/learn/referencing-values-with-refs)
  * [How to access DOM elements managed by React](/learn/manipulating-the-dom-with-refs)
  * [How to synchronize components with external systems](/learn/synchronizing-with-effects)
  * [How to remove unnecessary Effects from your components](/learn/you-might-not-need-an-effect)
  * [How an Effect’s lifecycle is different from a component’s](/learn/lifecycle-of-reactive-effects)
  * [How to prevent some values from re-triggering Effects](/learn/separating-events-from-effects)
  * [How to make your Effect re-run less often](/learn/removing-effect-dependencies)
  * [How to share logic between components](/learn/reusing-logic-with-custom-hooks)



## Referencing values with refs [](#referencing-values-with-refs "Link for Referencing values with refs ")

When you want a component to “remember” some information, but you don’t want that information to [trigger new renders](/learn/render-and-commit), you can use a _ref_ :

```


const ref = useRef(0);


```


Like state, refs are retained by React between re-renders. However, setting state re-renders a component. Changing a ref does not! You can access the current value of that ref through the `ref.current` property.

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useRef } from 'react';
export default function Counter() {
 let ref = useRef(0);
 function handleClick() {
  ref.current = ref.current + 1;
  alert('You clicked ' + ref.current + ' times!');
 }
 return (
  <button onClick={handleClick}>
   Click me!
  </button>
 );
}

```


Show more

A ref is like a secret pocket of your component that React doesn’t track. For example, you can use refs to store [timeout IDs](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#return_value), [DOM elements](https://developer.mozilla.org/en-US/docs/Web/API/Element), and other objects that don’t impact the component’s rendering output.

## Ready to learn this topic?

Read **[Referencing Values with Refs](/learn/referencing-values-with-refs)** to learn how to use refs to remember information.

[Read More](/learn/referencing-values-with-refs)

## Manipulating the DOM with refs [](#manipulating-the-dom-with-refs "Link for Manipulating the DOM with refs ")

React automatically updates the DOM to match your render output, so your components won’t often need to manipulate it. However, sometimes you might need access to the DOM elements managed by React—for example, to focus a node, scroll to it, or measure its size and position. There is no built-in way to do those things in React, so you will need a ref to the DOM node. For example, clicking the button will focus the input using a ref:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useRef } from 'react';
export default function Form() {
 const inputRef = useRef(null);
 function handleClick() {
  inputRef.current.focus();
 }
 return (
  <>
   <input ref={inputRef} />
   <button onClick={handleClick}>
    Focus the input
   </button>
  </>
 );
}

```


Show more

## Ready to learn this topic?

Read **[Manipulating the DOM with Refs](/learn/manipulating-the-dom-with-refs)** to learn how to access DOM elements managed by React.

[Read More](/learn/manipulating-the-dom-with-refs)

## Synchronizing with Effects [](#synchronizing-with-effects "Link for Synchronizing with Effects ")

Some components need to synchronize with external systems. For example, you might want to control a non-React component based on the React state, set up a server connection, or send an analytics log when a component appears on the screen. Unlike event handlers, which let you handle particular events, _Effects_ let you run some code after rendering. Use them to synchronize your component with a system outside of React.

Press Play/Pause a few times and see how the video player stays synchronized to the `isPlaying` prop value:

App.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useRef, useEffect } from 'react';
function VideoPlayer({ src, isPlaying }) {
 const ref = useRef(null);
 useEffect(() => {
  if (isPlaying) {
   ref.current.play();
  } else {
   ref.current.pause();
  }
 }, [isPlaying]);
 return <video ref={ref} src={src} loop playsInline />;
}
export default function App() {
 const [isPlaying, setIsPlaying] = useState(false);
 return (
  <>
   <button onClick={() => setIsPlaying(!isPlaying)}>
    {isPlaying ? 'Pause' : 'Play'}
   </button>
   <VideoPlayer
    isPlaying={isPlaying}
    src="https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4"
   />
  </>
 );
}

```


Show more

Many Effects also “clean up” after themselves. For example, an Effect that sets up a connection to a chat server should return a _cleanup function_ that tells React how to disconnect your component from that server:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
export default function ChatRoom() {
 useEffect(() => {
  const connection = createConnection();
  connection.connect();
  return () => connection.disconnect();
 }, []);
 return <h1>Welcome to the chat!</h1>;
}

```


In development, React will immediately run and clean up your Effect one extra time. This is why you see `"✅ Connecting..."` printed twice. This ensures that you don’t forget to implement the cleanup function.

## Ready to learn this topic?

Read **[Synchronizing with Effects](/learn/synchronizing-with-effects)** to learn how to synchronize components with external systems.

[Read More](/learn/synchronizing-with-effects)

## You Might Not Need An Effect [](#you-might-not-need-an-effect "Link for You Might Not Need An Effect ")

Effects are an escape hatch from the React paradigm. They let you “step outside” of React and synchronize your components with some external system. If there is no external system involved (for example, if you want to update a component’s state when some props or state change), you shouldn’t need an Effect. Removing unnecessary Effects will make your code easier to follow, faster to run, and less error-prone.

There are two common cases in which you don’t need Effects:

  * **You don’t need Effects to transform data for rendering.**
  * **You don’t need Effects to handle user events.**



For example, you don’t need an Effect to adjust some state based on other state:

```


function Form() {

 const [firstName, setFirstName] = useState('Taylor');

 const [lastName, setLastName] = useState('Swift');

 // 🔴 Avoid: redundant state and unnecessary Effect

 const [fullName, setFullName] = useState('');

 useEffect(() => {

  setFullName(firstName + ' ' + lastName);

 }, [firstName, lastName]);

 // ...

}


```


Instead, calculate as much as you can while rendering:

```


function Form() {

 const [firstName, setFirstName] = useState('Taylor');

 const [lastName, setLastName] = useState('Swift');

 // ✅ Good: calculated during rendering

 const fullName = firstName + ' ' + lastName;

 // ...

}


```


However, you _do_ need Effects to synchronize with external systems.

## Ready to learn this topic?

Read **[You Might Not Need an Effect](/learn/you-might-not-need-an-effect)** to learn how to remove unnecessary Effects.

[Read More](/learn/you-might-not-need-an-effect)

## Lifecycle of reactive effects [](#lifecycle-of-reactive-effects "Link for Lifecycle of reactive effects ")

Effects have a different lifecycle from components. Components may mount, update, or unmount. An Effect can only do two things: to start synchronizing something, and later to stop synchronizing it. This cycle can happen multiple times if your Effect depends on props and state that change over time.

This Effect depends on the value of the `roomId` prop. Props are _reactive values,_ which means they can change on a re-render. Notice that the Effect _re-synchronizes_ (and re-connects to the server) if `roomId` changes:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId }) {
 useEffect(() => {
  const connection = createConnection(serverUrl, roomId);
  connection.connect();
  return () => connection.disconnect();
 }, [roomId]);
 return <h1>Welcome to the {roomId} room!</h1>;
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <hr />
   <ChatRoom roomId={roomId} />
  </>
 );
}

```


Show more

React provides a linter rule to check that you’ve specified your Effect’s dependencies correctly. If you forget to specify `roomId` in the list of dependencies in the above example, the linter will find that bug automatically.

## Ready to learn this topic?

Read **[Lifecycle of Reactive Events](/learn/lifecycle-of-reactive-effects)** to learn how an Effect’s lifecycle is different from a component’s.

[Read More](/learn/lifecycle-of-reactive-effects)

## Separating events from Effects [](#separating-events-from-effects "Link for Separating events from Effects ")

### Under Construction

This section describes an **experimental API that has not yet been released** in a stable version of React.

Event handlers only re-run when you perform the same interaction again. Unlike event handlers, Effects re-synchronize if any of the values they read, like props or state, are different than during last render. Sometimes, you want a mix of both behaviors: an Effect that re-runs in response to some values but not others.

All code inside Effects is _reactive._ It will run again if some reactive value it reads has changed due to a re-render. For example, this Effect will re-connect to the chat if either `roomId` or `theme` have changed:

App.jschat.jsnotifications.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection, sendMessage } from './chat.js';
import { showNotification } from './notifications.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId, theme }) {
 useEffect(() => {
  const connection = createConnection(serverUrl, roomId);
  connection.on('connected', () => {
   showNotification('Connected!', theme);
  });
  connection.connect();
  return () => connection.disconnect();
 }, [roomId, theme]);
 return <h1>Welcome to the {roomId} room!</h1>
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 const [isDark, setIsDark] = useState(false);
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <label>
    <input
     type="checkbox"
     checked={isDark}
     onChange={e => setIsDark(e.target.checked)}
    />
    Use dark theme
   </label>
   <hr />
   <ChatRoom
    roomId={roomId}
    theme={isDark ? 'dark' : 'light'} 
   />
  </>
 );
}

```


Show more

This is not ideal. You want to re-connect to the chat only if the `roomId` has changed. Switching the `theme` shouldn’t re-connect to the chat! Move the code reading `theme` out of your Effect into an _Effect Event_ :

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { experimental_useEffectEvent as useEffectEvent } from 'react';
import { createConnection, sendMessage } from './chat.js';
import { showNotification } from './notifications.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId, theme }) {
 const onConnected = useEffectEvent(() => {
  showNotification('Connected!', theme);
 });
 useEffect(() => {
  const connection = createConnection(serverUrl, roomId);
  connection.on('connected', () => {
   onConnected();
  });
  connection.connect();
  return () => connection.disconnect();
 }, [roomId]);
 return <h1>Welcome to the {roomId} room!</h1>
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 const [isDark, setIsDark] = useState(false);
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <label>
    <input
     type="checkbox"
     checked={isDark}
     onChange={e => setIsDark(e.target.checked)}
    />
    Use dark theme
   </label>
   <hr />
   <ChatRoom
    roomId={roomId}
    theme={isDark ? 'dark' : 'light'} 
   />
  </>
 );
}

```


Show more

Code inside Effect Events isn’t reactive, so changing the `theme` no longer makes your Effect re-connect.

## Ready to learn this topic?

Read **[Separating Events from Effects](/learn/separating-events-from-effects)** to learn how to prevent some values from re-triggering Effects.

[Read More](/learn/separating-events-from-effects)

## Removing Effect dependencies [](#removing-effect-dependencies "Link for Removing Effect dependencies ")

When you write an Effect, the linter will verify that you’ve included every reactive value (like props and state) that the Effect reads in the list of your Effect’s dependencies. This ensures that your Effect remains synchronized with the latest props and state of your component. Unnecessary dependencies may cause your Effect to run too often, or even create an infinite loop. The way you remove them depends on the case.

For example, this Effect depends on the `options` object which gets re-created every time you edit the input:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId }) {
 const [message, setMessage] = useState('');
 const options = {
  serverUrl: serverUrl,
  roomId: roomId
 };
 useEffect(() => {
  const connection = createConnection(options);
  connection.connect();
  return () => connection.disconnect();
 }, [options]);
 return (
  <>
   <h1>Welcome to the {roomId} room!</h1>
   <input value={message} onChange={e => setMessage(e.target.value)} />
  </>
 );
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <hr />
   <ChatRoom roomId={roomId} />
  </>
 );
}

```


Show more

You don’t want the chat to re-connect every time you start typing a message in that chat. To fix this problem, move creation of the `options` object inside the Effect so that the Effect only depends on the `roomId` string:

App.jschat.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';
const serverUrl = 'https://localhost:1234';
function ChatRoom({ roomId }) {
 const [message, setMessage] = useState('');
 useEffect(() => {
  const options = {
   serverUrl: serverUrl,
   roomId: roomId
  };
  const connection = createConnection(options);
  connection.connect();
  return () => connection.disconnect();
 }, [roomId]);
 return (
  <>
   <h1>Welcome to the {roomId} room!</h1>
   <input value={message} onChange={e => setMessage(e.target.value)} />
  </>
 );
}
export default function App() {
 const [roomId, setRoomId] = useState('general');
 return (
  <>
   <label>
    Choose the chat room:{' '}
    <select
     value={roomId}
     onChange={e => setRoomId(e.target.value)}
    >
     <option value="general">general</option>
     <option value="travel">travel</option>
     <option value="music">music</option>
    </select>
   </label>
   <hr />
   <ChatRoom roomId={roomId} />
  </>
 );
}

```


Show more

Notice that you didn’t start by editing the dependency list to remove the `options` dependency. That would be wrong. Instead, you changed the surrounding code so that the dependency became _unnecessary._ Think of the dependency list as a list of all the reactive values used by your Effect’s code. You don’t intentionally choose what to put on that list. The list describes your code. To change the dependency list, change the code.

## Ready to learn this topic?

Read **[Removing Effect Dependencies](/learn/removing-effect-dependencies)** to learn how to make your Effect re-run less often.

[Read More](/learn/removing-effect-dependencies)

## Reusing logic with custom Hooks [](#reusing-logic-with-custom-hooks "Link for Reusing logic with custom Hooks ")

React comes with built-in Hooks like `useState`, `useContext`, and `useEffect`. Sometimes, you’ll wish that there was a Hook for some more specific purpose: for example, to fetch data, to keep track of whether the user is online, or to connect to a chat room. To do this, you can create your own Hooks for your application’s needs.

In this example, the `usePointerPosition` custom Hook tracks the cursor position, while `useDelayedValue` custom Hook returns a value that’s “lagging behind” the value you passed by a certain number of milliseconds. Move the cursor over the sandbox preview area to see a moving trail of dots following the cursor:

App.jsusePointerPosition.jsuseDelayedValue.js

App.js

Reset[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app "Open in CodeSandbox")

```
import { usePointerPosition } from './usePointerPosition.js';
import { useDelayedValue } from './useDelayedValue.js';
export default function Canvas() {
 const pos1 = usePointerPosition();
 const pos2 = useDelayedValue(pos1, 100);
 const pos3 = useDelayedValue(pos2, 200);
 const pos4 = useDelayedValue(pos3, 100);
 const pos5 = useDelayedValue(pos4, 50);
 return (
  <>
   <Dot position={pos1} opacity={1} />
   <Dot position={pos2} opacity={0.8} />
   <Dot position={pos3} opacity={0.6} />
   <Dot position={pos4} opacity={0.4} />
   <Dot position={pos5} opacity={0.2} />
  </>
 );
}
function Dot({ position, opacity }) {
 return (
  <div style={{
   position: 'absolute',
   backgroundColor: 'pink',
   borderRadius: '50%',
   opacity,
   transform: `translate(${position.x}px, ${position.y}px)`,
   pointerEvents: 'none',
   left: -20,
   top: -20,
   width: 40,
   height: 40,
  }} />
 );
}

```


Show more

You can create custom Hooks, compose them together, pass data between them, and reuse them between components. As your app grows, you will write fewer Effects by hand because you’ll be able to reuse custom Hooks you already wrote. There are also many excellent custom Hooks maintained by the React community.

## Ready to learn this topic?

Read **[Reusing Logic with Custom Hooks](/learn/reusing-logic-with-custom-hooks)** to learn how to share logic between components.

[Read More](/learn/reusing-logic-with-custom-hooks)

## What’s next? [](#whats-next "Link for What’s next? ")

Head over to [Referencing Values with Refs](/learn/referencing-values-with-refs) to start reading this chapter page by page!

[PreviousScaling Up with Reducer and Context](/learn/scaling-up-with-reducer-and-context)[NextReferencing Values with Refs](/learn/referencing-values-with-refs)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Referencing values with refs ](#referencing-values-with-refs)
  * [Manipulating the DOM with refs ](#manipulating-the-dom-with-refs)
  * [Synchronizing with Effects ](#synchronizing-with-effects)
  * [You Might Not Need An Effect ](#you-might-not-need-an-effect)
  * [Lifecycle of reactive effects ](#lifecycle-of-reactive-effects)
  * [Separating events from Effects ](#separating-events-from-effects)
  * [Removing Effect dependencies ](#removing-effect-dependencies)
  * [Reusing logic with custom Hooks ](#reusing-logic-with-custom-hooks)
  * [What’s next? ](#whats-next)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### react@19

  * [Overview ](/reference/react "Overview")
  * [Hooks ](/reference/react/hooks "Hooks")

    * [useActionState ](/reference/react/useActionState "useActionState")
    * [useCallback ](/reference/react/useCallback "useCallback")
    * [useContext ](/reference/react/useContext "useContext")
    * [useDebugValue ](/reference/react/useDebugValue "useDebugValue")
    * [useDeferredValue ](/reference/react/useDeferredValue "useDeferredValue")
    * [useEffect ](/reference/react/useEffect "useEffect")
    * [useId ](/reference/react/useId "useId")
    * [useImperativeHandle ](/reference/react/useImperativeHandle "useImperativeHandle")
    * [useInsertionEffect ](/reference/react/useInsertionEffect "useInsertionEffect")
    * [useLayoutEffect ](/reference/react/useLayoutEffect "useLayoutEffect")
    * [useMemo ](/reference/react/useMemo "useMemo")
    * [useOptimistic ](/reference/react/useOptimistic "useOptimistic")
    * [useReducer ](/reference/react/useReducer "useReducer")
    * [useRef ](/reference/react/useRef "useRef")
    * [useState ](/reference/react/useState "useState")
    * [useSyncExternalStore ](/reference/react/useSyncExternalStore "useSyncExternalStore")
    * [useTransition ](/reference/react/useTransition "useTransition")

  * [Components ](/reference/react/components "Components")

    * [<Fragment> (<>) ](/reference/react/Fragment "<Fragment> \(<>\)")
    * [<Profiler> ](/reference/react/Profiler "<Profiler>")
    * [<StrictMode> ](/reference/react/StrictMode "<StrictMode>")
    * [<Suspense> ](/reference/react/Suspense "<Suspense>")

  * [APIs ](/reference/react/apis "APIs")

    * [act ](/reference/react/act "act")
    * [cache ](/reference/react/cache "cache")
    * [createContext ](/reference/react/createContext "createContext")
    * [lazy ](/reference/react/lazy "lazy")
    * [memo ](/reference/react/memo "memo")
    * [startTransition ](/reference/react/startTransition "startTransition")
    * [use ](/reference/react/use "use")
    * [experimental_taintObjectReference  - This feature is available in the latest Canary](/reference/react/experimental_taintObjectReference "experimental_taintObjectReference")
    * [experimental_taintUniqueValue  - This feature is available in the latest Canary](/reference/react/experimental_taintUniqueValue "experimental_taintUniqueValue")

### react-dom@19

  * [Hooks ](/reference/react-dom/hooks "Hooks")

    * [useFormStatus ](/reference/react-dom/hooks/useFormStatus "useFormStatus")

  * [Components ](/reference/react-dom/components "Components")

    * [Common (e.g. <div>) ](/reference/react-dom/components/common "Common \(e.g. <div>\)")
    * [<form> ](/reference/react-dom/components/form "<form>")
    * [<input> ](/reference/react-dom/components/input "<input>")
    * [<option> ](/reference/react-dom/components/option "<option>")
    * [<progress> ](/reference/react-dom/components/progress "<progress>")
    * [<select> ](/reference/react-dom/components/select "<select>")
    * [<textarea> ](/reference/react-dom/components/textarea "<textarea>")
    * [<link> ](/reference/react-dom/components/link "<link>")
    * [<meta> ](/reference/react-dom/components/meta "<meta>")
    * [<script> ](/reference/react-dom/components/script "<script>")
    * [<style> ](/reference/react-dom/components/style "<style>")
    * [<title> ](/reference/react-dom/components/title "<title>")

  * [APIs ](/reference/react-dom "APIs")

    * [createPortal ](/reference/react-dom/createPortal "createPortal")
    * [flushSync ](/reference/react-dom/flushSync "flushSync")
    * [preconnect ](/reference/react-dom/preconnect "preconnect")
    * [prefetchDNS ](/reference/react-dom/prefetchDNS "prefetchDNS")
    * [preinit ](/reference/react-dom/preinit "preinit")
    * [preinitModule ](/reference/react-dom/preinitModule "preinitModule")
    * [preload ](/reference/react-dom/preload "preload")
    * [preloadModule ](/reference/react-dom/preloadModule "preloadModule")

  * [Client APIs ](/reference/react-dom/client "Client APIs")

    * [createRoot ](/reference/react-dom/client/createRoot "createRoot")
    * [hydrateRoot ](/reference/react-dom/client/hydrateRoot "hydrateRoot")

  * [Server APIs ](/reference/react-dom/server "Server APIs")

    * [renderToPipeableStream ](/reference/react-dom/server/renderToPipeableStream "renderToPipeableStream")
    * [renderToReadableStream ](/reference/react-dom/server/renderToReadableStream "renderToReadableStream")
    * [renderToStaticMarkup ](/reference/react-dom/server/renderToStaticMarkup "renderToStaticMarkup")
    * [renderToString ](/reference/react-dom/server/renderToString "renderToString")

  * [Static APIs ](/reference/react-dom/static "Static APIs")

    * [prerender ](/reference/react-dom/static/prerender "prerender")
    * [prerenderToNodeStream ](/reference/react-dom/static/prerenderToNodeStream "prerenderToNodeStream")

### Rules of React

  * [Overview ](/reference/rules "Overview")

    * [Components and Hooks must be pure ](/reference/rules/components-and-hooks-must-be-pure "Components and Hooks must be pure")
    * [React calls Components and Hooks ](/reference/rules/react-calls-components-and-hooks "React calls Components and Hooks")
    * [Rules of Hooks ](/reference/rules/rules-of-hooks "Rules of Hooks")

### React Server Components

  * [Server Components ](/reference/rsc/server-components "Server Components")
  * [Server Functions ](/reference/rsc/server-functions "Server Functions")
  * [Directives ](/reference/rsc/directives "Directives")

    * ['use client' ](/reference/rsc/use-client "'use client'")
    * ['use server' ](/reference/rsc/use-server "'use server'")

### Legacy APIs

  * [Legacy React APIs ](/reference/react/legacy "Legacy React APIs")

    * [Children ](/reference/react/Children "Children")
    * [cloneElement ](/reference/react/cloneElement "cloneElement")
    * [Component ](/reference/react/Component "Component")
    * [createElement ](/reference/react/createElement "createElement")
    * [createRef ](/reference/react/createRef "createRef")
    * [forwardRef ](/reference/react/forwardRef "forwardRef")
    * [isValidElement ](/reference/react/isValidElement "isValidElement")
    * [PureComponent ](/reference/react/PureComponent "PureComponent")




Is this page useful?

[API Reference](/reference/react)

# React DOM APIs[](#undefined "Link for this heading")

The `react-dom` package contains methods that are only supported for the web applications (which run in the browser DOM environment). They are not supported for React Native.

## APIs [](#apis "Link for APIs ")

These APIs can be imported from your components. They are rarely used:

  * `createPortal`[](/reference/react-dom/createPortal) lets you render child components in a different part of the DOM tree.
  * `flushSync`[](/reference/react-dom/flushSync) lets you force React to flush a state update and update the DOM synchronously.



## Resource Preloading APIs [](#resource-preloading-apis "Link for Resource Preloading APIs ")

These APIs can be used to make apps faster by pre-loading resources such as scripts, stylesheets, and fonts as soon as you know you need them, for example before navigating to another page where the resources will be used.

[React-based frameworks](/learn/start-a-new-react-project) frequently handle resource loading for you, so you might not have to call these APIs yourself. Consult your framework’s documentation for details.

  * `prefetchDNS`[](/reference/react-dom/prefetchDNS) lets you prefetch the IP address of a DNS domain name that you expect to connect to.
  * `preconnect`[](/reference/react-dom/preconnect) lets you connect to a server you expect to request resources from, even if you don’t know what resources you’ll need yet.
  * `preload`[](/reference/react-dom/preload) lets you fetch a stylesheet, font, image, or external script that you expect to use.
  * `preloadModule`[](/reference/react-dom/preloadModule) lets you fetch an ESM module that you expect to use.
  * `preinit`[](/reference/react-dom/preinit) lets you fetch and evaluate an external script or fetch and insert a stylesheet.
  * `preinitModule`[](/reference/react-dom/preinitModule) lets you fetch and evaluate an ESM module.



## Entry points [](#entry-points "Link for Entry points ")

The `react-dom` package provides two additional entry points:

  * `react-dom/client`[](/reference/react-dom/client) contains APIs to render React components on the client (in the browser).
  * `react-dom/server`[](/reference/react-dom/server) contains APIs to render React components on the server.



## Removed APIs [](#removed-apis "Link for Removed APIs ")

These APIs were removed in React 19:

  * `findDOMNode`[](https://18.react.dev/reference/react-dom/findDOMNode): see [alternatives](https://18.react.dev/reference/react-dom/findDOMNode#alternatives).
  * `hydrate`[](https://18.react.dev/reference/react-dom/hydrate): use `hydrateRoot`[](/reference/react-dom/client/hydrateRoot) instead.
  * `render`[](https://18.react.dev/reference/react-dom/render): use `createRoot`[](/reference/react-dom/client/createRoot) instead.
  * `unmountComponentAtNode`[](/reference/react-dom/unmountComponentAtNode): use `root.unmount()`[](/reference/react-dom/client/createRoot#root-unmount) instead.
  * `renderToNodeStream`[](https://18.react.dev/reference/react-dom/server/renderToNodeStream): use `react-dom/server`[](/reference/react-dom/server) APIs instead.
  * `renderToStaticNodeStream`[](https://18.react.dev/reference/react-dom/server/renderToStaticNodeStream): use `react-dom/server`[](/reference/react-dom/server) APIs instead.



[Previous<title>](/reference/react-dom/components/title)[NextcreatePortal](/reference/react-dom/createPortal)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [APIs ](#apis)
  * [Resource Preloading APIs ](#resource-preloading-apis)
  * [Entry points ](#entry-points)
  * [Removed APIs ](#removed-apis)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Meet the Team[](#undefined "Link for this heading")

React development is led by a dedicated team working full time at Meta. It also receives contributions from people all over the world.

## React Core [](#react-core "Link for React Core ")

The React Core team members work full time on the core component APIs, the engine that powers React DOM and React Native, React DevTools, and the React documentation website.

Current members of the React team are listed in alphabetical order below.

### Andrew Clark[](#andrew-clark "Link for Andrew Clark")

Engineer at Vercel

Andrew got started with web development by making sites with WordPress, and eventually tricked himself into doing JavaScript. His favorite pastime is karaoke. Andrew is either a Disney villain or a Disney princess, depending on the day.

[acdlite](https://threads.net/acdlite)

[ acdlite](https://github.com/acdlite)

### Dan Abramov[](#dan-abramov "Link for Dan Abramov")

Independent Engineer

Dan got into programming after he accidentally discovered Visual Basic inside Microsoft PowerPoint. He has found his true calling in turning [Sebastian](#sebastian-markb%C3%A5ge)’s tweets into long-form blog posts. Dan occasionally wins at Fortnite by hiding in a bush until the game ends.

[danabra.mov](https://bsky.app/profile/danabra.mov)

[ gaearon](https://github.com/gaearon)

### Eli White[](#eli-white "Link for Eli White")

Engineering Manager at Meta

Eli got into programming after he got suspended from middle school for hacking. He has been working on React and React Native since 2017. He enjoys eating treats, especially ice cream and apple pie. You can find Eli trying quirky activities like parkour, indoor skydiving, and aerial silks.

[elicwhite](https://threads.net/elicwhite)

[ TheSavior](https://github.com/TheSavior)

### Jack Pope[](#jack-pope "Link for Jack Pope")

Engineer at Meta

Shortly after being introduced to AutoHotkey, Jack had written scripts to automate everything he could think of. When reaching limitations there, he dove headfirst into web app development and hasn’t looked back. Most recently, Jack worked on the web platform at Instagram before moving to React. His favorite programming language is JSX.

[ jackpope](https://github.com/jackpope)

[ jackpope.me](https://jackpope.me)

### Jason Bonta[](#jason-bonta "Link for Jason Bonta")

Engineering Manager at Meta

Jason abandoned embedded C for a career in front-end engineering and never looked back. Armed with esoteric CSS knowledge and a passion for beautiful UI, Jason joined Facebook in 2010, where he now feels privileged to have seen JavaScript development come of age. Though he may not understand how `for...of` loops work, he loves getting to work with brilliant people on projects that enable amazing UX.

[someextent](https://threads.net/someextent)

### Joe Savona[](#joe-savona "Link for Joe Savona")

Engineer at Meta

Joe was planning to major in math and philosophy but got into computer science after writing physics simulations in Matlab. Prior to React, he worked on Relay, RSocket.js, and the Skip programming language. While he’s not building some sort of reactive system he enjoys running, studying Japanese, and spending time with his family.

[joesavona](https://threads.net/joesavona)

[ josephsavona](https://github.com/josephsavona)

### Josh Story[](#josh-story "Link for Josh Story")

Engineer at Vercel

Josh majored in Mathematics and discovered programming while in college. His first professional developer job was to program insurance rate calculations in Microsoft Excel, the paragon of Reactive Programming which must be why he now works on React. In between that time Josh has been an IC, Manager, and Executive at a few startups. outside of work he likes to push his limits with cooking.

[storyhb.com](https://bsky.app/profile/storyhb.com)

[ gnoff](https://github.com/gnoff)

### Lauren Tan[](#lauren-tan "Link for Lauren Tan")

Engineer at Meta

Lauren’s programming career peaked when she first discovered the `<marquee>` tag. She’s been chasing that high ever since. She studied Finance instead of CS in college, so she learned to code using Excel. Lauren enjoys dropping cheeky memes in chat, playing video games with her partner, learning Korean, and petting her dog Zelda.

[potetotes](https://threads.net/potetotes)

[no.lol](https://bsky.app/profile/no.lol)

[ poteto](https://github.com/poteto)

### Luna Wei[](#luna-wei "Link for Luna Wei")

Engineer at Meta

Luna first learnt the fundamentals of python at the age of 6 from her father. Since then, she has been unstoppable. Luna aspires to be a gen z, and the road to success is paved with environmental advocacy, urban gardening and lots of quality time with her Voo-Doo’d (as pictured).

[lunaleaps](https://threads.net/lunaleaps)

[ lunaleaps](https://github.com/lunaleaps)

### Matt Carroll[](#matt-carroll "Link for Matt Carroll")

Developer Advocate at Meta

Matt stumbled into coding, and since then, has become enamored with creating things in communities that can’t be created alone. Prior to React, he worked on YouTube, the Google Assistant, Fuchsia, and Google Cloud AI and Evernote. When he’s not trying to make better developer tools he enjoys the mountains, jazz, and spending time with his family.

[mattcarrollcode](https://threads.net/mattcarrollcode)

[ mattcarrollcode](https://github.com/mattcarrollcode)

### Mofei Zhang[](#mofei-zhang "Link for Mofei Zhang")

Engineer at Meta

Mofei started programming when she realized it can help her cheat in video games. She focused on operating systems in undergrad / grad school, but now finds herself happily tinkering on React. Outside of work, she enjoys debugging bouldering problems and planning her next backpacking trip(s).

[z_mofei](https://threads.net/z_mofei)

[ mofeiZ](https://github.com/mofeiZ)

### Noah Lemen[](#noah-lemen "Link for Noah Lemen")

Engineer at Meta

Noah’s interest in UI programming sparked during his education in music technology at NYU. At Meta, he’s worked on internal tools, browsers, web performance, and is currently focused on React. Outside of work, Noah can be found tinkering with synthesizers or spending time with his cat.

[noahlemen](https://threads.net/noahlemen)

[ noahlemen](https://github.com/noahlemen)

[ noahle.men](https://noahle.men)

### Rick Hanlon[](#rick-hanlon "Link for Rick Hanlon")

Engineer at Meta

Ricky majored in theoretical math and somehow found himself on the React Native team for a couple years before joining the React team. When he’s not programming you can find him snowboarding, biking, climbing, golfing, or closing GitHub issues that do not match the issue template.

[rickhanlonii](https://threads.net/rickhanlonii)

[ricky.fm](https://bsky.app/profile/ricky.fm)

[ rickhanlonii](https://github.com/rickhanlonii)

### Ruslan Lesiutin[](#ruslan-lesiutin "Link for Ruslan Lesiutin")

Engineer at Meta

Ruslan’s introduction to UI programming started when he was a kid by manually editing HTML templates for his custom gaming forums. Somehow, he ended up majoring in Computer Science. He enjoys music, games, and memes. Mostly memes.

[lesiutin](https://threads.net/lesiutin)

[ hoxyq](https://github.com/hoxyq)

### Sathya Gunasekaran [](#sathya-gunasekaran "Link for Sathya Gunasekaran ")

Engineer at Meta

Sathya hated the Dragon Book in school but somehow ended up working on compilers all his career. When he’s not compiling React components, he’s either drinking coffee or eating yet another Dosa.

[gsathya.03](https://threads.net/gsathya.03)

[ gsathya](https://github.com/gsathya)

### Sebastian Markbåge[](#sebastian-markbåge "Link for Sebastian Markbåge")

Engineer at Vercel

Sebastian majored in psychology. He’s usually quiet. Even when he says something, it often doesn’t make sense to the rest of us until a few months later. The correct way to pronounce his surname is “mark-boa-geh” but he settled for “mark-beige” out of pragmatism — and that’s how he approaches React.

[sebmarkbage](https://threads.net/sebmarkbage)

[ sebmarkbage](https://github.com/sebmarkbage)

### Sebastian Silbermann[](#sebastian-silbermann "Link for Sebastian Silbermann")

Engineer at Vercel

Sebastian learned programming to make the browser games he played during class more enjoyable. Eventually this lead to contributing to as much open source code as possible. Outside of coding he’s busy making sure people don’t confuse him with the other Sebastians and Zilberman of the React community.

[sebsilbermann](https://threads.net/sebsilbermann)

[ eps1lon](https://github.com/eps1lon)

### Seth Webster[](#seth-webster "Link for Seth Webster")

Engineering Manager at Meta

Seth started programming as a kid growing up in Tucson, AZ. After school, he was bitten by the music bug and was a touring musician for about 10 years before returning to _work_ , starting with Intuit. In his spare time, he loves [taking pictures](https://www.sethwebster.com) and flying for animal rescues in the northeastern United States.

[sethwebster](https://threads.net/sethwebster)

[ sethwebster](https://github.com/sethwebster)

[ sethwebster.com](https://sethwebster.com)

### Sophie Alpert[](#sophie-alpert "Link for Sophie Alpert")

Independent Engineer

Four days after React was released, Sophie rewrote the entirety of her then-current project to use it, which she now realizes was perhaps a bit reckless. After she became the project’s #1 committer, she wondered why she wasn’t getting paid by Facebook like everyone else was and joined the team officially to lead React through its adolescent years. Though she quit that job years ago, somehow she’s still in the team’s group chats and “providing value”.

[sophiebits](https://threads.net/sophiebits)

[ sophiebits](https://github.com/sophiebits)

[ sophiebits.com](https://sophiebits.com)

### Tianyu Yao[](#tianyu-yao "Link for Tianyu Yao")

Engineer at Meta

Tianyu’s interest in computers started as a kid because he loves video games. So he majored in computer science and still plays childish games like League of Legends. When he is not in front of a computer, he enjoys playing with his two kittens, hiking and kayaking.

[ tyao1](https://github.com/tyao1)

### Yuzhi Zheng[](#yuzhi-zheng "Link for Yuzhi Zheng")

Engineering Manager at Meta

Yuzhi studied Computer Science in school. She liked the instant gratification of seeing code come to life without having to physically be in a laboratory. Now she’s a manager in the React org. Before management, she used to work on the Relay data fetching framework. In her spare time, Yuzhi enjoys optimizing her life via gardening and home improvement projects.

[yuzhiz](https://threads.net/yuzhiz)

[ yuzhi](https://github.com/yuzhi)

## Past contributors [](#past-contributors "Link for Past contributors ")

You can find the past team members and other people who significantly contributed to React over the years on the [acknowledgements](/community/acknowledgements) page.

[PreviousReact Videos](/community/videos)[NextDocs Contributors](/community/docs-contributors)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [React Core ](#react-core)
  * [Andrew Clark](#andrew-clark)
  * [Dan Abramov](#dan-abramov)
  * [Eli White](#eli-white)
  * [Jack Pope](#jack-pope)
  * [Jason Bonta](#jason-bonta)
  * [Joe Savona](#joe-savona)
  * [Josh Story](#josh-story)
  * [Lauren Tan](#lauren-tan)
  * [Luna Wei](#luna-wei)
  * [Matt Carroll](#matt-carroll)
  * [Mofei Zhang](#mofei-zhang)
  * [Noah Lemen](#noah-lemen)
  * [Rick Hanlon](#rick-hanlon)
  * [Ruslan Lesiutin](#ruslan-lesiutin)
  * [Sathya Gunasekaran ](#sathya-gunasekaran)
  * [Sebastian Markbåge](#sebastian-markbåge)
  * [Sebastian Silbermann](#sebastian-silbermann)
  * [Seth Webster](#seth-webster)
  * [Sophie Alpert](#sophie-alpert)
  * [Tianyu Yao](#tianyu-yao)
  * [Yuzhi Zheng](#yuzhi-zheng)
  * [Past contributors ](#past-contributors)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Docs Contributors[](#undefined "Link for this heading")

React documentation is written and maintained by the [React team](/community/team) and [external contributors.](https://github.com/reactjs/react.dev/graphs/contributors) On this page, we’d like to thank a few people who’ve made significant contributions to this site.

## Content [](#content "Link for Content ")

  * : editing, writing, illustrating
  * : writing, curriculum design
  * : example code
  * : writing
  * : writing
  * : writing
  * : writing
  * : writing
  * : editing, writing
  * : reviews, advice
  * : feedback



## Design [](#design "Link for Design ")

  * : site design
  * [Razvan Gradinar](https://dribbble.com/GradinarRazvan): sandbox design
  * [Maggie Appleton](https://maggieappleton.com/): diagram system
  * : color-coded explanations



## Development [](#development "Link for Development ")

  * : site development
  * [ThisDotLabs](https://www.thisdot.co/) (, ): site development
  * [CodeSandbox](https://codesandbox.io/) (, , , ): sandbox integration
  * : site development
  * : site development
  * [Harish Kumar](https://www.strek.in/): development and maintenance
  * : sandbox improvements



We’d also like to thank countless alpha testers and community members who gave us feedback along the way.

[PreviousMeet the Team](/community/team)[NextTranslations](/community/translations)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Content ](#content)
  * [Design ](#design)
  * [Development ](#development)


[](/)

[React](/)

[v19](/versions)

Search`⌘``Ctrl``K`

[Learn](/learn)

[Reference](/reference/react)

[Community](/community)

[Blog](/blog)

[](/community/translations)

[](https://github.com/facebook/react/releases)

### GET INVOLVED

  * [Community ](/community "Community")

    * [React Conferences ](/community/conferences "React Conferences")
    * [React Meetups ](/community/meetups "React Meetups")
    * [React Videos ](/community/videos "React Videos")
    * [Meet the Team ](/community/team "Meet the Team")
    * [Docs Contributors ](/community/docs-contributors "Docs Contributors")
    * [Translations ](/community/translations "Translations")
    * [Acknowledgements ](/community/acknowledgements "Acknowledgements")
    * [Versioning Policy ](/community/versioning-policy "Versioning Policy")




Is this page useful?

[Community](/community)

# Acknowledgements[](#undefined "Link for this heading")

React was originally created by [Jordan Walke.](https://github.com/jordwalke) Today, React has a [dedicated full-time team working on it](/community/team), as well as over a thousand [open source contributors.](https://github.com/facebook/react/graphs/contributors)

## Past contributors [](#past-contributors "Link for Past contributors ")

We’d like to recognize a few people who have made significant contributions to React and its documentation in the past and have helped maintain them over the years:

  * [Almero Steyn](https://github.com/AlmeroSteyn)
  * [Andreas Svensson](https://github.com/syranide)
  * [Alex Krolick](https://github.com/alexkrolick)
  * [Alexey Pyltsyn](https://github.com/lex111)
  * [Andrey Lunyov](https://github.com/alunyov)
  * [Brandon Dail](https://github.com/aweary)
  * [Brian Vaughn](https://github.com/bvaughn)
  * [Caleb Meredith](https://github.com/calebmer)
  * [Chang Yan](https://github.com/cyan33)
  * [Cheng Lou](https://github.com/chenglou)
  * [Christoph Nakazawa](https://github.com/cpojer)
  * [Christopher Chedeau](https://github.com/vjeux)
  * [Clement Hoang](https://github.com/clemmy)
  * [Dave McCabe](https://github.com/davidmccabe)
  * [Dominic Gannaway](https://github.com/trueadm)
  * [Flarnie Marchan](https://github.com/flarnie)
  * [Jason Quense](https://github.com/jquense)
  * [Jesse Beach](https://github.com/jessebeach)
  * [Jessica Franco](https://github.com/Jessidhia)
  * [Jim Sproch](https://github.com/jimfb)
  * [Josh Duck](https://github.com/joshduck)
  * [Joe Critchley](https://github.com/joecritch)
  * [Jeff Morrison](https://github.com/jeffmo)
  * [Luna Ruan](https://github.com/lunaruan)
  * [Kathryn Middleton](https://github.com/kmiddleton14)
  * [Keyan Zhang](https://github.com/keyz)
  * [Marco Salazar](https://github.com/salazarm)
  * [Mengdi Chen](https://github.com/mondaychen)
  * [Nat Alison](https://github.com/tesseralis)
  * [Nathan Hunzaker](https://github.com/nhunzaker)
  * [Nicolas Gallagher](https://github.com/necolas)
  * [Paul O’Shannessy](https://github.com/zpao)
  * [Pete Hunt](https://github.com/petehunt)
  * [Philipp Spiess](https://github.com/philipp-spiess)
  * [Rachel Nabors](https://github.com/rachelnabors)
  * [Robert Zhang](https://github.com/robertzhidealx)
  * [Samuel Susla](https://github.com/sammy-SC)
  * [Sander Spies](https://github.com/sanderspies)
  * [Sasha Aickin](https://github.com/aickin)
  * [Sean Keegan](https://github.com/seanryankeegan)
  * [Sophia Shoemaker](https://github.com/mrscobbler)
  * [Sunil Pai](https://github.com/threepointone)
  * [Tim Yung](https://github.com/yungsters)
  * [Xuan Huang](https://github.com/huxpro)



This list is not exhaustive.

We’d like to give special thanks to [Tom Occhino](https://github.com/tomocchino) and [Adam Wolff](https://github.com/wolffiex) for their guidance and support over the years. We are also thankful to all the volunteers who [translated React into other languages.](https://translations.react.dev/)

## Additional Thanks [](#additional-thanks "Link for Additional Thanks ")

Additionally, we’re grateful to:

  * [Jeff Barczewski](https://github.com/jeffbski) for allowing us to use the `react` package name on npm
  * [Christopher Aue](https://christopheraue.net/) for letting us use the reactjs.com domain name and the username on Twitter
  * [ProjectMoon](https://github.com/ProjectMoon) for letting us use the [flux](https://www.npmjs.com/package/flux) package name on npm
  * Shane Anderson for allowing us to use the [react](https://github.com/react) org on GitHub



[PreviousTranslations](/community/translations)[NextVersioning Policy](/community/versioning-policy)

[](https://opensource.fb.com/)

Copyright © Meta Platforms, Inc

no uwu plz

uwu?

Logo by

[Learn React](/learn)

[Quick Start](/learn)

[Installation](/learn/installation)

[Describing the UI](/learn/describing-the-ui)

[Adding Interactivity](/learn/adding-interactivity)

[Managing State](/learn/managing-state)

[Escape Hatches](/learn/escape-hatches)

[API Reference](/reference/react)

[React APIs](/reference/react)

[React DOM APIs](/reference/react-dom)

[Community](/community)

[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)

[Meet the Team](/community/team)

[Docs Contributors](/community/docs-contributors)

[Acknowledgements](/community/acknowledgements)

More

[Blog](/blog)

[React Native](https://reactnative.dev/)

[Terms](https://opensource.fb.com/legal/terms/)

[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)

## On this page

  * [Overview](#)
  * [Past contributors ](#past-contributors)
  * [Additional Thanks ](#additional-thanks)


[Skip to content](#geist-skip-nav)

[](https://vercel.com/home?utm_source=next-site&utm_medium=banner&utm_campaign=home "Go to Vercel homepage")

[](/?uwu=true "Go to the homepage")

[](/ "Go to the homepage")

Search documentation...`CtrlK`Search...`⌘K`

[](https://vercel.com/home?utm_source=next-site&utm_medium=banner&utm_campaign=home "Go to Vercel homepage")

[](/?uwu=true "Go to the homepage")

[](/ "Go to the homepage")

[Showcase](/showcase)[Docs](/docs "Documentation")[Blog](/blog)[Templates](https://vercel.com/templates/next.js?utm_source=next-site&utm_medium=navbar&utm_campaign=next_site_nav_templates)[Enterprise](https://vercel.com/contact/sales/nextjs?utm_source=next-site&utm_medium=navbar&utm_campaign=next_site_nav_enterprise)

Search documentation...`CtrlK`Search...`⌘K`[Deploy](https://vercel.com/new/clone?utm_source=next-site&utm_medium=banner&b=main&s=https%3A%2F%2Fgithub.com%2Fvercel%2Fvercel%2Ftree%2Fmain%2Fexamples%2Fnextjs&showOptionalTeamCreation=false&template=nextjs&teamCreateStatus=hidden&utm_campaign=home)[Learn](/learn)

# The React Framework for the Web

Used by some of the world's largest companies, Next.js enables you to create **high-quality web applications** with the power of React components.

[Get Started](/docs)[Learn Next.js](/learn?utm_source=next-site&utm_medium=homepage-cta&utm_campaign=home)

▲ ~ npx create-next-app@latest

## What's in Next.js?

Everything you need to build great products on the web.

[Original1440px375pxBuilt-in OptimizationsAutomatic Image, Font, and Script Optimizations for improved UX and Core Web Vitals.](/docs/app/building-your-application/optimizing/images)[Data FetchingMake your React component async and await your data. Next.js supports both server and client data fetching.](/docs/app/building-your-application/data-fetching)[Server ActionsRun server code by calling a function. Skip the API. Then, easily revalidate cached data and update your UI in one network roundtrip.](/docs/app/building-your-application/data-fetching/forms-and-mutations)[Advanced Routing & Nested LayoutsCreate routes using the file system, including support for more advanced routing patterns and UI layouts.](/docs/app/building-your-application/routing)

[Dynamic HTML StreamingInstantly stream UI from the server, integrated with the App Router and React Suspense.](/docs/app/building-your-application/routing/loading-ui-and-streaming)[CSS SupportStyle your application with your favorite tools, including support for CSS Modules, Tailwind CSS, and popular community libraries.](/docs/app/building-your-application/styling)[Route HandlersBuild API endpoints to securely connect with third-party services for handling auth or listening for webhooks.](/docs/app/building-your-application/routing/router-handlers)[MiddlewareTake control of the incoming request. Use code to define routing and access rules for authentication, experimentation, and internationalization.](/docs/app/building-your-application/routing/middleware)

[React Server ComponentsAdd components without sending additional client-side JavaScript. Built on the latest React features.](/docs/app/building-your-application/rendering/server-components)[Client and Server RenderingFlexible rendering and caching options, including Incremental Static Regeneration (ISR), on a per-page level.](/docs/app/building-your-application/rendering)[Next.js 15The power of full-stack to the frontend. Read the release notes.](/blog/next-15)

[Built-in OptimizationsAutomatic Image, Font, and Script Optimizations for improved UX and Core Web Vitals.](/docs/app/building-your-application/optimizing/images)[React Server ComponentsAdd components without sending additional client-side JavaScript. Built on the latest React features.](/docs/app/building-your-application/rendering/server-components)[Data FetchingMake your React component async and await your data. Next.js supports both server and client data fetching.](/docs/app/building-your-application/data-fetching)[Server ActionsRun server code by calling a function. Skip the API. Then, easily revalidate cached data and update your UI in one network roundtrip.](/docs/app/building-your-application/data-fetching/forms-and-mutations)[Advanced Routing & Nested LayoutsCreate routes using the file system, including support for more advanced routing patterns and UI layouts.](/docs/app/building-your-application/routing)

[Dynamic HTML StreamingInstantly stream UI from the server, integrated with the App Router and React Suspense.](/docs/app/building-your-application/routing/loading-ui-and-streaming)[CSS SupportStyle your application with your favorite tools, including support for CSS Modules, Tailwind CSS, and popular community libraries.](/docs/app/building-your-application/styling)[Route HandlersBuild API endpoints to securely connect with third-party services for handling auth or listening for webhooks.](/docs/app/building-your-application/routing/router-handlers)[MiddlewareTake control of the incoming request. Use code to define routing and access rules for authentication, experimentation, and internationalization.](/docs/app/building-your-application/routing/middleware)[Client and Server RenderingFlexible rendering and caching options, including Incremental Static Regeneration (ISR), on a per-page level.](/docs/app/building-your-application/rendering)[Next.js 15The power of full-stack to the frontend. Read the release notes.](/blog/next-15)

[Built-in OptimizationsAutomatic Image, Font, and Script Optimizations for improved UX and Core Web Vitals.](/docs/app/building-your-application/optimizing/images)[Dynamic HTML StreamingInstantly stream UI from the server, integrated with the App Router and React Suspense.](/docs/app/building-your-application/routing/loading-ui-and-streaming)[React Server ComponentsAdd components without sending additional client-side JavaScript. Built on the latest React features.](/docs/app/building-your-application/rendering/server-components)

[Data FetchingMake your React component async and await your data. Next.js supports both server and client data fetching.](/docs/app/building-your-application/data-fetching)[Server ActionsRun server code by calling a function. Skip the API. Then, easily revalidate cached data and update your UI in one network roundtrip.](/docs/app/building-your-application/data-fetching/forms-and-mutations)[Advanced Routing & Nested LayoutsCreate routes using the file system, including support for more advanced routing patterns and UI layouts.](/docs/app/building-your-application/routing)[CSS SupportStyle your application with your favorite tools, including support for CSS Modules, Tailwind CSS, and popular community libraries.](/docs/app/building-your-application/styling)[Route HandlersBuild API endpoints to securely connect with third-party services for handling auth or listening for webhooks.](/docs/app/building-your-application/routing/router-handlers)[MiddlewareTake control of the incoming request. Use code to define routing and access rules for authentication, experimentation, and internationalization.](/docs/app/building-your-application/routing/middleware)[Client and Server RenderingFlexible rendering and caching options, including Incremental Static Regeneration (ISR), on a per-page level.](/docs/app/building-your-application/rendering)

[Next.js 15The power of full-stack to the frontend. Read the release notes.](/blog/next-15)

## Built on a foundation of fast, production-grade tooling

Powered By

[ReactThe library for web and native user interfaces. Next.js is built on the latest React features, including Server Components and Actions.](https://react.dev)[TurbopackAn incremental bundler optimized for JavaScript and TypeScript, written in Rust , and built into Next.js.](https://turbo.build)[Speedy Web CompilerAn extensible Rust based platform for the next generation of fast developer tools, and can be used for both compilation and minification.](https://swc.rs)

## Get started in seconds

Deploy Next.js to Vercel

StarterEcommerceBlogAIPortfolioSaaSMulti-tenant AppsRealtime AppsDocumentationVirtual EventWeb3

Vercel is a frontend cloud from the creators of Next.js, making it easy to get started with Next.js quickly.

Jumpstart your Next.js development with pre-built solutions from Vercel and our community.

[Deploy a Template on Vercel](https://vercel.com/templates/next.js?utm_source=next-site&utm_medium=deploy-template-on-vercel-cta&utm_campaign=homepage-new)

Next.js Boilerplate

A Next.js starter from create-next-app.

Image Gallery Starter

An image gallery built on Next.js and Cloudinary.

Next.js Commerce

An all-in-one starter kit for high-performance ecommerce sites.

## The framework of choice when it matters

[Audible](/showcase)[Sonos](/showcase)

[Dice](/showcase)

[Notion](/showcase)

[Today](/showcase)[ProductHunt](/showcase)

[Nike](/showcase)[Washington Post](/showcase)

[Sonos](/showcase)[Audible](/showcase)[Nike](/showcase)

[Notion](/showcase)[ProductHunt](/showcase)[Washington Post](/showcase)

For **performance** , **efficiency** and **developer experience**. Next.js is trusted by some of the biggest names on the web.

[View the Next.js Showcase](/showcase)

## Customer Testimonials

> ### “With Next.js, we now consistently average 0.09 or lower for Cumulative Layout Shift, placing our site in the top tier for user experience and Core Web Vitals.”

Senior Software Engineer, Frontend

> ### “Our UI for Frame.io responds to user input within 100ms and all animations run at a consistent 60fps with Next.js.”

Charlton Roberts, Product Engineering

> ### “Next.js has been a game-changer for our agency work and team collaboration. Its powerful features have allowed us to build high-performance websites quickly and efficiently like never before.”

Daniel Lopes, Frontend Developer

[](https://vercel.com/home?utm_source=next-site&utm_medium=footer&utm_campaign=next-website "Go to the Vercel website")

[](https://github.com/vercel/next.js)[](https://bsky.app/profile/nextjs.org)

#### Resources

[Docs](/docs)[Learn](/learn)[Showcase](/showcase)[Blog](/blog)[Analytics](https://vercel.com/analytics?utm_source=next-site&utm_medium=footer&utm_campaign=home)[Next.js Conf](/conf)[Previews](https://vercel.com/products/previews?utm_source=next-site&utm_medium=footer&utm_campaign=home)

#### More

[Next.js Commerce](https://vercel.com/templates/next.js/nextjs-commerce?utm_source=next-site&utm_medium=footer&utm_campaign=home)[Contact Sales](https://vercel.com/contact/sales?utm_source=next-site&utm_medium=footer&utm_campaign=home)[GitHub](https://github.com/vercel/next.js)[Releases](https://github.com/vercel/next.js/releases)[Telemetry](/telemetry)[Governance](/governance)

#### About Vercel

[Next.js + Vercel](https://vercel.com/solutions/nextjs?utm_source=next-site&utm_medium=footer&utm_campaign=home)[Open Source Software](https://vercel.com/oss?utm_source=next-site&utm_medium=footer&utm_campaign=home)[GitHub](https://github.com/vercel)[Bluesky](https://bsky.app/profile/vercel.com)

#### Legal

[Privacy Policy](https://vercel.com/legal/privacy-policy)Cookie Preferences

#### Subscribe to our newsletter

Stay updated on new releases and features, guides, and case studies.

Subscribe

© 2024 Vercel, Inc.

[](https://github.com/vercel/next.js)[](https://bsky.app/profile/nextjs.org)
[](/)[Docs](/docs/en/main)[Blog](/blog)[Showcase](/showcase)[Resources](/resources)

[Docs](/docs/en/main)[Blog](/blog)[Showcase](/showcase)[Resources](/resources)

# Welcome to Remix

## Focused on web standards and modern web app UX, you’re simply going to build better websites

Remix is a full stack web framework that lets you focus on the user interface and work back through web standards to deliver a fast, slick, and resilient user experience. People are gonna love using your stuff.

[Get Started](/docs/start/quickstart)[Read the Docs](/docs)

```
export async function loader({ request }) {
 return getProjects();
}
export async function action({ request }) {
 const form = await request.formData();
 return createProject({
  title: form.get("title"),
 });
}
export default function Projects() {
 const projects = useLoaderData();
 const { state } = useNavigation();
 const busy = state === "submitting";
 return (
  <div>
   {projects.map((project) => (
    <Link to={project.slug}>
     {project.title}
    </Link>
   ))}
   <Form method="post">
    <input name="title" />
    <button type="submit" disabled={busy}>
     {busy
      ? "Creating..."
      : "Create New Project"}
    </button>
   </Form>
  </div>
 );
}

```


```
export async function loader({ request }) {
 return getProjects();
}
export async function action({ request }) {
 const form = await request.formData();
 return createProject({ title: form.get("title") });
}
export default function Projects() {
 const projects = useLoaderData();
 const { state } = useNavigation();
 const busy = state === "submitting";
 return (
  <div>
   {projects.map((project) => (
    <Link to={project.slug}>{project.title}</Link>
   ))}
   <Form method="post">
    <input name="title" />
    <button type="submit" disabled={busy}>
     {busy ? "Creating..." : "Create New Project"}
    </button>
   </Form>
  </div>
 );
}

```


## Testimonials

Twitter Logo

, 

Radix UI

> I've been waiting for something to encourage progressive enhancement in the React space *forever* and Remix truly is so much more. Proving we don't need to sacrifice React or choose SSG for a lightning fast, accessible UI, and the DX makes it all too easy 🤤

Cloudflare

> holy 💩 Remix is good

Discord, prev React Core

> I just rewrote my first Remix app on top of Cloudflare Workers and Supabase and it’s so damn good

Software Developer

> My mind is still blown away with Remix! So easy and elegant 😩. I love how it also focuses on Accessibility (Progressive Enhancement...) 🤯, A few days ago I was like wazzup with remix, we got Next.js and Svelte 😴 ... and now I'm fired up like crazy 😂. This is so good 🤤

Daffy, prev Vercel

> What’s really cool with Remix loaders is that you can do most of your data transformation and calculations there, like check if a list is empty, limit the number of records, only send specific attributes, so your React component just receives the data and renders it, no logic needed

Fullstack Dev, Frontside

> Remix is going to put developers on the Hot Path to build accessible, scaleable, and performant apps, that have stellar user experiences and amazing developer ergonomics. It's not only going to be a win for developers, but also a big win for the end-users!

Fullstack Developer

> In my opinion @remix_run will be game changer for corporate teams hesitant to adopt full stack JavaScript. The core concepts are so intuitive you can pick it up in a day, and it will even integrate into your existing stack.

Software Engineer, Box

> I love what @mjackson and @ryanflorence are doing with Remix! Deploying to AWS Lambda in under 30 seconds 🤯

Web Developer

> Building with @remix_run has been awesome so far. Having used Next.js for applications for years, the nested layouts are a wonderful feature. I also haven't learned this much about the web in years.

Web Developer

> I love using @remix_run for my website. Remix has improved my productivity as a front-end developer by empowering me to seamlessly switch between front-end and back-end code.

App Developer

> If you're doing #webdevelopment you should check out Remix 🔥 It's a new (old) paradigm for web dev, which simplifies our code, especially state management😅, speeds up our page loads, and gives us a mental model and framework we can rely on to create our best work

![](/wave.png)![](/loading.gif)

## While you were waiting for your static site to build, distributed web infra­structure got really good. Break through the static.

Remix is a seamless server and browser runtime that provides snappy page loads and instant transitions by leveraging distributed systems and native browser features instead of clunky static builds. Built on the Web Fetch API (instead of Node) **it can run anywhere**. It already runs natively on Cloudflare Workers, and of course supports serverless and traditional Node.js environments, so you can come as you are.

Page speed is only one aspect of our true goal though. We're after **better user experiences**. As you’ve pushed the boundaries of the web, your tools haven’t caught up to your appetite. **Remix is ready** to serve you from the initial request to the fanciest UX your designers can think up. Check it out 👀

## Remix has a cheat code:Nested Routes.

↑↑↓↓←→←→BA↵

Websites usually have levels of navigation that control child views.

Not only are these components pretty much always coupled to URL segments...

...they’re also the semantic boundary of data loading and code splitting.

Hover or tap the buttons to see how they’re all related

👇

<Root><Sales><Invoices><Invoice id={id}>

example.com/sales/invoices/102000

Fakebooks

Dashboard

Accounts

Sales

Expenses

Reports

Sales

Overview

Subscriptions

Invoices

Customers

Deposits

Overdue

$10,800

Due Soon

$62,000

Invoice List

Santa Monica

$10,800

1995

Overdue

Stankonia

$8,000

2000

Due Today

Ocean Avenue

$9,500

2003

Paid

Tubthumper

$14,000

1997

Due in 10 Days

Wide Open Sp...

$4,600

1998

Due in 8 Days

Stankonia

$8,000

Due Today • Invoiced 10/31/2000

Pro Plan

$6,000

Custom

$2,000

Net Total

$8,000

## What about loading states?

Through nested routes, Remix can eliminate nearly every loading state.

Most web apps fetch inside of components, creating request waterfalls, slower loads, and jank.

Remix loads data in parallel on the server and sends a fully formed HTML document. Way faster, jank free.

Without Remix

about:blank

document

root.js

user.json

sales.js

sales/nav.json

invoices.js

invoice.js

invoice/{id}.json

With Remix

about:blank

document

root.js

sales.js

invoices.js

invoice.js

(Keep scrolling to compare)

Say good­bye to Spinnageddon

Say good­bye to Spinnageddon

## Pre-fetching Everything

Nested routes allow Remix to make your app as fast as instant.

Remix can prefetch everything in parallel before the user clicks a link.

Public Data. User Data. Modules. Heck, even CSS.

Zero loading states. Zero skeleton UI. Zero jank.

Alright, you caught us, they’re just prefetch link tags, #useThePlatform

example.com/dashboard

Fakebooks

Dashboard

Accounts

Sales

Expenses

Reports

Dashboard

Recent Activity

Alerts

Messages

New Invoice

Customer

Stankonia

Net Total

$8,000

New Invoice

Customer

Ocean Avenue

Net Total

$9,500

## Data loading

... ![](/yawn.png)

You ever notice most of the code in your app is for changing data?

Imagine if React only had props and no way to set state. What’s the point? If a web framework helps you load data but doesn’t help you update it, what’s the point? Remix doesn’t drop you off at the `<form onSubmit>` cliff. (What the heck does `event.preventDefault` do anyway?)

Resilient, progressively enhanced data updates are built in.

It’s so simple it’s kind of silly. Just make a form...

...and an action on a route module. It looks like traditional HTML forms but enables fully dynamic web experiences you're after.

Remix runs the action server side, revalidates data client side, and even handles race conditions from resubmissions.

Get fancy with transition hooks and make some pending UI. Remix handles all the state, you simply ask for it.

Or get jiggy with some optimistic UI. Remix provides the data being sent to the server so you can skip the busy spinners for mutations, too.

HTML forms for mutations. Who knew?

```
export default function NewInvoice() {
 return (
  <Form method="post">
   <input type="text" name="company" />
   <input type="text" name="amount" />
   <button type="submit">Create</button>
  </Form>
 );
}

```


## Error Handling

:)

Your websites run into problems, but with Remix they don’t need to be refreshed. Error handling is hard to remember and hard to do. That’s why it’s built in.

Remix handles errors while Server Rendering. Errors while Client Rendering. Even errors in your server side data handling.

![](/qrcode.png)

## Route Error Boundaries keep the happy path happy.

Each route module can export an error boundary next to the default route component.

If an error is thrown, client or server side, users see the boundary instead of the default component.

Routes w/o trouble render normally, so users have more options than slamming refresh.

If a route has no boundary, errors bubble up. Just put one at the top and chill out about errors in code review, yeah?

```
export default function InvoiceRoute() {
 const invoice = useLoaderData();
 return <Invoice data={invoice} />;
}

```


That's probably enough for now. What are you waiting for?

[Go Play!](/docs)

[GitHub Logo](https://github.com/remix-run)[YouTube logo](https://youtube.com/remix_run)[](https://rmx.as/discord)
[Skip to main content](#__docusaurus_skipToContent_fallback)

The New Architecture has arrived - [learn more](/blog/2024/10/23/the-new-architecture-is-here)

[**React Native**](/)

[Development](#)

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



[Contributing](/contributing/overview)[Community](/community/overview)[Showcase](/showcase)[Blog](/blog)[](https://github.com/facebook/react-native)

Search

[Star](https://github.com/facebook/react-native)

# React Native

## Learn once, write anywhere.

[Get Started](/docs/environment-setup)[Learn the Basics](/docs/getting-started)

# Create native apps for Android, iOS, and more using React

### React Native brings the best parts of developing with React to native development. It's a best-in-class JavaScript library for building user interfaces.

index.js

```
function HomeScreen() {  return (   <View>    <Text> Hello World 👋 🌍!</Text>  </View>  ); }
```


**Written in JavaScript, rendered with native code.** React primitives render to native platform UI, meaning your app uses the same native platform APIs other apps do.

# Native development for everyone

### React Native lets you create truly native apps and doesn't compromise your users' experiences. It provides a core set of platform agnostic native components like `View`, `Text`, and `Image` that map directly to the platform's native UI building blocks.

# Get a head start with a framework

### React Native brings the React programming paradigm to platforms like Android and iOS. It doesn’t prescribe how to do routing, or how to access each of the numerous platform APIs. To build a new app with React Native, we recommend a framework like [Expo](https://expo.dev).

#### File-based routing

Create stack, modal, drawer, and tab screens with minimal boilerplate using your filesystem.

#### Use any library, SDK, or native code

Generate native changes or write your own native code. Use over 50 modules to create your app.

#### Developer tools

Get started quickly with Expo Go, then continue with expo-dev-client: a module that adds Expo’s tools to apps that require native changes.

# Watch and learn

### Watch talks by the React team and learn how to get the most out of React Native. Find the latest on .

#### FB 2019: Mobile innovation with React Native

45:29

#### Why React Native?

1:42

# Meta supported. Community driven.

Meta released React Native in 2015 and has been maintaining it ever since.

In 2018, React Native had the [2nd highest](https://octoverse.github.com/2018/projects#repositories) number of contributors for any repository in GitHub. Today, React Native is supported by contributions from individuals and companies around the world including [Callstack](https://callstack.com/), [Expo](https://expo.io/), [Infinite Red](https://infinite.red/), [Microsoft](https://www.microsoft.com/) and [Software Mansion](https://swmansion.com/).

Our community is always shipping exciting new projects and exploring platforms beyond Android and iOS with repos like [React Native Windows](https://github.com/microsoft/react-native-windows#readme), [React Native macOS](https://github.com/microsoft/react-native-macos#readme) and [React Native Web](https://github.com/necolas/react-native-web#readme).

React Native is being used in thousands of apps, but it's likely you've already used it in one of these apps:

  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://blog.coinbase.com/optimizing-react-native-7e7bf7ac3a34)
  * [](https://formidable.com/work/puma-scaling-across-the-globe/)
  * [](https://github.com/wordpress-mobile/gutenberg-mobile)
  * [](https://engineering.tableau.com/react-native-at-tableau-3-years-in-89d43c38354c)
  * [](https://blog.flipkart.tech/the-journey-of-react-native-flipkart-47dcd0c3d1c6)
  * [](https://medium.com/mercari-engineering/why-we-decided-to-rewrite-our-ios-android-apps-from-scratch-in-react-native-9f1737558299)
  * [](https://discord.com/blog/how-discord-achieves-native-ios-performance-with-react-native)
  * [](https://www.techatbloomberg.com/blog/bloomberg-used-react-native-develop-new-consumer-app/)
  * [](https://medium.com/@Pinterest_Engineering/supporting-react-native-at-pinterest-f8c2233f90e6)
  * [](https://www.tesla.com/blog)
  * [](https://medium.com/walmartlabs/react-native-at-walmartlabs-cdd140589560#.ueonqqloc)
  * [](https://www.tencent.com/en-us/business.html)
  * [](https://github.com/mattermost/mattermost-mobile)



and [many more](/showcase).

# Welcome to the React Native community

[Get Started](/docs/environment-setup)

Develop

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



Participate

  * [Showcase](/showcase)
  * [Contributing](/contributing/overview)
  * [Community](/community/overview)
  * [Directory](https://reactnative.directory/)
  * [Stack Overflow](https://stackoverflow.com/questions/tagged/react-native)



Find us

  * [Blog](/blog)
  * [GitHub](https://github.com/facebook/react-native)



Explore More

  * [ReactJS](https://react.dev/)
  * [Privacy Policy](https://opensource.fb.com/legal/privacy/)
  * [Terms of Service](https://opensource.fb.com/legal/terms/)



[](https://opensource.fb.com/)

Copyright © 2024 Meta Platforms, Inc.
[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Fexpo%2Fexpo)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Fexpo%2Fexpo)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=expo%2Fexpo) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ expo ](/expo) / **[expo](/expo/expo) ** Public

  * [ Notifications ](/login?return_to=%2Fexpo%2Fexpo) You must be signed in to change notification settings
  * [ Fork 5.7k ](/login?return_to=%2Fexpo%2Fexpo)
  * [ Star  35.5k ](/login?return_to=%2Fexpo%2Fexpo)




An open-source framework for making universal native apps with React. Expo runs on Android, iOS, and the web. 

[docs.expo.dev](https://docs.expo.dev "https://docs.expo.dev")

### License

[ MIT license ](/expo/expo/blob/main/LICENSE)

[ 35.5k stars ](/expo/expo/stargazers) [ 5.7k forks ](/expo/expo/forks) [ Branches ](/expo/expo/branches) [ Tags ](/expo/expo/tags) [ Activity ](/expo/expo/activity)

[ Star  ](/login?return_to=%2Fexpo%2Fexpo)

[ Notifications ](/login?return_to=%2Fexpo%2Fexpo) You must be signed in to change notification settings

  * [ Code ](/expo/expo)
  * [ Issues 446 ](/expo/expo/issues)
  * [ Pull requests 225 ](/expo/expo/pulls)
  * [ Discussions ](/expo/expo/discussions)
  * [ Actions ](/expo/expo/actions)
  * [ Projects 0 ](/expo/expo/projects)
  * [ Wiki ](/expo/expo/wiki)
  * [ Security ](/expo/expo/security)
  * [ Insights ](/expo/expo/pulse)



Additional navigation options

  * [ Code  ](/expo/expo)
  * [ Issues  ](/expo/expo/issues)
  * [ Pull requests  ](/expo/expo/pulls)
  * [ Discussions  ](/expo/expo/discussions)
  * [ Actions  ](/expo/expo/actions)
  * [ Projects  ](/expo/expo/projects)
  * [ Wiki  ](/expo/expo/wiki)
  * [ Security  ](/expo/expo/security)
  * [ Insights  ](/expo/expo/pulse)



# expo/expo

main

[**618** Branches](/expo/expo/branches)[**0** Tags](/expo/expo/tags)

[](/expo/expo/branches)[](/expo/expo/tags)

Go to file

Code

## Folders and files

Name| Name| Last commit message| Last commit date  
---|---|---|---  
  
## Latest commit

[](/Kudo)[Kudo](/expo/expo/commits?author=Kudo)[[dev-menu][dev-launcher] fix broken local development on android (](/expo/expo/commit/d9b65b28e55d0e223b51ea4164a173696931e4af)[#33714](https://github.com/expo/expo/pull/33714)Dec 18, 2024[d9b65b2](/expo/expo/commit/d9b65b28e55d0e223b51ea4164a173696931e4af) · Dec 18, 2024

## History

[24,776 Commits](/expo/expo/commits/main/)[](/expo/expo/commits/main/)  
[.github](/expo/expo/tree/main/.github ".github")| [.github](/expo/expo/tree/main/.github ".github")  
[.vscode](/expo/expo/tree/main/.vscode ".vscode")| [.vscode](/expo/expo/tree/main/.vscode ".vscode")  
[apps](/expo/expo/tree/main/apps "apps")| [apps](/expo/expo/tree/main/apps "apps")  
[bin](/expo/expo/tree/main/bin "bin")| [bin](/expo/expo/tree/main/bin "bin")  
[docs](/expo/expo/tree/main/docs "docs")| [docs](/expo/expo/tree/main/docs "docs")  
[fastlane](/expo/expo/tree/main/fastlane "fastlane")| [fastlane](/expo/expo/tree/main/fastlane "fastlane")  
[guides](/expo/expo/tree/main/guides "guides")| [guides](/expo/expo/tree/main/guides "guides")  
[packages](/expo/expo/tree/main/packages "packages")| [packages](/expo/expo/tree/main/packages "packages")  
[patches](/expo/expo/tree/main/patches "patches")| [patches](/expo/expo/tree/main/patches "patches")  
[react-native-lab](/expo/expo/tree/main/react-native-lab "react-native-lab")| [react-native-lab](/expo/expo/tree/main/react-native-lab "react-native-lab")  
[scripts](/expo/expo/tree/main/scripts "scripts")| [scripts](/expo/expo/tree/main/scripts "scripts")  
[secrets](/expo/expo/tree/main/secrets "secrets")| [secrets](/expo/expo/tree/main/secrets "secrets")  
[template-files](/expo/expo/tree/main/template-files "template-files")| [template-files](/expo/expo/tree/main/template-files "template-files")  
[templates](/expo/expo/tree/main/templates "templates")| [templates](/expo/expo/tree/main/templates "templates")  
[tools](/expo/expo/tree/main/tools "tools")| [tools](/expo/expo/tree/main/tools "tools")  
[.dockerignore](/expo/expo/blob/main/.dockerignore ".dockerignore")| [.dockerignore](/expo/expo/blob/main/.dockerignore ".dockerignore")  
[.envrc](/expo/expo/blob/main/.envrc ".envrc")| [.envrc](/expo/expo/blob/main/.envrc ".envrc")  
[.eslintignore](/expo/expo/blob/main/.eslintignore ".eslintignore")| [.eslintignore](/expo/expo/blob/main/.eslintignore ".eslintignore")  
[.eslintrc.js](/expo/expo/blob/main/.eslintrc.js ".eslintrc.js")| [.eslintrc.js](/expo/expo/blob/main/.eslintrc.js ".eslintrc.js")  
[.gitattributes](/expo/expo/blob/main/.gitattributes ".gitattributes")| [.gitattributes](/expo/expo/blob/main/.gitattributes ".gitattributes")  
[.gitignore](/expo/expo/blob/main/.gitignore ".gitignore")| [.gitignore](/expo/expo/blob/main/.gitignore ".gitignore")  
[.gitmodules](/expo/expo/blob/main/.gitmodules ".gitmodules")| [.gitmodules](/expo/expo/blob/main/.gitmodules ".gitmodules")  
[.lfsconfig](/expo/expo/blob/main/.lfsconfig ".lfsconfig")| [.lfsconfig](/expo/expo/blob/main/.lfsconfig ".lfsconfig")  
[.prettierignore](/expo/expo/blob/main/.prettierignore ".prettierignore")| [.prettierignore](/expo/expo/blob/main/.prettierignore ".prettierignore")  
[.prettierrc](/expo/expo/blob/main/.prettierrc ".prettierrc")| [.prettierrc](/expo/expo/blob/main/.prettierrc ".prettierrc")  
[.swiftlint.yml](/expo/expo/blob/main/.swiftlint.yml ".swiftlint.yml")| [.swiftlint.yml](/expo/expo/blob/main/.swiftlint.yml ".swiftlint.yml")  
[.watchmanconfig](/expo/expo/blob/main/.watchmanconfig ".watchmanconfig")| [.watchmanconfig](/expo/expo/blob/main/.watchmanconfig ".watchmanconfig")  
[CHANGELOG.md](/expo/expo/blob/main/CHANGELOG.md "CHANGELOG.md")| [CHANGELOG.md](/expo/expo/blob/main/CHANGELOG.md "CHANGELOG.md")  
[CONTRIBUTING.md](/expo/expo/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")| [CONTRIBUTING.md](/expo/expo/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")  
[Gemfile](/expo/expo/blob/main/Gemfile "Gemfile")| [Gemfile](/expo/expo/blob/main/Gemfile "Gemfile")  
[Gemfile.lock](/expo/expo/blob/main/Gemfile.lock "Gemfile.lock")| [Gemfile.lock](/expo/expo/blob/main/Gemfile.lock "Gemfile.lock")  
[LICENSE](/expo/expo/blob/main/LICENSE "LICENSE")| [LICENSE](/expo/expo/blob/main/LICENSE "LICENSE")  
[README.md](/expo/expo/blob/main/README.md "README.md")| [README.md](/expo/expo/blob/main/README.md "README.md")  
[SECURITY.md](/expo/expo/blob/main/SECURITY.md "SECURITY.md")| [SECURITY.md](/expo/expo/blob/main/SECURITY.md "SECURITY.md")  
[SUPPORT.md](/expo/expo/blob/main/SUPPORT.md "SUPPORT.md")| [SUPPORT.md](/expo/expo/blob/main/SUPPORT.md "SUPPORT.md")  
[THIRD-PARTY-LICENSES](/expo/expo/blob/main/THIRD-PARTY-LICENSES "THIRD-PARTY-LICENSES")| [THIRD-PARTY-LICENSES](/expo/expo/blob/main/THIRD-PARTY-LICENSES "THIRD-PARTY-LICENSES")  
[buildAndroidTarballLocally.sh](/expo/expo/blob/main/buildAndroidTarballLocally.sh "buildAndroidTarballLocally.sh")| [buildAndroidTarballLocally.sh](/expo/expo/blob/main/buildAndroidTarballLocally.sh "buildAndroidTarballLocally.sh")  
[changelogVersions.json](/expo/expo/blob/main/changelogVersions.json "changelogVersions.json")| [changelogVersions.json](/expo/expo/blob/main/changelogVersions.json "changelogVersions.json")  
[dev-home-config.json](/expo/expo/blob/main/dev-home-config.json "dev-home-config.json")| [dev-home-config.json](/expo/expo/blob/main/dev-home-config.json "dev-home-config.json")  
[package.json](/expo/expo/blob/main/package.json "package.json")| [package.json](/expo/expo/blob/main/package.json "package.json")  
[tsconfig.json](/expo/expo/blob/main/tsconfig.json "tsconfig.json")| [tsconfig.json](/expo/expo/blob/main/tsconfig.json "tsconfig.json")  
[tsconfig.node.json](/expo/expo/blob/main/tsconfig.node.json "tsconfig.node.json")| [tsconfig.node.json](/expo/expo/blob/main/tsconfig.node.json "tsconfig.node.json")  
[yarn.lock](/expo/expo/blob/main/yarn.lock "yarn.lock")| [yarn.lock](/expo/expo/blob/main/yarn.lock "yarn.lock")  
View all files  
  
## Repository files navigation

  * [README](#)
  * [MIT license](#)
  * [Security](#)



[ ](https://expo.dev/)

# Expo

[](#expo)

[ ](https://www.npmjs.com/package/expo) [ ](https://chat.expo.dev) [ ](https://github.com/expo/expo/blob/main/LICENSE) [ ](http://www.npmtrends.com/expo)

[**Try Expo in the Browser**](https://snack.expo.dev) • [Read the Documentation](https://docs.expo.dev) • [Learn more on our blog](https://expo.dev/blog) • [Request a feature](https://expo.canny.io/feature-requests)

###### Follow us on

[](#follow-us-on)

[ ](https://github.com/expo) [ ](https://bsky.app/profile/expo.dev)

## Introduction

[](#introduction)

Expo is an open-source platform for making universal native apps that run on Android, iOS, and the web. It includes a universal runtime and libraries that let you build native apps by writing React and JavaScript.

This repository includes the Expo SDK, Modules API, Go app, CLI, Router, documentation, and various other supporting tools. [Expo Application Services (EAS)](https://expo.dev/eas) is a platform of hosted services that are deeply integrated with Expo open source tools. EAS helps you build, ship, and iterate on your app as an individual or a team.

Read the [Expo Community Guidelines](https://expo.dev/guidelines) before interacting in the repository. Thank you for helping keep the Expo community open and welcoming!

## Table of contents

[](#table-of-contents)

  * [📚 Documentation](#-documentation)
  * [🗺 Project Layout](#-project-layout)
  * [🏅 Badges](#-badges)
  * [👏 Contributing](#-contributing)
  * [❓ FAQ](#-faq)
  * [💙 The Team](#-the-team)
  * [License](#license)



## 📚 Documentation

[](#-documentation)

Learn about building and deploying universal apps [in our official docs!](https://docs.expo.dev)

  * [Getting Started](https://docs.expo.dev/)
  * [API Reference](https://docs.expo.dev/versions/latest/)
  * [Using Custom Native Modules](https://docs.expo.dev/workflow/customizing/)



## 🗺 Project Layout

[](#-project-layout)

  * `packages`[](/expo/expo/blob/main/packages) All the source code for Expo modules, if you want to edit a library or just see how it works this is where you'll find it.
  * `apps`[](/expo/expo/blob/main/apps) This is where you can find Expo projects which are linked to the development modules. You'll do most of your testing in here.
  * `apps/expo-go`[](/expo/expo/blob/main/apps/expo-go) This is where you can find the source code for Expo Go.
  * `apps/expo-go/ios/Exponent.xcworkspace`[](/expo/expo/blob/main/apps/expo-go/ios) is the Xcode workspace. When developing iOS, always open this instead of `Exponent.xcodeproj` because the workspace also loads the CocoaPods dependencies.
  * `docs`[](/expo/expo/blob/main/docs) The source code for **<https://docs.expo.dev>**
  * `templates`[](/expo/expo/blob/main/templates) The template projects you get when you run `npx create-expo-app`
  * `react-native-lab`[](/expo/expo/blob/main/react-native-lab) This is our fork of `react-native` used to build Expo Go.
  * `guides`[](/expo/expo/blob/main/guides) In-depth tutorials for advanced topics like contributing to the client.
  * `tools`[](/expo/expo/blob/main/tools) contain build and configuration tools.
  * `template-files`[](/expo/expo/blob/main/template-files) contains templates for files that require private keys. They are populated using the keys in `template-files/keys.json`.
  * `template-files/ios/dependencies.json`[](/expo/expo/blob/main/template-files/ios/dependencies.json) specifies the CocoaPods dependencies of the app.



## 🏅 Badges

[](#-badges)

Let everyone know your app can be run instantly in the _Expo Go_ app! 

[](https://expo.dev/client)

[](https://expo.dev/client)

```
[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-000.svg?style=flat-square&logo=EXPO&labelColor=f3f3f3&logoColor=000)](https://expo.dev/client)
[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-4630EB.svg?style=flat-square&logo=EXPO&labelColor=f3f3f3&logoColor=000)](https://expo.dev/client)
```


## 👏 Contributing

[](#-contributing)

If you like Expo and want to help make it better then check out our [contributing guide](/expo/expo/blob/main/CONTRIBUTING.md)! Check out the [CLI package](https://github.com/expo/expo/tree/main/packages/%40expo/cli) to work on the Expo CLI.

## ❓ FAQ

[](#-faq)

If you have questions about Expo and want answers, then check out our [Frequently Asked Questions](https://docs.expo.dev/faq/)!

If you still have questions you can ask them on our [Discord and Forums](https://chat.expo.dev) or X .

## 💙 The Team

[](#-the-team)

Curious about who makes Expo? Here are our [team members](https://expo.dev/about)!

## License

[](#license)

The Expo source code is made available under the [MIT license](/expo/expo/blob/main/LICENSE). Some of the dependencies are licensed differently, with the BSD license, for example.

[](https://user-images.githubusercontent.com/9664363/185428788-d762fd5d-97b3-4f59-8db7-f72405be9677.gif) [ ](https://user-images.githubusercontent.com/9664363/185428788-d762fd5d-97b3-4f59-8db7-f72405be9677.gif) [ ](https://user-images.githubusercontent.com/9664363/185428788-d762fd5d-97b3-4f59-8db7-f72405be9677.gif)

## About

An open-source framework for making universal native apps with React. Expo runs on Android, iOS, and the web. 

[docs.expo.dev](https://docs.expo.dev "https://docs.expo.dev")

### Topics

[ react ](/topics/react "Topic: react") [ javascript ](/topics/javascript "Topic: javascript") [ android ](/topics/android "Topic: android") [ ios ](/topics/ios "Topic: ios") [ mobile ](/topics/mobile "Topic: mobile") [ framework ](/topics/framework "Topic: framework") [ typescript ](/topics/typescript "Topic: typescript") [ react-native ](/topics/react-native "Topic: react-native") [ web ](/topics/web "Topic: web") [ frontend ](/topics/frontend "Topic: frontend") [ native ](/topics/native "Topic: native") [ universal ](/topics/universal "Topic: universal") [ web-framework ](/topics/web-framework "Topic: web-framework") [ native-apps ](/topics/native-apps "Topic: native-apps") [ app-framework ](/topics/app-framework "Topic: app-framework") [ expo ](/topics/expo "Topic: expo")

### Resources

[ Readme ](#readme-ov-file)

### License

[ MIT license ](#MIT-1-ov-file)

### Security policy

[ Security policy ](#security-ov-file)

[ Activity](/expo/expo/activity)

[ Custom properties](/expo/expo/custom-properties)

### Stars

[ **35.5k** stars](/expo/expo/stargazers)

### Watchers

[ **305** watching](/expo/expo/watchers)

### Forks

[ **5.7k** forks](/expo/expo/forks)

[ Report repository ](/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2Fexpo%2Fexpo&report=expo+%28user%29)

##  [Used by 1.1m](/expo/expo/network/dependents)

[ + 1,067,006  ](/expo/expo/network/dependents)

##  [Contributors 1,468](/expo/expo/graphs/contributors)

  * [ ](https://github.com/brentvatne)
  * [ ](https://github.com/tsapeta)
  * [ ](https://github.com/EvanBacon)
  * [ ](https://github.com/lukmccall)
  * [ ](https://github.com/amandeepmittal)
  * [ ](https://github.com/terribleben)
  * [ ](https://github.com/esamelson)
  * [ ](https://github.com/Kudo)
  * [ ](https://github.com/expo-bot)
  * [ ](https://github.com/sjchmiela)
  * [ ](https://github.com/Simek)
  * [ ](https://github.com/ide)
  * [ ](https://github.com/wschurman)
  * [ ](https://github.com/byCedric)



[+ 1,454 contributors](/expo/expo/graphs/contributors)

## Languages

  * [ TypeScript 38.8% ](/expo/expo/search?l=typescript)
  * [ JavaScript 28.1% ](/expo/expo/search?l=javascript)
  * [ Kotlin 12.5% ](/expo/expo/search?l=kotlin)
  * [ Swift 8.2% ](/expo/expo/search?l=swift)
  * [ Objective-C 5.2% ](/expo/expo/search?l=objective-c)
  * [ Java 2.9% ](/expo/expo/search?l=java)
  * Other 4.3%



## Footer

[ ](https://github.com "GitHub") © 2024 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You can’t perform that action at this time. 
[Skip to main content](#__docusaurus_skipToContent_fallback)

The New Architecture has arrived - [learn more](/blog/2024/10/23/the-new-architecture-is-here)

[**React Native**](/)

[Development](#)

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



[Contributing](/contributing/overview)[Community](/community/overview)[Showcase](/showcase)[Blog](/blog)[](https://github.com/facebook/react-native)

Search

[Star](https://github.com/facebook/react-native)

# React Native

## Learn once, write anywhere.

[Get Started](/docs/environment-setup)[Learn the Basics](/docs/getting-started)

# Create native apps for Android, iOS, and more using React

### React Native brings the best parts of developing with React to native development. It's a best-in-class JavaScript library for building user interfaces.

index.js

```
function HomeScreen() {  return (   <View>    <Text> Hello World 👋 🌍!</Text>  </View>  ); }
```


**Written in JavaScript, rendered with native code.** React primitives render to native platform UI, meaning your app uses the same native platform APIs other apps do.

# Native development for everyone

### React Native lets you create truly native apps and doesn't compromise your users' experiences. It provides a core set of platform agnostic native components like `View`, `Text`, and `Image` that map directly to the platform's native UI building blocks.

# Get a head start with a framework

### React Native brings the React programming paradigm to platforms like Android and iOS. It doesn’t prescribe how to do routing, or how to access each of the numerous platform APIs. To build a new app with React Native, we recommend a framework like [Expo](https://expo.dev).

#### File-based routing

Create stack, modal, drawer, and tab screens with minimal boilerplate using your filesystem.

#### Use any library, SDK, or native code

Generate native changes or write your own native code. Use over 50 modules to create your app.

#### Developer tools

Get started quickly with Expo Go, then continue with expo-dev-client: a module that adds Expo’s tools to apps that require native changes.

# Watch and learn

### Watch talks by the React team and learn how to get the most out of React Native. Find the latest on .

#### FB 2019: Mobile innovation with React Native

45:29

#### Why React Native?

1:42

# Meta supported. Community driven.

Meta released React Native in 2015 and has been maintaining it ever since.

In 2018, React Native had the [2nd highest](https://octoverse.github.com/2018/projects#repositories) number of contributors for any repository in GitHub. Today, React Native is supported by contributions from individuals and companies around the world including [Callstack](https://callstack.com/), [Expo](https://expo.io/), [Infinite Red](https://infinite.red/), [Microsoft](https://www.microsoft.com/) and [Software Mansion](https://swmansion.com/).

Our community is always shipping exciting new projects and exploring platforms beyond Android and iOS with repos like [React Native Windows](https://github.com/microsoft/react-native-windows#readme), [React Native macOS](https://github.com/microsoft/react-native-macos#readme) and [React Native Web](https://github.com/necolas/react-native-web#readme).

React Native is being used in thousands of apps, but it's likely you've already used it in one of these apps:

  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://devblogs.microsoft.com/react-native/)
  * [](https://blog.coinbase.com/optimizing-react-native-7e7bf7ac3a34)
  * [](https://formidable.com/work/puma-scaling-across-the-globe/)
  * [](https://github.com/wordpress-mobile/gutenberg-mobile)
  * [](https://engineering.tableau.com/react-native-at-tableau-3-years-in-89d43c38354c)
  * [](https://blog.flipkart.tech/the-journey-of-react-native-flipkart-47dcd0c3d1c6)
  * [](https://medium.com/mercari-engineering/why-we-decided-to-rewrite-our-ios-android-apps-from-scratch-in-react-native-9f1737558299)
  * [](https://discord.com/blog/how-discord-achieves-native-ios-performance-with-react-native)
  * [](https://www.techatbloomberg.com/blog/bloomberg-used-react-native-develop-new-consumer-app/)
  * [](https://medium.com/@Pinterest_Engineering/supporting-react-native-at-pinterest-f8c2233f90e6)
  * [](https://www.tesla.com/blog)
  * [](https://medium.com/walmartlabs/react-native-at-walmartlabs-cdd140589560#.ueonqqloc)
  * [](https://www.tencent.com/en-us/business.html)
  * [](https://github.com/mattermost/mattermost-mobile)



and [many more](/showcase).

# Welcome to the React Native community

[Get Started](/docs/environment-setup)

Develop

  * [Guides](/docs/getting-started)
  * [Components](/docs/components-and-apis)
  * [APIs](/docs/accessibilityinfo)
  * [Architecture](/architecture/overview)



Participate

  * [Showcase](/showcase)
  * [Contributing](/contributing/overview)
  * [Community](/community/overview)
  * [Directory](https://reactnative.directory/)
  * [Stack Overflow](https://stackoverflow.com/questions/tagged/react-native)



Find us

  * [Blog](/blog)
  * [GitHub](https://github.com/facebook/react-native)



Explore More

  * [ReactJS](https://react.dev/)
  * [Privacy Policy](https://opensource.fb.com/legal/privacy/)
  * [Terms of Service](https://opensource.fb.com/legal/terms/)



[](https://opensource.fb.com/)

Copyright © 2024 Meta Platforms, Inc.
[](/)

Meta Open Source

## Welcome to our community

Empowering diverse communities through open source technology.

[Explore projects](/projects)

### Meta Embraces Open Source

Meta is committed to the notion that open source not only provides great technology for developers, but also brings the best out in people. Meta believes in the following tenets:

#### Collaboration

Open source allows developers from around the world to proactively work together to achieve common goals.

#### Community

Open source provides opportunities for the creation of diverse communities in support of the betterment of everyone.

#### Technology

Open source has produced historic technologies, including operating systems, frameworks and programming languages.

Featured Media

[The Diff Episode 10: Talking Open Source with Paul O'ShannessyDecember 7, 2021](https://www.youtube.com/watch?v=QR84BJt4fw0)

[Explain Like I'm 5: Season 3September 28, 2021](https://youtube.com/playlist?list=PLzIwronG0sE49zLk608yB5GKKT8WbEhnZ)

[See all media](/media)

Popular Projects

[DocumentationDocusaurusSetup a website for your documentation quickly and easily.View Project](https://docusaurus.io)

[FrameworksReactA JavaScript framework for building awesome user interfaces.View Project](https://reactjs.org)

[FrameworksPyTorchA Python-based machine learning framework for dynamic neural networks.View Project](https://pytorch.org)

[See more projects](/projects)

[](https://nasa.github.io/cumulus/docs/cumulus-docs-readme)

[](https://developers.diem.com)

[](https://slack.engineering/hacklang-at-slack-a-better-php/)

[](https://www.opencompute.org/membership/membership-organizational-directory?keyword=AT%26T)

[](https://aws.amazon.com/blogs/aws/announcing-torchserve-an-open-source-model-server-for-pytorch/)

[](https://www.carbondesignsystem.com/developing/frameworks/react/)

Showcase

## Globally trusted

Open source is used by teams of all shapes and sizes to create, iterate, and grow.

[See Showcase](/showcase)

[](https://meta.com)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



Site Map[Projects](/projects)[FAQ](/get-involved#faq)[About](/about)[Get Involved](/get-involved)

Information[Linux](/linux)[Careers](https://metacareers.com)[Bug Bounty Program](https://bugbounty.meta.com)

Connect[GitHub](https://github.com/facebook)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



© 2024 Meta

  * [Code of Conduct](/code-of-conduct)
  * [Privacy Policy](/legal/privacy)
  * [Cookie Policy](/legal/cookie-policy)
  * [Terms of Use](/legal/terms)
  * [Trademark Policy](/legal/trademark)


[](/)

# Meta Open Source - Terms of Use

 _Effective December 1, 2020_

These Terms of Use ("**Terms** ") govern your use of this website hosted and provided by Meta Platforms, Inc. ("**Meta** ", "**us** " or "**we** "), ("**Website** ") and any services offered through the Website ("**Services** ").

These Terms are a legal contract between you and us so it is important that you review them carefully.

For clarity, these Terms only apply to this Website and do not apply to any:

  1. use of open source code, documentation or specifications made available on GitHub, which are governed by the terms of the applicable open source license;
  2. pull requests, issues and any other interactions or features related to participation in open source projects on GitHub, which are governed by GitHub's terms and conditions; or
  3. use of any other Meta website, service or product, which are governed by the terms and conditions applicable to those offerings.



We may change these Terms or modify any features of the Website or the Services at any time. Any such change or modification will be effective immediately upon posting on our Website. You accept these Terms by browsing this Website and/or using the Services, and you accept any changes to the Terms by continuing to use the Website after we post any such changes.

If you do not agree to these Terms, please do not access or use the Website.

If you need to contact us for any reason, please do so at opensource@meta.com

#### 1. What you can do on this Website

We make this Website available to you and others to help everyone better understand our open source projects. In exchange, we need you to make the following commitments:

**(a) Who can use the Website**

We try to make our Website broadly available to everyone, but you cannot use our Website if:

  * You are a minor in your country of residence except if your parents or guardians have agreed to these Terms on your behalf.
  * You are prohibited from accessing the Website under applicable laws.

**(b) What you can share and do on the Website**

You agree not to engage in the conduct described below (or to facilitate or support others in doing so):

  1. You may not use our Website, do or share anything:
     * That violates these Terms (and other terms and policies that apply to your use of the Website);
     * That is unlawful in any country, misleading, discriminatory or fraudulent; and/or
     * That infringes or violates someone else's rights, including their intellectual property rights.
  2. You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of the Services or Website.

**(c) Access to the Website**

The Website is made available free of charge and the Services are available only for informational purposes. We make no representations or warranties of any kind as to the accuracy, currency, or completeness of the information and other materials made available through the Website and are not liable for any decisions you may make in reliance on this content.

#### 2. Links To Third-Party Content

The Website or Services may contain links to third-party content. For example, our user communities may be hosted by third party platforms over which we have no control and for which we have no responsibility. Therefore, please review each of these platforms or websites' terms of use and privacy policies before participating.

We do not control, endorse, sponsor, recommend, or otherwise accept responsibility for any content, terms of use, policies on or use of any third party website.

#### 3. Limits on Liability

We work hard to provide the best Website and Services we can and to specify clear guidelines for everyone who uses them. Our Website and Services, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, that they will function without disruptions, delays, or imperfections or content will be accurate, current and complete. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT IN RELATION TO THE WEBSITE, THE SERVICES AND THEIR CONTENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content). Some jurisdictions do not allow the exclusion or limitation of implied warranties, in which case parts of this disclaimer may not apply to you.

We cannot predict when issues might arise with our Website and Services. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms, the Website or the Services, even if we have been advised of the possibility of such damages. Our aggregate liability arising out of or relating to these Terms, the Website or the Services will not exceed $100.

We do not exclude or limit in any way our liability to you where it would be unlawful to do so therefore depending on the country where you reside some of these exclusions and limitations may not apply to you.

#### 4. Disputes

We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.

For any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms, the Website and/or the Services ("**claim** "), you agree that it will be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County. You also agree to submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.

The preceding provision regarding applicable law and venue does not apply if you are a consumer based in the European Union. If you are a consumer based in the European Union, these Terms will be subject to the laws of your country of residence and you may bring a claim in front of those courts.

#### 5. Privacy

Under data protection legislation, we are required to provide you with certain information about who we are, how we process your personal data and for what purposes and your rights in relation to your personal data and how to exercise them. This information is provided in our [Privacy Policy](/legal/privacy) and it is important that you read that information. Please also review our [Cookie Policy](/legal/cookie-policy), which tells you which cookies we use on the Website and how to manage them.

#### 6. Other important terms

These Terms make up the entire agreement between you and Meta Platforms, Inc. regarding your use of our Services and this Website. They supersede any prior agreements.

If any portion of these Terms is found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.

You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.

You agree that no joint venture, partnership, employment, or agency relationship exists between you and us as a result of these Terms or your access to and use of the Website or Services.

These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.

We reserve all rights not expressly granted to you.

Table of contents[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[](#undefined)[1. What you can do on this Website](#what-you-can-do-on-this-website)[2. Links To Third-Party Content](#links-to-third-party-content)[3. Limits on Liability](#limits-on-liability)[4. Disputes](#disputes)[5. Privacy](#privacy)[6. Other important terms](#other-important-terms)

[](https://meta.com)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



Site Map[Projects](/projects)[FAQ](/get-involved#faq)[About](/about)[Get Involved](/get-involved)

Information[Linux](/linux)[Careers](https://metacareers.com)[Bug Bounty Program](https://bugbounty.meta.com)

Connect[GitHub](https://github.com/facebook)

Follow Us

  * [](https://youtube.com/facebookOpenSource)



© 2024 Meta

  * [Code of Conduct](/code-of-conduct)
  * [Privacy Policy](/legal/privacy)
  * [Cookie Policy](/legal/cookie-policy)
  * [Terms of Use](/legal/terms)
  * [Trademark Policy](/legal/trademark)



